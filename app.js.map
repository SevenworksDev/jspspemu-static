{
  "version": 3,
  "sources": ["../src/global/window.ts", "../src/global/math.ts", "../src/global/array.ts", "../src/global/utils.ts", "../src/global/async.ts", "../src/global/int64.ts", "../src/global/stream.ts", "../src/global/struct.ts", "../src/emu/global.ts", "../src/core/gpu/webgl/webgl_enums.ts", "../src/core/gpu/gpu_opcodes.ts", "../src/core/pixelformat.ts", "../src/core/gpu/gpu_state.ts", "../src/core/gpu/webgl/webgl_utils.ts", "../src/core/gpu/webgl/webgl_shader.ts", "../src/core/gpu/webgl/webgl_texture.ts", "../src/core/gpu/webgl/webgl_shaders.ts", "../src/ui/emulator_ui.ts", "../src/core/gpu/webgl/webgl_driver.ts", "../src/hle/vfs/vfs.ts", "../src/global/importScript.ts", "../src/hle/vfs/pathinfo.ts", "../src/hle/vfs/vfs_dropbox.ts", "../src/emu/emulator_overlay.ts", "../src/core/gpu/gpu_stats.ts", "../src/emu/context.ts", "../src/core/memory.ts", "../src/core/rtc.ts", "../src/codegen/simplerelooper.ts", "../src/codegen/relooper.ts", "../src/core/cpu/cpu_ast.ts", "../src/util/IndentStringGenerator.ts", "../src/core/cpu/cpu_instructions.ts", "../src/core/cpu/cpu_codegen.ts", "../src/core/cpu/cpu_instruction.ts", "../src/core/cpu/cpu_assembler.ts", "../src/util/AnsiEscapeCodes.ts", "../src/core/cpu/cpu_core.ts", "../src/core/cpu/cpu_interpreter.ts", "../src/core/cpu/cpu_executor.ts", "../src/core/interrupt.ts", "../src/core/audio.ts", "../src/core/display.ts", "../src/core/battery.ts", "../src/core/controller.ts", "../src/hle/structs.ts", "../src/hle/config.ts", "../src/hle/module/ExceptionManagerForKernel.ts", "../src/hle/utils.ts", "../src/hle/module/InterruptManager.ts", "../src/hle/module/KDebugForKernel.ts", "../src/hle/module/Kernel_Library.ts", "../src/hle/module/LoadCoreForKernel.ts", "../src/hle/module/LoadExecForUser.ts", "../src/hle/module/ModuleMgrForUser.ts", "../src/hle/module/sceAtrac3plus.ts", "../src/hle/SceKernelErrors.ts", "../src/me/atrac3plus/Atrac3plusConstants.ts", "../src/me/atrac3plus/Atrac3PlusUtil.ts", "../src/me/atrac3plus/Atrac3PlusDtos.ts", "../src/me/MeUtils.ts", "../src/me/atrac3plus/Atrac.ts", "../src/me/atrac3plus/Atrac3plusDsp.ts", "../src/me/atrac3plus/Atrac3plusData1.ts", "../src/me/atrac3plus/Atrac3plusData2.ts", "../src/me/atrac3plus/ChannelUnit.ts", "../src/me/atrac3plus/Atrac3plusDecoder.ts", "../src/hle/module/sceAudio.ts", "../src/hle/module/sceCtrl.ts", "../src/hle/module/sceDisplay.ts", "../src/hle/module/sceDmac.ts", "../src/hle/module/sceGe_user.ts", "../src/core/gpu/gpu_vertex.ts", "../src/core/gpu/gpu_core.ts", "../src/hle/module/sceHprm.ts", "../src/hle/module/sceHttp.ts", "../src/hle/module/sceParseHttp.ts", "../src/hle/module/sceParseUri.ts", "../src/hle/module/sceImpose.ts", "../src/hle/module/sceLibFont.ts", "../src/hle/module/sceMp3.ts", "../src/hle/module/sceMpeg.ts", "../src/hle/module/sceNet.ts", "../src/hle/module/sceNetAdhoc.ts", "../src/hle/module/sceNetAdhocctl.ts", "../src/hle/module/sceNetAdhocMatching.ts", "../src/hle/module/sceNetApctl.ts", "../src/hle/module/sceNetInet.ts", "../src/hle/module/sceNetResolver.ts", "../src/hle/module/sceNp.ts", "../src/hle/module/sceNpAuth.ts", "../src/hle/module/sceNpService.ts", "../src/hle/module/sceOpenPSID.ts", "../src/hle/module/scePower.ts", "../src/hle/module/scePspNpDrm_user.ts", "../src/hle/module/sceReg.ts", "../src/hle/module/sceRtc.ts", "../src/hle/module/sceSasCore.ts", "../src/format/vag.ts", "../src/hle/module/sceSsl.ts", "../src/hle/module/sceSuspendForUser.ts", "../src/hle/module/sceUmdUser.ts", "../src/hle/module/sceUtility.ts", "../src/hle/module/sceVaudio.ts", "../src/hle/module/sceWlanDrv.ts", "../src/hle/module/StdioForUser.ts", "../src/hle/module/SysMemUserForUser.ts", "../src/hle/module/UtilsForKernel.ts", "../src/hle/module/UtilsForUser.ts", "../src/hle/module/iofilemgr/IoFileMgrForUser.ts", "../src/hle/module/threadman/ThreadManForUser.ts", "../src/hle/manager/thread.ts", "../src/hle/manager/memory.ts", "../src/hle/module/threadman/ThreadManForUser_callbacks.ts", "../src/hle/manager/callback.ts", "../src/hle/module/threadman/ThreadManForUser_sema.ts", "../src/hle/module/threadman/ThreadManForUser_eventflag.ts", "../src/hle/module/threadman/ThreadManForUser_vpl.ts", "../src/hle/module/threadman/ThreadManForUser_fpl.ts", "../src/hle/module/threadman/ThreadManForUser_mutex.ts", "../src/hle/pspmodules.ts", "../src/format/psf.ts", "../src/format/format.ts", "../src/format/zlib.ts", "../src/format/cso.ts", "../src/format/pbp.ts", "../src/core/kirk/jsaes2.ts", "../src/core/kirk/crypto.ts", "../src/core/kirk/kirk.ts", "../src/hle/elf_crypted_prx_keys_144.ts", "../src/hle/elf_crypted_prx_keys_16.ts", "../src/hle/elf_crypted_prx.ts", "../src/format/zip.ts", "../src/format/iso.ts", "../src/format/elf.ts", "../src/format/elf_dwarf.ts", "../src/hle/pspmodules_database.ts", "../src/hle/elf_psp.ts", "../src/hle/manager/file.ts", "../src/hle/manager/net.ts", "../src/hle/manager/module.ts", "../src/hle/vfs/vfs_memory.ts", "../src/hle/vfs/vfs_mountable.ts", "../src/hle/manager/interop.ts", "../src/hle/vfs/indexeddb.ts", "../src/hle/vfs/vfs_storage.ts", "../src/hle/vfs/vfs_emulator.ts", "../src/hle/vfs/vfs_ms.ts", "../src/hle/vfs/vfs_uri.ts", "../src/hle/vfs/vfs_zip.ts", "../src/hle/vfs/vfs_iso.ts", "../src/html5/Html5Gamepad.ts", "../src/html5/Html5Keyboard.ts", "../src/emu/emulator.ts", "../src/html5/Html5Audio.ts", "../src/html5/Html5Battery.ts", "../src/html5/Html5Icons.ts", "../src/emu/emulator_controller_normal.ts", "../src/emu/emulator_controller.ts", "../src/app.ts"],
  "sourcesContent": ["declare const global: any;\n\nif (typeof global === 'undefined') {\n    (window as any).global = window\n}\nif (typeof window === 'undefined') {\n    (global as any).window = global\n}\nif (typeof self == 'undefined') {\n    global.self = global\n}\nif (typeof navigator == 'undefined') {\n    global.navigator = <any>{};\n}\n\nexport function ref() {\n}\n", "\uFEFFimport \"./window\"\n\ndeclare global {\n    interface Math {\n        clz32(value: number): number;\n        trunc(value: number): number;\n        imul(a: number, b: number): number;\n        imul32_64(a: number, b: number, result?: Int32Array): Int32Array;\n        umul32_64(a: number, b: number, result?: Int32Array): Int32Array;\n        fround(x: number): number;\n        sign(x: number): number;\n        rint(x: number): number;\n        log2(x: number): number;\n        log10(x: number): number;\n    }\n}\n\nexport const MAT4_3_IDX = new Uint32Array([\n\t0, 1, 2,\n\t4, 5, 6,\n\t8, 9, 10,\n\t12, 13, 14\n]);\nexport class mat4x3 {\n\tstatic create() {\n\t\treturn new Float32Array([\n\t\t\t1,0,0,\n\t\t\t0,1,0,\n\t\t\t0,0,1,\n\t\t\t0,0,0,\n\t\t]);\n\t}\n\tstatic identity(data:Float32Array) {\n\t\tdata[0] = 1; data[1] = 0; data[2] = 0;\n\t\tdata[3] = 0; data[4] = 1; data[5] = 0;\n\t\tdata[6] = 0; data[7] = 0; data[8] = 1;\n\t\tdata[9] = 0; data[10] = 0; data[11] = 0;\n\t}\n}\nexport class mat4 {\n\tstatic create() {\n\t\treturn new Float32Array([\n\t\t\t1,0,0,0,\n\t\t\t0,1,0,0,\n\t\t\t0,0,1,0,\n\t\t\t0,0,0,1\n\t\t]);\n\t}\n\tstatic from4x3(out:Float32Array, mat4x3:Float32Array) {\n\t\tfor (let n = 0; n < 12; n++) out[MAT4_3_IDX[n]] = mat4x3[n];\n\t\tout[3] = 0.0;\n\t\tout[7] = 0.0;\n\t\tout[11] = 0.0;\n\t\tout[15] = 1.0;\n\t}\n\tstatic from4x4(out:Float32Array, mat4x4:Float32Array) {\n\t\tout.set(mat4x4);\n\t}\n\t\n\tstatic identity(data:Float32Array) {\n\t\tdata[0] = 1; data[1] = 0; data[2] = 0; data[3] = 0;\n\t\tdata[4] = 0; data[5] = 1; data[6] = 0; data[7] = 0;\n\t\tdata[8] = 0; data[9] = 0; data[10] = 1; data[11] = 0;\n\t\tdata[12] = 0; data[13] = 0; data[14] = 0; data[15] = 1;\n\t}\n\tstatic ortho(out:Float32Array, left:number, right:number, bottom:number, top:number, near:number, far:number) {\n        const lr = 1 / (left - right),\n\t\t\tbt = 1 / (bottom - top),\n\t\t\tnf = 1 / (near - far);\n\t\tout[0] = -2 * lr;\n\t\tout[1] = 0;\n\t\tout[2] = 0;\n\t\tout[3] = 0;\n\t\tout[4] = 0;\n\t\tout[5] = -2 * bt;\n\t\tout[6] = 0;\n\t\tout[7] = 0;\n\t\tout[8] = 0;\n\t\tout[9] = 0;\n\t\tout[10] = 2 * nf;\n\t\tout[11] = 0;\n\t\tout[12] = (left + right) * lr;\n\t\tout[13] = (top + bottom) * bt;\n\t\tout[14] = (far + near) * nf;\n\t\tout[15] = 1;\n\t\treturn out;\n\t}\n\tstatic multiply(out:Float32Array, a:Float32Array, b:Float32Array) {\n        const a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t\t\ta10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t\t\ta20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t\t\ta30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n\t\t// Cache only the current line of the second matrix\n        let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\t\tout[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t\tout[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t\tout[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t\tout[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n\t\tb0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n\t\tout[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t\tout[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t\tout[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t\tout[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n\t\tb0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n\t\tout[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t\tout[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t\tout[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t\tout[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n\t\tb0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n\t\tout[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t\tout[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t\tout[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t\tout[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\t\treturn out;\n\t}\n\tstatic scale(out:Float32Array, a:Float32Array, v:Float32Array) {\n        const x = v[0], y = v[1], z = v[2];\n\n        out[0] = a[0] * x;\n\t\tout[1] = a[1] * x;\n\t\tout[2] = a[2] * x;\n\t\tout[3] = a[3] * x;\n\t\tout[4] = a[4] * y;\n\t\tout[5] = a[5] * y;\n\t\tout[6] = a[6] * y;\n\t\tout[7] = a[7] * y;\n\t\tout[8] = a[8] * z;\n\t\tout[9] = a[9] * z;\n\t\tout[10] = a[10] * z;\n\t\tout[11] = a[11] * z;\n\t\tout[12] = a[12];\n\t\tout[13] = a[13];\n\t\tout[14] = a[14];\n\t\tout[15] = a[15];\n\t\treturn out;\n\t}\n\tstatic translate(out:Float32Array, a:Float32Array, v:Float32Array) {\n\t\tlet x = v[0], y = v[1], z = v[2],\n\t\t\ta00:number, a01:number, a02:number, a03:number,\n\t\t\ta10:number, a11:number, a12:number, a13:number,\n\t\t\ta20:number, a21:number, a22:number, a23:number;\n\n\t\tif (a === out) {\n\t\t\tout[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n\t\t\tout[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n\t\t\tout[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n\t\t\tout[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n\t\t} else {\n\t\t\ta00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n\t\t\ta10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n\t\t\ta20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n\t\t\tout[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n\t\t\tout[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n\t\t\tout[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n\t\t\tout[12] = a00 * x + a10 * y + a20 * z + a[12];\n\t\t\tout[13] = a01 * x + a11 * y + a21 * z + a[13];\n\t\t\tout[14] = a02 * x + a12 * y + a22 * z + a[14];\n\t\t\tout[15] = a03 * x + a13 * y + a23 * z + a[15];\n\t\t}\n\n\t\treturn out;\n\t}\n}\n\n//declare const global:any;\n//if (typeof self == 'undefined') window = self = global;\n\nconst _self = window as any\n\n_self['polyfills'] = _self['polyfills'] || {};\n\n_self['polyfills']['log2'] = !Math['log2'];\nif (!Math.log2) {\n\tMath.log2 = (x: number) => { return Math.log(x) / Math.LN2; };\n}\n\n_self['polyfills']['log10'] = !Math['log10'];\nif (!Math.log10) {\n\tMath.log10 = (x: number) => { return Math.log(x) / Math.LN10; };\n}\n\n_self['polyfills']['sign'] = !Math['sign'];\nif (!Math['sign']) {\n\tMath['sign'] = (x: number) => {\n\t\tif (x < 0) return -1;\n\t\tif (x > 0) return +1;\n\t\treturn 0;\n\t};\n}\n\n_self['polyfills']['rint'] = !Math['rint'];\nif (!Math['rint']) {\n\tMath['rint'] = (value: number) => {\n        const twoToThe52 = Math.pow(2, 52); // 2^52\n        const sign = Math.sign(value); // preserve sign info\n\t\tvalue = Math.abs(value);\n\t\tif (value < twoToThe52) value = ((twoToThe52 + value) - twoToThe52);\n\t\treturn sign * value; // restore original sign\n\t};\n}\n\n_self['polyfills']['clz32'] = !Math['clz32'];\nif (!Math['clz32']) {\n\tMath['clz32'] = (x: number) => {\n\t\tx >>>= 0;\n\t\tif (x == 0) return 32;\n        let result = 0;\n        // Binary search.\n\t\tif ((x & 0xFFFF0000) === 0) { x <<= 16; result += 16; }\n\t\tif ((x & 0xFF000000) === 0) { x <<= 8; result += 8; }\n\t\tif ((x & 0xF0000000) === 0) { x <<= 4; result += 4; }\n\t\tif ((x & 0xC0000000) === 0) { x <<= 2; result += 2; }\n\t\tif ((x & 0x80000000) === 0) { x <<= 1; result += 1; }\n\t\treturn result;\n\t};\n}\n\n_self['polyfills']['trunc'] = !Math['trunc'];\nif (!Math['trunc']) {\n\tMath['trunc'] = function (x: number) {\n\t\tif (x < 0) {\n\t\t\treturn Math.ceil(x) | 0;\n\t\t} else {\n\t\t\treturn Math.floor(x) | 0;\n\t\t}\n\t}\n}\n\n_self['polyfills']['imul'] = !Math['imul'];\nif (!Math['imul']) {\n\tMath['imul'] = function (a: number, b: number) {\n        const ah = (a >>> 16) & 0xffff;\n        const al = a & 0xffff;\n        const bh = (b >>> 16) & 0xffff;\n        const bl = b & 0xffff;\n        // the shift by 0 fixes the sign on the high part\n\t\t// the final |0 converts the unsigned value into a signed value\n\t\treturn ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n\t}\n}\n\n//function testMultiply64_Base(a: number, b: number) {\n//\tconst result = Integer64.fromInt(a).multiply(Integer64.fromInt(b));\n//\tconst result2 = Math.imul32_64(a, b, [1, 1]);\n//\treturn {\n//\t\tint64: result,\n//\t\tfast: result2,\n//\t\tcompare: (result.low == result2[0]) && (result.high == result2[1]),\n//\t};\n//}\n//\n//function testMultiply64_Base_u(a: number, b: number) {\n//\tconst result = Integer64.fromUnsignedInt(a).multiply(Integer64.fromUnsignedInt(b));\n//\tconst result2 = Math.umul32_64(a, b, [1, 1]);\n//\treturn {\n//\t\tint64: result,\n//\t\tfast: result2,\n//\t\tcompare: (result.low == result2[0]) && (result.high == result2[1]),\n//\t};\n//}\n//\n//function testMultiply64() {\n//\tconst values = [0, -1, -2147483648, 2147483647, 777, 1234567, -999999, 99999, 65536, -65536, 65535, -65535, -32768, 32768, -32767, 32767];\n//\tvalues.forEach((v1) => {\n//\t\tvalues.forEach((v2) => {\n//\t\t\tconst result = testMultiply64_Base(v1, v2);\n//\t\t\tif (!result.compare) console.log('signed', v1, v2, [result.int64.low, result.int64.high], result.fast);\n//\n//\t\t\tconst result = testMultiply64_Base_u(v1, v2);\n//\t\t\tif (!result.compare) console.log('unsigned', v1, v2, [result.int64.low, result.int64.high], result.fast);\n//\t\t});\n//\t});\n//}\n\n_self['polyfills']['umul32_64'] = !Math['umul32_64'];\nif (!Math.umul32_64) {\n\tMath.umul32_64 = function (a: number, b: number, result?: Int32Array) {\n\t\tif (result === undefined) result = new Int32Array(2);\n\n\t\ta >>>= 0;\n\t\tb >>>= 0;\n\n\t\tif (a < 32767 && b < 65536) {\n\t\t\tresult[0] = a * b;\n\t\t\tresult[1] = (result[0] < 0) ? -1 : 0;\n\t\t\treturn result;\n\t\t}\n\n        const a00 = a & 0xFFFF, a16 = a >>> 16;\n        const b00 = b & 0xFFFF, b16 = b >>> 16;\n\n        const c00 = a00 * b00;\n        let c16 = (c00 >>> 16) + (a16 * b00);\n        let c32 = c16 >>> 16;\n        c16 = (c16 & 0xFFFF) + (a00 * b16);\n\t\tc32 += c16 >>> 16;\n        let c48 = c32 >>> 16;\n        c32 = (c32 & 0xFFFF) + (a16 * b16);\n\t\tc48 += c32 >>> 16;\n\n\t\tresult[0] = ((c16 & 0xFFFF) << 16) | (c00 & 0xFFFF);\n\t\tresult[1] = ((c48 & 0xFFFF) << 16) | (c32 & 0xFFFF);\n\t\treturn result;\n\t};\n}\n\n_self['polyfills']['imul32_64'] = !Math['imul32_64'];\nif (!Math.imul32_64) {\n\tMath.imul32_64 = function (a: number, b: number, result?: Int32Array) {\n\t\tif (result === undefined) result = new Int32Array(2);\n\n\t\tif (a == 0) {\n\t\t\tresult[0] = result[1] = 0;\n\t\t\treturn result;\n\t\t}\n\t\tif (b == 0) {\n\t\t\tresult[0] = result[1] = 0;\n\t\t\treturn result;\n\t\t}\n\n\t\ta |= 0;\n\t\tb |= 0;\n\n\t\tif ((a >= -32768 && a <= 32767) && (b >= -32768 && b <= 32767)) {\n\t\t\tresult[0] = a * b;\n\t\t\tresult[1] = (result[0] < 0) ? -1 : 0;\n\t\t\treturn result;\n\t\t}\n\n        const doNegate = <any>(a < 0) ^ <any>(b < 0);\n\n        Math.umul32_64(Math.abs(a), Math.abs(b), result);\n\n\t\tif (doNegate) {\n\t\t\tresult[0] = ~result[0];\n\t\t\tresult[1] = ~result[1];\n\t\t\tresult[0] = (result[0] + 1) | 0;\n\t\t\tif (result[0] == 0) result[1] = (result[1] + 1) | 0;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n_self['polyfills']['fround'] = !Math['fround'];\nif (!Math['fround']) {\n\tMath['fround'] = function (x: number) {\n        const f32 = new Float32Array(1);\n        f32[0] = x;\n\t\treturn f32[0];\n\t}\n}\n\nexport class BitUtils {\n\tstatic mask(value: number) {\n\t\treturn (1 << value) - 1;\n\t}\n\n\tstatic bitrev32(v: number) {\n\t\tv = ((v >>> 1) & 0x55555555) | ((v & 0x55555555) << 1); // swap odd and even bits\n\t\tv = ((v >>> 2) & 0x33333333) | ((v & 0x33333333) << 2); // swap consecutive pairs\n\t\tv = ((v >>> 4) & 0x0F0F0F0F) | ((v & 0x0F0F0F0F) << 4); // swap nibbles ... \n\t\tv = ((v >>> 8) & 0x00FF00FF) | ((v & 0x00FF00FF) << 8); // swap bytes\n\t\tv = ((v >>> 16) & 0x0000FFFF) | ((v & 0x0000FFFF) << 16); // swap 2-byte long pairs\n\t\treturn v;\n\t}\n\n\tstatic rotr(value: number, offset: number) { return (value >>> offset) | (value << (32 - offset)); }\n\tstatic clo(x: number) { return Math.clz32(~x) }\n\tstatic clz(x: number) { return Math.clz32(x) }\n\tstatic seb(x: number) { return (x << 24) >> 24 }\n\tstatic seh(x: number) { return (x << 16) >> 16 }\n\tstatic wsbh(v: number) { return ((v & 0xFF00FF00) >>> 8) | ((v & 0x00FF00FF) << 8) }\n\tstatic wsbw(v: number) {\n\t\treturn (\n\t\t\t((v & 0xFF000000) >>> 24) |\n\t\t\t((v & 0x00FF0000) >>> 8) |\n\t\t\t((v & 0x0000FF00) << 8) |\n\t\t\t((v & 0x000000FF) << 24)\n\t\t\t);\n\t}\n\n\tstatic extract(data: number, offset: number, length: number) {\n\t\treturn (data >> offset) & ((1 << length) - 1);\n\t}\n\n    static extract4(data: number, offset: number) { return (data >> offset) & 0xF; }\n    static extract8(data: number, offset: number) { return (data >> offset) & 0xFF; }\n    static extract16(data: number, offset: number) { return (data >> offset) & 0xFFFF; }\n    static extract24(data: number, offset: number) { return (data >> offset) & 0xFFFFFF; }\n\n\tstatic extractBool(data: number, offset: number) {\n\t\treturn (this.extract(data, offset, 1) != 0);\n\t}\n\n\tstatic signExtend(value: number, bits: number) {\n        return (value << (32 - bits)) >> (32 - bits)\n    }\n\n\tstatic extractSigned(data: number, offset: number, length: number) {\n        const mask = this.mask(length);\n        const signBit = (1 << (offset + (length - 1)));\n        let value = this.extract(data, offset, length);\n        if ((value & signBit) != 0) value |= ~mask;\n\t\treturn value;\n\t}\n\n\tstatic extractScale1f(data: number, offset: number, length: number) {\n        const mask = (1 << length) - 1;\n        return (((data >>> offset) & mask) / mask)\n\t}\n\n\tstatic extractScalef(data: number, offset: number, length: number, scale: number) {\n\t\treturn BitUtils.extractScale1f(data, offset, length) * scale;\n\t}\n\n\tstatic extractScalei(data: number, offset: number, length: number, scale: number) {\n\t\treturn this.extractScalef(data, offset, length, scale) | 0;\n\t}\n\n\tstatic extractEnum<T>(data: number, offset: number, length: number): T {\n\t\treturn <any>this.extract(data, offset, length);\n\t}\n\n\tstatic clear(data: number, offset: number, length: number) {\n\t\tdata &= ~(BitUtils.mask(length) << offset);\n\t\treturn data;\n\t}\n\n\tstatic insert(data: number, offset: number, length: number, value: number) {\n\t\tvalue &= BitUtils.mask(length);\n\t\tdata = BitUtils.clear(data, offset, length);\n\t\tdata |= value << offset;\n\t\treturn data;\n\t}\n\n    static withBit(initial: number, bit: number, set: boolean): number {\n\t    return this.withMask(initial, 1 << bit, set)\n    }\n\n    static withMask(initial: number, mask: number, set: boolean): number {\n        return set ? (initial | mask) : (initial & ~mask)\n    }\n}\n\nexport class MathVfpu {\n\tstatic vqmul0(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return +(s0 * t3) + (s1 * t2) - (s2 * t1) + (s3 * t0); }\n\tstatic vqmul1(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return -(s0 * t2) + (s1 * t3) + (s2 * t0) + (s3 * t1); }\n\tstatic vqmul2(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return +(s0 * t1) - (s1 * t0) + (s2 * t3) + (s3 * t2); }\n\tstatic vqmul3(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return -(s0 * t0) - (s1 * t1) - (s2 * t2) + (s3 * t3); }\n\n\tstatic vc2i(index: number, value: number) {\n\t\treturn (value << ((3 - index) * 8)) & 0xFF000000;\n\t}\n\tstatic vuc2i(index: number, value: number) {\n\t\treturn ((((value >>> (index * 8)) & 0xFF) * 0x01010101) >> 1) & ~0x80000000;\n\t}\n\n\t// @TODO\n\tstatic vs2i(index: number, value: number) {\n\t\tif ((index % 2) == 0) value <<= 16;\n\t\treturn value & 0xFFFF0000;\n\t}\n\tstatic vi2f(value: number, count: number) {\n\t\treturn MathFloat.scalb(value, count);\n\t}\n\tstatic vi2uc(x: number, y: number, z: number, w: number) {\n\t\treturn (0\n\t\t\t| ((x < 0) ? 0 : ((x >>> 23) << 0))\n\t\t\t| ((y < 0) ? 0 : ((y >>> 23) << 8))\n\t\t\t| ((z < 0) ? 0 : ((z >>> 23) << 16))\n\t\t\t| ((w < 0) ? 0 : ((w >>> 23) << 24))\n\t\t);\n\t}\n\n\tstatic vf2id(value: number, count: number) {\n\t\treturn MathFloat.floor(MathFloat.scalb(value, count));\n\t}\n\tstatic vf2in(value: number, count: number) {\n\t\treturn MathFloat.rint(MathFloat.scalb(value, count));\n\t}\n\tstatic vf2iu(value: number, count: number) {\n\t\treturn MathFloat.ceil(MathFloat.scalb(value, count));\n\t}\n\tstatic vf2iz(Value: number, count: number) {\n        const ScalabValue = MathFloat.scalb(Value, count);\n        const DoubleValue = (Value >= 0) ? MathFloat.floor(ScalabValue) : MathFloat.ceil(ScalabValue);\n        return isNaN(DoubleValue) ? 0x7FFFFFFF : DoubleValue;\n\t}\n\tstatic vf2h() {\n\t\tdebugger;\n\t\treturn 0;\n\t}\n\tstatic vh2f() {\n\t\tdebugger;\n\t\treturn 0;\n\t}\n}\n\nexport class MathFloat {\n\tprivate static reinterpretBuffer = new ArrayBuffer(4);\n\tprivate static floatArray = new Float32Array(MathFloat.reinterpretBuffer);\n\tprivate static intArray = new Int32Array(MathFloat.reinterpretBuffer);\n\n\tstatic reinterpretFloatAsInt(floatValue: number) {\n\t\tMathFloat.floatArray[0] = floatValue;\n\t\treturn MathFloat.intArray[0];\n\t}\n\n\tstatic reinterpretIntAsFloat(integerValue: number) {\n\t\tMathFloat.intArray[0] = integerValue;\n\t\treturn MathFloat.floatArray[0];\n\t}\n\n\tstatic scalb(value: number, count: number) {\n\t\treturn value * Math.pow(2, count);\n\t}\n\n\tstatic min(a: number, b: number) { return (a < b) ? a : b; }\n\tstatic max(a: number, b: number) { return (a > b) ? a : b; }\n\n\tstatic isnan(n: number) { return isNaN(n); }\n\tstatic isinf(n: number) { return n === n / 0; }\n\tstatic isnanorinf(n: number) { return MathFloat.isnan(n) || MathFloat.isinf(n); }\n\n\tstatic abs(value: number) { return Math.abs(value); }\n\tstatic neg(value: number) {\n\t\t//return MathFloat.reinterpretIntAsFloat(MathFloat.reinterpretFloatAsInt(value) ^ 0x80000000);\n\t\treturn -value;\n\t}\n\tstatic ocp(value: number) { return 1 - value; }\n\tstatic nrcp(value: number) { return -(1 / value); }\n\tstatic sat0(value: number) { return MathUtils.clamp(value, 0, +1); }\n\tstatic sat1(value: number) { return MathUtils.clamp(value, -1, +1); }\n\tstatic rsq(value: number) { return 1 / Math.sqrt(value); }\n\tstatic sqrt(value: number) { return Math.sqrt(value); }\n\n\tstatic rint(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn Math.rint(value);\n\t}\n\n\tstatic cast(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn (value < 0) ? Math.ceil(value) : Math.floor(value);\n\t}\n\n\tstatic trunc(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn Math.trunc(value);\n\t}\n\n\tstatic round(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn Math.round(value);\n\t}\n\n\tstatic floor(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn Math.floor(value);\n\t}\n\n\tstatic ceil(value: number) {\n\t\tif (!isFinite(value)) return handleCastInfinite(value);\n\t\treturn Math.ceil(value);\n\t}\n\n\tstatic cosv1(value: number) { return Math.cos(value * Math.PI * 0.5); }\n\tstatic sinv1(value: number) { return Math.sin(value * Math.PI * 0.5); }\n\tstatic nsinv1(value: number) { return -Math.sin(value * Math.PI * 0.5); }\n\tstatic asinv1(value: number) { return Math.asin(value) / (Math.PI * 0.5); }\n\tstatic exp2(value: number) { return Math.pow(2.0, value); }\n\tstatic rexp2(value: number) { return 1 / Math.pow(2.0, value); }\n\tstatic log2(value: number) { return Math.log2(value); }\n\tstatic sign(value: number) { return Math.sign(value); }\n\n\tstatic sign2(left: number, right: number) {\n        const a = left - right;\n        return (((0.0 < a) ? 1 : 0) - ((a < 0.0) ? 1 : 0)); }\n\n\tstatic vslt(a: number, b: number) { if (isNaN(a) || isNaN(b)) return 0; return (a < b) ? 1 : 0; }\n\tstatic vsle(a: number, b: number) { if (isNaN(a) || isNaN(b)) return 0; return (a <= b) ? 1 : 0; }\n\tstatic vsgt(a: number, b: number) { if (isNaN(a) || isNaN(b)) return 0; return (a > b) ? 1 : 0; }\n\tstatic vsge(a: number, b: number) { if (isNaN(a) || isNaN(b)) return 0; return (a >= b) ? 1 : 0; }\n\n\tstatic clamp(v: number, min: number, max: number) {\n\t\tif (v < min) return min;\n\t\tif (v > max) return max;\n\t\treturn v;\n\t}\n}\n\nexport function handleCastInfinite(value: number) {\n\treturn (value < 0) ? -2147483648 : 2147483647\n}\n\nexport function compare<T>(a: T, b: T): number {\n\tif (a < b) return -1\n\tif (a > b) return +1\n\treturn 0\n}\n\nexport function parseIntFormat(str: string) {\n\tstr = str.replace(/_/g, '')\n\tif (str.substr(0, 2) == '0b') return parseInt(str.substr(2), 2)\n\tif (str.substr(0, 2) == '0x') return parseInt(str.substr(2), 16)\n\treturn parseInt(str, 10)\n}\n\nexport class MathUtils {\n\tstatic sextend16(value: number) {\n\t\treturn (((value & 0xFFFF) << 16) >> 16)\n\t\t//value >>= 0; if (value & 0x8000) return value | 0xFFFF0000; else return value;\n\t}\n\t\n\tstatic interpolate(a:number, b:number, ratio:number) {\n\t\treturn a * (1 - ratio) + b * ratio\n\t}\n\n\tstatic prevAligned(value: number, alignment: number) {\n\t\treturn Math.floor(value / alignment) * alignment\n\t}\n\n\tstatic isAlignedTo(value: number, alignment: number) {\n\t\treturn (value % alignment) == 0\n\t}\n\n\tstatic requiredBlocks(size: number, blockSize: number) {\n\t\tif ((size % blockSize) != 0) {\n\t\t\treturn (size / blockSize) + 1\n\t\t}\n\t\telse {\n\t\t\treturn size / blockSize\n\t\t}\n\t}\n\n\tstatic isPowerOfTwo(x: number) {\n\t\treturn (x != 0) && ((x & (x - 1)) == 0)\n\t}\n\n\tstatic nextAligned(value: number, alignment: number) {\n\t\tif (alignment <= 1) return value\n\t\treturn value + ((alignment - (value % alignment)) % alignment)\n\t}\n\t\n\tstatic clamp01(v: number) {\n\t\tif (v < 0.0) return 0.0\n\t\tif (v > 1.0) return 1.0\n\t\treturn v\n\t}\n\n\tstatic clamp(v: number, min: number, max: number) {\n\t\tif (v < min) return min;\n\t\tif (v > max) return max;\n\t\treturn v;\n\t}\n\n    static clampM1_1(v: number) {\n\t    return this.clamp(v, -1, +1)\n    }\n\n    static clamp0_255(v: number) {\n\t    return this.clamp(v, 0, 255)\n    }\n\n    static transformRange(value: number, srcMin: number, srcMax: number, dstMin: number, dstMax: number): number {\n        return this.transformRange01((value - srcMin) / (srcMax - srcMin), dstMin, dstMax)\n    }\n\n    static transformRange01(ratio: number, dstMin: number, dstMax: number): number {\n        return ratio * (dstMax - dstMin) + dstMin\n    }\n}\n\nexport class IntUtils {\n\tstatic toHexString(value: number, padCount: number) {\n        let str = (value >>> 0).toString(16);\n        while (str.length < padCount) str = `0${str}`;\n\t\treturn str;\n\t}\n}\n\nexport class StringUtils {\n\tstatic padLeft(text: string, padchar: string, length: number) {\n\t\twhile (text.length < length) text = padchar + text;\n\t\treturn text;\n\t}\n}\n\nexport function ToUint32(x:number) { return x >>> 0; }\nexport function ToInt32(x:number) { return x | 0; }\n\nexport class ArrayUtils {\n    static create<T>(size: number, gen: (index: number) => T): T[] {\n        const out = new Array(size)\n        for (let n = 0; n < size; n++) out[n] = gen(n)\n        return out\n    }\n\n\tstatic create2D<T>(w: number, h: number, generator?: (x:number, y:number) => T) {\n\t\tif (!generator) generator = (x, y) => null as any as T;\n        const matrix = <T[][]>[];\n        for (let y = 0; y < h; y++) {\n            const row: T[] = [];\n            for (let x = 0; x < w; x++) {\n\t\t\t\trow.push(generator!(x, y));\n\t\t\t}\n\t\t\tmatrix.push(row);\n\t\t}\n\t\treturn matrix;\n\t}\n\n\tstatic range(start: number, end: number) {\n        const array: number[] = [];\n        for (let n = start; n < end; n++) array.push(n);\n\t\treturn array;\n\t}\n\t\n\tstatic keys(object:any):string[] {\n        const keys: string[] = [];\n        for (let key in object) keys.push(key);\n\t\treturn keys;\n\t}\n}\n\nexport function xrange(start: number, end: number) {\n\treturn ArrayUtils.range(start, end);\n}\n\n// @TODO: This is required for the CPU dynamic recompilation\n(window as any).MathFloat = MathFloat;\n(window as any).BitUtils = BitUtils;\n", "\uFEFF///<reference path=\"./math.ts\" />\n\nimport \"./window\"\nimport {compare} from \"./math\";\n\nexport function identity<T>(a: T) { return a; }\nexport function funcTrue<T>(a: T) { return true; }\n\ndeclare global {\n    interface Array<T> {\n        remove(item: T): void;\n        sortBy(item: (item: T) => any): T[];\n        any(filter?: (item: T) => boolean): T;\n        count(filter?: (item: T) => boolean): number;\n        cast<T2>(): T2[];\n        first(filter?: (item: T) => boolean): T | undefined;\n        sum<Q>(selector?: (item: T) => Q):number;\n        min<Q>(selector?: (item: T) => Q):T;\n        max<Q>(selector?: (item: T) => Q):T;\n        binarySearchIndex(selector: (item: T) => number): number;\n        binarySearchValue(selector: (item: T) => number): T;\n        contains(item: T): boolean;\n        toLookupMap(): {};\n    }\n}\n\nexport function compareNumbers(a:number, b:number) {\n\tif (a < b) return -1;\n\tif (a > b) return +1;\n\treturn 0;\n}\n\nArray.prototype.contains = function <T>(item: T) {\n\treturn (<T[]>this).indexOf(item) >= 0;\n};\n\nArray.prototype.binarySearchValue = function <T>(selector: (item: T) => number) {\n    const array = <T[]>this;\n    const index = array.binarySearchIndex(selector);\n    if (index < 0) return null;\n\treturn array[index];\n};\n\nArray.prototype.binarySearchIndex = function <T>(selector: (item: T) => number) {\n    const array = <T[]>this;\n    let min = 0;\n    let max = array.length - 1;\n    let step = 0;\n\n    if (array.length == 0) return -1;\n\n\t//console.log('--------');\n\n\twhile (true) {\n        let current = Math.floor((min + max) / 2);\n        const item = array[current];\n        const result = selector(item);\n\n        if (result == 0) {\n\t\t\t//console.log('->', current);\n\t\t\treturn current;\n\t\t}\n\n\t\t//console.log(min, current, max);\n\n\t\tif (((current == min) || (current == max))) {\n\t\t\tif (min != max) {\n\t\t\t\t//console.log('*');\n\t\t\t\tmin = max = current = (current != min) ? min : max;\n\t\t\t\t//console.log(min, current, max);\n\t\t\t} else {\n\t\t\t\t//console.log('#');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tif (result < 0) {\n\t\t\t\tmax = current;\n\t\t\t} else if (result > 0) {\n\t\t\t\tmin = current;\n\t\t\t}\n\t\t}\n\t\tstep++;\n\t\tif (step >= 64) throw (new Error(\"Too much steps\"));\n\t}\n\n\treturn -1;\n};\n\nArray.prototype.min = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = (a:any) => a;\n\tif (array.length == 0) return null;\n\treturn array.reduce((previous, current) => { return (selector(previous) < selector(current) ? previous : current); }, array[0]);\n});\n\nArray.prototype.max = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = (a:any) => a;\n\tif (array.length == 0) return null;\n\treturn array.reduce((previous, current) => { return (selector(previous) > selector(current) ? previous : current); }, array[0]);\n});\n\nArray.prototype.sortBy = function (selector: Function) {\n\treturn (<any[]>this).slice(0).sort((a, b) => compare(selector(a), selector(b)));\n};\n\nArray.prototype.cast = <any>(function () {\n    // @ts-ignore\n\treturn this;\n});\n\nArray.prototype.count = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = funcTrue;\n    let result = 0;\n    for (let n = 0; n < array.length; n++) if (selector(array[n])) result++;\n\treturn result;\n});\n\nArray.prototype.any = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = funcTrue;\n\tfor (let n = 0; n < array.length; n++) if (selector(array[n])) return true;\n\treturn false;\n});\n\nArray.prototype.first = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = identity;\n\tfor (let n = 0; n < array.length; n++) if (selector(array[n])) return array[n];\n\treturn undefined;\n});\n\nArray.prototype.sum = <any>(function (selector: Function) {\n    // @ts-ignore\n    const array = <any[]>this;\n    if (!selector) selector = (a:any) => a;\n\treturn array.reduce((previous, current) => { return previous + selector(current); }, 0);\n});\n\nArray.prototype.remove = function (item) {\n    const array = <any[]>this;\n    const index = array.indexOf(item);\n    if (index >= 0) array.splice(index, 1);\n};\n\nArray.prototype.toLookupMap = <any>function () {\n    // @ts-ignore\n    const array = <any[]>this;\n    const lookup: { [k: string]: any } = {};\n    for (let n = 0; n < array.length; n++) {\n\t\tlookup[array[n]] = n;\n\t}\n\treturn lookup;\n};\n\nObject.defineProperty(Array.prototype, \"contains\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"toLookupMap\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"cast\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"count\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"any\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"sum\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"min\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"max\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"sortBy\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"first\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"remove\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"binarySearchValue\", { enumerable: false });\nObject.defineProperty(Array.prototype, \"binarySearchIndex\", { enumerable: false });\n", "import \"./window\"\nimport \"./array\"\nimport \"./math\"\nimport {BitUtils, MathFloat, MathUtils} from \"./math\";\n\nconst _self: any = (typeof window != 'undefined') ? window : self;\n\ndeclare global {\n    interface StringConstructor {\n        fromUint8Array(array: Uint8Array): string\n    }\n    interface String {\n        (value: any): string;\n        format(...args: any[]): string\n        rstrip(): string;\n        contains(value: string): boolean;\n    }\n    interface Number {\n        extract(offset: number, length: number): number\n        extractBit(offset: number): boolean\n        extract8(offset: number): number\n        signExtend(bits: number): number\n    }\n}\n\nconst u16TextDecoder = new TextDecoder('utf-16')\nString.fromUint8Array = function(array: Uint8Array): string {\n    if (array.length <= 1024) {\n        return String.fromCharCode.apply(null, array as any)\n    }\n    const temp = new Uint16Array(array.length)\n    temp.set(array, 0)\n    return u16TextDecoder.decode(temp)\n}\n\n// @ts-ignore\nNumber.prototype.extract = function(offset: number, length: number): number { return BitUtils.extract(this, offset, length) }\n// @ts-ignore\nNumber.prototype.extract8 = function(offset: number): number { return BitUtils.extract8(this, offset) }\n// @ts-ignore\nNumber.prototype.extractBit = function(offset: number): boolean { return BitUtils.extractBool(this, offset) }\n// @ts-ignore\nNumber.prototype.signExtend = function(bits: number): number { return (this << (32 - bits)) >> (32 - bits) }\n\nString.prototype.format = function(...args: any[]): string {\n    return sprintf(this, ...args)\n}\n\nString.prototype.rstrip = function() {\n    const string = <string>this;\n    return string.replace(/\\s+$/, '');\n}\n\nString.prototype.contains = function(value: string) {\n    const string = <string>this;\n    return string.indexOf(value) >= 0;\n}\n\nexport function sprintf(...args: any[]): string {\n\t//  discuss at: http://phpjs.org/functions/sprintf/\n\t// original by: Ash Searle (http://hexmen.com/blog/)\n\t// improved by: Michael White (http://getsprink.com)\n\t// improved by: Jack\n\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n\t// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n\t// improved by: Dj\n\t// improved by: Allidylls\n\t//    input by: Paulo Freitas\n\t//    input by: Brett Zamir (http://brett-zamir.me)\n\t//   example 1: sprintf(\"%01.2f\", 123.1);\n\t//   returns 1: 123.10\n\t//   example 2: sprintf(\"[%10s]\", 'monkey');\n\t//   returns 2: '[    monkey]'\n\t//   example 3: sprintf(\"[%'#10s]\", 'monkey');\n\t//   returns 3: '[####monkey]'\n\t//   example 4: sprintf(\"%d\", 123456789012345);\n\t//   returns 4: '123456789012345'\n\t//   example 5: sprintf('%-03s', 'E');\n\t//   returns 5: 'E00'\n\n    const regex = /%%|%(\\d+\\$)?([-+\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g;\n    const a = arguments;\n    let i = 0;\n    const format = a[i++];\n\n    // pad()\n\tconst pad = function(str: string, len: number, chr: string|undefined, leftJustify: boolean) {\n\t\tif (!chr) {\n\t\t\tchr = ' ';\n\t\t}\n        const padding = (str.length >= len) ? '' : new Array(1 + len - str.length >>> 0).join(chr);\n        return leftJustify ? str + padding : padding + str;\n\t};\n\n\t// justify()\n\tconst justify = function(value: string, prefix: string, leftJustify: boolean, minWidth: number, zeroPad: boolean, customPadChar: string|undefined = undefined) {\n        const diff = minWidth - value.length;\n        if (diff > 0) {\n\t\t\tif (leftJustify || !zeroPad) {\n\t\t\t\tvalue = pad(value, minWidth, customPadChar, leftJustify);\n\t\t\t} else {\n\t\t\t\tvalue = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length);\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t};\n\n\t// formatBaseX()\n\tconst formatBaseX = function(value: number, base: number, prefix: any, leftJustify: boolean, minWidth: number, precision: number, zeroPad: boolean) {\n\t\t// Note: casts negative numbers to positive ones\n\t\tconst number = value >>> 0;\n\t\tprefix = prefix && number && (<any>{\n\t\t\t'2': '0b',\n\t\t\t'8': '0',\n\t\t\t'16': '0x'\n\t\t})[base] || '';\n\t\tconst valueStr = prefix + pad(number.toString(base), precision || 0, '0', false);\n\t\treturn justify(valueStr, prefix, leftJustify, minWidth, zeroPad);\n\t};\n\n\t// formatString()\n\tconst formatString = function(value: any, leftJustify: any, minWidth: any, precision: any, zeroPad: any, customPadChar: any = undefined) {\n\t\tif (precision != null) {\n\t\t\tvalue = value.slice(0, precision);\n\t\t}\n\t\treturn justify(value, '', leftJustify, minWidth, zeroPad, customPadChar);\n\t};\n\n\t// doFormat()\n\tconst doFormat = function(substring: any, valueIndex: any, flags: any, minWidth: any, _: any, precision: any, type: any) {\n\t\tlet number: any, prefix: any, method: any, textTransform: any, value: any;\n\n\t\tif (substring === '%%') {\n\t\t\treturn '%';\n\t\t}\n\n\t\t// parse flags\n        let leftJustify = false;\n        let positivePrefix = '';\n        let zeroPad = false;\n        let prefixBaseX = false;\n        let customPadChar = ' ';\n        const flagsl = flags.length;\n        for (let j = 0; flags && j < flagsl; j++) {\n\t\t\tswitch (flags.charAt(j)) {\n\t\t\t\tcase ' ':\n\t\t\t\t\tpositivePrefix = ' ';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '+':\n\t\t\t\t\tpositivePrefix = '+';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\tleftJustify = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"'\":\n\t\t\t\t\tcustomPadChar = flags.charAt(j + 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '0':\n\t\t\t\t\tzeroPad = true;\n\t\t\t\t\tcustomPadChar = '0';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '#':\n\t\t\t\t\tprefixBaseX = true;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// parameters may be null, undefined, empty-string or real valued\n\t\t// we want to ignore null, undefined and empty-string values\n\t\tif (!minWidth) {\n\t\t\tminWidth = 0;\n\t\t} else if (minWidth === '*') {\n\t\t\tminWidth = +a[i++];\n\t\t} else if (minWidth.charAt(0) == '*') {\n\t\t\tminWidth = +a[minWidth.slice(1, -1)];\n\t\t} else {\n\t\t\tminWidth = +minWidth;\n\t\t}\n\n\t\t// Note: undocumented perl feature:\n\t\tif (minWidth < 0) {\n\t\t\tminWidth = -minWidth;\n\t\t\tleftJustify = true;\n\t\t}\n\n\t\tif (!isFinite(minWidth)) {\n\t\t\tthrow new Error('sprintf: (minimum-)width must be finite');\n\t\t}\n\n\t\tif (!precision) {\n\t\t\tprecision = 'fFeE'.indexOf(type) > -1 ? 6 : (type === 'd') ? 0 : undefined;\n\t\t} else if (precision === '*') {\n\t\t\tprecision = +a[i++];\n\t\t} else if (precision.charAt(0) == '*') {\n\t\t\tprecision = +a[precision.slice(1, -1)];\n\t\t} else {\n\t\t\tprecision = +precision;\n\t\t}\n\n\t\t// grab value using valueIndex if required?\n\t\tvalue = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];\n\n\t\tswitch (type) {\n\t\t\tcase 's':\n\t\t\t\treturn formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);\n\t\t\tcase 'c':\n\t\t\t\treturn formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);\n\t\t\tcase 'b':\n\t\t\t\treturn formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t\t\tcase 'o':\n\t\t\t\treturn formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t\t\tcase 'x':\n\t\t\t\treturn formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t\t\tcase 'X':\n\t\t\t\treturn formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n\t\t\t\t\t.toUpperCase();\n\t\t\tcase 'u':\n\t\t\t\treturn formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);\n\t\t\tcase 'i':\n\t\t\tcase 'd':\n\t\t\t\tnumber = +value || 0;\n\t\t\t\tnumber = Math.round(number - number % 1); // Plain Math.round doesn't just truncate\n\t\t\t\tprefix = number < 0 ? '-' : positivePrefix;\n\t\t\t\tvalue = prefix + pad(String(Math.abs(number)), precision, '0', false);\n\t\t\t\treturn justify(value, prefix, leftJustify, minWidth, zeroPad);\n\t\t\tcase 'e':\n\t\t\tcase 'E':\n\t\t\tcase 'f': // Should handle locales (as per setlocale)\n\t\t\tcase 'F':\n\t\t\tcase 'g':\n\t\t\tcase 'G':\n\t\t\t\tnumber = +value;\n\t\t\t\tprefix = number < 0 ? '-' : positivePrefix;\n\t\t\t\tmethod = ['toExponential', 'toFixed', 'toPrecision']['efg'.indexOf(type.toLowerCase())];\n\t\t\t\ttextTransform = ['toString', 'toUpperCase']['eEfFgG'.indexOf(type) % 2];\n\t\t\t\tvalue = prefix + (<any>Math.abs(number))[method](precision);\n\t\t\t\treturn (<any>justify(value, prefix, leftJustify, minWidth, zeroPad))[textTransform]();\n\t\t\tdefault:\n\t\t\t\treturn substring;\n\t\t}\n\t};\n\n\treturn format.replace(regex, doFormat);\n}\n\nexport function printf(...args: any[]) {\n    // @ts-ignore\n\tconsole.log(sprintf.apply(sprintf, arguments));\n}\n\nexport interface NumberDictionary<V> {\n    [key: number]: V;\n}\n\nexport interface StringDictionary<V> {\n    [key: string]: V;\n}\n\nexport function String_repeat(str: string, num: number) {\n    return new Array(num + 1).join(str);\n}\n\nexport enum Endian {\n    LITTLE = 0,\n    BIG = 1,\n}\n\nexport class AsyncEntry<T> {\n\tconstructor(public id: string, public size: number, public usageCount: number, public value: T, public lastUsedTime: number) {\n\t}\n}\n\nexport class AsyncCache<T> {\n\titemsMap: StringDictionary<AsyncEntry<T>> = {};\n\n\tconstructor(private maxSize: number = 16, private measure?: (value: T) => number) {\n\t\tif (!measure) measure = ((item) => 1);\n\t}\n\n\tprivate get items() {\n        const items = <AsyncEntry<T>[]>[];\n        for (let key in this.itemsMap) {\n            const item = this.itemsMap[key];\n            if (item instanceof AsyncEntry) items.push(item);\n\t\t}\n\t\treturn items;\n\t}\n\n\tprivate get usedSize() {\n\t\treturn this.items.sum(item => item.size);\n\t}\n\n\tprivate get availableSize() {\n\t\treturn this.maxSize - this.usedSize;\n\t}\n\n\tprivate freeUntilAvailable(size: number) {\n\t\tif (size > this.maxSize) throw (new Error(\"Element too big\"));\n\t\t//console.log('count => ', size, this.availableSize, this.usedSize, this.maxSize, this.items.length);\n\n\t\twhile (this.availableSize < size) {\n            const itemToDelete = this.items.min(item => item.lastUsedTime);\n            delete this.itemsMap[itemToDelete.id];\n\t\t}\n\t}\n\n\tgetOrGenerateAsync(id: string, generator: () => PromiseFast<T>): PromiseFast<T> {\n        const item = this.itemsMap[id];\n        if (item) {\n\t\t\titem.lastUsedTime = Date.now();\n\t\t\treturn PromiseFast.resolve(item.value);\n\t\t} else {\n\t\t\treturn generator().thenFast(value => {\n                const size = this.measure!(value);\n                this.freeUntilAvailable(size);\n\t\t\t\tthis.itemsMap[id] = new AsyncEntry(id, size, 1, value, Date.now());\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class SortedSet<T> {\n    public elements: T[] = [];\n\n    has(element: T) {\n        return this.elements.indexOf(element) >= 0;\n    }\n\n    add(element: T) {\n        if (!this.has(element)) this.elements.push(element);\n\t\treturn element;\n\t}\n\n\tget length() { return this.elements.length; }\n\n    delete(element: T) {\n        this.elements.remove(element);\n    }\n\n    filter(callback: (value: T, index: number, array: T[]) => boolean) {\n        return this.elements.filter(callback);\n    }\n\n    forEach(callback: (element: T) => void) {\n        this.elements.forEach(callback);\n    }\n}\n\nexport class DSet<T> extends SortedSet<T> {\n}\n\nexport class Pool<T> {\n\n}\n\nexport class UidCollection<T>\n{\n    private items: NumberDictionary<T> = {};\n    private freeItems: number[] = []\n\n    constructor(private lastId: number = 1) {\n    }\n\n    allocate(item: T): number {\n        const id = (this.freeItems.length > 0) ? this.freeItems.pop()! : this.lastId++;\n        this.items[id] = item;\n        return id;\n    }\n\n\thas(id: number):boolean {\n\t\treturn (this.items[id] !== undefined);\n\t}\n\n    get(id: number):T {\n        return this.items[id];\n\t}\n\n\tlist():T[] {\n        const out = <T[]>[];\n        for (let key in this.items) out.push(this.items[key]);\n\t\treturn out;\n\t}\n\n    remove(id: number): void {\n        if (this.items[id] !== undefined) {\n            delete this.items[id];\n            this.freeItems.push(id)\n        }\n    }\n}\n\nexport interface NumericRange {\n\tstart: number;\n\tend: number;\n}\n\ninterface MicrotaskCallback {\n\t(): void;\n}\n\nexport class _Microtask {\n\tqueued: boolean = false;\n\tcallbacks: MicrotaskCallback[] = [];\n\ttimeout: number = -1\n\n\tqueue(callback: MicrotaskCallback) {\n        this.callbacks.push(callback);\n\t\tif (!this.queued) {\n            this._executeLater()\n\t\t}\n\t}\n\n\tqueueExecuteNow(callback: MicrotaskCallback) {\n\t    this._cancelTimeout()\n        this.queued = true\n        callback()\n        this._execute(false)\n    }\n\n\texecute() {\n\t    this._execute(true)\n\t}\n\n\t_cancelTimeout() {\n        if (this.timeout != -1) {\n            clearTimeout(this.timeout)\n            this.timeout = -1\n        }\n    }\n\n\t_executeLater() {\n        this.queued = true\n        this._cancelTimeout()\n        this.timeout = setTimeout(() => { this.execute() }, 0) as any;\n    }\n\n    _execute(scheduleNext: boolean) {\n        const start = performance.now();\n        while (this._timedTasks.length > 0) {\n            const task = this._timedTasks[0]\n            if (performance.now() >= task.time) {\n                this._timedTasks.shift()\n            } else {\n                break\n            }\n        }\n        while (this.callbacks.length > 0) {\n            const callback = this.callbacks.shift()!;\n            callback();\n            const end = performance.now();\n            if ((end - start) >= 20) {\n                if (scheduleNext) {\n                    this._executeLater()\n                }\n                return;\n            }\n        }\n        this.queued = false;\n    }\n\n    _timedTasks: { time: number, resolve: () => void }[] = []\n\n    async waitAsync(timeMs: number) {\n\t    return new Promise((resolve, reject) => {\n\t        setTimeout(resolve, timeMs)\n        })\n        /*\n\t    return new Promise<void>((resolve, reject) => {\n            this._timedTasks.push(\n                { time: performance.now() + timeMs, resolve: resolve }\n            )\n            this._timedTasks.sort((a, b) => a.time - b.time)\n        })\n         */\n    }\n}\n\nexport const Microtask = new _Microtask()\n\n_self['polyfills'] = _self['polyfills'] || {};\n_self['polyfills']['ArrayBuffer_slice'] = !ArrayBuffer.prototype.slice;\n_self['polyfills']['performance'] = !self.performance;\n\nif (!_self['performance']) {\n\t_self['performance'] = <any>{};\n\t_self['performance']['now'] = function() {\n\t\treturn Date.now();\n\t};\n}\n\ndeclare function escape(input: string): string;\ndeclare function unescape(input: string): string;\n\nexport class Utf8 {\n\tstatic decode(input: string): string {\n\t\ttry {\n\t\t\treturn decodeURIComponent(escape(input));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn input;\n\t\t}\n\t}\n\n\tstatic encode(input: string): string {\n\t\treturn unescape(encodeURIComponent(input));\n\t}\n}\n\ndeclare global {\n    interface ArrayBuffer {\n        slice(begin: number, end?: number): ArrayBuffer;\n\n        //new(count:number):ArrayBuffer;\n    }\n}\n\nif (!ArrayBuffer.prototype.slice) {\n    ArrayBuffer.prototype.slice = function(begin: number, end?: number): ArrayBuffer {\n        const that = new Uint8Array(this);\n        if (end == undefined) end = that.length;\n        const result = new ArrayBuffer(end - begin);\n        const resultArray = new Uint8Array(result);\n        for (let i = 0; i < resultArray.length; i++) resultArray[i] = that[i + begin];\n        return result;\n    };\n}\n\ninterface AudioBuffer {\n\tgetChannelData(channel: number): Float32Array;\n}\ninterface AudioContext {\n\tcreateScriptProcessor(bufferSize: number, numInputChannels: number, numOutputChannels: number): ScriptProcessorNode;\n}\n\n_self['AudioContext'] = _self['AudioContext'] || _self['webkitAudioContext'];\n\n_self.navigator['getGamepads'] = _self.navigator['getGamepads'] || _self.navigator['webkitGetGamepads'];\n\nif (!_self.requestAnimationFrame) {\n\t_self.requestAnimationFrame = function(callback: FrameRequestCallback) {\n\t\treturn setTimeout(function() { callback(Date.now()); }, 1000 / 60);\n\t};\n\t_self.cancelAnimationFrame = function(id: number) {\n\t\tclearTimeout(id);\n\t};\n}\n\nexport class ArrayBufferUtils {\n\tstatic copyUint8ToArrayBuffer(input:Uint8Array):ArrayBuffer {\n        const out = new ArrayBuffer(input.length);\n        new Uint8Array(out).set(input);\n\t\treturn out;\n\t}\n\t\n\tstatic hashWordCount(data:Uint32Array) {\n\t\tlet count = data.length, result = 0;\n\t\tfor (let n = 0; n < count; n++) result = (result + data[n] ^ n) | 0;\n\t\treturn result;\n\t}\n\t\n\tstatic hashFast(data: Uint8Array) {\n\t\treturn this.hashWordCount(new Uint32Array(data.buffer, data.byteOffset, data.byteLength / 4));\n\t}\n\n\tstatic hash(data:Uint8Array) {\n        let result = 0;\n        let address = 0;\n        let count = data.length;\n\n        while (((address + data.byteOffset) & 3) != 0) { result += data[address++]; count--; }\n\n        const count2 = MathUtils.prevAligned(count, 4);\n\n        result += this.hashWordCount(new Uint32Array(data.buffer, data.byteOffset + address, count2 / 4));\n\n\t\taddress += count2;\n\t\tcount -= count2;\n\n\t\twhile (((address + data.byteOffset) & 3) != 0) { result += data[address++] * 7; count--; }\n\n\t\treturn result;\n\t}\n\t\n\tstatic fromUInt8Array(input: Uint8Array) {\n\t\treturn input.buffer.slice(input.byteOffset, input.byteOffset + input.byteLength);\n\t}\n\n\tstatic uint16ToUint8(input: Uint16Array) {\n\t\treturn new Uint8Array(input.buffer, input.byteOffset, input.byteLength);\n\t}\n\n\tstatic uint32ToUint8(input: Uint32Array) {\n\t\treturn new Uint8Array(input.buffer, input.byteOffset, input.byteLength);\n\t}\n\t\n\tstatic uint8ToUint32(input: Uint8Array, offset: number = 0, length?: number) {\n\t\tif (length === undefined) length = (input.length - offset) >>> 2;\n\t\treturn new Uint32Array(input.buffer, input.byteOffset + offset, length);\n\t}\n\n\tstatic uint8ToUint16(input: Uint8Array, offset: number = 0, length?: number): Uint16Array {\n\t\tif (length === undefined) length = (input.length - offset) >>> 1;\n\t\treturn new Uint16Array(input.buffer, input.byteOffset + offset, length);\n\t}\n\n\tstatic uint8ToUint8(input: Uint8Array, offset: number = 0, length?: number) {\n\t\tif (length === undefined) length = (input.length - offset);\n\t\treturn new Uint8Array(input.buffer, input.byteOffset + offset, length);\n\t}\n\t\n\t// http://jsperf.com/test-memory-copying\n\tstatic copy(input: Uint8Array, inputPosition: number, output: Uint8Array, outputPosition: number, length: number) {\n\t\t//new Uint8Array(output.buffer, output.byteOffset + outputPosition, length).set(new Uint8Array(input.buffer, input.byteOffset + inputPosition, length));\n\t\toutput.subarray(outputPosition, outputPosition + length).set(input.subarray(inputPosition, inputPosition + length));\n\t\t//for (let n = 0; n < length; n++) output[outputPosition + n] = input[inputPosition + n];\n\t}\n\t\n\tstatic copyUint8ToUint32(from: Uint8Array) {\n        const to = new Uint32Array(from.length);\n        for (let n = 0; n < to.length; n++) to[n] = from[n];\n\t\treturn to;\n\t}\n\t\n\tstatic copyUint8ToUint32_rep(from: Uint8Array) {\n        const to = new Uint32Array(from.length);\n        for (let n = 0; n < to.length; n++) to[n] = from[n] | (from[n] << 8) | (from[n] << 16) | (from[n] << 24);\n\t\treturn to;\n\t}\n\n\tstatic cloneUint8Array(input: Uint8Array) { const out = new Uint8Array(input.length); out.set(input); return out; }\n\tstatic cloneUint16Array(input: Uint16Array) { const out = new Uint16Array(input.length); out.set(input); return out; }\n\tstatic cloneInt16Array(input: Int16Array) { const out = new Int16Array(input.length); out.set(input); return out; }\n\tstatic cloneUint32Array(input: Uint32Array) { const out = new Uint32Array(input.length); out.set(input); return out; }\n\t\n\tstatic concatU8(chunks: Uint8Array[]):Uint8Array {\n        const out = new Uint8Array(chunks.sum(chunk => chunk.length));\n        let offset = 0;\n        chunks.forEach(chunk => {\n\t\t\tout.set(chunk, offset);\n\t\t\toffset += chunk.length;\n\t\t});\n\t\treturn out;\n\t}\n\n\tstatic concatI16(chunks: Int16Array[]): Int16Array {\n        const out = new Int16Array(chunks.sum(chunk => chunk.length));\n        let offset = 0;\n        chunks.forEach(chunk => {\n\t\t\tout.set(chunk, offset);\n\t\t\toffset += chunk.length;\n\t\t});\n\t\treturn out;\n\t}\n}\n\nexport interface PromiseGenerator<T> {\n\t(): PromiseFast<T>;\n}\n\nexport class PromiseUtils {\n\tstatic sequence<T>(generators: PromiseGenerator<T>[]) {\n\t\treturn new PromiseFast((resolve, reject) => {\n\t\t\tgenerators = generators.slice(0);\n\t\t\tfunction step() {\n\t\t\t\tif (generators.length > 0) {\n                    const generator = generators.shift()!;\n                    const promise = generator();\n                    promise.thenFast(step);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}\n\t\t\tstep();\n\t\t});\n\t}\n\n\tstatic delayAsync(ms: number) {\n\t\tif (ms <= 0) return PromiseFast.resolve<any>(null);\n\t\treturn new PromiseFast<any>((resolve, reject) => setTimeout(resolve, ms));\n\t}\n\n\tstatic delaySecondsAsync(seconds: number) {\n\t\treturn PromiseUtils.delayAsync(seconds * 1000);\n\t}\n}\n\n_self['requestFileSystem'] = _self['requestFileSystem'] || _self['webkitRequestFileSystem'];\n\nexport function setToString(Enum: any, value: number) {\n    const items: string[] = [];\n    for (const key in Enum) {\n\t\tif (Enum[key] & value && (Enum[key] & value) == Enum[key]) {\n\t\t\titems.push(key);\n\t\t}\n\t}\n\treturn items.join(' | ');\n}\n\nexport enum AcceptCallbacks { NO = 0, YES = 1 }\nexport enum Compensate { NO = 0, YES = 1 }\n\nexport class WaitingThreadInfo<T> {\n\tpublic constructor(public name: string, public object: any, public promise: PromiseFast<T> | Promise<T>, public callbacks: AcceptCallbacks, public compensate: Compensate = Compensate.YES) {\n\t}\n}\n\n(<any>window).WaitingThreadInfo = WaitingThreadInfo;\n\nexport const DebugOnceArray: { [key: string]: number; } = {};\nexport function DebugOnce(name: string, times: number = 1) {\n\tif (DebugOnceArray[name] >= times) return false;\n\tif (DebugOnceArray[name]) {\n\t\tDebugOnceArray[name]++;\n\t} else {\n\t\tDebugOnceArray[name] = 1;\n\t}\n\treturn true;\n}\n\nexport function isTouchDevice() {\n\treturn 'ontouchstart' in window;\n}\n\nexport class HalfFloat {\n\tstatic fromFloat(Float: number) {\n        const i = MathFloat.reinterpretFloatAsInt(Float);\n        const s = ((i >> 16) & 0x00008000);              // sign\n        const e = ((i >> 23) & 0x000000ff) - (127 - 15); // exponent\n        let f = ((i >> 0) & 0x007fffff);              // fraction\n\n\t\t// need to handle NaNs and Inf?\n\t\tif (e <= 0) {\n\t\t\tif (e < -10) {\n\t\t\t\tif (s != 0) {\n\t\t\t\t\t// handle -0.0\n\t\t\t\t\treturn 0x8000;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tf = (f | 0x00800000) >> (1 - e);\n\t\t\treturn s | (f >> 13);\n\t\t}\n\t\telse if (e == 0xff - (127 - 15)) {\n\t\t\tif (f == 0) {\n\t\t\t\t// Inf\n\t\t\t\treturn s | 0x7c00;\n\t\t\t}\n\t\t\t// NAN\n\t\t\tf >>= 13;\n\t\t\treturn s | 0x7c00 | f | ((f == 0) ? 1 : 0);\n\t\t}\n\t\tif (e > 30) {\n\t\t\t// Overflow\n\t\t\treturn s | 0x7c00;\n\t\t}\n\t\treturn s | (e << 10) | (f >> 13);\n\t}\n\n\tstatic toFloat(imm16: number) {\n        const s = (imm16 >> 15) & 0x00000001; // Sign\n        let e = (imm16 >> 10) & 0x0000001f; // Exponent\n        let f = (imm16 >> 0) & 0x000003ff;  // Fraction\n\n\t\t// Need to handle 0x7C00 INF and 0xFC00 -INF?\n\t\tif (e == 0) {\n\t\t\t// Need to handle +-0 case f==0 or f=0x8000?\n\t\t\tif (f == 0) {\n\t\t\t\t// Plus or minus zero\n\t\t\t\treturn MathFloat.reinterpretIntAsFloat(s << 31);\n\t\t\t}\n\t\t\t// Denormalized number -- renormalize it\n\t\t\twhile ((f & 0x00000400) == 0) {\n\t\t\t\tf <<= 1;\n\t\t\t\te -= 1;\n\t\t\t}\n\t\t\te += 1;\n\t\t\tf &= ~0x00000400;\n\t\t}\n\t\telse if (e == 31) {\n\t\t\tif (f == 0) {\n\t\t\t\t// Inf\n\t\t\t\treturn MathFloat.reinterpretIntAsFloat((s << 31) | 0x7f800000);\n\t\t\t}\n\t\t\t// NaN\n\t\t\treturn MathFloat.reinterpretIntAsFloat((s << 31) | 0x7f800000 | (f << 13));\n\t\t}\n\n\t\te = e + (127 - 15);\n\t\tf = f << 13;\n\n\t\treturn MathFloat.reinterpretIntAsFloat((s << 31) | (e << 23) | f);\n\t}\n}\n\n\nexport function htmlspecialchars(str: string) {\n\treturn str.replace(/[&<>]/g, (tag: string) => {\n\t\tswitch (tag) {\n\t\t\tcase '&': return '&amp;';\n\t\t\tcase '<': return '&lt;';\n\t\t\tcase '>': return '&gt;';\n\t\t}\n\t\treturn tag;\n\t});\n}\n\nexport function mac2string(mac: Uint8Array) {\n\treturn sprintf(\"%02x:%02x:%02x:%02x:%02x:%02x\", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);\n}\n\nexport function string2mac(string: string) {\n    const array = String(string).split(':').map(item => parseInt(item, 16));\n    while (array.length < 6) array.push(0);\n\treturn new Uint8Array(array);\n}\n\nexport interface Cancelable {\n\tcancel(): void;\n}\n\nexport class Signal0Cancelable implements Cancelable {\n\tconstructor(private signal: Signal0, private callback: () => void) {\n\t}\n\n\tcancel() {\n\t\tthis.signal.remove(this.callback);\n\t}\n}\n\nexport class Signal1Cancelable<T> implements Cancelable {\n\tconstructor(private signal: Signal1<T>, private callback: (value?: T) => void) {\n\t}\n\n\tcancel() {\n\t\tthis.signal.remove(this.callback);\n\t}\n}\n\nexport class Signal2Cancelable<T1, T2> implements Cancelable {\n\tconstructor(private signal: Signal2<T1, T2>, private callback: (v1: T1, v2: T2) => void) {\n\t}\n\n\tcancel() {\n\t\tthis.signal.remove(this.callback);\n\t}\n}\n\nexport class WatchValue<T> {\n\tprivate _value:T;\n\tonChanged:Signal1<T> = new Signal1<T>();\n\tconstructor(value:T) { this._value = value; }\n\twaitUntilValueAsync(expectedValue:T) {\n\t\tif (this.value == expectedValue) return PromiseFast.resolve();\n\t\treturn new PromiseFast((resolve, reject) => {\n\t\t\tlet cancelable = this.onChanged.add(changed => {\n\t\t\t\tif (changed == expectedValue) {\n\t\t\t\t\tcancelable.cancel();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tset value(value:T) {\n\t\tif (this._value == value) return;\n\t\tthis._value = value;\n\t\tthis.onChanged.dispatch(value);\n\t}\n\tget value():T {\n\t\treturn this._value;\n\t}\n}\n\nexport class Signal0 {\n\tcallbacks: (() => void)[] = [];\n\n\tget length() { return this.callbacks.length; }\n\tclear() { this.callbacks = []; }\n\n\tpipeTo(other:Signal0) {\n\t\treturn this.add(() => other.dispatch());\n\t}\n\n\tadd(callback: () => void) {\n\t\tthis.callbacks.push(callback);\n\t\treturn new Signal0Cancelable(this, callback);\n\t}\n\n\tremove(callback: () => void) {\n        const index = this.callbacks.indexOf(callback);\n        if (index >= 0) {\n\t\t\tthis.callbacks.splice(index, 1);\n\t\t}\n\t}\n\n\tonce(callback: () => void) {\n        const once = () => {\n            this.remove(once);\n            callback();\n        };\n        this.add(once);\n\t\treturn new Signal0Cancelable(this, once);\n\t}\n\n\tdispatch() {\n\t\tthis.callbacks.forEach((callback) => {\n\t\t\tcallback();\n\t\t});\n\t}\n}\n\nexport class Signal1<T1> {\n\tcallbacks: ((value: T1) => void)[] = [];\n\n\tget length() { return this.callbacks.length; }\n\tclear() { this.callbacks = []; }\n\n\tpipeTo(other:Signal1<T1>): Signal1Cancelable<T1> {\n\t\treturn this.add(v => other.dispatch(v));\n\t}\n\n\tadd(callback: (v1: T1) => void): Signal1Cancelable<T1> {\n\t\tthis.callbacks.push(callback);\n        // @ts-ignore\n\t\treturn new Signal1Cancelable(this, callback);\n\t}\n\n\tremove(callback: (v1: T1) => void) {\n        const index = this.callbacks.indexOf(callback);\n        if (index >= 0) {\n\t\t\tthis.callbacks.splice(index, 1);\n\t\t}\n\t}\n\n\tonce(callback: (v1: T1) => void): Signal1Cancelable<T1> {\n        const once = (v1: T1) => {\n            this.remove(once);\n            callback(v1);\n        };\n        this.add(once);\n        // @ts-ignore\n\t\treturn new Signal1Cancelable(this, once);\n\t}\n\n\tdispatch(v1: T1) {\n\t\tthis.callbacks.forEach((callback) => {\n\t\t\tcallback(v1);\n\t\t});\n\t}\n}\n\nexport class Signal2<T1, T2> {\n\tcallbacks: ((v1: T1, v2: T2) => void)[] = [];\n\n\tget length() { return this.callbacks.length; }\n\tclear() { this.callbacks = []; }\n\n\tpipeTo(other:Signal2<T1, T2>): Signal2Cancelable<T1, T2> {\n\t\treturn this.add((v1, v2) => other.dispatch(v1, v2));\n\t}\n\n\tadd(callback: (v1: T1, v2: T2) => void): Signal2Cancelable<T1, T2> {\n\t\tthis.callbacks.push(callback);\n\t\treturn new Signal2Cancelable(this, callback);\n\t}\n\n\tremove(callback: (v1: T1, v2: T2) => void) {\n        const index = this.callbacks.indexOf(callback);\n        if (index >= 0) {\n\t\t\tthis.callbacks.splice(index, 1);\n\t\t}\n\t}\n\n\tonce(callback: (v1: T1, v2: T2) => void): Signal2Cancelable<T1, T2> {\n        const once = (v1: T1, v2: T2) => {\n            this.remove(once);\n            callback(v1, v2);\n        };\n        this.add(once);\n\t\treturn new Signal2Cancelable(this, once);\n\t}\n\n\tdispatch(v1: T1, v2: T2) {\n\t\tthis.callbacks.forEach((callback) => {\n\t\t\tcallback(v1, v2);\n\t\t});\n\t}\n}\n\nexport class SignalPromise<T1, T2, T3, T4, T5> {\n\tcallbacks: ((v1?: T1, v2?: T2, v3?: T3, v4?: T4, v5?: T5) => Promise<any>)[] = [];\n\n\tget length() { return this.callbacks.length; }\n\tclear() { this.callbacks = []; }\n\n\tadd(callback: (v1?: T1, v2?: T2, v3?: T3, v4?: T4, v5?: T5) => Promise<any>) {\n\t\tthis.callbacks.push(callback);\n\t\treturn this;\n\t}\n\n\tdispatchAsync(v1?: T1, v2?: T2, v3?: T3, v4?: T4, v5?: T5) {\n        const promises: Promise<any>[] = [];\n        this.callbacks.forEach((callback) => {\n\t\t\tpromises.push(callback(v1, v2, v3, v4, v5));\n\t\t});\n\t\treturn Promise.all(promises)\n\t}\n}\n\nexport const enum LoggerLevel {\n    DEBUG = 0,\n    LOG = 1,\n    INFO = 2,\n    WARN = 3,\n    ERROR = 4\n}\n\nexport class Logger {\n\tconstructor(private policy: LoggerPolicies, private console: any, private name: string) {\n\t}\n\n\tnamed(name: string) {\n\t\treturn new Logger(this.policy, this.console, (`${this.name}.${name}`).replace(/^\\.+/, ''));\n\t}\n\n\t_log(type: string, level: LoggerLevel, args: any[]) {\n\t\tif (this.policy.canLog(this.name, level)) {\n\t\t\targs.unshift(this.name + ':');\n\t\t\tif (this.console[type]) this.console[type].apply(this.console, args);\n\t\t}\n\t}\n\n    trace(...args: any[]) { this._log('debug', LoggerLevel.DEBUG, args); }\n\tdebug(...args: any[]) { this._log('debug', LoggerLevel.DEBUG, args); }\n\tlog(...args: any[]) { this._log('log', LoggerLevel.LOG, args); }\n\tinfo(...args: any[]) { this._log('info', LoggerLevel.INFO, args); }\n\twarn(...args: any[]) { this._log('warn', LoggerLevel.WARN, args); }\n\terror(...args: any[]) { this._log('error', LoggerLevel.ERROR, args); }\n\n\tgroupCollapsed(...args: any[]) { this._log('groupCollapsed', 5, args); }\n\tgroupEnd(...args: any[]) { this._log('groupEnd', 5, args); }\n\n\tisEnabled(level: LoggerLevel): boolean { return loggerPolicies.canLog(this.name, level) }\n    get isTraceEnabled(): boolean { return this.isEnabled(LoggerLevel.DEBUG) }\n    get isDebugEnabled(): boolean { return this.isEnabled(LoggerLevel.DEBUG) }\n    get isLogEnabled(): boolean { return this.isEnabled(LoggerLevel.LOG) }\n    get isInfoEnabled(): boolean { return this.isEnabled(LoggerLevel.INFO) }\n    get isWarnEnabled(): boolean { return this.isEnabled(LoggerLevel.WARN) }\n    get isErrorEnabled(): boolean { return this.isEnabled(LoggerLevel.ERROR) }\n\n\tsetMinLoggerLevel(level: LoggerLevel) {\n\t    loggerPolicies.setNameMinLoggerLevel(this.name, level)\n    }\n}\n\nexport class LoggerPolicies {\n\tpublic disableAll: boolean = false;\n\tpublic minLogLevel: LoggerLevel = LoggerLevel.LOG;\n\tprivate namedLevels: StringDictionary<number> = {};\n\n\tsetNameMinLoggerLevel(name: string, level: LoggerLevel) {\n\t    this.namedLevels[name] = level\n    }\n\n\tcanLog(name: string, level: number) {\n\t\tif (this.disableAll) return false\n\t\tif (level < this.minLogLevel) return false\n\t\tif (name in this.namedLevels && level < this.namedLevels[name]) return false\n\t\treturn true;\n\t}\n}\n\nexport const loggerPolicies = new LoggerPolicies();\nexport const logger = new Logger(loggerPolicies, console, '');\n(window as any).loggerPolicies = loggerPolicies;\n(window as any).logger = logger;\n\n/*\ndeclare const executeCommandAsync: (code: string, args: ArrayBuffer[]) => PromiseFast<ArrayBuffer[]>;\n\nif (typeof window.document != 'undefined') {\n\tconst workers: Worker[] = [];\n\tconst workersJobs: number[] = [];\n\tconst lastRequestId: number = 0;\n\tconst resolvers: any = {};\n\t[0, 1].forEach((index: number) => {\n\t\tconst ww = workers[index] = new Worker('jspspemu.js');\n\t\tworkersJobs[index] = 0;\n\t\tconsole.log('created worker!');\n\t\tww.onmessage = function(event: any) {\n\t\t\tconst requestId = event.data.requestId;\n\t\t\tworkersJobs[index]--;\n\t\t\tresolvers[requestId](event.data.args);\n\t\t\tdelete resolvers[requestId];\n\t\t}\n\t});\n\n\texecuteCommandAsync = (code: string, args: ArrayBuffer[]) => {\n\t\treturn new PromiseFast<ArrayBuffer[]>((resolve, reject) => {\n\t\t\tconst requestId = lastRequestId++;\n\t\t\tresolvers[requestId] = resolve;\n\t\t\tif (workersJobs[0] <= workersJobs[1]) {\n\t\t\t\t//console.log('sent to worker0');\n\t\t\t\tworkersJobs[0]++;\n\t\t\t\tworkers[0].postMessage({ code: code, args: args, requestId: requestId }, args);\n\t\t\t} else {\n\t\t\t\t//console.log('sent to worker1');\n\t\t\t\tworkersJobs[1]++;\n\t\t\t\tworkers[1].postMessage({ code: code, args: args, requestId: requestId }, args);\n\t\t\t}\n\t\t});\n\t};\n} else {\n\t//console.log('inside worker!');\n\tthis.onmessage = function(event: any) {\n\t\tconst requestId = event.data.requestId;\n\t\tconst args = event.data.args;\n\t\ttry {\n\t\t\teval(event.data.code);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\targs = [];\n\t\t}\n\t\tthis.postMessage({ requestId: requestId, args: args }, args);\n\t}\n\n\texecuteCommandAsync = (code: string, args: ArrayBuffer[]) => {\n\t\treturn new PromiseFast<ArrayBuffer[]>((resolve, reject) => {\n\t\t\ttry {\n\t\t\t\teval(code);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\targs = [];\n\t\t\t}\n\t\t\tresolve(args);\n\t\t});\n\t};\n}\n\nfunction inflateRawArrayBufferAsync(data: ArrayBuffer): PromiseFast<ArrayBuffer> {\n\treturn inflateRawAsync(new Uint8Array(data)).thenFast(data => data.buffer);\n}\n\nfunction inflateRawAsync(data: Uint8Array): PromiseFast<Uint8Array> {\n\treturn executeCommandAsync(`\n\t\tconst zlib = require(\"src/format/zlib\");\n\t\targs[0] = ArrayBufferUtils.fromUInt8Array(zlib.inflate_raw(new Uint8Array(args[0])));\n\t`, [ArrayBufferUtils.fromUInt8Array(data)]).thenFast(function(args: ArrayBuffer[]) {\n\t\tif (args.length == 0) throw new Error(\"Can't decode\");\n\t\treturn new Uint8Array(args[0]);\n\t});\n}\n*/\n\nexport function numberToSeparator(value: number) {\n\treturn (+value).toLocaleString();\n}\n\nexport function numberToFileSize(value: number) {\n\tconst KB = 1024;\n\tconst MB = 1024 * KB;\n\tconst GB = 1024 * MB;\n\tconst TB = 1024 * GB;\n\tif (value >= GB * 0.5) return `${(value / GB).toFixed(2)} GB`;\n\tif (value >= MB * 0.5) return `${(value / MB).toFixed(2)} MB`;\n\tif (value >= KB * 0.5) return `${(value / KB).toFixed(2)} KB`;\n\treturn `${value} B`;\n}\n\nexport function addressToHex(address: number): string {\n\treturn `0x${addressToHex2(address)}`;\n}\n\nexport function addressToHex2(address: number) {\n\treturn (`00000000${(address >>> 0).toString(16)}`).substr(-8);\n}\n\nexport interface Thenable<T> {\n\tthen<Q>(resolved: (value: T) => Q, rejected: (error: Error) => void): Thenable<Q>;\n};\n\ndeclare global {\n    interface Promise<T> {\n        promise(): Promise<T>\n        thenFast<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n    }\n}\n\nPromise.prototype.promise = function() { return this }\nPromise.prototype.thenFast = Promise.prototype.then;\n\n// Note that this class is used since Promise.then is not executed immediately and that could lead to performance issues on critical paths\nexport class PromiseFast<T> implements Thenable<T>, PromiseLike<T> {\n    promise(): Promise<T> {\n        //console.warn(\"PromiseFast.promise\", this._solved)\n        if (this._promise) {\n            return this._promise\n        }\n        if (this._solved) {\n            if (this._rejectedValue) {\n                return Promise.reject(this._rejectedValue)\n            } else {\n                return Promise.resolve<T>(this._resolvedValue as any)\n            }\n        }\n        return new Promise<T>((resolve, reject) => {\n            this.thenFast(resolve, reject)\n        })\n    }\n\n    static delay<T>(timeoutMs: number, value: T): PromiseFast<T> {\n        return new PromiseFast<T>((resolve, _) => {\n            setTimeout(() => {\n                resolve(value)\n            },timeoutMs)\n        })\n    }\n\n\tstatic resolve<T>(value: PromiseFast<T>): PromiseFast<T>;\n\tstatic resolve<T>(value: T): PromiseFast<T>;\n\tstatic resolve(): PromiseFast<any>;\n\tstatic resolve<T>(value?: any): PromiseFast<T> {\n        if (value instanceof Promise) return PromiseFast.fromPromise(value)\n\t\tif (value instanceof PromiseFast) return value\n        const result = new PromiseFast<T>((resolve, _) => _)\n        result._promise = Promise.resolve(value)\n        result._solved = true\n        result._resolvedValue = value\n\t\treturn result\n\t}\n\tstatic reject(error: Error): PromiseFast<any> { return new PromiseFast((resolve, reject) => reject(error)); }\n\n\tstatic all(promises: PromiseFast<any>[]): PromiseFast<any> {\n\t\treturn new PromiseFast((resolve, reject) => {\n\t\t\tif (promises.length == 0) return resolve();\n            let total = promises.length;\n            const one = () => {\n\t\t\t\ttotal--;\n\t\t\t\tif (total <= 0) resolve();\n\t\t\t}\n            const oneError = (e: Error) => {\n                reject(e);\n            }\n            for (let p of promises) {\n\t\t\t\tif (p instanceof PromiseFast) {\n\t\t\t\t\tp.thenFast(one, oneError);\n\t\t\t\t} else {\n\t\t\t\t\tone();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic race(promises: PromiseFast<any>[]): PromiseFast<any> {\n\t\treturn new PromiseFast((resolve, reject) => {\n\t\t\tif (promises.length == 0) return resolve();\n\t\t\tfor (let p of promises) {\n\t\t\t\tif (p instanceof PromiseFast) {\n\t\t\t\t\tp.thenFast(resolve, reject);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n    static ensure(object: any): PromiseFast<any> {\n        if (object instanceof PromiseFast) return object\n\t    if (object instanceof Promise) return PromiseFast.fromPromise(object)\n        return PromiseFast.resolve(object)\n    }\n\n\tstatic isPromise(object: any): boolean {\n\t    return object instanceof Promise || object instanceof PromiseFast\n    }\n\n\tstatic fromPromise<T>(promise: Promise<T>): PromiseFast<T> {\n        // @ts-ignore\n\t    const promiseFast = this.fromThenable(promise)\n        promiseFast._promise = promise\n        return promiseFast\n    }\n\t\n\tstatic fromThenable<T>(thenable:Thenable<T>):PromiseFast<T> {\n\t\treturn new PromiseFast<T>((resolve, reject) => {\n\t\t\tthenable.then(v => resolve(v), error => reject(error));\n\t\t});\n\t}\n\n\tconstructor(callback: (resolve: (value?: T) => void, reject: (error: Error) => void) => void) {\n        // @ts-ignore\n\t\tcallback(this._resolve.bind(this), this._reject.bind(this));\n\t}\n\n\tprivate _promise?: Promise<T>\n\tprivate _resolvedValue: T|null = null;\n\tprivate _rejectedValue: Error|null = null;\n\tprivate _solved: boolean = false;\n\tprivate _resolvedCallbacks: any[] = [];\n\tprivate _rejectedCallbacks: any[] = [];\n\tprivate _rejectedPropagated = false;\n\n\tprivate _resolve(value: T) {\n\t\tif (this._solved) return;\n\t\tthis._resolvedValue = value;\n\t\tthis._solved = true;\n\t\tthis._queueCheck();\n\t}\n\n\tprivate _reject(error: Error) {\n\t\tif (this._solved) return;\n\t\tthis._rejectedValue = error;\n\t\tthis._solved = true;\n\t\tthis._queueCheck();\n\t}\n    then<Q>(resolved: (value: T) => PromiseFast<Q>, rejected?: (error: Error) => void): PromiseFast<Q>;\n    then<Q>(resolved: (value: T) => Q, rejected?: (error: Error) => void): PromiseFast<Q>;\n    then<Q>(resolved: (value: T) => PromiseFast<Q>, rejected?: (value: Error) => any): PromiseFast<Q> {\n        if (this._promise) {\n            return PromiseFast.ensure((this._promise as any).then(resolved, rejected))\n        }\n        return this.thenFast(resolved, rejected)\n    }\n\n\tthenFast<Q>(resolved: (value: T) => PromiseFast<Q>, rejected?: (error: Error) => void): PromiseFast<Q>;\n\tthenFast<Q>(resolved: (value: T) => Q, rejected?: (error: Error) => void): PromiseFast<Q>;\n\tthenFast<Q>(resolved: (value: T) => PromiseFast<Q>, rejected?: (value: Error) => any): PromiseFast<Q> {\n        const promise = new PromiseFast<any>((resolve, reject) => {\n\t\t\tif (resolved) {\n\t\t\t\tthis._resolvedCallbacks.push((a: any) => {\n\t\t\t\t\ttry {\n                        const result = resolved(a);\n\t\t\t\t\t\tif (result instanceof PromiseFast) {\n\t\t\t\t\t\t\tresult.thenFast(resolve, reject);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._resolvedCallbacks.push(resolve);\n\t\t\t}\n\n\t\t\tif (rejected) {\n\t\t\t\tthis._rejectedCallbacks.push((a: any) => {\n\t\t\t\t\ttry {\n                        const result = rejected(a);\n\t\t\t\t\t\tif (result instanceof PromiseFast) {\n\t\t\t\t\t\t\tresult.thenFast(resolve, reject);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._rejectedCallbacks.push(reject);\n\t\t\t}\n\t\t});\n\t\tthis._queueCheck();\n\t\treturn promise;\n\t}\n\n\tcatch(rejected: (error: Error) => void): PromiseFast<any>;\n\tcatch<Q>(rejected: (error: Error) => Q): PromiseFast<Q>;\n\tcatch<Q>(rejected: (error: Error) => PromiseFast<Q>): PromiseFast<Q>;\n\tcatch(rejected: (error: Error) => any): PromiseFast<any> {\n\t\treturn this.thenFast(null as any, rejected);\n\t}\n\n\tprivate _queueCheck() {\n\t\tMicrotask.queue(() => this._check());\n\t}\n\n\tprivate _check() {\n\t\tif (!this._solved) return;\n\t\tif (this._rejectedValue != null) {\n\t\t\twhile (this._rejectedCallbacks.length > 0) {\n\t\t\t\tthis._rejectedPropagated = true;\n\t\t\t\tthis._rejectedCallbacks.shift()(this._rejectedValue);\n\t\t\t}\n\t\t\tif (!this._rejectedPropagated) {\n\t\t\t\t//throw this._rejectedValue;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (this._resolvedCallbacks.length > 0) this._resolvedCallbacks.shift()(this._resolvedValue);\n\t\t}\n\t}\n}\n\nexport class DomHelp {\n\tconstructor(e:HTMLElement);\n\tconstructor(e:any);\n\tconstructor(public e:HTMLElement) {\n\t}\n\t\n\tprivate get e2() { return <Window><any>this.e; }\n\t\n\tstatic fromId(e:string) {\n\t\treturn new DomHelp(document.getElementById(e));\n\t}\n\n    // @ts-ignore\n\tmousedown(callback: (e:MouseEvent) => void) { return this.on('mousedown', callback); }\n    // @ts-ignore\n\tmouseup(callback: (e:MouseEvent) => void) { return this.on('mouseup', callback); }\n    // @ts-ignore\n\tmousemove(callback: (e:MouseEvent) => void) { return this.on('mousemove', callback); }\n\tclick(callback?: (e:MouseEvent) => void) {\n\t\tif (callback == null) this.e.click();\n        // @ts-ignore\n\t\treturn this.on('click', callback!);\n\t}\n\tshowToggle() {\n\t\tif (this.e.style.visibility == 'visible') {\n\t\t\tthis.hide();\n\t\t} else {\n\t\t\tthis.show();\n\t\t}\n\t}\n\t\n\thide() { if (this.e) this.e.style.visibility = 'hidden'; }\n\tshow() { if (this.e) this.e.style.visibility = 'visible'; }\n\t\n\tset width(value:number) { if (this.e) this.e.style.width =  value + 'px'; }\n\tset height(value:number) { if (this.e) this.e.style.height =  value + 'px'; }\n\tset top(value:number) { if (this.e) this.e.style.top =  value + 'px'; }\n\tset left(value:number) { if (this.e) this.e.style.left =  value + 'px'; }\n\tget position() { return { top: this.top, left: this.left }; }\n\tget size() { return { width: this.width, height: this.height }; }\n\t\n\tget width() { return this.e.offsetWidth || this.e2.innerWidth; }\n\tget height() { return this.e.offsetHeight || this.e2.innerHeight; }\n\tget top() { return this.e.offsetTop; }\n\tget left() { return this.e.offsetLeft; }\n\t\n\tget html() { return this.e ? this.e.innerHTML : ''; }\n\tset html(value:string) { if (this.e) this.e.innerHTML = value; }\n\t\n\tval() {\n\t\treturn this.e.innerText;\n\t}\n\t\n\tcss(key:string, value:any) {\n\t\t(<any>this.e.style)[key] = value;\n\t\treturn this;\n\t}\n\t\n\t//on(event:'mousedown', callback: (e:MouseEvent) => void):void;\n\ton(event:string, callback: (e:Event) => void):void {\n\t\tif (this.e) this.e.addEventListener(event, callback);\n\t}\n\t\n\tremoveClass(clazz:string) { if (this.e) this.e.className = this.e.className.replace(clazz, '');  }\n\taddClass(clazz:string) { if (this.e) this.e.className = `${this.e.className} ${clazz}`;  }\n\ttoggleClass(clazz:string, value:boolean) { if (value) this.addClass(clazz); else this.removeClass(clazz); }\n}\n\nexport class CpuBreakException extends Error {\n    constructor() {\n        super('CpuBreakException');\n    }\n\n    static is(v: any): boolean {\n        return v instanceof CpuBreakException\n    }\n}\n\nexport class InterruptBreakException extends Error {\n    constructor() {\n        super('InterruptBreakException');\n    }\n\n    static is(v: any): boolean {\n        return v instanceof InterruptBreakException\n    }\n}\n\nexport class ProgramExitException extends Error {\n    constructor(message: String) {\n        super(`ProgramExitException: ${message}`);\n    }\n\n    static is(v: any): boolean {\n        return v instanceof ProgramExitException\n    }\n}\n\nexport function throwWaitPromise<T>(promise:PromiseFast<T>) {\n    const error:any = new Error('WaitPromise');\n\t//const error:any = new Error('WaitPromise');\n\terror.promise = promise;\n\treturn error;\n}\n\nexport function isInsideWorker() {\n\treturn typeof (<any>window).document == 'undefined';\n}\n\nexport async function delay(ms: number) {\n    await new Promise<void>((resolve, _) => {\n        setTimeout(() => {\n            resolve()\n        }, ms)\n    })\n}\n\nexport function fields<T>() {\n    return new Proxy(\n        {},\n        {\n            get: function (_target, prop, _receiver) {\n                return prop;\n            },\n        }\n    ) as {\n        [P in keyof T]: P;\n    };\n};\n\n\n(<any>window).sprintf = sprintf;\n(<any>window).throwWaitPromise = throwWaitPromise;\n(<any>window).PromiseFast = PromiseFast;\n(<any>window).DomHelp = DomHelp;\n", "\uFEFFimport \"./window\"\nimport {Microtask, PromiseFast} from \"./utils\";\n\nexport interface StatInfo {\n\tsize: number;\n\tdate: Date;\n}\n\nexport function waitAsync(timems: number, retval?: any) {\n\treturn new PromiseFast((resolve, reject) => {\n\t\tsetTimeout(() => { resolve(retval) }, timems);\n\t});\n}\n\nexport function _downloadFileAsync(method: string, url: string, headers?: any) {\n\treturn new Promise<XMLHttpRequest>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.open(method, url, true);\n\t\trequest.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\t\tif (headers) {\n\t\t\tfor (const headerKey in headers) {\n\t\t\t\trequest.setRequestHeader(headerKey, headers[headerKey]);\n\t\t\t}\n\t\t}\n\t\trequest.responseType = \"arraybuffer\";\n\t\trequest.onerror = function (e:any) { reject(e['error']); };\n\t\trequest.onload = function (e) {\n\t\t\tif (request.status < 400) {\n\t\t\t\tresolve(request);\n\t\t\t} else {\n\t\t\t\treject(new Error(\"HTTP \" + request.status));\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\t});\n}\n\nexport function toArrayBuffer(buffer:any) {\n    const ab = new ArrayBuffer(buffer.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buffer.length; ++i) {\n        view[i] = buffer[i];\n    }\n    return ab;\n}\n\nconst isNodeJs = (typeof XMLHttpRequest === 'undefined')\n\nconst fs: any = isNodeJs ? eval('require')('fs') : null;\n\nexport async function downloadFileAsync(url: string, headers?: any): Promise<ArrayBuffer> {\n\tif (isNodeJs) {\n\t\treturn new Promise<ArrayBuffer>((resolve, reject) => {\n\t\t\tfs.readFile(url, (err:any, data:any) => {\n\t\t\t  if (err) {\n\t\t\t\t  reject(err);\n\t\t\t  } else {\n\t\t\t\t  resolve(toArrayBuffer(data));\n\t\t\t  }\n\t\t\t});\n\t\t});\n\t} else {\n\t\tconst request = await _downloadFileAsync('GET', url, headers)\n        return request.response;\n\t}\n}\n\nexport function downloadFileChunkAsync(url: string, from: number, count?: number) {\n    let rangeString: string\n\n    if (count !== undefined) {\n        const to = (from + count) - 1;\n        rangeString = `bytes=${from}-${to}`\n    } else {\n        rangeString = `bytes=${from}-`\n    }\n    return downloadFileAsync(url, {\n\t\t'Range': rangeString\n\t});\n}\n\nexport async function statFileAsync(url: string): Promise<{size: number, date: Date}> {\n    if (isNodeJs) {\n        return new PromiseFast((resolve, reject) => {\n            fs.stat(url, (err: any, stats: any) => {\n                if (err) {\n                    reject(new Error(`File not found: '${url}'`))\n                } else if (stats.isDirectory()) {\n                    reject(new Error(`File is a directory: '${url}'`))\n                } else {\n                    resolve({size: stats.size, date: stats.mtime})\n                }\n            });\n        })\n    } else {\n        const request = await _downloadFileAsync('HEAD', url)\n        //console.error('content-type', request.getResponseHeader('content-type'));\n        //console.log(request.getAllResponseHeaders());\n\n        const size = parseInt(request.getResponseHeader('content-length') ?? '0');\n        const date = new Date(Date.parse(request.getResponseHeader('last-modified') ?? ''));\n\n        return {size: size, date: date};\n    }\n}\n\n/*\nexport function storePersistentKeyAsync(name:string, value:any) {\n}\n*/", "\uFEFF// Code from: http://docs.closure-library.googlecode.com/git/local_closure_goog_math_long.js.source.html\nimport {BitUtils} from \"./math\";\nimport \"./window\"\n\nexport class Integer64 {\n\tprivate _low: number;\n\tprivate _high: number;\n\n\tstatic ZERO = Integer64.fromInt(0);\n\tstatic ONE = Integer64.fromInt(1);\n\tstatic MIN_VALUE = Integer64.fromBits(0, 0x80000000 | 0);\n\tstatic MAX_VALUE = Integer64.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\tprivate static _TWO_PWR_16_DBL = Math.pow(2, 16);\n\tprivate static _TWO_PWR_23_DBL = Math.pow(2, 23);\n\tprivate static _TWO_PWR_24_DBL = Math.pow(2, 24);\n\tprivate static _TWO_PWR_32_DBL = Math.pow(2, 32);\n\tprivate static _TWO_PWR_63_DBL = Math.pow(2, 63);\n\n\tprivate static _TWO_PWR_24 = Integer64.fromInt(1 << 24);\n\n\tconstructor(low: number, high: number) {\n\t\tthis._low = low | 0;\n\t\tthis._high = high | 0;\n\t}\n\n\tstatic fromInt(value: number): Integer64 {\n\t\treturn new Integer64(value | 0, value < 0 ? -1 : 0);\n\t}\n\n\tstatic fromUnsignedInt(value: number): Integer64 {\n\t\treturn new Integer64(value | 0, 0);\n\t}\n\n\tstatic fromBits(low: number, high: number): Integer64 {\n\t\treturn new Integer64(low, high);\n\t}\n\n\tstatic fromNumber(value: number): Integer64 {\n\t\tif (isNaN(value) || !isFinite(value)) {\n\t\t\treturn Integer64.ZERO;\n\t\t} else if (value <= -Integer64._TWO_PWR_63_DBL) {\n\t\t\treturn Integer64.MIN_VALUE;\n\t\t} else if (value + 1 >= Integer64._TWO_PWR_63_DBL) {\n\t\t\treturn Integer64.MAX_VALUE;\n\t\t} else if (value < 0) {\n\t\t\treturn Integer64.fromNumber(-value).negate();\n\t\t} else {\n\t\t\treturn new Integer64((value % Integer64._TWO_PWR_32_DBL) | 0, (value / Integer64._TWO_PWR_32_DBL) | 0);\n\t\t}\n\t}\n\n\tget low() { return this._low; }\n\tget lowUnsigned() { return (this._low >= 0) ? (this._low) : (Integer64._TWO_PWR_32_DBL + this._low); }\n\tget high() { return this._high; }\n\n\tget number() {\n\t\treturn this._high * Integer64._TWO_PWR_32_DBL + this.lowUnsigned;\n\t}\n\n\tgetNumber() {\n\t\treturn this._high * Integer64._TWO_PWR_32_DBL + this.lowUnsigned;\n\t}\n\n\tequals(other: Integer64) {\n\t\treturn (this._high == other._high) && (this._low == other._low);\n\t}\n\n\tnegate(): Integer64 {\n\t\tif (this.equals(Integer64.MIN_VALUE)) return Integer64.MIN_VALUE;\n\t\treturn this.not().add(Integer64.ONE);\n\t}\n\n\tnot(): Integer64 {\n\t\treturn Integer64.fromBits(~this._low, ~this._high);\n\t}\n\n\tisZero() {\n\t\treturn this._high == 0 && this._low == 0;\n\t}\n\n\tisNegative() {\n\t\treturn this._high < 0;\n\t}\n\n\tisOdd() {\n\t\treturn (this._low & 1) == 1;\n\t}\n\n\tsub(other: Integer64): Integer64 {\n\t\treturn this.add(other.negate());\n\t}\n\n\tadd(other: Integer64): Integer64 {\n        const a48 = this._high >>> 16;\n        const a32 = this._high & 0xFFFF;\n        const a16 = this._low >>> 16;\n        const a00 = this._low & 0xFFFF;\n\n        const b48 = other._high >>> 16;\n        const b32 = other._high & 0xFFFF;\n        const b16 = other._low >>> 16;\n        const b00 = other._low & 0xFFFF;\n\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n\t\tc16 += c00 >>> 16;\n\t\tc00 &= 0xFFFF;\n\t\tc16 += a16 + b16;\n\t\tc32 += c16 >>> 16;\n\t\tc16 &= 0xFFFF;\n\t\tc32 += a32 + b32;\n\t\tc48 += c32 >>> 16;\n\t\tc32 &= 0xFFFF;\n\t\tc48 += a48 + b48;\n\t\tc48 &= 0xFFFF;\n\t\treturn Integer64.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n\t}\n\n\tlessThan(other: Integer64) {\n\t\treturn this.compare(other) < 0;\n\t}\n\n\tcompare(other:Integer64) {\n\t\tif (this.equals(other)) {\n\t\t\treturn 0;\n\t\t}\n\n        const thisNeg = this.isNegative();\n        const otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (!thisNeg && otherNeg) {\n\t\t\treturn 1;\n\t\t}\n\n\t\t// at this point, the signs are the same, so subtraction will not overflow\n\t\tif (this.sub(other).isNegative()) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\tisLowEnoughForMul() {\n\t\tif (this._high == 0 && (this._low >>> 0) < Integer64._TWO_PWR_23_DBL) return true;\n\t\tif (this._high == -1 && ((-this._low) >>> 0) < Integer64._TWO_PWR_23_DBL) return true;\n\t\treturn false;\n\t}\n\n\tmultiply(other: Integer64):Integer64 {\n\t\tif (this.isZero()) return Integer64.ZERO;\n\t\tif (other.isZero()) return Integer64.ZERO;\n\n\t\tif (this.isLowEnoughForMul() && other.isLowEnoughForMul()) {\n\t\t\treturn Integer64.fromNumber(this.getNumber() * other.getNumber());\n\t\t}\n\n\t\tif (this.equals(Integer64.MIN_VALUE)) return other.isOdd() ? Integer64.MIN_VALUE : Integer64.ZERO;\n\t\tif (other.equals(Integer64.MIN_VALUE)) return this.isOdd() ? Integer64.MIN_VALUE : Integer64.ZERO;\n\n\t\tif (this.isNegative()) {\n\t\t\tif (other.isNegative()) return this.negate().multiply(other.negate());\n\t\t\treturn this.negate().multiply(other).negate();\n\t\t}\n\t\tif (other.isNegative()) return this.multiply(other.negate()).negate();\n\n        const a48 = this._high >>> 16;\n        const a32 = this._high & 0xFFFF;\n        const a16 = this._low >>> 16;\n        const a00 = this._low & 0xFFFF;\n\n        const b48 = other._high >>> 16;\n        const b32 = other._high & 0xFFFF;\n        const b16 = other._low >>> 16;\n        const b00 = other._low & 0xFFFF;\n\n        let c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n\t\tc16 += c00 >>> 16;\n\t\tc00 &= 0xFFFF;\n\t\tc16 += a16 * b00;\n\t\tc32 += c16 >>> 16;\n\t\tc16 &= 0xFFFF;\n\t\tc16 += a00 * b16;\n\t\tc32 += c16 >>> 16;\n\t\tc16 &= 0xFFFF;\n\t\tc32 += a32 * b00;\n\t\tc48 += c32 >>> 16;\n\t\tc32 &= 0xFFFF;\n\t\tc32 += a16 * b16;\n\t\tc48 += c32 >>> 16;\n\t\tc32 &= 0xFFFF;\n\t\tc32 += a00 * b32;\n\t\tc48 += c32 >>> 16;\n\t\tc32 &= 0xFFFF;\n\t\tc48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n\t\tc48 &= 0xFFFF;\n\t\treturn Integer64.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n\t}\n}\n\n// @TODO: This is required for the CPU dynamic recompilation\n(window as any).Integer64 = Integer64;\n", "\uFEFFimport \"./window\"\nimport \"./utils\"\nimport {Endian, PromiseFast, PromiseUtils, Utf8} from \"./utils\";\nimport {IType} from \"./struct\";\nimport {downloadFileAsync, downloadFileChunkAsync, statFileAsync, StatInfo} from \"./async\";\nimport {Integer64} from \"./int64\";\n\nexport interface AsyncStream {\n\tname: string\n\tdate: Date\n\tsize: number\n\treadChunkAsync(offset: number, count: number): PromiseFast<ArrayBuffer>\n    readChunkPromiseAsync(offset: number, count: number): Promise<ArrayBuffer>\n}\n\nexport abstract class BaseAsyncStream implements AsyncStream{\n    abstract date: Date;\n    abstract name: string;\n    abstract size: number;\n\n    readChunkAsync(offset: number, count: number): PromiseFast<ArrayBuffer> {\n        return PromiseFast.ensure(this.readChunkPromiseAsync(offset, count))\n    }\n    abstract readChunkPromiseAsync(offset: number, count: number): Promise<ArrayBuffer>\n}\n\nexport class ProxyAsyncStream extends BaseAsyncStream {\n\tconstructor(public stream: AsyncStream) {\n\t    super()\n\t}\n\n\tget name() { return this.stream.name; }\n\tget date() { return this.stream.date; }\n\tget size() { return this.stream.size; }\n\treadChunkPromiseAsync(offset: number, count: number) { return this.stream.readChunkPromiseAsync(offset, count); }\n}\n\nexport class BufferedAsyncStream extends ProxyAsyncStream {\n\tconstructor(stream: AsyncStream, public bufferSize = 131072) {\n\t\tsuper(stream);\n\t}\n\n\tget name() { return this.stream.name + '+buffered'; }\n\n\tprivate cache = { start: 0, end: 0, data: new ArrayBuffer(0) };\n\n\tgetCachedEntry(start: number, end: number) {\n\t\tif (start >= this.cache.start && end <= this.cache.end) {\n\t\t\treturn this.cache;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tputCacheEntry(start: number, data: ArrayBuffer) {\n\t\tthis.cache.start = start;\n\t\tthis.cache.end = start + data.byteLength;\n\t\tthis.cache.data = data;\n\t}\n\n\tasync readChunkPromiseAsync(offset: number, count: number):Promise<ArrayBuffer> {\n        const availableFromOffset = this.size - offset;\n        const start = offset;\n        let end = offset + count;\n\n        const cache = this.getCachedEntry(start, end);\n\n        //return this.stream.readChunkAsync(start, count);\n\n\t\tif (cache) {\n\t\t    //console.log(\"CACHE HIT\")\n\t\t\treturn cache.data.slice(start - cache.start, end - cache.start)\n\t\t} else {\n            let bigCount = Math.max(count, this.bufferSize);\n            bigCount = Math.min(bigCount, availableFromOffset);\n\n\t\t\tend = start + bigCount;\n\n\t\t\tconst data = await this.stream.readChunkAsync(offset, bigCount)\n            this.putCacheEntry(start, data);\n            return this.readChunkPromiseAsync(offset, count);\n\t\t}\n    }\n}\n\nexport class MemoryAsyncStream extends BaseAsyncStream {\n\tconstructor(private data: ArrayBuffer, public name = 'memory', public date = new Date()) {\n        super()\n\t}\n\n\tstatic fromArrayBuffer(data: ArrayBuffer): MemoryAsyncStream {\n\t\treturn new MemoryAsyncStream(data);\n\t}\n\n\tget size() { return this.data.byteLength; }\n\n    async readChunkPromiseAsync(offset: number, count: number) {\n        return this.data.slice(offset, offset + count)\n    }\n}\n\nexport class DelayedAsyncStream extends BaseAsyncStream {\n    get name() { return `delayed-${this.parent.name}` }\n\n    constructor(public parent: AsyncStream, public timeoutMs: number = 100, public date = new Date()) {\n        super()\n    }\n\n    get size() { return this.parent.size; }\n\n    async readChunkPromiseAsync(offset: number, count: number) {\n        const value = await this.parent.readChunkPromiseAsync(offset, count)\n        await PromiseUtils.delayAsync(this.timeoutMs)\n        return value\n    }\n}\n\nexport class UrlAsyncStream extends BaseAsyncStream {\n\tname: string;\n\tdate: Date;\n\n\tconstructor(private url: string, public stat: StatInfo) {\n        super()\n\t\tthis.name = url;\n\t\tthis.date = stat.date;\n\t}\n\n\tstatic async fromUrlAsync(url: string): Promise<AsyncStream> {\n\t\tconsole.info('open ', url);\n\t\tconst stat = await statFileAsync(url)\n        console.info('fromUrlAsync', stat);\n\n        if (stat.size == 0) {\n            console.error(\"Invalid file with size '\" + stat.size + \"'\", stat);\n            throw (new Error(\"Invalid file with size '\" + stat.size + \"'\"));\n        }\n\n        // If file is less  than 5MB, then download it completely\n        if (stat.size < 5 * 1024 * 1024) {\n            const data = await downloadFileAsync(url)\n            return MemoryAsyncStream.fromArrayBuffer(data)\n        } else {\n            return new BufferedAsyncStream(new UrlAsyncStream(url, stat));\n        }\n\t}\n\n\tget size() { return this.stat.size; }\n\n\tasync readChunkPromiseAsync(offset: number, count: number) {\n\t\t//console.error();\n\t\tconsole.info('download chunk', this.url, `${offset}-${offset + count}`, '(' + count + ')');\n\t\treturn downloadFileChunkAsync(this.url, offset, count);\n    }\n}\n\nexport class FileAsyncStream extends BaseAsyncStream {\n\tdate: Date;\n\n\tconstructor(private file: File) {\n        super()\n\t\tthis.date = (file as any).lastModifiedDate;\n\t}\n\n\tget name() { return this.file.name; }\n\tget size() { return this.file.size; }\n\n\treadChunkPromiseAsync(offset: number, count: number) {\n\t    //console.log(\"FileAsyncStream.readChunkAsync\", offset, count)\n\t\treturn new Promise<ArrayBuffer>((resolve, reject) => {\n            const fileReader = new FileReader();\n            fileReader.onload = (e) => { resolve((fileReader as any).result); };\n\t\t\tfileReader.onerror = (e:any) => { reject(e['error']); };\n\t\t\tfileReader.readAsArrayBuffer(this.file.slice(offset, offset + count));\n\t\t})\n\t}\n}\n\nexport class Stream {\n\tstatic INVALID = Stream.fromArray([]);\n\n\tconstructor(protected data: DataView, protected offset: number = 0) {\n\t}\n\n\tstatic fromArrayBuffer(data: ArrayBuffer) {\n\t\treturn new Stream(new DataView(data));\n\t}\n\n\tstatic fromDataView(data: DataView, offset: number = 0) {\n\t\treturn new Stream(data);\n\t}\n\n\tstatic fromBase64(data: string) {\n        const outstr = atob(data);\n        const out = new ArrayBuffer(outstr.length);\n        const ia = new Uint8Array(out);\n        for (let n = 0; n < outstr.length; n++) ia[n] = outstr.charCodeAt(n);\n\t\treturn new Stream(new DataView(out));\n\t}\n\n\tstatic fromUint8Array(array: Uint8Array) {\n\t\treturn Stream.fromArray(<any>array);\n\t}\n\n\tstatic fromSize(size: number) {\n\t\treturn Stream.fromUint8Array(new Uint8Array(size))\n\t}\n\n\tstatic fromArray(array: any[]) {\n        const buffer = new ArrayBuffer(array.length);\n        const w8 = new Uint8Array(buffer);\n        for (let n = 0; n < array.length; n++) w8[n] = array[n];\n\t\treturn new Stream(new DataView(buffer));\n\t}\n\n\ttoImageUrl(): string {\n\t\ttry {\n            const urlCreator = (<any>window)['URL'] || (<any>window)['webkitURL'];\n            const blob = new Blob([this.toUInt8Array()], {type: \"image/jpeg\"});\n            return urlCreator.createObjectURL(blob);\n\t\t} catch (e) {\n\t\t\treturn `data:image/png;base64,${this.toBase64()}`;\n\t\t}\n\t}\n\n\ttoBase64() {\n        let out = '';\n        const array = this.toUInt8Array();\n        for (let n = 0; n < array.length; n++) {\n\t\t\tout += String.fromCharCode(array[n]);\n\t\t}\n\t\treturn btoa(out);\n\t}\n\n\ttoStringAll() {\n\t\treturn this.sliceWithLength(0).readString(this.length);\n\t}\n\n\ttoUInt8Array() {\n\t\treturn new Uint8Array(this.toArrayBuffer());\n\t}\n\n\ttoArrayBuffer() {\n\n\t\treturn this.data.buffer.slice(this.data.byteOffset, this.data.byteOffset + this.data.byteLength);\n\t}\n\n\tclone() {\n\t\treturn this.sliceWithLowHigh(this.position, this.length);\n\t}\n\n\tslice() {\n\t\treturn this.clone();\n\t}\n\n\tsliceFrom(low: number) {\n\t\treturn this.sliceWithLength(low);\n\t}\n\n\tsliceWithLength(low: number, count?: number) {\n\t\tif (count === undefined) count = this.length - low;\n\t\treturn new Stream(new DataView(this.data.buffer, this.data.byteOffset + low, count));\n\t}\n\n\tsliceWithLowHigh(low: number, high: number) {\n\t\treturn new Stream(new DataView(this.data.buffer, this.data.byteOffset + low, high - low));\n\t}\n\n\tget available() {\n\t\treturn this.length - this.offset;\n\t}\n\n\tget length() {\n\t\treturn this.data.byteLength;\n\t}\n\n\tset position(value: number) {\n\t\tthis.offset = value;\n\t}\n\n\tget isNull() {\n\t    return this.offset == 0\n    }\n\n\tget position() {\n\t\treturn this.offset;\n\t}\n\n    skipThis(count: number) {\n        this.offset += count;\n        return this\n    }\n\n\tskip<T>(count: number, pass?: T): T {\n\t\tthis.offset += count;\n\t\treturn pass as T\n\t}\n\n\tset(index: number, value: number) {\n\t\tthis.data.setInt8(index, value);\n\t\treturn this;\n\t}\n\n\tget (index: number) {\n\t\treturn this.data.getUint8(index);\n\t}\n\n    readInt8LE() { return this.readInt8(Endian.LITTLE) }\n    readInt16LE() { return this.readInt16(Endian.LITTLE) }\n    readInt32LE() { return this.readInt32(Endian.LITTLE) }\n    readInt64LE() { return this.readInt64(Endian.LITTLE) }\n    readFloat32LE() { return this.readFloat32(Endian.LITTLE) }\n    readUInt8LE() { return this.readUInt8(Endian.LITTLE) }\n    readUInt16LE() { return this.readUInt16(Endian.LITTLE) }\n    readUInt32LE() { return this.readUInt32(Endian.LITTLE) }\n\n    readInt8BE() { return this.readInt8(Endian.BIG) }\n    readInt16BE() { return this.readInt16(Endian.BIG) }\n    readInt32BE() { return this.readInt32(Endian.BIG) }\n    readInt64BE() { return this.readInt64(Endian.BIG) }\n    readFloat32BE() { return this.readFloat32(Endian.BIG) }\n    readUInt8BE() { return this.readUInt8(Endian.BIG) }\n    readUInt16BE() { return this.readUInt16(Endian.BIG) }\n    readUInt32BE() { return this.readUInt32(Endian.BIG) }\n\n\treadInt8(endian: Endian = Endian.LITTLE) { return this.skip(1, this.data.getInt8(this.offset)); }\n\treadInt16(endian: Endian = Endian.LITTLE) { return this.skip(2, this.data.getInt16(this.offset, (endian == Endian.LITTLE))); }\n\treadInt32(endian: Endian = Endian.LITTLE) { return this.skip(4, this.data.getInt32(this.offset, (endian == Endian.LITTLE))); }\n\treadInt64(endian: Endian = Endian.LITTLE) {\n        const items = [this.readUInt32(endian), this.readUInt32(endian)];\n        const low = items[(endian == Endian.LITTLE) ? 0 : 1];\n        const high = items[(endian == Endian.LITTLE) ? 1 : 0];\n        return Integer64.fromBits(low, high);\n\t}\n\treadFloat32(endian: Endian = Endian.LITTLE) { return this.skip(4, this.data.getFloat32(this.offset, (endian == Endian.LITTLE))); }\n\n\treadUInt8(endian: Endian = Endian.LITTLE) { return this.skip(1, this.data.getUint8(this.offset)); }\n\treadUInt16(endian: Endian = Endian.LITTLE) { return this.skip(2, this.data.getUint16(this.offset, (endian == Endian.LITTLE))); }\n\treadUInt32(endian: Endian = Endian.LITTLE) { return this.skip(4, this.data.getUint32(this.offset, (endian == Endian.LITTLE))); }\n\n\treadStruct<T>(struct: IType<T>) {\n\t\treturn <T><any>struct.read(this);\n\t}\n\n\tcopyTo(other: Stream) {\n\t\tother.writeBytes(this.readBytes(this.available));\n\t}\n\n\twriteByteRepeated(value: number, count: number = -1) {\n\t\tlet n;\n        if (count < 0) count = this.available;\n\t\tfor (n = 0; n < count; n++) this.data.setInt8(this.offset + n, value);\n\t\tthis.skip(n);\n\t\treturn this;\n\t}\n\n    writeInt8LE(value: number) { return this.writeInt8(value, Endian.LITTLE) }\n    writeInt16LE(value: number) { return this.writeInt16(value, Endian.LITTLE) }\n    writeInt32LE(value: number) { return this.writeInt32(value, Endian.LITTLE) }\n    writeInt64LE(value: Integer64) { return this.writeInt64(value, Endian.LITTLE) }\n    writeFloat32LE(value: number) { return this.writeFloat32(value, Endian.LITTLE) }\n    writeUInt8LE(value: number) { return this.writeUInt8(value, Endian.LITTLE) }\n    writeUInt16LE(value: number) { return this.writeUInt16(value, Endian.LITTLE) }\n    writeUInt32LE(value: number) { return this.writeUInt32(value, Endian.LITTLE) }\n    writeUInt64LE(value: Integer64) { return this.writeUInt64(value, Endian.LITTLE) }\n\n    writeInt8BE(value: number) { return this.writeInt8(value, Endian.BIG) }\n    writeInt16BE(value: number) { return this.writeInt16(value, Endian.BIG) }\n    writeInt32BE(value: number) { return this.writeInt32(value, Endian.BIG) }\n    writeInt64BE(value: Integer64) { return this.writeInt64(value, Endian.BIG) }\n    writeFloat32BE(value: number) { return this.writeFloat32(value, Endian.BIG) }\n    writeUInt8BE(value: number) { return this.writeUInt8(value, Endian.BIG) }\n    writeUInt16BE(value: number) { return this.writeUInt16(value, Endian.BIG) }\n    writeUInt32BE(value: number) { return this.writeUInt32(value, Endian.BIG) }\n    writeUInt64BE(value: Integer64) { return this.writeUInt64(value, Endian.BIG) }\n\n\twriteInt8(value: number, endian: Endian = Endian.LITTLE) { this.ensure(1); this.data.setInt8(this.offset, value); return this.skip(1, this); }\n\twriteInt16(value: number, endian: Endian = Endian.LITTLE) { this.ensure(2); this.data.setInt16(this.offset, value, (endian == Endian.LITTLE)); return this.skip(2, this); }\n\twriteInt32(value: number, endian: Endian = Endian.LITTLE) { this.ensure(4); this.data.setInt32(this.offset, value, (endian == Endian.LITTLE)); return this.skip(4, this); }\n\twriteInt64(value: Integer64, endian: Endian = Endian.LITTLE) { this.ensure(8); return this._writeUInt64(value, endian); }\n\twriteFloat32(value: number, endian: Endian = Endian.LITTLE) { this.ensure(4); this.data.setFloat32(this.offset, value, (endian == Endian.LITTLE)); return this.skip(4, this); }\n\twriteUInt8(value: number, endian: Endian = Endian.LITTLE) { this.ensure(1); this.data.setUint8(this.offset, value); return this.skip(1, this); }\n\twriteUInt16(value: number, endian: Endian = Endian.LITTLE) { this.ensure(2); this.data.setUint16(this.offset, value, (endian == Endian.LITTLE)); return this.skip(2, this); }\n\twriteUInt32(value: number, endian: Endian = Endian.LITTLE) { this.ensure(4); this.data.setUint32(this.offset, value, (endian == Endian.LITTLE)); return this.skip(4, this); }\n\twriteUInt64(value: Integer64, endian: Endian = Endian.LITTLE) { this.ensure(8); return this._writeUInt64(value, endian); }\n\n\tprivate _writeUInt64(value: Integer64, endian: Endian = Endian.LITTLE) {\n\t\tthis.writeUInt32((endian == Endian.LITTLE) ? value.low : value.high, endian);\n\t\tthis.writeUInt32((endian == Endian.LITTLE) ? value.high : value.low, endian);\n\t\treturn this;\n\t}\n\n\twriteStruct<T>(struct: IType<T>, value: T) {\n\t\tstruct.write(this, value);\n\t}\n\n\twriteStream(stream: Stream) {\n\t\treturn this.writeBytes(stream.slice().readBytes(stream.available));\n\t}\n\n\twriteString(str: string) {\n\t\ttry {\n\t\t\tstr.split('').forEach(char => {\n\t\t\t\tthis.writeUInt8(char.charCodeAt(0));\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Can't write string '\" + str + \"'\");\n\t\t\tdebugger;\n\t\t\tconsole.warn(this.data);\n\t\t\tconsole.error(e);\n\t\t\tthrow (e);\n\t\t}\n\t}\n\n\twriteStringz(str: string) {\n\t\treturn this.writeString(str + String.fromCharCode(0));\n\t}\n\n    ensure(count: number) {\n\t    if (count > this.available) {\n\t        throw new Error(\"Trying to write outside\")\n        }\n    }\n\n\twriteBytes(data: Uint8Array) {\n\t    this.ensure(data.length)\n        const out = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\n        out.set(data, this.offset);\n\t\tthis.skip(data.length);\n\t}\n\n\treadBytes(count: number):Uint8Array {\n\t\treturn this.skip(count, new Uint8Array(this.data.buffer, this.data.byteOffset + this.offset, count));\n\t}\n\n    readBytesCloned(count: number):Uint8Array {\n\t    const inp = this.readBytes(count)\n        const out = new Uint8Array(inp.length)\n        out.set(inp)\n        return out\n    }\n\n\treadAllBytes():Uint8Array {\n\t\treturn this.readBytes(this.available);\n\t}\n\n\treadInt16Array(count: number) {\n\t\treturn this.skip(count, new Int16Array(this.data.buffer, this.data.byteOffset + this.offset, count));\n\t}\n\n\treadFloat32Array(count: number) {\n\t\treturn new Float32Array(this.readBytes(count));\n\t}\n\n\treadStream(count: number) {\n\t\treturn Stream.fromUint8Array(this.readBytes(count));\n\t}\n\n\treadUtf8String(count: number) {\n\t\treturn Utf8.decode(this.readString(count));\n\t}\n\n\treadString(count: number) {\n\t\tif (count > 1 * 1024 * 1024) throw(new Error(\"Trying to read a string larger than 128KB\"));\n        let str = '';\n        for (let n = 0; n < count; n++) {\n\t\t\tstr += String.fromCharCode(this.readUInt8());\n\t\t}\n\t\treturn str;\n\t}\n\n\treadUtf8Stringz(maxCount: number = 131072) {\n\t\treturn Utf8.decode(this.readStringz(maxCount));\n\t}\n\n\treadStringz(maxCount: number = 131072) {\n        let str = '';\n        for (let n = 0; n < maxCount; n++) {\n\t\t\tif (this.available <= 0) break;\n            const char = this.readUInt8();\n            if (char == 0) break;\n\t\t\tstr += String.fromCharCode(char);\n\t\t}\n\t\treturn str;\n\t}\n}\n\nexport class GrowableStream extends Stream {\n    constructor(data: DataView = new DataView(new ArrayBuffer(7)), offset: number = 0) {\n        super(data, offset);\n    }\n\n    ensure(count: number) {\n        if (count > this.available) {\n            const newBuffer = new ArrayBuffer((this.length + 7) * 2)\n            const newData = new DataView(newBuffer, this.data.byteOffset, newBuffer.byteLength - this.data.byteOffset)\n            new Uint8Array(newBuffer).set(new Uint8Array(this.data.buffer, this.data.byteOffset))\n            this.data = newData\n        }\n    }\n\n    toByteArray() {\n        return new Uint8Array(this.data.buffer, this.data.byteOffset, this.position)\n    }\n}\n", "\uFEFFimport \"./window\"\nimport \"./utils\"\nimport \"./stream\"\nimport {Endian, PromiseFast, Utf8} from \"./utils\";\nimport {Stream} from \"./stream\";\nimport {Integer64} from \"./int64\";\n\nexport interface IType<T> {\n\tread(stream: Stream, context?: any): T;\n\twrite(stream: Stream, value: T, context?: any): void;\n\tlength: number;\n}\n\nexport interface StructEntry {\n\t[name: string]: IType<any>;\n}\n\nexport class Int64Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): number {\n\t    let low: number\n        let high: number\n\t\tif (this.endian == Endian.LITTLE) {\n\t\t\tlow = stream.readUInt32(this.endian);\n\t\t\thigh = stream.readUInt32(this.endian);\n\t\t} else {\n\t\t\thigh = stream.readUInt32(this.endian);\n\t\t\tlow = stream.readUInt32(this.endian);\n\t\t}\n\t\treturn high * Math.pow(2, 32) + low;\n\t}\n\twrite(stream: Stream, value: number): void {\n        const low = Math.floor(value % Math.pow(2, 32));\n        const high = Math.floor(value / Math.pow(2, 32));\n        if (this.endian == Endian.LITTLE) {\n\t\t\tstream.writeInt32(low, this.endian);\n\t\t\tstream.writeInt32(high, this.endian);\n\t\t} else {\n\t\t\tstream.writeInt32(high, this.endian);\n\t\t\tstream.writeInt32(low, this.endian);\n\t\t}\n\t}\n\tget length() { return 8; }\n}\n\nexport class Integer64Type implements IType<Integer64> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): Integer64 {\n\t\tlet high;\n        let low;\n        if (this.endian == Endian.LITTLE) {\n\t\t\tlow = stream.readUInt32(this.endian);\n\t\t\thigh = stream.readUInt32(this.endian);\n\t\t} else {\n            high = stream.readUInt32(this.endian);\n            low = stream.readUInt32(this.endian);\n        }\n\t\treturn new Integer64(low, high);\n\t}\n\twrite(stream: Stream, value: Integer64): void {\n        const low = value.low;\n        const high = value.high;\n        if (this.endian == Endian.LITTLE) {\n\t\t\tstream.writeInt32(low, this.endian);\n\t\t\tstream.writeInt32(high, this.endian);\n\t\t} else {\n\t\t\tstream.writeInt32(high, this.endian);\n\t\t\tstream.writeInt32(low, this.endian);\n\t\t}\n\t}\n\tget length() { return 8; }\n}\n\nexport class Int32Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\tread(stream: Stream): number { return stream.readInt32(this.endian); }\n\twrite(stream: Stream, value: number): void { stream.writeInt32(value, this.endian); }\n\tget length() { return 4; }\n}\n\nexport class Int16Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): any { return stream.readInt16(this.endian); }\n\twrite(stream: Stream, value: any): void { stream.writeInt16(value, this.endian); }\n\tget length() { return 2; }\n}\n\nexport class Int8Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): any { return stream.readInt8(this.endian); }\n\twrite(stream: Stream, value: any): void { stream.writeInt8(value, this.endian); }\n\tget length() { return 1; }\n}\n\nexport class UInt32Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): any { return stream.readUInt32(this.endian); }\n\twrite(stream: Stream, value: any): void { stream.writeUInt32(value, this.endian); }\n\tget length() { return 4; }\n}\n\nexport class PtrType implements IType<number> {\n    read(stream: Stream): any { return stream.readUInt32LE(); }\n    write(stream: Stream, value: any): void { stream.writeUInt32LE(value); }\n    get length() { return 4; }\n}\n\nexport class UInt16Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): any { return stream.readUInt16(this.endian); }\n\twrite(stream: Stream, value: any): void { stream.writeUInt16(value, this.endian); }\n\tget length() { return 2; }\n}\n\nexport class UInt8Type implements IType<number> {\n\tconstructor(public endian: Endian) { }\n\n\tread(stream: Stream): any { return stream.readUInt8(this.endian); }\n\twrite(stream: Stream, value: any): void { stream.writeUInt8(value, this.endian); }\n\tget length() { return 1; }\n}\n\nexport class Float32Type implements IType<number> {\n    constructor(public endian: Endian) { }\n\n    read(stream: Stream): any { return stream.readFloat32(this.endian); }\n    write(stream: Stream, value: any): void { stream.writeFloat32(value, this.endian); }\n    get length() { return 4; }\n}\n\nexport interface StructEntryProcessed<T> {\n\tname: string;\n\ttype: IType<T>;\n}\n\nexport interface Class<T> { new (...args: any[]): T; }\n\nexport class UIntReference {\n\tconstructor(private stream: Stream) {\n\t}\n\t\n\tget value(): number {\n\t\treturn this.stream.clone().readUInt32();\n\t}\n\tset value(value:number) {\n\t\tthis.stream.clone().writeUInt32(value);\n\t}\n}\n\nexport class StructClass<T> implements IType<T> {\n\tprocessedItems: StructEntryProcessed<T>[] = [];\n\n\tconstructor(private _class: any, private items: StructEntry[]) {\n\t    for (const item of items) {\n\t        let add = 0\n            for (const key in item) {\n                this.addItem(key, item[key])\n                add++\n            }\n            if (!add) throw new Error(\"Entry must have one item\");\n        }\n\t}\n\n\taddItem(name: string, type: any) {\n        this.processedItems.push({ name: name, type: type })\n    }\n\n\tstatic create<T>(_class: Class<T>, items: StructEntry[]) {\n\t\treturn new StructClass<T>(_class, items);\n\t}\n\n\tcreateProxy(stream: Stream): T {\n\t\tstream = stream.clone();\n        const objectf: any = function (stream: Stream) {};\n        const object = new objectf(stream);\n        this.processedItems.forEach(item => {\n\t\t\tconst getOffset = () => { return this.offsetOfField(item.name); };\n\t\t\tif (item.type instanceof StructClass) {\n\t\t\t\tobject[item.name] = (<StructClass<any>><any>item.type).createProxy(stream.sliceFrom(getOffset())); \n\t\t\t} else {\n\t\t\t\tObject.defineProperty(objectf.prototype, item.name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tget: () => { return item.type.read(stream.sliceFrom(getOffset())); },\n\t\t\t\t\tset: (value: any) => { item.type.write(stream.sliceFrom(getOffset()), value); }\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\treturn <T>object;\n\t}\n\n\tasync readWriteAsync<T2>(stream: Stream, callback: (p: T) => T2 | Promise<T2>, process?: (p: T, v: T2) => T2) {\n        const p = this.read(stream.clone());\n        const v = await callback(p);\n        if (process != null) process(p, v);\n        this.write(stream.clone(), p);\n        return v;\n\t}\n\n\tread(stream: Stream): T {\n        const _class = this._class;\n        const out: T = new _class();\n        for (let n = 0; n < this.processedItems.length; n++) {\n            const item = this.processedItems[n];\n            (<any>out)[item.name] = item.type.read(stream, out);\n\t\t}\n\t\treturn out;\n\t}\n\twrite(stream: Stream, value: T): void {\n\t\tfor (let n = 0; n < this.processedItems.length; n++) {\n\t\t\tconst item = this.processedItems[n];\n\t\t\titem.type.write(stream, (<any>value)[item.name], value);\n\t\t}\n\t}\n\toffsetOfField(name: string) {\n        let offset = 0;\n        for (let n = 0; n < this.processedItems.length; n++) {\n            const item = this.processedItems[n];\n            if (item.name == name) return offset;\n\t\t\toffset += item.type.length;\n\t\t}\n\t\treturn -1;\n\t}\n\tget length() {\n        let sum = 0;\n        for (let n = 0; n < this.processedItems.length; n++) {\n            const item = this.processedItems[n];\n            if (!item) throw (\"Invalid item!!\");\n\t\t\tif (!item.type) {\n\t\t\t\tconsole.log(item);\n\t\t\t\tthrow (\"Invalid item type!!\");\n\t\t\t}\n\t\t\tsum += item.type.length;\n\t\t}\n\t\treturn sum;\n\t}\n}\n\nexport class StructArrayClass<T> implements IType<T[]> {\n\tconstructor(private elementType: IType<T>, private count: number) {\n\t}\n\n\tread(stream: Stream): T[] {\n        const out: any[] = [];\n        for (let n = 0; n < this.count; n++) {\n\t\t\tout.push(this.elementType.read(stream, out));\n\t\t}\n\t\treturn out;\n\t}\n\twrite(stream: Stream, value: T[]): void {\n\t\tfor (let n = 0; n < this.count; n++) this.elementType.write(stream, value[n], value);\n\t}\n\tget length() {\n\t\treturn this.elementType.length * this.count;\n\t}\n}\n\nexport function StructArray<T>(elementType: IType<T>, count: number) {\n\treturn new StructArrayClass<T>(elementType, count);\n}\n\nexport class StructStringn implements IType<string> {\n\tconstructor(private count: number) {\n\t}\n\n\tread(stream: Stream): string {\n        let out = '';\n        for (let n = 0; n < this.count; n++) {\n\t\t\tout += String.fromCharCode(stream.readUInt8());\n\t\t}\n\t\treturn out;\n\t}\n\twrite(stream: Stream, value: string): void {\n\t\tthrow (\"Not implemented StructStringn.write\");\n\t}\n\tget length() {\n\t\treturn this.count;\n\t}\n}\n\nexport class StructStringz {\n\tstringn: StructStringn;\n\n\tconstructor(private count: number, private readTransformer?: (s:string) => string, private writeTransformer?: (s:string) => string) {\n\t\tthis.stringn = new StructStringn(count);\n\t}\n\n\tread(stream: Stream): string {\n        let value = this.stringn.read(stream).split(String.fromCharCode(0))[0];\n        if (this.readTransformer) value = this.readTransformer(value);\n\t\treturn value;\n\t}\n\twrite(stream: Stream, value: string): void {\n\t\tif (this.writeTransformer) value = this.writeTransformer(value);\n\t\tif (!value) value = '';\n        const items = value.split('').map(char => char.charCodeAt(0));\n        while (items.length < this.count) items.push(0);\n\t\tfor (let n = 0; n < items.length; n++) stream.writeUInt8(items[n]);\n\t}\n\tget length() {\n\t\treturn this.count;\n\t}\n}\n\nexport class StructStringzVariable {\n\tconstructor() {\n\t}\n\n\tread(stream: Stream): string {\n\t\treturn stream.readStringz();\n\t}\n\twrite(stream: Stream, value: string): void {\n\t\tstream.writeString(value);\n\t\tstream.writeUInt8(0);\n\t}\n\tget length() {\n\t\treturn 0;\n\t}\n}\n\nexport class UInt32_2lbStruct implements IType<number> {\n\tread(stream: Stream): number {\n        const l = stream.readUInt32(Endian.LITTLE);\n        const b = stream.readUInt32(Endian.BIG);\n        return l;\n\t}\n\twrite(stream: Stream, value: number): void {\n\t\tstream.writeUInt32(value, Endian.LITTLE);\n\t\tstream.writeUInt32(value, Endian.BIG);\n\t}\n\tget length() { return 8; }\n}\n\nexport class UInt16_2lbStruct implements IType<number> {\n\tread(stream: Stream): number {\n        const l = stream.readUInt16(Endian.LITTLE);\n        const b = stream.readUInt16(Endian.BIG);\n        return l;\n\t}\n\twrite(stream: Stream, value: number): void {\n\t\tstream.writeUInt16(value, Endian.LITTLE);\n\t\tstream.writeUInt16(value, Endian.BIG);\n\t}\n\tget length() { return 4; }\n}\n\nexport class StructStringWithSize {\n\tconstructor(private getStringSize: (context: any) => number) {\n\t}\n\n\tread(stream: Stream, context: any): string {\n\t\treturn stream.readString(this.getStringSize(context));\n\t}\n\twrite(stream: Stream, value: string, context: any): void {\n\t\tstream.writeString(value);\n\t}\n\tget length() {\n\t\treturn 0;\n\t}\n}\n\nexport const Int16 = new Int16Type(Endian.LITTLE);\nexport const Int32 = new Int32Type(Endian.LITTLE);\nexport const Int64 = new Int64Type(Endian.LITTLE);\nexport const Int8 = new Int8Type(Endian.LITTLE);\n\nexport const Int16_l = new Int16Type(Endian.LITTLE);\nexport const Int32_l = new Int32Type(Endian.LITTLE);\nexport const Int64_l = new Int64Type(Endian.LITTLE);\nexport const Int8_l = new Int8Type(Endian.LITTLE);\n\nexport const Int16_b = new Int16Type(Endian.BIG);\nexport const Int32_b = new Int32Type(Endian.BIG);\nexport const Int64_b = new Int64Type(Endian.BIG);\nexport const Int8_b = new Int8Type(Endian.BIG);\n\nexport const UInt8 = new UInt8Type(Endian.LITTLE);\nexport const UInt16 = new UInt16Type(Endian.LITTLE);\nexport const UInt32 = new UInt32Type(Endian.LITTLE);\n\nexport const Ptr = new PtrType();\n\nexport const Float32 = new Float32Type(Endian.LITTLE);\n//export const UInt64 = new UInt64Type(Endian.LITTLE);\n\nexport const UInt16_l = new UInt16Type(Endian.LITTLE);\nexport const UInt32_l = new UInt32Type(Endian.LITTLE);\n\nexport const UInt16_b = new UInt16Type(Endian.BIG);\nexport const UInt32_b = new UInt32Type(Endian.BIG);\n//export const UInt64_b = new UInt64Type(Endian.BIG);\n\nexport const UInt32_2lb = new UInt32_2lbStruct();\nexport const UInt16_2lb = new UInt16_2lbStruct();\n\nexport const Integer64_l = new Integer64Type(Endian.LITTLE);\nexport const Integer64_b = new Integer64Type(Endian.BIG);\n\nexport const StringzVariable = new StructStringzVariable();\n\nexport function Stringn(count: number) { return new StructStringn(count); }\nexport function Stringz(count: number) { return new StructStringz(count); }\nexport function Utf8Stringz(count: number) { return new StructStringz(count, s => Utf8.decode(s), s => Utf8.encode(s)); }\nexport function StringWithSize(callback: (context: any) => number) {\n\treturn new StructStringWithSize(callback);\n}\n\nexport class StructPointerStruct<T> implements IType<Pointer<T>> {\n\tconstructor(private elementType: IType<T>) {\n\t}\n\tread(stream: Stream, context: any): Pointer<T> {\n        const address = stream.readInt32(Endian.LITTLE);\n\t\treturn new Pointer<T>(this.elementType, context['memory'], address);\n\t}\n\twrite(stream: Stream, value: Pointer<T>, context: any): void {\n        const address = value.address;\n\t\tstream.writeInt32(address, Endian.LITTLE);\n\t}\n\tget length() {\n\t\treturn 4;\n\t}\n}\n\nexport function StructPointer<T>(type: IType<T>) {\n\treturn new StructPointerStruct<T>(type);\n}\n\nexport interface PointerMemory {\n\tgetPointerStream(address: number, size?: number): Stream | null;\n}\n\nexport class Pointer<T> {\n\tprivate stream: Stream;\n\n\tconstructor(private type: IType<T>, public memory: PointerMemory, public address: number) {\n\t\tthis.stream = memory.getPointerStream(this.address)!\n\t}\n\n\treadWrite(callback: (item: T) => void) {\n        const value = this.read();\n\t\ttry {\n\t\t\tcallback(value);\n\t\t} finally {\n\t\t\tthis.write(value);\n\t\t}\n\t}\n\n\tread() {\n\t\treturn this.type.read(this.stream.clone());\n\t}\n\n\twrite(value: T) {\n\t\tthis.type.write(this.stream.clone(), value);\n\t}\n}\n\n\n\nexport function StructMember<T>(kind: IType<T>): any {\n    return (target: any, key: string, descriptor: TypedPropertyDescriptor<T>) => {\n        //console.log(\"StructMember\", kind, target, key, descriptor)\n        //console.log(target.$$struct)\n        //console.log(target.constructor)\n        if (!target.$$struct) {\n            target.$$struct = StructClass.create(target.constructor, [])\n        }\n        target.$$struct!.addItem(key, kind)\n        //console.log(target, key, descriptor);\n        //if (typeof target.natives == 'undefined') target.natives = [];\n        //if (!descriptor) {\n        //    console.error(\"descriptor == null\");\n        //    console.error(target);\n        //    console.error(key);\n        //    console.error(descriptor);\n        //}\n        //target.natives.push((target: any) => {\n        //    return createNativeFunction(exportId, firmwareVersion, retval, args, target, descriptor.value, options, `${target.constructor.name}`, key)\n        //});\n        return descriptor;\n    };\n}\n\nexport const StructUInt8: any = StructMember(UInt8)\nexport const StructInt8: any = StructMember(Int8)\nexport const StructUInt16: any = StructMember(UInt16)\nexport const StructInt16: any = StructMember(Int16)\nexport const StructInt32: any = StructMember(Int32)\nexport const StructUInt32: any = StructMember(UInt32)\nexport const StructUInt32_2lb: any = StructMember(UInt32_2lb)\nexport const StructUInt16_2lb: any = StructMember(UInt16_2lb)\n\nexport const StructInt32_l: any = StructMember(Int32_l)\nexport const StructUInt32_l: any = StructMember(UInt32_l)\n\nexport const StructInt32_b: any = StructMember(Int32_b)\nexport const StructUInt32_b: any = StructMember(UInt32_b)\n\nexport const StructInt64: any = StructMember(Int64)\n\nexport const StructInteger64_l: any = StructMember(Integer64_l)\nexport const StructInteger64_b: any = StructMember(Integer64_b)\n\nexport const StructStructStringzVariable: any = StructMember(StringzVariable)\n\nexport function StructStructStringn(count: number): any { return StructMember(Stringn(count)) }\nexport function StructStructStringz(count: number): any { return StructMember(Stringz(count)) }\nexport function StructStructUtf8Stringz(count: number): any { return StructMember(Utf8Stringz(count)) }\nexport function StructStructArray<T>(elementType: IType<T>, count: number): any { return StructMember(StructArray(elementType, count)) }\n\nexport class Struct {\n    // @ts-ignore\n    static get struct(): StructClass<this> { return GetStruct(this) }\n}\n\n//Struct.struct\n\nexport function GetStruct<T extends Struct>(clazz: Class<T>): StructClass<T> {\n    return (clazz as any).prototype.$$struct || (clazz as any).struct\n}\n", "import \"../global/window\"\nimport \"../global/utils\"\nimport \"../global/array\"\nimport \"../global/async\"\nimport \"../global/int64\"\nimport \"../global/math\"\nimport \"../global/stream\"\nimport \"../global/struct\"\n\nexport function globalReferenced() {\n    return true;\n}\n", "// https://www.khronos.org/registry/webgl/specs/1.0/#5.14\nexport const enum GL {\n    DEPTH_BUFFER_BIT               = 0x00000100,\n    STENCIL_BUFFER_BIT             = 0x00000400,\n    COLOR_BUFFER_BIT               = 0x00004000,\n\n    POINTS                         = 0x0000,\n    LINES                          = 0x0001,\n    LINE_LOOP                      = 0x0002,\n    LINE_STRIP                     = 0x0003,\n    TRIANGLES                      = 0x0004,\n    TRIANGLE_STRIP                 = 0x0005,\n    TRIANGLE_FAN                   = 0x0006,\n\n    // BlendingFactorDest\n    ZERO                           = 0,\n    ONE                            = 1,\n    SRC_COLOR                      = 0x0300,\n    ONE_MINUS_SRC_COLOR            = 0x0301,\n    SRC_ALPHA                      = 0x0302,\n    ONE_MINUS_SRC_ALPHA            = 0x0303,\n    DST_ALPHA                      = 0x0304,\n    ONE_MINUS_DST_ALPHA            = 0x0305,\n\n    // BlendingFactorSrc\n    DST_COLOR                      = 0x0306,\n    ONE_MINUS_DST_COLOR            = 0x0307,\n    SRC_ALPHA_SATURATE             = 0x0308,\n\n    // DataType\n    BYTE                           = 0x1400, // 5120\n    UNSIGNED_BYTE                  = 0x1401, // 5121\n    SHORT                          = 0x1402, // 5122\n    UNSIGNED_SHORT                 = 0x1403, // 5123\n    INT                            = 0x1404, // 5124\n    UNSIGNED_INT                   = 0x1405, // 5125\n    FLOAT                          = 0x1406, // 5126\n\n    NEVER                          = 0x0200,\n    LESS                           = 0x0201,\n    EQUAL                          = 0x0202,\n    LEQUAL                         = 0x0203,\n    GREATER                        = 0x0204,\n    NOTEQUAL                       = 0x0205,\n    GEQUAL                         = 0x0206,\n    ALWAYS                         = 0x0207,\n\n    KEEP                           = 0x1E00,\n    REPLACE                        = 0x1E01,\n    INCR                           = 0x1E02,\n    DECR                           = 0x1E03,\n    INVERT                         = 0x150A,\n    INCR_WRAP                      = 0x8507,\n    DECR_WRAP                      = 0x8508,\n\n    FUNC_ADD                       = 0x8006,\n    BLEND_EQUATION                 = 0x8009,\n    BLEND_EQUATION_RGB             = 0x8009,   /* same as BLEND_EQUATION */\n    BLEND_EQUATION_ALPHA           = 0x883D,\n\n    FUNC_SUBTRACT                  = 0x800A,\n    FUNC_REVERSE_SUBTRACT          = 0x800B,\n\n    NO_ERROR                       = 0,\n    INVALID_ENUM                   = 0x0500,\n    INVALID_VALUE                  = 0x0501,\n    INVALID_OPERATION              = 0x0502,\n    OUT_OF_MEMORY                  = 0x0505,\n\n    REPEAT = 0x2901,\n    CLAMP_TO_EDGE = 0x812F,\n    MIRRORED_REPEAT = 0x8370,\n}\n\nexport enum ClearBufferSet {\n\tColorBuffer = 1,\n\tStencilBuffer = 2,\n\tDepthBuffer = 4,\n\tFastClear = 16\n}\n\n", "\uFEFFexport enum GpuOpCodes {\n\tNOP = 0x00, VADDR = 0x01, IADDR = 0x02, Unknown0x03 = 0x03,\n\tPRIM = 0x04, BEZIER = 0x05, SPLINE = 0x06, BOUNDINGBOX = 0x07,\n\tJUMP = 0x08, BJUMP = 0x09, CALL = 0x0A, RET = 0x0B,\n\tEND = 0x0C, Unknown0x0D = 0x0D, SIGNAL = 0x0E, FINISH = 0x0F,\n\tBASE = 0x10, Unknown0x11 = 0x11, VERTEXTYPE = 0x12, OFFSETADDR = 0x13,\n\tORIGIN = 0x14, REGION1 = 0x15, REGION2 = 0x16, LIGHTINGENABLE = 0x17,\n\tLIGHTENABLE0 = 0x18, LIGHTENABLE1 = 0x19, LIGHTENABLE2 = 0x1A, LIGHTENABLE3 = 0x1B,\n\tCLIPENABLE = 0x1C, CULLFACEENABLE = 0x1D, TEXTUREMAPENABLE = 0x1E, FOGENABLE = 0x1F,\n\tDITHERENABLE = 0x20, ALPHABLENDENABLE = 0x21, ALPHATESTENABLE = 0x22, ZTESTENABLE = 0x23,\n\tSTENCILTESTENABLE = 0x24, ANTIALIASENABLE = 0x25, PATCHCULLENABLE = 0x26, COLORTESTENABLE = 0x27,\n\tLOGICOPENABLE = 0x28, Unknown0x29 = 0x29, BONEMATRIXNUMBER = 0x2A, BONEMATRIXDATA = 0x2B,\n\tMORPHWEIGHT0 = 0x2C, MORPHWEIGHT1 = 0x2D, MORPHWEIGHT2 = 0x2E, MORPHWEIGHT3 = 0x2F,\n\tMORPHWEIGHT4 = 0x30, MORPHWEIGHT5 = 0x31, MORPHWEIGHT6 = 0x32, MORPHWEIGHT7 = 0x33,\n\tUnknown0x34 = 0x34, Unknown0x35 = 0x35, PATCHDIVISION = 0x36, PATCHPRIMITIVE = 0x37,\n\tPATCHFACING = 0x38, Unknown0x39 = 0x39, WORLDMATRIXNUMBER = 0x3A, WORLDMATRIXDATA = 0x3B,\n\tVIEWMATRIXNUMBER = 0x3C, VIEWMATRIXDATA = 0x3D, PROJMATRIXNUMBER = 0x3E, PROJMATRIXDATA = 0x3F,\n\tTGENMATRIXNUMBER = 0x40, TGENMATRIXDATA = 0x41, VIEWPORTX1 = 0x42, VIEWPORTY1 = 0x43,\n\tVIEWPORTZ1 = 0x44, VIEWPORTX2 = 0x45, VIEWPORTY2 = 0x46, VIEWPORTZ2 = 0x47,\n\tTEXSCALEU = 0x48, TEXSCALEV = 0x49, TEXOFFSETU = 0x4A, TEXOFFSETV = 0x4B,\n\tOFFSETX = 0x4C, OFFSETY = 0x4D, Unknown0x4E = 0x4E, Unknown0x4F = 0x4F,\n\tSHADEMODE = 0x50, REVERSENORMAL = 0x51, Unknown0x52 = 0x52, MATERIALUPDATE = 0x53,\n\tMATERIALEMISSIVE = 0x54, MATERIALAMBIENT = 0x55, MATERIALDIFFUSE = 0x56, MATERIALSPECULAR = 0x57,\n\tMATERIALALPHA = 0x58, Unknown0x59 = 0x59, Unknown0x5A = 0x5A, MATERIALSPECULARCOEF = 0x5B,\n\tAMBIENTCOLOR = 0x5C, AMBIENTALPHA = 0x5D, LIGHTMODE = 0x5E, LIGHTTYPE0 = 0x5F,\n\tLIGHTTYPE1 = 0x60, LIGHTTYPE2 = 0x61, LIGHTTYPE3 = 0x62, LXP0 = 0x63,\n\tLYP0 = 0x64, LZP0 = 0x65, LXP1 = 0x66, LYP1 = 0x67,\n\tLZP1 = 0x68, LXP2 = 0x69, LYP2 = 0x6A, LZP2 = 0x6B,\n\tLXP3 = 0x6C, LYP3 = 0x6D, LZP3 = 0x6E, LXD0 = 0x6F,\n\tLYD0 = 0x70, LZD0 = 0x71, LXD1 = 0x72, LYD1 = 0x73,\n\tLZD1 = 0x74, LXD2 = 0x75, LYD2 = 0x76, LZD2 = 0x77,\n\tLXD3 = 0x78, LYD3 = 0x79, LZD3 = 0x7A, LCA0 = 0x7B,\n\tLLA0 = 0x7C, LQA0 = 0x7D, LCA1 = 0x7E, LLA1 = 0x7F,\n\tLQA1 = 0x80, LCA2 = 0x81, LLA2 = 0x82, LQA2 = 0x83,\n\tLCA3 = 0x84, LLA3 = 0x85, LQA3 = 0x86, SPOTEXP0 = 0x87,\n\tSPOTEXP1 = 0x88, SPOTEXP2 = 0x89, SPOTEXP3 = 0x8A, SPOTCUT0 = 0x8B,\n\tSPOTCUT1 = 0x8C, SPOTCUT2 = 0x8D, SPOTCUT3 = 0x8E, ALC0 = 0x8F,\n\tDLC0 = 0x90, SLC0 = 0x91, ALC1 = 0x92, DLC1 = 0x93,\n\tSLC1 = 0x94, ALC2 = 0x95, DLC2 = 0x96, SLC2 = 0x97,\n\tALC3 = 0x98, DLC3 = 0x99, SLC3 = 0x9A, CULL = 0x9B,\n\tFRAMEBUFPTR = 0x9C, FRAMEBUFWIDTH = 0x9D, ZBUFPTR = 0x9E, ZBUFWIDTH = 0x9F,\n\tTEXADDR0 = 0xA0, TEXADDR1 = 0xA1, TEXADDR2 = 0xA2, TEXADDR3 = 0xA3,\n\tTEXADDR4 = 0xA4, TEXADDR5 = 0xA5, TEXADDR6 = 0xA6, TEXADDR7 = 0xA7,\n\tTEXBUFWIDTH0 = 0xA8, TEXBUFWIDTH1 = 0xA9, TEXBUFWIDTH2 = 0xAA, TEXBUFWIDTH3 = 0xAB,\n\tTEXBUFWIDTH4 = 0xAC, TEXBUFWIDTH5 = 0xAD, TEXBUFWIDTH6 = 0xAE, TEXBUFWIDTH7 = 0xAF,\n\tCLUTADDR = 0xB0, CLUTADDRUPPER = 0xB1, TRXSBP = 0xB2, TRXSBW = 0xB3,\n\tTRXDBP = 0xB4, TRXDBW = 0xB5, Unknown0xB6 = 0xB6, Unknown0xB7 = 0xB7,\n\tTSIZE0 = 0xB8, TSIZE1 = 0xB9, TSIZE2 = 0xBA, TSIZE3 = 0xBB,\n\tTSIZE4 = 0xBC, TSIZE5 = 0xBD, TSIZE6 = 0xBE, TSIZE7 = 0xBF,\n\tTMAP = 0xC0, TEXTURE_ENV_MAP_MATRIX = 0xC1, TMODE = 0xC2, TPSM = 0xC3,\n\tCLOAD = 0xC4, CMODE = 0xC5, TFLT = 0xC6, TWRAP = 0xC7,\n\tTBIAS = 0xC8, TFUNC = 0xC9, TEC = 0xCA, TFLUSH = 0xCB,\n\tTSYNC = 0xCC, FFAR = 0xCD, FDIST = 0xCE, FCOL = 0xCF,\n\tTSLOPE = 0xD0, Unknown0xD1 = 0xD1, PSM = 0xD2, CLEAR = 0xD3,\n\tSCISSOR1 = 0xD4, SCISSOR2 = 0xD5, MINZ = 0xD6, MAXZ = 0xD7,\n\tCTST = 0xD8, CREF = 0xD9, CMSK = 0xDA, ATST = 0xDB,\n\tSTST = 0xDC, SOP = 0xDD, ZTST = 0xDE, ALPHA = 0xDF,\n\tSFIX = 0xE0, DFIX = 0xE1, DTH0 = 0xE2, DTH1 = 0xE3,\n\tDTH2 = 0xE4, DTH3 = 0xE5, LOP = 0xE6, ZMSK = 0xE7,\n\tPMSKC = 0xE8, PMSKA = 0xE9, TRXKICK = 0xEA, TRXSPOS = 0xEB,\n\tTRXDPOS = 0xEC, Unknown0xED = 0xED, TRXSIZE = 0xEE, Unknown0xEF = 0xEF,\n\tUnknown0xF0 = 0xF0, Unknown0xF1 = 0xF1, Unknown0xF2 = 0xF2, Unknown0xF3 = 0xF3,\n\tUnknown0xF4 = 0xF4, Unknown0xF5 = 0xF5, Unknown0xF6 = 0xF6, Unknown0xF7 = 0xF7,\n\tUnknown0xF8 = 0xF8, Unknown0xF9 = 0xF9, Unknown0xFA = 0xFA, Unknown0xFB = 0xFB,\n\tUnknown0xFC = 0xFC, Unknown0xFD = 0xFD, Unknown0xFE = 0xFE, DUMMY = 0xFF,\n\t\n\t// Rest of the struct\n\tMAT_TEXTURE = 256 + 16 * 1,\n\tMAT_PROJ = 256 + 16 * 2,\n\tMAT_VIEW = 256 + 16 * 3,\n\tMAT_WORLD = 256 + 16 * 4,\n\tMAT_BONES = 256 + 16 * 5,\n}\n", "\uFEFFimport \"../emu/global\"\nimport {ArrayBufferUtils} from \"../global/utils\";\nimport {BitUtils, ToInt32} from \"../global/math\";\n\nexport class PixelFormatUtils {\n\tstatic hasClut(pixelFormat: PixelFormat) {\n\t\treturn ((pixelFormat >= PixelFormat.PALETTE_T4) && (pixelFormat <= PixelFormat.PALETTE_T32));\n\t}\n}\n\nexport enum PixelFormat {\n\tNONE = -1,\n\tRGBA_5650 = 0,\n\tRGBA_5551 = 1,\n\tRGBA_4444 = 2,\n\tRGBA_8888 = 3,\n\tPALETTE_T4 = 4,\n\tPALETTE_T8 = 5,\n\tPALETTE_T16 = 6,\n\tPALETTE_T32 = 7,\n\tCOMPRESSED_DXT1 = 8,\n\tCOMPRESSED_DXT3 = 9,\n\tCOMPRESSED_DXT5 = 10,\n}\n\nconst sizes = new Float32Array(16);\nsizes[PixelFormat.COMPRESSED_DXT1] = 0.5;\nsizes[PixelFormat.COMPRESSED_DXT3] = 1;\nsizes[PixelFormat.COMPRESSED_DXT5] = 1;\nsizes[PixelFormat.PALETTE_T16] = 2;\nsizes[PixelFormat.PALETTE_T32] = 4;\nsizes[PixelFormat.PALETTE_T8] = 1;\nsizes[PixelFormat.PALETTE_T4] = 0.5;\nsizes[PixelFormat.RGBA_4444] = 2;\nsizes[PixelFormat.RGBA_5551] = 2;\nsizes[PixelFormat.RGBA_5650] = 2;\nsizes[PixelFormat.RGBA_8888] = 4;\n\nexport class PixelConverter {\n    static getSizeInBits(format: PixelFormat) {\n        return sizes[format] * 8;\n    }\n\n\tstatic getSizeInBytes(format: PixelFormat, count: number) {\n\t\treturn sizes[format] * count;\n\t}\n\n\tstatic unswizzleInline(format: PixelFormat, from: Uint8Array, width: number, height: number) {\n        const rowWidth = PixelConverter.getSizeInBytes(format, width);\n        const textureHeight = height;\n        const size = rowWidth * textureHeight;\n        const temp = new Uint8Array(size);\n        PixelConverter.unswizzle(from, temp, rowWidth, textureHeight);\n\t\tArrayBufferUtils.copy(temp, 0, from, 0, size);\n\t}\n\n\tprivate static unswizzle(input: Uint8Array, output: Uint8Array, rowWidth: number, textureHeight: number) {\n        const pitch = ToInt32((rowWidth - 16) / 4);\n        const bxc = ToInt32(rowWidth / 16);\n        const byc = ToInt32(textureHeight / 8);\n        const pitch4 = ToInt32(pitch * 4);\n\n        let src = 0;\n        let ydest = 0;\n        for (let by = 0; by < byc; by++) {\n            let xdest = ydest;\n            for (let bx = 0; bx < bxc; bx++) {\n                let dest = xdest;\n                for (let n = 0; n < 8; n++, dest += pitch4) {\n\t\t\t\t\t//ArrayBufferUtils.copy(input, src, output, dest, 16);\n\t\t\t\t\tfor (let m = 0; m < 16; m++) output[dest++] = input[src++];\n\t\t\t\t}\n\t\t\t\txdest += 16;\n\t\t\t}\n\t\t\tydest += rowWidth * 8;\n\t\t}\n\t}\n\t\n\tstatic decodeIndex(format: PixelFormat, from: Uint8Array, to: Uint8Array):Uint8Array {\n\t\tswitch (format) {\n\t\t\tcase PixelFormat.PALETTE_T4:\n                let m = 0;\n                for (let n = 0; n < from.length; n++) {\n                    const value = from[n];\n                    to[m++] = (value >> 0) & 0xF;\n\t\t\t\t\tto[m++] = (value >> 4) & 0xF; \n\t\t\t\t}\n\t\t\t\treturn to;\n\t\t\tcase PixelFormat.PALETTE_T8: \n\t\t\t\tto.set(from);\n\t\t\t\treturn to;\n\t\t\tdefault: throw new Error(`Unsupported pixel format ${format}`);\n\t\t}\n\t}\n\t\n\tstatic decode(format: PixelFormat, from: Uint8Array, to: Uint32Array, useAlpha: boolean = true, palette: Uint32Array|null = null, clutStart: number = 0, clutShift: number = 0, clutMask: number = 0):Uint32Array {\n\t\t//static decode(format: PixelFormat, from: ArrayBuffer, fromIndex:number, to: Uint8Array, toIndex: number, count: number, useAlpha: boolean = true, palette: Uint32Array = null, clutStart: number = 0, clutShift: number = 0, clutMask: number = 0) {\n\t\t//console.log(`${format}:${PixelFormat[format]}`);\n\t\tswitch (format) {\n\t\t\tcase PixelFormat.RGBA_8888: return PixelConverter.decode8888(from, to, useAlpha);\n\t\t\tcase PixelFormat.RGBA_5551: return PixelConverter.update5551(ArrayBufferUtils.uint8ToUint16(from), to, useAlpha);\n\t\t\tcase PixelFormat.RGBA_5650: return PixelConverter.update5650(ArrayBufferUtils.uint8ToUint16(from), to, useAlpha);\n\t\t\tcase PixelFormat.RGBA_4444: return PixelConverter.update4444(ArrayBufferUtils.uint8ToUint16(from), to, useAlpha);\n            case PixelFormat.PALETTE_T4: return PixelConverter.updateT4(from, to, useAlpha, palette!, clutStart, clutShift, clutMask);\n\t\t\tcase PixelFormat.PALETTE_T8: return PixelConverter.updateT8(from, to, useAlpha, palette!, clutStart, clutShift, clutMask);\n\t\t\tdefault: throw new Error(`Unsupported pixel format ${format} [${PixelFormat[format]}]`);\n\t\t}\n\t}\n\n\tprivate static updateTranslate = new Uint32Array(256);\n\tprivate static updateT4(from: Uint8Array, to: Uint32Array, useAlpha: boolean, palette: Uint32Array, clutStart: number, clutShift: number, clutMask: number) {\n        const orValue = useAlpha ? 0 : 0xFF000000;\n        const count = to.length;\n        clutStart |= 0;\n\t\tclutShift |= 0;\n\t\tclutMask &= 0xF;\n\n\t\tconst updateT4Translate = PixelConverter.updateTranslate;\n\t\tfor (let m = 0; m < 16; m++) updateT4Translate[m] = palette[((clutStart + m) >>> clutShift) & clutMask];\n\n\t\tfor (let n = 0, m = 0; n < count; n++) {\n\t\t\tconst char = from[n];\n\t\t\tto[m++] = updateT4Translate[(char >>> 0) & 0xF] | orValue;\n\t\t\tto[m++] = updateT4Translate[(char >>> 4) & 0xF] | orValue;\n\t\t}\n\t\treturn to;\n\t}\n\n\tprivate static updateT8(from: Uint8Array, to: Uint32Array, useAlpha: boolean, palette: Uint32Array, clutStart: number, clutShift: number, clutMask: number) {\n        const orValue = useAlpha ? 0 : 0xFF000000;\n        const count = to.length;\n        clutMask &= 0xFF;\n\t\t// Big enough to be worth the translate construction\n\t\tif (count > 1024) {\n            const updateT8Translate = PixelConverter.updateTranslate;\n            for (let m = 0; m < 256; m++) updateT8Translate[m] = palette[((clutStart + m) >>> clutShift) & clutMask];\n\t\t\tfor (let m = 0; m < count; m++) to[m] = updateT8Translate[from[m]] | orValue;\n\t\t} else {\n\t\t\tfor (let m = 0; m < count; m++) to[m] = palette[clutStart + ((from[m] & clutMask) << clutShift)] | orValue;\n\t\t}\n\t\treturn to;\n\t}\n\n\tprivate static decode8888(from8: Uint8Array, to: Uint32Array, useAlpha: boolean = true) {\n\t\tconst from = ArrayBufferUtils.uint8ToUint32(from8);\n\t\tfor (let n = 0; n < to.length; n++) to[n] = this._decode8888(from[n])\n\t\treturn to;\n\t}\n\n\tprivate static update5551(from: Uint16Array, to: Uint32Array, useAlpha: boolean = true) {\n\t\tfor (let n = 0; n < to.length; n++) {\n\t\t\tto[n] = this.decode5551(from[n], useAlpha);\n\t\t}\n\t\treturn to;\n\t}\n\n\tprivate static update5650(from: Uint16Array, to: Uint32Array, useAlpha: boolean = true) {\n\t\tfor (let n = 0; n < to.length; n++) {\n\t\t\tto[n] = this.decode5650(from[n], useAlpha)\n\t\t}\n\t\treturn to;\n\t}\n\n\tprivate static update4444(from: Uint16Array, to: Uint32Array, useAlpha: boolean = true): Uint32Array {\n\t\tfor (let n = 0; n < to.length; n++) {\n\t\t\tto[n] = this.decode4444(from[n], useAlpha)\n\t\t}\n\t\treturn to;\n\t}\n\n    private static _decode8888(it: number, useAlpha: boolean = true): number {\n        const orValue = useAlpha ? 0 : 0xFF000000;\n        return it | orValue\n    }\n\n\tprivate static decode5551(it: number, useAlpha: boolean = true): number {\n        let value = 0;\n        value |= BitUtils.extractScalei(it, 0, 5, 0xFF) << 0;\n        value |= BitUtils.extractScalei(it, 5, 5, 0xFF) << 8;\n        value |= BitUtils.extractScalei(it, 10, 5, 0xFF) << 16;\n        value |= BitUtils.extractScalei(it, 15, 1, 0xFF) << 24;\n        value |= useAlpha ? 0 : 0xFF000000;\n        return value\n    }\n\n    private static decode5650(it: number, useAlpha: boolean = true): number {\n        let value = 0;\n        value |= BitUtils.extractScalei(it, 0, 5, 0xFF) << 0;\n        value |= BitUtils.extractScalei(it, 5, 6, 0xFF) << 8;\n        value |= BitUtils.extractScalei(it, 11, 5, 0xFF) << 16;\n        value |= 0xFF000000;\n        return value\n    }\n\n\tprivate static decode4444(it: number, useAlpha: boolean = true): number {\n        let value = 0;\n        value |= BitUtils.extractScalei(it, 0, 4, 0xFF) << 0;\n        value |= BitUtils.extractScalei(it, 4, 4, 0xFF) << 8;\n        value |= BitUtils.extractScalei(it, 8, 4, 0xFF) << 16;\n        value |= (useAlpha ? BitUtils.extractScalei(it, 12, 4, 0xFF) : 0xFF) << 24;\n        return value\n    }\n\n    static unpackToRGBA(pixelFormat: PixelFormat, rawColor: number, useAlpha: boolean = true): number {\n\t    switch (pixelFormat) {\n            case PixelFormat.RGBA_8888: return this._decode8888(rawColor, useAlpha)\n            case PixelFormat.RGBA_5551: return this.decode5551(rawColor, useAlpha)\n            case PixelFormat.RGBA_5650: return this.decode5650(rawColor, useAlpha)\n            case PixelFormat.RGBA_4444: return this.decode4444(rawColor, useAlpha)\n            default: throw new Error(`Unsupported pixelFormat ${pixelFormat}`)\n        }\n    }\n}\n\nexport default { PixelFormat };", "\uFEFFimport \"../../emu/global\"\n\nimport {ArrayBufferUtils} from \"../../global/utils\";\nimport {BitUtils, MathFloat, MathUtils} from \"../../global/math\";\nimport {GpuOpCodes} from \"./gpu_opcodes\";\nimport {Memory} from \"../memory\";\nimport {PixelConverter, PixelFormat, PixelFormatUtils} from \"../pixelformat\";\n\nconst Op = GpuOpCodes\n\nfunction bool1(p: number) { return p != 0; }\nfunction parambool(p: number, offset: number) { return ((p >> offset) & 0x1) != 0; }\nfunction param1(p: number, offset: number) { return (p >> offset) & 0x1; }\nfunction param2(p: number, offset: number) { return (p >> offset) & 0x3; }\nfunction param3(p: number, offset: number) { return (p >> offset) & 0x7; }\nfunction param4(p: number, offset: number) { return (p >> offset) & 0xF; }\nfunction param5(p: number, offset: number) { return (p >> offset) & 0x1F; }\nfunction param6(p: number, offset: number) { return (p >> offset) & 0x3F; }\nfunction param8(p: number, offset: number) { return (p >> offset) & 0xFF; }\nfunction param10(p: number, offset: number) { return (p >> offset) & 0x3FF; }\nfunction param16(p: number, offset: number) { return (p >> offset) & 0xFFFF; }\nfunction param24(p: number) { return p & 0xFFFFFF; }\nfunction float1(p: number) { return MathFloat.reinterpretIntAsFloat(p << 8); }\n\nexport const enum CullingDirection {\n\tCounterClockWise = 0,\n\tClockWise = 1\n}\n\nexport const enum SyncType {\n\tWaitForCompletion = 0,\n\tPeek = 1,\n}\n\nexport const enum DisplayListStatus {\n\tCompleted = 0, // The list has been completed (PSP_GE_LIST_COMPLETED)\n\tQueued = 1, // list is queued but not executed yet (PSP_GE_LIST_QUEUED)\n\tDrawing = 2, // The list is currently being executed (PSP_GE_LIST_DRAWING)\n\tStalling = 3, // The list was stopped because it encountered stall address (PSP_GE_LIST_STALLING)\n\tPaused = 4, // The list is paused because of a signal or sceGeBreak (PSP_GE_LIST_PAUSED)\n}\n\nexport class GpuFrameBufferState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget width() { return param16(this.data[GpuOpCodes.FRAMEBUFWIDTH], 0); }\n\tget highAddress() { return param8(this.data[GpuOpCodes.FRAMEBUFWIDTH], 16); }\n\tget lowAddress() { return param24(this.data[GpuOpCodes.FRAMEBUFPTR]); }\n}\n\nexport const enum IndexEnum {\n\tVoid = 0,\n\tByte = 1,\n\tShort = 2,\n}\n\nexport const enum NumericEnum {\n\tVoid = 0,\n\tByte = 1,\n\tShort = 2,\n\tFloat = 3,\n}\n\nexport const enum ColorEnum {\n\tVoid = 0,\n\tInvalid1 = 1,\n\tInvalid2 = 2,\n\tInvalid3 = 3,\n\tColor5650 = 4,\n\tColor5551 = 5,\n\tColor4444 = 6,\n\tColor8888 = 7,\n}\n\nexport class VertexInfo {\n\t// Calculated\n\tweightOffset:number = 0\n\ttextureOffset:number = 0\n\tcolorOffset:number = 0\n\tnormalOffset:number = 0\n\tpositionOffset:number = 0\n\ttextureComponentsCount:number = 0\n\talign: number = 0\n\tsize: number = 0\n\n\t// Extra\n\tvalue: number = -1\n\treversedNormal: boolean = false\n\taddress: number = 0\n\t\n\t// Attributes\n\tweight: NumericEnum = NumericEnum.Void\n\ttexture: NumericEnum = NumericEnum.Void\n\tcolor: ColorEnum = ColorEnum.Void\n\tnormal: NumericEnum = NumericEnum.Void\n\tposition: NumericEnum = NumericEnum.Void\n\n\t// Vertex Type\n\tindex: IndexEnum = IndexEnum.Void\n\tweightCount: number = 0\n\tmorphingVertexCount: number = 0\n\ttransform2D: boolean = false\n\tweightSize:number = 0\n\tcolorSize:number = 0\n\ttextureSize:number = 0\n\tpositionSize:number = 0\n\tnormalSize:number = 0\n\n\tdescribe() {\n\t    return `vertexInfo_${this.value >>> 0}_${this.textureComponentsCount}`\n    }\n\t\n\tclone() {\n\t\treturn new VertexInfo().copyFrom(this)\n\t}\n\t\n\tcopyFrom(that:VertexInfo) {\n\t\tthis.weightOffset = that.weightOffset\n\t\tthis.textureOffset = that.textureOffset\n\t\tthis.colorOffset = that.colorOffset\n\t\tthis.normalOffset = that.normalOffset;\n\t\tthis.positionOffset = that.positionOffset\n\t\tthis.textureComponentsCount = that.textureComponentsCount\n\t\tthis.value = that.value\n\t\tthis.size = that.size\n\t\tthis.reversedNormal = that.reversedNormal\n\t\tthis.address = that.address\n\t\tthis.texture = that.texture\n\t\tthis.color = that.color\n\t\tthis.normal = that.normal\n\t\tthis.position = that.position\n\t\tthis.weight = that.weight\n\t\tthis.index = that.index\n\t\tthis.weightCount = that.weightCount\n\t\tthis.morphingVertexCount = that.morphingVertexCount\n\t\tthis.transform2D = that.transform2D\n\t\tthis.weightSize = that.weightSize\n\t\tthis.colorSize = that.colorSize\n\t\tthis.textureSize = that.textureSize\n\t\tthis.positionSize = that.positionSize\n\t\tthis.normalSize = that.normalSize\n\t\tthis.align = that.align\n\t\treturn this\n\t}\n\n\tsetState(state:GpuState) {\n\t\tlet vstate = state.vertex;\n\t\tthis.address = vstate.address;\n\t\n\t\tif ((this.value != vstate.value) || (this.textureComponentsCount != state.texture.textureComponentsCount) || (this.reversedNormal != vstate.reversedNormal)) {\n\t\t\tthis.textureComponentsCount = state.texture.textureComponentsCount\n\t\t\tthis.reversedNormal = vstate.reversedNormal\n\t\t\tthis.value = vstate.value\n\t\t\tthis.texture = vstate.texture\n\t\t\tthis.color = vstate.color\n\t\t\tthis.normal = vstate.normal\n\t\t\tthis.position = vstate.position\n\t\t\tthis.weight = vstate.weight\n\t\t\tthis.index = vstate.index\n\t\t\tthis.weightCount = vstate.weightCount\n\t\t\tthis.morphingVertexCount = vstate.morphingVertexCount\n\t\t\tthis.transform2D = vstate.transform2D\n\t\t\n\t\t\tthis.updateSizeAndPositions();\t\n\t\t}\n\n\t\treturn this\n\t}\n\t\n\tupdateSizeAndPositions() {\n\t\tthis.weightSize = VertexInfo.NumericEnumSizes[this.weight]\n\t\tthis.colorSize = VertexInfo.ColorEnumSizes[this.color]\n\t\tthis.textureSize = VertexInfo.NumericEnumSizes[this.texture]\n\t\tthis.positionSize = VertexInfo.NumericEnumSizes[this.position]\n\t\tthis.normalSize = VertexInfo.NumericEnumSizes[this.normal]\n\n\t\tthis.size = 0;\n\t\tthis.size = MathUtils.nextAligned(this.size, this.weightSize);\n\t\tthis.weightOffset = this.size;\n\t\tthis.size += this.realWeightCount * this.weightSize;\n\n\t\tthis.size = MathUtils.nextAligned(this.size, this.textureSize);\n\t\tthis.textureOffset = this.size;\n\t\tthis.size += this.textureComponentsCount * this.textureSize;\n\n\t\tthis.size = MathUtils.nextAligned(this.size, this.colorSize);\n\t\tthis.colorOffset = this.size;\n\t\tthis.size += 1 * this.colorSize;\n\t\t\n\t\tthis.size = MathUtils.nextAligned(this.size, this.normalSize);\n\t\tthis.normalOffset = this.size;\n\t\tthis.size += 3 * this.normalSize;\n\t\t\n\t\tthis.size = MathUtils.nextAligned(this.size, this.positionSize);\n\t\tthis.positionOffset = this.size;\n\t\tthis.size += 3 * this.positionSize;\n\n\t\tthis.align = Math.max(this.weightSize, this.colorSize, this.textureSize, this.positionSize, this.normalSize);\n\t\tthis.size = MathUtils.nextAligned(this.size, this.align);\n\t}\n\n\toneWeightOffset(n:number) {\n\t\treturn this.weightOffset + this.weightSize * n; \n\t}\n\t\n\tprivate static NumericEnumSizes = [0, 1, 2, 4];\n\tprivate static ColorEnumSizes = [0, 0, 0, 0, 2, 2, 2, 4];\n\n\tget realWeightCount() { return this.hasWeight ? (this.weightCount + 1) : 0; }\n\tget realMorphingVertexCount() { return this.morphingVertexCount + 1; }\n\tget hasTexture() { return this.texture != NumericEnum.Void; }\n\tget hasColor() { return this.color != ColorEnum.Void; }\n\tget hasNormal() { return this.normal != NumericEnum.Void; }\n\tget hasPosition() { return this.position != NumericEnum.Void; }\n\tget hasWeight() { return this.weight != NumericEnum.Void; }\n\tget hasIndex() { return this.index != IndexEnum.Void; }\n\tget positionComponents() { return 3; }\n\tget normalComponents() { return 3; }\n\tget colorComponents() { return 4; }\n\tget textureComponents() { return this.textureComponentsCount; }\n\tget hash() { return (this.value + (this.textureComponentsCount * Math.pow(2, 24))) | 0; }\n\n\tread(memory: Memory, count: number) {\n\t\t//console.log(`read vertices ${count}`);\n        const vertices: any[] = [];\n        for (let n = 0; n < count; n++) vertices.push(this.readOne(memory));\n\t\treturn vertices;\n\t}\n\n\tprivate readOne(memory: Memory) {\n        const address = this.address;\n        const vertex: any = {};\n\n        //console.log(vertex);\n\t\tthis.address += this.size;\n\n\t\treturn vertex;\n\t}\n\t\n\ttoString() {\n\t\treturn `VertexInfo(${JSON.stringify({\n            address: this.address,\n            texture: this.texture,\n            color: this.color,\n            normal: this.normal,\n            position: this.position,\n            weight: this.weight,\n            index: this.index,\n            realWeightCount: this.realWeightCount,\n            morphingVertexCount: this.morphingVertexCount,\n            transform2D: this.transform2D,\n        })})`;\n\t}\n\n}\n\nexport class VertexState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget value() { return param24(this.data[Op.VERTEXTYPE]); }\n\tget reversedNormal() { return bool1(this.data[Op.REVERSENORMAL]); }\n\tget address() { return param24(this.data[Op.VADDR]); }\n\tset address(value:number) { this.data[Op.VADDR] = value | (Op.VADDR << 24); }\n\t\n\tget texture() { return param2(this.data[Op.VERTEXTYPE], 0); }\n\tget color() { return <ColorEnum>param3(this.data[Op.VERTEXTYPE], 2); }\n\tget normal() { return <NumericEnum>param2(this.data[Op.VERTEXTYPE], 5); }\n\tget position() { return <NumericEnum>param2(this.data[Op.VERTEXTYPE], 7); }\n\tget weight() { return <NumericEnum>param2(this.data[Op.VERTEXTYPE], 9); }\n\tget index() { return <IndexEnum>param2(this.data[Op.VERTEXTYPE], 11); }\n\tget weightCount() { return param3(this.data[Op.VERTEXTYPE], 14); }\n\tget morphingVertexCount() { return param2(this.data[Op.VERTEXTYPE], 18); }\n\tget transform2D() { return parambool(this.data[Op.VERTEXTYPE], 23); }\n}\n\nfunction createMatrix4x4(data:Uint32Array, offset:number) {\n    return new Float32Array(data.buffer).subarray(offset, offset + 16);\n}\n\nfunction createMatrix4x3(data:Uint32Array, offset:number) {\n    return new Float32Array(data.buffer).subarray(offset, offset + 12);\n}\n\nexport class ViewPort {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget x() { return float1(this.data[Op.VIEWPORTX2]); }\n\tget y() { return float1(this.data[Op.VIEWPORTY2]); }\n\tget z() { return float1(this.data[Op.VIEWPORTZ2]); }\n\n\tget width() { return float1(this.data[Op.VIEWPORTX1]); }\n\tget height() { return float1(this.data[Op.VIEWPORTY1]); }\n\tget depth() { return float1(this.data[Op.VIEWPORTZ1]); }\n}\n\nexport class Region {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget x1() { return param10(this.data[Op.REGION1], 0); }\n\tget y1() { return param10(this.data[Op.REGION1], 10); }\n\n\tget x2() { return param10(this.data[Op.REGION2], 0); }\n\tget y2() { return param10(this.data[Op.REGION2], 10); }\n}\n\nexport class Light {\n\tprivate static REG_TYPES = [Op.LIGHTTYPE0, Op.LIGHTTYPE1, Op.LIGHTTYPE2, Op.LIGHTTYPE3];\n\tprivate static REG_LCA = [Op.LCA0, Op.LCA1, Op.LCA2, Op.LCA3];\n\tprivate static REG_LLA = [Op.LLA0, Op.LLA1, Op.LLA2, Op.LLA3];\n\tprivate static REG_LQA = [Op.LQA0, Op.LQA1, Op.LQA2, Op.LQA3];\n\tprivate static REG_SPOTEXP = [Op.SPOTEXP0, Op.SPOTEXP1, Op.SPOTEXP2, Op.SPOTEXP3];\n\tprivate static REG_SPOTCUT = [Op.SPOTCUT0, Op.SPOTCUT1, Op.SPOTCUT2, Op.SPOTCUT3];\n\t\n\tprivate static LXP = [Op.LXP0, Op.LXP1, Op.LXP2, Op.LXP3];\n\tprivate static LYP = [Op.LYP0, Op.LYP1, Op.LYP2, Op.LYP3];\n\tprivate static LZP = [Op.LZP0, Op.LZP1, Op.LZP2, Op.LZP3];\n\n\tprivate static LXD = [Op.LXD0, Op.LXD1, Op.LXD2, Op.LXD3];\n\tprivate static LYD = [Op.LYD0, Op.LYD1, Op.LYD2, Op.LYD3];\n\tprivate static LZD = [Op.LZD0, Op.LZD1, Op.LZD2, Op.LZD3];\n\t\n\tprivate static ALC = [Op.ALC0, Op.ALC1, Op.ALC2, Op.ALC3];\n\tprivate static DLC = [Op.DLC0, Op.DLC1, Op.DLC2, Op.DLC3];\n\tprivate static SLC = [Op.SLC0, Op.SLC1, Op.SLC2, Op.SLC3];\n\t\n\tconstructor(private data:Uint32Array, public index:number) { }\n\t\n\tget enabled() { return bool1(this.data[Op.LIGHTENABLE0 + this.index]); }\n\t\n\tget kind() { return <LightModelEnum>param8(this.data[Light.REG_TYPES[this.index]], 0); }\n\tget type() { return <LightTypeEnum>param8(this.data[Light.REG_TYPES[this.index]], 8); }\n\t\n\tget pw() { return (this.type == LightTypeEnum.SpotLight) ? 1 : 0; }\n\t\n\tget px() { return float1(this.data[Light.LXP[this.index]]); }\n\tget py() { return float1(this.data[Light.LYP[this.index]]); }\n\tget pz() { return float1(this.data[Light.LZP[this.index]]); }\n\n\tget dx() { return float1(this.data[Light.LXD[this.index]]); }\n\tget dy() { return float1(this.data[Light.LYD[this.index]]); }\n\tget dz() { return float1(this.data[Light.LZD[this.index]]); }\n\n\tget spotExponent() { return float1(this.data[Light.REG_SPOTEXP[this.index]]); }\n\tget spotCutoff() { return float1(this.data[Light.REG_SPOTCUT[this.index]]); }\n\tget constantAttenuation() { return float1(this.data[Light.REG_LCA[this.index]]); }\n\tget linearAttenuation() { return float1(this.data[Light.REG_LLA[this.index]]); }\n\tget quadraticAttenuation() { return float1(this.data[Light.REG_LQA[this.index]]); }\n\t\n\tget ambientColor() { return new Color().setRGB(Light.ALC[this.index]); } \n\tget diffuseColor() { return new Color().setRGB(Light.DLC[this.index]); }\n\tget specularColor() { return new Color().setRGB(Light.SLC[this.index]); }\n}\n\nexport const enum LightTypeEnum { Directional = 0, PointLight = 1, SpotLight = 2 }\nexport const enum LightModelEnum { SingleColor = 0, SeparateSpecularColor = 1 }\n\nexport class Lightning {\n\tlights:Light[];\n\n\tconstructor(private data:Uint32Array) {\n\t\t this.lights = [\n\t\t\t new Light(this.data, 0),\n\t\t\t new Light(this.data, 1),\n\t\t\t new Light(this.data, 2),\n\t\t\t new Light(this.data, 3)\n\t\t];\n\t}\n\t\n\tget lightModel() { return <LightModelEnum>param8(this.data[Op.LIGHTMODE], 0); }\n\t\n\tget specularPower() { return float1(this.data[Op.MATERIALSPECULARCOEF]); }\n\tget ambientLightColor() { return new Color().setRGB_A(this.data[Op.AMBIENTCOLOR], this.data[Op.AMBIENTALPHA]); }\n\t\n\tget enabled() { return bool1(this.data[Op.LIGHTINGENABLE]); }\n}\n\nexport class MipmapState {\n\tconstructor(public texture:TextureState, private data:Uint32Array, public index:number) { }\n\t\n\tget bufferWidth() { return param16(this.data[Op.TEXBUFWIDTH0 + this.index], 0); }\n\tget address() { return param24(this.data[Op.TEXADDR0 + this.index]) | ((param8(this.data[Op.TEXBUFWIDTH0 + this.index], 16) << 24)) }\n\tget addressEnd() { return this.address + this.sizeInBytes; }\n\tget textureWidth() { return 1 << param4(this.data[Op.TSIZE0 + this.index], 0); } \n\tget textureHeight() { return 1 << param4(this.data[Op.TSIZE0 + this.index], 8); }\n\tget size() { return this.bufferWidth * this.textureHeight; }\n\tget sizeInBytes() { return PixelConverter.getSizeInBytes(this.texture.pixelFormat, this.size); }\n}\n\nexport class ClutState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tgetHashFast() {\n\t\treturn (this.data[Op.CMODE] << 0) + (this.data[Op.CLOAD] << 8) + (this.data[Op.CLUTADDR] << 16) + (this.data[Op.CLUTADDRUPPER] << 24);\n\t}\n\tget cmode() { return this.data[Op.CMODE]; }\n\tget cload() { return this.data[Op.CLOAD]; }\n\n\tget address() { return param24(this.data[Op.CLUTADDR]) | ((this.data[Op.CLUTADDRUPPER] << 8) & 0xFF000000); }\n\tget addressEnd() { return this.address + this.sizeInBytes; }\n    get numberOfBlocks() { return param6(this.cload, 0); }\n\tget numberOfColors() { return this.numberOfBlocks << 4; }\n\tget pixelFormat() { return <PixelFormat>param2(this.data[Op.CMODE], 0); }\n    get colorBits() { return PixelConverter.getSizeInBits(this.pixelFormat) }\n\n    get shift() { return param5(this.data[Op.CMODE], 2); }\n\tget mask() { return param8(this.data[Op.CMODE], 8); }\n\tget start() { return param5(this.data[Op.CMODE], 16); }\n\tget sizeInBytes() { return PixelConverter.getSizeInBytes(this.pixelFormat, this.numberOfColors); }\n\n    //getIndex(n: number) { return ((this.start + n) >> this.shift) & this.mask }\n    getIndex(n: number) { return ((n >> this.shift) & this.mask) + (this.start << 4) }\n\n    getRawColor(mem: Memory, n: number): number {\n        switch (this.colorBits) {\n            case 16: return mem.lhu(this.address + this.getIndex(n) * 2)\n            case 32: return mem.lw(this.address + this.getIndex(n) * 4)\n            default: throw new Error(\"Invalid palette\")\n        }\n    }\n\n    getColor(mem: Memory, n: number): number {\n        return PixelConverter.unpackToRGBA(this.pixelFormat, this.getRawColor(mem, n))\n    }\n}\n\nexport const enum TextureProjectionMapMode {\n\tGU_POSITION = 0, // TMAP_TEXTURE_PROJECTION_MODE_POSITION - 3 texture components\n\tGU_UV = 1, // TMAP_TEXTURE_PROJECTION_MODE_TEXTURE_COORDINATES - 2 texture components\n\tGU_NORMALIZED_NORMAL = 2, // TMAP_TEXTURE_PROJECTION_MODE_NORMALIZED_NORMAL - 3 texture components\n\tGU_NORMAL = 3, // TMAP_TEXTURE_PROJECTION_MODE_NORMAL - 3 texture components\n}\n\nexport const enum TextureMapMode {\n\tGU_TEXTURE_COORDS = 0,\n\tGU_TEXTURE_MATRIX = 1,\n\tGU_ENVIRONMENT_MAP = 2,\n}\n\nexport const enum TextureLevelMode { Auto = 0, Const = 1, Slope = 2 }\n\n\nexport class TextureState {\n\tconstructor(private data:Uint32Array) {\n\t}\n\t\n\tmatrix = createMatrix4x4(this.data, Op.MAT_TEXTURE);\n\n\tclut = new ClutState(this.data);\n\t\n\tget hasClut() {\n\t\treturn PixelFormatUtils.hasClut(this.pixelFormat);\n\t}\n\t\n\tgetHashSlow(textureData:Uint8Array, clutData:Uint8Array) {\n        const hash: number[] = [];\n        hash.push(ArrayBufferUtils.hashFast(textureData));\n\t\thash.push(this.mipmap.address);\n\t\thash.push(this.mipmap.textureWidth);\n\t\thash.push(this.colorComponent);\n\t\thash.push(this.mipmap.textureHeight);\n\t\thash.push(+this.swizzled);\n\t\thash.push(+this.pixelFormat);\n\t\tif (this.hasClut) {\n\t\t\thash.push(this.clut.getHashFast());\n\t\t\thash.push(ArrayBufferUtils.hashFast(clutData));\n\t\t}\n\t\t//value += this.clut.getHashFast();\n\t\treturn hash.join('_');\n\t}\n\t\n\tget mipmap() { return this.mipmaps[0]; }\n\t\n\tmipmaps = [\n\t\tnew MipmapState(this, this.data, 0),\n\t\tnew MipmapState(this, this.data, 1),\n\t\tnew MipmapState(this, this.data, 2),\n\t\tnew MipmapState(this, this.data, 3),\n\t\tnew MipmapState(this, this.data, 4),\n\t\tnew MipmapState(this, this.data, 5),\n\t\tnew MipmapState(this, this.data, 6),\n\t\tnew MipmapState(this, this.data, 7)\n\t];\n\n\tget wrapU() { return <WrapMode>param8(this.data[Op.TWRAP], 0); }\t\n\tget wrapV() { return <WrapMode>param8(this.data[Op.TWRAP], 8); }\n\n\tget levelMode() { return <TextureLevelMode>param8(this.data[Op.TBIAS], 0); }\n\tget mipmapBias() { return param8(this.data[Op.TBIAS], 16) / 16; }\n\n\tget offsetU() { return float1(this.data[Op.TEXOFFSETU]); }\n\tget offsetV() { return float1(this.data[Op.TEXOFFSETV]); }\n\n\tget scaleU() { return float1(this.data[Op.TEXSCALEU]); }\n\tget scaleV() { return float1(this.data[Op.TEXSCALEV]); }\n\n\tget shadeU() { return param2(this.data[Op.TEXTURE_ENV_MAP_MATRIX], 0); }\n\tget shadeV() { return param2(this.data[Op.TEXTURE_ENV_MAP_MATRIX], 8); }\n\t\t\t\t\n\tget effect() { return <TextureEffect>param8(this.data[Op.TFUNC], 0); }\n\tget hasAlpha() { return this.colorComponent == TextureColorComponent.Rgba; }\n\tget colorComponent() { return <TextureColorComponent>param8(this.data[Op.TFUNC], 8); }\n\tget fragment2X() { return param8(this.data[Op.TFUNC], 16) != 0; }\n\tget envColor() { return new Color().setRGB(param24(this.data[Op.TEC])); }\n\t\n\tget pixelFormat() { return <PixelFormat>param4(this.data[Op.TPSM], 0); }\n\n\tget slopeLevel() { return float1(this.data[Op.TSLOPE]); }\n\t\n\tget swizzled() { return param8(this.data[Op.TMODE], 0) != 0; }\n\tget mipmapShareClut() { return param8(this.data[Op.TMODE], 8) != 0; }\n\tget mipmapMaxLevel() { return param8(this.data[Op.TMODE], 16) != 0; }\n\t\n\tget filterMinification() { return <TextureFilter>param8(this.data[Op.TFLT], 0); }\n\tget filterMagnification() { return <TextureFilter>param8(this.data[Op.TFLT], 8); }\n\tget enabled() { return bool1(this.data[Op.TEXTUREMAPENABLE]); }\n\t\n\tget textureMapMode() { return <TextureMapMode>param8(this.data[Op.TMAP], 0); }\n\tget textureProjectionMapMode() { return <TextureProjectionMapMode>param8(this.data[Op.TMAP], 8); }\n\n\tget tmode() { return this.data[Op.TMODE]; }\n\t\n\tgetPixelsSize(size:number) {\n\t\treturn PixelConverter.getSizeInBytes(this.pixelFormat, size);\n\t}\n\n\tget textureComponentsCount() {\n\t\tswitch (this.textureMapMode) {\n\t\t\tdefault: throw(new Error(\"Invalid textureMapMode\"));\n\t\t\tcase TextureMapMode.GU_TEXTURE_COORDS: return 2;\n\t\t\tcase TextureMapMode.GU_TEXTURE_MATRIX:\n\t\t\t\tswitch (this.textureProjectionMapMode) {\n\t\t\t\t\tcase TextureProjectionMapMode.GU_NORMAL: return 3;\n\t\t\t\t\tcase TextureProjectionMapMode.GU_NORMALIZED_NORMAL: return 3;\n\t\t\t\t\tcase TextureProjectionMapMode.GU_POSITION: return 3;\n\t\t\t\t\tcase TextureProjectionMapMode.GU_UV: return 2; \n\t\t\t\t}\n\t\t\t\treturn 2;\n\t\t\tcase TextureMapMode.GU_ENVIRONMENT_MAP: return 2;\n\t\t}\n\t}\n}\n\nexport class CullingState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget enabled() { return bool1(this.data[Op.CULLFACEENABLE]); }\n\tget direction() { return <CullingDirection>param24(this.data[Op.CULL]); }\n}\n\nexport const enum TestFunctionEnum {\n\tNever = 0,\n\tAlways = 1,\n\tEqual = 2,\n\tNotEqual = 3,\n\tLess = 4,\n\tLessOrEqual = 5,\n\tGreater = 6,\n\tGreaterOrEqual = 7,\n}\n\nexport class DepthTestState {\n\tconstructor(private data:Uint32Array) {}\n\t\n\tget enabled() { return bool1(this.data[Op.ZTESTENABLE]); }\n\tget func() { return param8(this.data[Op.ZTST], 0); }\n\tget mask() { return param16(this.data[Op.ZMSK], 0); }\n\t\n\tget rangeNear() { return (this.data[Op.MAXZ] & 0xFFFF) / 65536; }\n\tget rangeFar() { return (this.data[Op.MINZ] & 0xFFFF) / 65536; }\n}\n\nexport const enum ShadingModelEnum {\n\tFlat = 0,\n\tSmooth = 1,\n}\n\nexport const enum GuBlendingFactor {\n\tGU_SRC_COLOR                     = 0,// = 0x0300,\n\tGU_ONE_MINUS_SRC_COLOR           = 1,// = 0x0301,\n\tGU_SRC_ALPHA                     = 2,// = 0x0302,\n\tGU_ONE_MINUS_SRC_ALPHA           = 3,// = 0x0303,\n\tGU_DST_ALPHA                     = 4,// = 0x0304,\n\tGU_ONE_MINUS_DST_ALPHA           = 5,// = 0x0305,\n\tGU_FIX = 10,\n}\n\t\nexport const enum GuBlendingEquation {\n\tAdd = 0,\n\tSubstract = 1,\n\tReverseSubstract = 2,\n\tMin = 3,\n\tMax = 4,\n\tAbs = 5,\n}\n\nexport class Color {\n\tpublic constructor(public r = 0, public g = 0, public b = 0, public a = 1) {\n\t}\n\n\tsetRGB(rgb: number) {\n\t\tthis.r = BitUtils.extractScale1f(rgb, 0, 8);\n\t\tthis.g = BitUtils.extractScale1f(rgb, 8, 8);\n\t\tthis.b = BitUtils.extractScale1f(rgb, 16, 8);\n\t\tthis.a = 1;\n\t\treturn this;\n\t}\n\t\n\tsetRGB_A(rgb:number, a: number) {\n\t\tthis.setRGB(rgb);\n\t\tthis.a = BitUtils.extractScale1f(a, 0, 8);\n\t\treturn this;\n\t}\n\n\tset(r: number, g: number, b: number, a: number = 1) {\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\t\tthis.a = a;\n\t\treturn this;\n\t}\n\n\tstatic add(a: Color, b: Color, dest: Color = new Color()) {\n\t\tdest.r = a.r + b.r;\n\t\tdest.g = a.g + b.g;\n\t\tdest.b = a.b + b.b;\n\t\tdest.a = a.a * b.a;\n\t\treturn dest;\n\t}\n\n\tequals(r:number, g:number, b:number, a:number) {\n\t\treturn (this.r == r) && (this.g == g) && (this.b == b) && (this.a == a);\n\t}\n}\n\nexport class Blending {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget fixColorSource() { return new Color().setRGB(param24(this.data[Op.SFIX])); }\n\tget fixColorDestination() { return new Color().setRGB(param24(this.data[Op.DFIX])); }\n\t\n\tget enabled() { return bool1(this.data[Op.ALPHABLENDENABLE]); }\n\t\n\tget functionSource() { return <GuBlendingFactor>param4(this.data[Op.ALPHA], 0); }\n\tget functionDestination() { return <GuBlendingFactor>param4(this.data[Op.ALPHA], 4); }\n\tget equation() { return <GuBlendingEquation > param4(this.data[Op.ALPHA], 8); }\n\t\n\tget colorMask() {\n\t\treturn new Color().setRGB_A(\n\t\t\tparam24(this.data[Op.PMSKC]),\n\t\t\tparam8(this.data[Op.PMSKA], 0)\n\t\t);\n\t}\n}\n\nexport class AlphaTest {\n\tconstructor(private data:Uint32Array) { }\n\n\tget enabled() { return bool1(this.data[Op.ALPHATESTENABLE]); }\n\t\n\tget func() { return <TestFunctionEnum>param8(this.data[Op.ATST], 0); }\n\tget value() { return param8(this.data[Op.ATST], 8); }\t\n\tget mask() { return param8(this.data[Op.ATST], 16); }\n}\n\nexport class Rectangle {\n\tconstructor(public left:number, public top:number, public right:number, public bottom:number) {\n\t}\n\n\tget width() { return this.right - this.left; }\n\tget height() { return this.bottom - this.top; }\n}\n\nexport class ClipPlane {\n\tconstructor(private data: Uint32Array) { }\n\t\n\tget enabled() { return bool1(this.data[Op.CLIPENABLE]); }\n\tget scissor() { return new Rectangle(this.left, this.top, this.right, this.bottom); }\n\tget left() { return param10(this.data[Op.SCISSOR1], 0); }\n\tget top() { return param10(this.data[Op.SCISSOR1], 10); }\n\tget right() { return param10(this.data[Op.SCISSOR2], 0); }\n\tget bottom() { return param10(this.data[Op.SCISSOR2], 10); }\n}\n\nexport class SkinningState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tdataf = new Float32Array(this.data.buffer);\n\n\tboneMatrices = [\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 0),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 1),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 2),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 3),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 4),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 5),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 6),\n\t\tcreateMatrix4x3(this.data, Op.MAT_BONES + 12 * 7)\n\t];\n}\n\nexport const enum StencilOperationEnum {\n\tKeep = 0,\n\tZero = 1,\n\tReplace = 2,\n\tInvert = 3,\n\tIncrement = 4,\n\tDecrement = 5,\n}\n\nexport class StencilState {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget enabled() { return bool1(this.data[Op.STENCILTESTENABLE]);  }\n\t\n\tget fail() { return <StencilOperationEnum>param8(this.data[Op.SOP], 0); }\n\tget zfail() { return <StencilOperationEnum>param8(this.data[Op.SOP], 8); }\n\tget zpass() { return <StencilOperationEnum>param8(this.data[Op.SOP], 16); }\n\n\tget func() { return <TestFunctionEnum>param8(this.data[Op.STST], 0); }\n\tget funcRef() { return param8(this.data[Op.STST], 8); }\n\tget funcMask() { return param8(this.data[Op.STST], 16); }\n}\n\nexport class PatchState {\n\tconstructor(private data:Uint32Array) { }\n\tget divs() { return param8(this.data[Op.PATCHDIVISION], 0); }\n\tget divt() { return param8(this.data[Op.PATCHDIVISION], 8); }\n}\n\nexport class Fog {\n\tconstructor(private data:Uint32Array) { }\n\n\tget color() { return new Color().setRGB(this.data[Op.FCOL]); }\n\tget far() { return float1(this.data[Op.FFAR]); }\n\tget dist() { return float1(this.data[Op.FDIST]); }\n\tget enabled() { return bool1(this.data[Op.FOGENABLE]); }\n}\n\nexport class LogicOp {\n\tconstructor(private data:Uint32Array) { }\n\t\n\tget enabled() { return this.data[Op.LOGICOPENABLE]; }\n}\n\nexport class LineSmoothState {\n\tconstructor(private data:Uint32Array) {}\n\tget enabled() { return bool1(this.data[Op.ANTIALIASENABLE]); }\n}\n\nexport class PatchCullingState {\n\tconstructor(private data:Uint32Array) {}\n\tget enabled() { return bool1(this.data[Op.PATCHCULLENABLE]); }\n\tget faceFlag() { return bool1(this.data[Op.PATCHFACING]); }\n}\n\nexport class OffsetState {\n\tconstructor(private data:Uint32Array) {}\n\tget x() { return param4(this.data[Op.OFFSETX], 0); }\n\tget y() { return param4(this.data[Op.OFFSETY], 0); }\n}\n\nexport class GpuState {\n\tdata = new Uint32Array(512);\n\tdataf = new Float32Array(this.data.buffer);\n\tcopyFrom(that:GpuState) { return this.writeData(that.data); }\n\twriteData(data:Uint32Array) { this.data.set(data); return this; }\n\treadData():Uint32Array { return ArrayBufferUtils.cloneUint32Array(this.data); }\n\t\n\tframeBuffer = new GpuFrameBufferState(this.data);\n\tvertex = new VertexState(this.data);\n\tstencil = new StencilState(this.data);\n\tskinning = new SkinningState(this.data);\n\t\n\tprojectionMatrix = createMatrix4x4(this.data, Op.MAT_PROJ);\n\tviewMatrix = createMatrix4x3(this.data, Op.MAT_VIEW);\n\tworldMatrix = createMatrix4x3(this.data, Op.MAT_WORLD);\n\t\n\tviewport = new ViewPort(this.data);\n\tregion = new Region(this.data);\n\toffset = new OffsetState(this.data);\n\tfog = new Fog(this.data);\n\tclipPlane = new ClipPlane(this.data);\n\tlogicOp = new LogicOp(this.data);\n\tlightning = new Lightning(this.data);\n\talphaTest = new AlphaTest(this.data);\n\tblending = new Blending(this.data);\n\tpatch = new PatchState(this.data);\n\ttexture = new TextureState(this.data);\n\tlineSmoothState = new LineSmoothState(this.data);\n\tpatchCullingState = new PatchCullingState(this.data);\n\tculling = new CullingState(this.data);\n\tdithering = new DitheringState(this.data);\n\tcolorTest = new ColorTestState(this.data);\n\tdepthTest = new DepthTestState(this.data);\n\n\tget clearing() { return param1(this.data[Op.CLEAR], 0) != 0; }\n\tget clearFlags() { return param8(this.data[Op.CLEAR], 8); }\n\tget baseAddress() { return ((param24(this.data[Op.BASE]) << 8) & 0xff000000); }\n\tset baseOffset(value: number) {\n\t\tthis.data[Op.OFFSETADDR] &= ~0x00FFFFFF;\n\t\tthis.data[Op.OFFSETADDR] |= (value >>> 8) & 0x00FFFFFF;\n\t}\n\tget baseOffset() { return param24(this.data[Op.OFFSETADDR]) << 8; }\n\tget indexAddress() { return param24(this.data[Op.IADDR]); }\n\tget shadeModel() { return <ShadingModelEnum>param16(this.data[Op.SHADEMODE], 0); }\n\tget ambientModelColor() { return new Color().setRGB_A(this.data[Op.MATERIALAMBIENT], this.data[Op.MATERIALALPHA]); }\n\tget diffuseModelColor() { return new Color().setRGB(this.data[Op.MATERIALDIFFUSE]); }\n\tget specularModelColor() { return new Color().setRGB(this.data[Op.MATERIALSPECULAR]); }\n\tget drawPixelFormat() { return <PixelFormat>param4(this.data[Op.PSM], 0); } \n\n\twriteFloat(index:number, offset:number, data:number) {\n\t\tthis.dataf[offset + this.data[index]++] = data;\n\t}\n\n\tgetMorphWeight(index:number) { return float1(this.data[Op.MORPHWEIGHT0 + index]);  }\n\tgetAddressRelativeToBase(relativeAddress: number) { return (this.baseAddress | relativeAddress); }\n\tgetAddressRelativeToBaseOffset(relativeAddress: number) { return ((this.baseAddress | relativeAddress) + this.baseOffset); }\n}\n\nexport class ColorTestState {\n\tconstructor(private data:Uint32Array) { }\n\tget enabled() { return bool1(this.data[Op.COLORTESTENABLE]); }\n}\n\nexport class DitheringState {\n\tconstructor(private data:Uint32Array) { }\n\tget enabled() { return bool1(this.data[Op.DITHERENABLE]); }\n}\n\nexport const enum WrapMode {\n\tRepeat = 0,\n\tClamp = 1,\n}\n\nexport const enum TextureEffect {\n\tModulate = 0,  // GU_TFX_MODULATE\n\tDecal = 1,     // GU_TFX_DECAL\n\tBlend = 2,     // GU_TFX_BLEND\n\tReplace = 3,   // GU_TFX_REPLACE\n\tAdd = 4,\t   // GU_TFX_ADD\n}\n\nexport const enum TextureFilter {\n\tNearest = 0,\n\tLinear = 1,\n\tNearestMipmapNearest = 4,\n\tLinearMipmapNearest = 5,\n\tNearestMipmapLinear = 6,\n\tLinearMipmapLinear = 7,\n}\n\nexport const enum TextureColorComponent {\n\tRgb = 0,    // GU_TCC_RGB\n\tRgba = 1,   // GU_TCC_RGBA\n}\n\nexport const enum PrimitiveType {\n\tPoints = 0,\n\tLines = 1,\n\tLineStrip = 2,\n\tTriangles = 3,\n\tTriangleStrip = 4,\n\tTriangleFan = 5,\n\tSprites = 6,\n}\n\n", "\uFEFFimport \"../../../emu/global\"\nimport {StringDictionary} from \"../../../global/utils\";\nimport {mat4} from \"../../../global/math\";\n\nconst mat4x3 = mat4.create();\n\nexport class WrappedWebGLUniform {\n\tprivate location: WebGLUniformLocation;\n\n\tconstructor(private gl: WebGLRenderingContext, private program: WebGLProgram, private name: string) {\n\t\tthis.location = gl.getUniformLocation(program, name)!\n\t}\n\n\tsetMat4(data: Float32Array) {\n\t\tthis.gl.uniformMatrix4fv(this.location, false, data);\n\t}\n\n\tsetMat4x3(data: Float32Array) {\n\t\tmat4.from4x3(mat4x3, data);\n\t\tthis.gl.uniformMatrix4fv(this.location, false, mat4x3);\n\t}\n\n\tset1i(x: number) { this.gl.uniform1i(this.location, x); }\n\tset1f(x: number) { this.gl.uniform1f(this.location, x); }\n\tset2f(x: number, y:number) { this.gl.uniform2f(this.location, x, y); }\n\tset4f(x: number, y: number, z: number, w: number) { this.gl.uniform4f(this.location, x, y, z, w); }\n}\n\nexport class WrappedWebGLAttrib {\n\tpublic location: number;\n\t// @ts-ignore\n    private buffer: WebGLBuffer;\n\n\tconstructor(private gl: WebGLRenderingContext, private program: WebGLProgram, private name: string) {\n\t\tthis.location = gl.getAttribLocation(program, name);\n\t}\n\n\tenable() {\n\t\tif (this.location < 0) return;\n\t\tthis.gl.enableVertexAttribArray(this.location);\n\t}\n\n\tdisable() {\n\t\tif (this.location < 0) return;\n\t\tthis.gl.disableVertexAttribArray(this.location);\n\t}\n\n\tsetFloats(rsize: number, arr: Float32Array) {\n\t\tif (this.location < 0) return;\n\n        const gl = this.gl;\n        if (!this.buffer) this.buffer = this.gl.createBuffer()!\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n\t\t(<any>gl.bufferData)(gl.ARRAY_BUFFER, arr, gl.DYNAMIC_DRAW);\n\t\tthis.enable();\n\t\tgl.vertexAttribPointer(this.location, rsize, gl.FLOAT, false, 0, 0);\n\t}\n}\n\nexport class WrappedWebGLProgram {\n\tprivate uniforms: StringDictionary<WrappedWebGLUniform> = {};\n\tprivate attribs: StringDictionary<WrappedWebGLAttrib> = {};\n\t\n\tpublic vPosition:WrappedWebGLAttrib;\n\tpublic vColor:WrappedWebGLAttrib;\t\n\tpublic vTexcoord:WrappedWebGLAttrib;\n\tpublic vNormal:WrappedWebGLAttrib;\n\tpublic vertexWeight1:WrappedWebGLAttrib;\n\tpublic vertexWeight2:WrappedWebGLAttrib;\n\n\tconstructor(private gl: WebGLRenderingContext, private program: WebGLProgram, public vs: string, public fs: string) {\n\t\tthis.vPosition = this.getAttrib('vPosition');\n\t\tthis.vColor = this.getAttrib('vColor');\n\t\tthis.vTexcoord = this.getAttrib('vTexcoord');\n\t\tthis.vNormal = this.getAttrib('vNormal');\n\t\tthis.vertexWeight1 = this.getAttrib('vertexWeight1');\n\t\tthis.vertexWeight2 = this.getAttrib('vertexWeight2');\n\t}\n\n\tuse() {\n\t\tthis.gl.useProgram(this.program);\n\t}\n\n\tgetUniform(name: string):WrappedWebGLUniform {\n        let uniform = this.uniforms[name];\n        if (!uniform) uniform = this.uniforms[name] = new WrappedWebGLUniform(this.gl, this.program, name);\n\t\treturn uniform;\n\t}\n\n\tgetAttrib(name: string):WrappedWebGLAttrib {\n        let attrib = this.attribs[name];\n        if (!attrib) attrib = this.attribs[name] = new WrappedWebGLAttrib(this.gl, this.program, name);\n\t\treturn attrib;\n\t}\n}\n\nexport class FastFloat32Buffer {\n\tprivate arrayBuffer = new ArrayBuffer(32768 * 4 * 4 * 4);\n\tprivate float32Array = new Float32Array(this.arrayBuffer);\n\tprivate index = 0;\n\n\trestart() {\n\t\tthis.index = 0;\n\t}\n\n\tpush(value: number) {\n\t\tthis.float32Array[this.index++] = value;\n\t}\n\n\tpush2(x: number, y: number) {\n\t\tthis.float32Array[this.index++] = x;\n\t\tthis.float32Array[this.index++] = y;\n\t}\n\n\tpush3(x: number, y: number, z: number) {\n\t\tthis.float32Array[this.index++] = x;\n\t\tthis.float32Array[this.index++] = y;\n\t\tthis.float32Array[this.index++] = z;\n\t}\n\n\tpush4(x: number, y: number, z: number, w: number) {\n\t\tthis.float32Array[this.index++] = x;\n\t\tthis.float32Array[this.index++] = y;\n\t\tthis.float32Array[this.index++] = z;\n\t\tthis.float32Array[this.index++] = w;\n\t}\n\n\tslice() {\n\t\treturn new Float32Array(this.arrayBuffer, 0, this.index);\n\t}\n}\n", "\uFEFFimport \"../../../emu/global\"\nimport \"./webgl_enums\"\nimport {NumberDictionary} from \"../../../global/utils\";\nimport {WrappedWebGLProgram} from \"./webgl_utils\";\nimport {GpuState, VertexInfo} from \"../gpu_state\";\nimport {PixelFormatUtils} from \"../../pixelformat\";\n\nexport class ShaderCache {\n\tprivate programs: NumberDictionary<WrappedWebGLProgram> = {};\n\n\tconstructor(private gl: WebGLRenderingContext, private shaderVertString: string, private shaderFragString: string) {\n\t}\n\t\n\tinvalidateWithGl(gl: WebGLRenderingContext) {\n\t\tthis.programs = {};\n\t\tthis.gl = gl;\n\t}\n\n\tgetProgram(vertex: VertexInfo, state: GpuState, optimized:boolean) {\n        let hash = vertex.hash;\n        hash += Math.pow(2, 32) * (state.alphaTest.enabled ? 1 : 0);\n\t\thash += Math.pow(2, 33) * (state.clearing ? 1 : 0);\n\t\thash += Math.pow(2, 34) * (optimized ? 1 : 0);\n\t\tif (this.programs[hash]) return this.programs[hash];\n\t\treturn this.programs[hash] = this.createProgram(vertex, state, optimized);\n\t}\n\n\tcreateProgram(vertex: VertexInfo, state: GpuState, optimized:boolean) {\n        const defines: string[] = [];\n        if (optimized) defines.push('OPTIMIZED 1');\n\t\tif (vertex.transform2D) defines.push('TRANSFORM_2D 1');\n\t\tif (vertex.hasPosition) defines.push(`VERTEX_POSITION ${vertex.position}`);\n\t\tif (vertex.hasColor) defines.push(`VERTEX_COLOR ${vertex.color}`);\n\t\tif (vertex.hasTexture) {\n\t\t\tdefines.push(`VERTEX_TEXTURE ${vertex.texture}`);\n\t\t\tif (PixelFormatUtils.hasClut(state.texture.pixelFormat)) {\n\t\t\t\tdefines.push('TEXTURE_CLUT 1');\n\t\t\t}\n\t\t}\n\t\tif (vertex.hasNormal) defines.push(`VERTEX_NORMAL ${vertex.normal}`);\n\t\tif (vertex.hasWeight) defines.push(`VERTEX_WEIGHT ${vertex.weight}`);\n\n\t\tif (!state.clearing) {\n\t\t\tif (state.alphaTest.enabled) defines.push('ALPHATEST 1');\n\t\t}\n\n\t\tdefines.push(`VERTEX_SKINNING ${vertex.realWeightCount}`);\n\n        const preppend = defines.map(item => `#define ${item}`).join(\"\\n\");\n\n        return ShaderCache.shaderProgram(\n\t\t\tthis.gl,\n\t\t\tpreppend + \"\\n\" + this.shaderVertString,\n\t\t\tpreppend + \"\\n\" + this.shaderFragString\n\t\t\t);\n\t}\n\n\tstatic shaderProgram(gl: WebGLRenderingContext, vs: string, fs: string) {\n\t\tconst prog = gl.createProgram()!\n        const addshader = (type:string, source:string) => {\n            const s = gl.createShader((type == 'vertex') ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER)!;\n\t\t\tgl.shaderSource(s, source);\n\t\t\tgl.compileShader(s);\n\t\t\tif (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) throw (new Error(\"Could not compile \" + type + \" shader:\\n\\n\" + gl.getShaderInfoLog(s) + \"\\n\\n\" + source));\n\t\t\tgl.attachShader(prog, s);\n\t\t};\n\t\taddshader('vertex', vs);\n\t\taddshader('fragment', fs);\n\t\tgl.linkProgram(prog);\n\t\tif (!gl.getProgramParameter(prog, gl.LINK_STATUS)) throw (new Error(\"Could not link the shader program!\"));\n\t\treturn new WrappedWebGLProgram(gl, prog, vs, fs);\n\t}\n}\n", "\uFEFFimport \"../../../emu/global\"\nimport \"./webgl_enums\"\nimport { GpuStats } from '../gpu_stats';\nimport {addressToHex, ArrayBufferUtils, Signal1} from \"../../../global/utils\";\nimport \"./webgl_enums\";\nimport {MathUtils} from \"../../../global/math\";\nimport {GL} from \"./webgl_enums\";\nimport {GpuState, TextureFilter} from \"../gpu_state\";\nimport {PixelConverter, PixelFormatUtils} from \"../../pixelformat\";\nimport {WrappedWebGLProgram} from \"./webgl_utils\";\nimport {OptimizedBatchTransfer} from \"../gpu_vertex\";\nimport {Memory} from \"../../memory\";\n\nexport class Texture {\n\tprivate texture: WebGLTexture;\n\tvalid = false;\n\thash: string = '';\n\n\trecheckCount = 0;\n\tframesEqual = 0;\n\n\t_width?: number = undefined;\n\t_height?: number = undefined;\n\t\n\tprivate state: GpuState;\n\n\tconstructor(private gl: WebGLRenderingContext) {\n\t\tthis.texture = gl.createTexture()!\n\t\tthis.state = new GpuState();\n\t}\n\t\n\tget textureState() { return this.state.texture; }\n\tget mipmap() { return this.textureState.mipmaps[0]; }\n\n\tget width() { return this._width || this.mipmap.textureWidth; }\n\tget height() { return this._height || this.mipmap.textureHeight; }\n\tget swizzled() { return this.textureState.swizzled; }\n\tget addressStart() { return this.mipmap.address; }\n\tget addressEnd() { return this.mipmap.addressEnd; }\n\tget pixelFormat() { return this.textureState.pixelFormat; }\n\n\tupdateFromState(state: GpuState, textureData:Uint8Array, clutData:Uint8Array, mem: Memory) {\n\t\tthis.state.copyFrom(state);\n\t\t\n\t\t//this.updatedTextures.add(texture);\n\n\t\tconst textureState = state.texture;\n\t\tconst clutState = state.texture.clut;\n\t\tconst mipmap = textureState.mipmaps[0];\n\n        const h = mipmap.textureHeight, w = mipmap.textureWidth, w2 = mipmap.bufferWidth;\n\n        const data = new Uint8Array(PixelConverter.getSizeInBytes(state.texture.pixelFormat, w2 * h));\n        data.set(textureData);\n\t\t//data.set(new Uint8Array(this.memory.buffer, mipmap.address, data.length));\n\n\t\tif (state.texture.swizzled) PixelConverter.unswizzleInline(state.texture.pixelFormat, data, w2, h);\n\n        let clut: Uint32Array | null = null;\n        if (textureState.hasClut) {\n            clut = new Uint32Array(clutState.numberOfColors);\n            for (let n = 0; n < clut.length; n++) {\n                clut[n] = clutState.getColor(mem, n)\n            }\n            //if (clutState.numberOfColors <= 16) console.warn(\"clut\", clutState.numberOfColors, clutState.start, clutState.mask, clutState.shift, [...clut].map(it => addressToHex(it)))\n\t\t}\n\t\t\n\t\tthis.fromBytesRGBA(PixelConverter.decode(\n\t\t\ttextureState.pixelFormat, data, new Uint32Array(w2 * h),\n\t\t\ttextureState.hasAlpha,\n\t\t\tclut, 0, 0, 0xFF\n\t\t), w2, h);\n\t\t\n\t\t//console.log('texture updated!');\n\t}\n\n\tprivate _create(callbackTex2D: () => void) {\n        const gl = this.gl;\n\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\tcallbackTex2D();\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\tfromBytesRGBA(data: Uint32Array, width: number, height: number) {\n        const gl = this.gl;\n        this._width = width;\n\t\tthis._height = height;\n\t\tthis._create(() => {\n\t\t\t(<any>gl).texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, ArrayBufferUtils.uint32ToUint8(data));\n\t\t});\n\t}\n\n\tfromCanvas(canvas: HTMLCanvasElement) {\n        const gl = this.gl;\n\n        this._width = canvas.width;\n\t\tthis._height = canvas.height;\n\t\tthis._create(() => {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, <any>canvas);\n\t\t\t//gl.generateMipmap(gl.TEXTURE_2D);\n\t\t});\n\t}\n\n\tbind(textureUnit: number, min: number, mag: number, wraps: number, wrapt: number) {\n        const gl = this.gl;\n\n        gl.activeTexture(gl.TEXTURE0 + textureUnit);\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, min);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mag);\n\t\tif (!MathUtils.isPowerOfTwo(this.width) || !MathUtils.isPowerOfTwo(this.height)) {\n\t\t\twraps = wrapt = gl.CLAMP_TO_EDGE;\n\t\t}\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wraps);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapt);\n\t}\n\n\tstatic createCanvas() {\n\t    /*\n\t\tconst canvas:HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.style.border = '1px solid white';\n\t\tcanvas.width = w2;\n\t\tcanvas.height = h;\n\t\tconst ctx = <CanvasRenderingContext2D>canvas.getContext('2d');\n\t\tconst imageData = ctx.createImageData(w2, h);\n\t\tconst u8 = imageData.data;\n\n\t\tctx.clearRect(0, 0, w, h);\n\t\tfor (let n = 0; n < w2 * h * 4; n++) u8[n] = data2[n];\n\t\tctx.putImageData(imageData, 0, 0);\n\n\t\tconsole.error(`generated texture!${texture.toString()}`);\n\t\tconst div = document.createElement('div');\n\t\tconst textdiv = document.createElement('div');\n        textdiv.innerText = `${texture.toString()}w=${w},w2=${w2},${h}`;\n\t\tdiv.appendChild(canvas);\n\t\tdiv.appendChild(textdiv);\n\t\t\n\t\tdocument.body.appendChild(div);\n\t    */\n    }\n\n\ttoString() {\n\t\treturn `Texture(address = ${this.addressStart}, hash = ${this.hash}, pixelFormat = ${this.pixelFormat}, swizzled = ${this.swizzled}`;\n\t}\n}\n\nexport class TextureHandler {\n\tconstructor(private gl: WebGLRenderingContext, public stats: GpuStats, public mem: Memory) {\n\t\tthis.invalidateWithGl(gl);\n\t}\n\n\tprivate texturesByHash: Map<string, Texture> = new Map<string, Texture>();\n\tprivate texturesByAddress: Map<number, Texture> = new Map<number, Texture>();\n\tprivate textures: Texture[] = []\n\t\n\trehashSignal = new Signal1<number>();\n\t\n\tinvalidateWithGl(gl: WebGLRenderingContext) {\n\t\tthis.gl = gl;\n\t\t\n\t\tthis.texturesByHash = new Map<string, Texture>();\n\t\tthis.texturesByAddress = new Map<number, Texture>();\n\t\tthis.textures = [];\n\t}\n\n\tinvalidatedMemoryAll() {\n\t\tfor (let texture of this.textures) texture.valid = false;\n\t}\n\n\tinvalidatedMemoryRange(low: number, high: number) {\n\t\t//console.log('texture: invalidatedMemoryRange', low, high)\n\t\tfor (let texture of this.textures) {\n\t\t\tif (texture.addressStart >= low && texture.addressEnd <= high) texture.valid = false;\n\t\t}\n\t}\n\t\n\tstartFrame() {\n\t}\n\t\n\tendFrame() {\n\t}\n\n\tbindTexture(prog: WrappedWebGLProgram, state: GpuState, enableBilinear:boolean, buffer:ArrayBuffer, batch: OptimizedBatchTransfer) {\n        const gl = this.gl;\n\n        const textureId = batch.textureLow + batch.clutLow * Math.pow(2, 24);\n\n        const textureData = (batch.textureLow > 0) ? new Uint8Array(buffer, batch.textureLow, batch.textureHigh - batch.textureLow) : null;\n        const clutData = (batch.clutLow > 0) ? new Uint8Array(buffer, batch.clutLow, batch.clutHigh - batch.clutLow) : null;\n\n        const mipmap = state.texture.mipmaps[0];\n\n        if (mipmap.bufferWidth == 0) return;\n\t\tif (mipmap.textureWidth == 0) return;\n\t\tif (mipmap.textureHeight == 0) return;\n\n\t\tlet hasClut = PixelFormatUtils.hasClut(state.texture.pixelFormat);\n\t\tlet clutState = state.texture.clut;\n\t\tlet textureState = state.texture;\n\t\tlet clutAddress = hasClut ? clutState.address : 0;\n\n\t\tlet texture: Texture;\n\n        const fastHash = mipmap.address + clutAddress * Math.pow(2, 24) + textureState.colorComponent * Math.pow(2, 18);\n\n        if (!this.texturesByAddress.get(fastHash)) {\n\t\t\ttexture = new Texture(gl);\n\t\t\tthis.texturesByAddress.set(fastHash, texture);\n\t\t\tthis.textures.push(texture);\n\t\t\t//console.warn('New texture allocated!', mipmap, state.texture);\n\t\t}\n\n\t\ttexture = this.texturesByAddress.get(fastHash)!\n\t\t\n\t\t//if (true) {\n\t\tif (!texture.valid) {\n\t\t\tconst hash = textureState.getHashSlow(textureData!, clutData!);\n\t\t\tthis.stats.hashMemoryCount++;\n\t\t\tthis.stats.hashMemorySize += mipmap.sizeInBytes;\n\t\t\tthis.rehashSignal.dispatch(mipmap.sizeInBytes);\n\t\t\t\n\t\t\tif (this.texturesByHash.has(hash)) {\n\t\t\t\ttexture = this.texturesByHash.get(hash)!\n\t\t\t} else if (texture.hash != hash) {\n\t\t\t\tthis.texturesByHash.delete(texture.hash);\n\n\t\t\t\ttexture.hash = hash;\n\t\t\t\ttexture.valid = true;\n\n\t\t\t\tthis.texturesByHash.set(hash, texture);\n\n\t\t\t\ttexture.updateFromState(state, textureData!, clutData!, this.mem);\n\t\t\t}\n\t\t}\n\n\t\ttexture.bind(\n\t\t\t0,\n\t\t\t(enableBilinear && state.texture.filterMinification == TextureFilter.Linear) ? gl.LINEAR : gl.NEAREST,\n\t\t\t(enableBilinear && state.texture.filterMagnification == TextureFilter.Linear) ? gl.LINEAR : gl.NEAREST,\n\t\t\tconvertWrapMode[state.texture.wrapU],\n\t\t\tconvertWrapMode[state.texture.wrapV]\n\t\t);\n\t\t//texture.bind(0, gl.NEAREST, gl.NEAREST, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE);\n\n\t\tprog.getUniform('textureSize').set2f(texture.width, texture.height);\n\t\tprog.getUniform('pixelSize').set2f(1.0 / texture.width, 1.0 / texture.height);\n\t\tprog.getUniform('uSampler').set1i(0);\n\t}\n\t\n\tunbindTexture(program: WrappedWebGLProgram, state: GpuState) {\n        const gl = this.gl;\n        //gl.activeTexture(gl.TEXTURE1);\n\t\t//gl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n}\n\nconst convertWrapMode = [GL.REPEAT, GL.CLAMP_TO_EDGE];\n\n//const convertTextureFilter = [GL.NEAREST, GL.LINEAR, GL.NEAREST, GL.LINEAR];\n//const convertTextureMimapFilter = [GL.NEAREST, GL.LINEAR, GL.NEAREST, GL.LINEAR, GL.NEAREST, GL.LINEAR, GL.NEAREST, GL.LINEAR];\n/*\nexport const enum TextureFilter {\n\tNearest = 0,\n\tLinear = 1,\n\tNearestMipmapNearest = 4,\n\tLinearMipmapNearest = 5,\n\tNearestMipmapLinear = 6,\n\tLinearMipmapLinear = 7,\n}\n*/\n", "// https://plugins.jetbrains.com/plugin/6993-glsl-support\n\n//language=glsl\nexport const shader_frag = `\nprecision mediump float;\n\n//#define DEBUG 1\n\n#define GU_TCC_RGB       0\n#define GU_TCC_RGBA      1\n\nuniform int u_enableColors;\nuniform int u_enableTextures;\nuniform int u_enableBilinear;\n\n#ifdef VERTEX_COLOR\n  varying vec4 v_Color;\n#else\n  uniform vec4 uniformColor;\n#endif\n\n#ifdef VERTEX_TEXTURE\n  uniform sampler2D uSampler;\n  uniform vec2 textureSize;\n  uniform vec2 pixelSize;\n  uniform int tfx;\n  uniform int tcc;\n  varying vec4 v_Texcoord;\n#endif\n\n#ifdef ALPHATEST\n  uniform int alphaTestFunc;\n  uniform int alphaTestReference;\n  uniform int alphaTestMask;\n#endif\n\nuniform float time;\n\nvoid main() {\n  #ifdef DEBUG\n    #ifdef VERTEX_TEXTURE\n      gl_FragColor = vec4(v_Texcoord.s, v_Texcoord.t, 0.0, 1.0);\n    #else\n      gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    #endif\n    return;\n  #else\n    #ifdef VERTEX_COLOR\n      gl_FragColor = v_Color;\n    #else\n      gl_FragColor = uniformColor;\n    #endif\n\n    #ifdef VERTEX_TEXTURE\n      vec4 texColor;\n      texColor = texture2D(uSampler, vec2(v_Texcoord.s, v_Texcoord.t));\n      if (u_enableTextures == 0) {\n        texColor.rgb = vec3(1.0, 1.0, 1.0);\n      }\n\n      #ifdef ALPHATEST\n        int alphaTestColor = int(texColor.a * 255.0);\n        if (alphaTestMask != 0xFF) alphaTestColor = 0;\n\n             if (alphaTestFunc == 0) { discard; } // GU_NEVER\n        else if (alphaTestFunc == 1) { } // GU_ALWAYS\n        else if (alphaTestFunc == 2) { if (!(alphaTestColor == alphaTestReference)) discard; } // GU_EQUAL\n        else if (alphaTestFunc == 3) { if (!(alphaTestColor != alphaTestReference)) discard; } // GU_NOT_EQUAL\n        else if (alphaTestFunc == 4) { if (!(alphaTestColor  < alphaTestReference)) discard; } // GU_LESS\n        else if (alphaTestFunc == 5) { if (!(alphaTestColor <= alphaTestReference)) discard; } // GU_LESS_OR_EQUAL\n        else if (alphaTestFunc == 6) { if (!(alphaTestColor  > alphaTestReference)) discard; } // GU_GREATER\n        else if (alphaTestFunc == 7) { if (!(alphaTestColor >= alphaTestReference)) discard; } // GU_GREATER_OR_EQUAL\n      #endif\n\n      if (u_enableColors != 0) {\n        if (tfx == 0) { // GU_TFX_MODULATE\n          gl_FragColor.rgb = texColor.rgb * gl_FragColor.rgb;\n          gl_FragColor.a = (tcc == GU_TCC_RGBA) ? (gl_FragColor.a * texColor.a) : texColor.a;\n        } else if (tfx == 1) { // GU_TFX_DECAL\n          if (tcc == GU_TCC_RGB) {\n            gl_FragColor.rgba = texColor.rgba;\n          } else {\n            gl_FragColor.rgb = texColor.rgb * gl_FragColor.rgb;\n            gl_FragColor.a = texColor.a;\n          }\n        } else if (tfx == 2) { // GU_TFX_BLEND\n          gl_FragColor.rgba = mix(texColor, gl_FragColor, 0.5);\n        } else if (tfx == 3) { // GU_TFX_REPLACE\n          gl_FragColor.rgb = texColor.rgb;\n          gl_FragColor.a = (tcc == GU_TCC_RGB) ? gl_FragColor.a : texColor.a;\n        } else if (tfx == 4) { // GU_TFX_ADD\n          gl_FragColor.rgb += texColor.rgb;\n          gl_FragColor.a = (tcc == GU_TCC_RGB) ? gl_FragColor.a : (texColor.a * gl_FragColor.a);\n        } else {\n          gl_FragColor = vec4(1, 0, 1, 1);\n        }\n      } else {\n        gl_FragColor = texColor;\n      }\n    #endif\n  #endif\n}\n`\n\n//language=glsl\nexport const shader_vert = `\n//#extension GL_ARB_gpu_shader_fp64 : enable\n//#pragma optionNV(fastmath off)\n//#pragma optionNV(fastprecision off)\n\nprecision mediump float;\n\nuniform mat4 u_modelViewProjMatrix;\n\nattribute vec4 vPosition;\n\nuniform int u_enableSkinning;\n\n#define TYPE_VOID 0\n#define TYPE_BYTE 1\n#define TYPE_SHORT 2\n#define TYPE_FLOAT 3\n\n#define COLOR_VOID 0\n#define COLOR_5650 4\n#define COLOR_5551 5\n#define COLOR_4444 6\n#define COLOR_8888 7\n\n#ifdef VERTEX_COLOR\n  attribute highp vec4 vColor;\n  varying vec4 v_Color;\n#endif\n\n#ifdef VERTEX_TEXTURE\n  uniform mat4 u_texMatrix;\n  attribute highp vec4 vTexcoord;\n  varying vec4 v_Texcoord;\n#endif\n\n#ifdef VERTEX_NORMAL\n  attribute vec4 vNormal;\n#endif\n\n#if (VERTEX_SKINNING >= 1)\n  uniform mat4 matrixBone0;\n  uniform mat4 matrixBone1;\n  uniform mat4 matrixBone2;\n  uniform mat4 matrixBone3;\n  uniform mat4 matrixBone4;\n  uniform mat4 matrixBone5;\n  uniform mat4 matrixBone6;\n  uniform mat4 matrixBone7;\n\n  attribute vec4 vertexWeight1;\n  attribute vec4 vertexWeight2;\n\n  mat4 getMatrixBone(int index) {\n    if (index == 0) return matrixBone0;\n    if (index == 1) return matrixBone1;\n    if (index == 2) return matrixBone2;\n    if (index == 3) return matrixBone3;\n    if (index == 4) return matrixBone4;\n    if (index == 5) return matrixBone5;\n    if (index == 6) return matrixBone6;\n    return matrixBone7;\n  }\n\n  \n  float _getVertexWeight(int index) {\n    if (index == 0) return vertexWeight1.x;\n    if (index == 1) return vertexWeight1.y;\n    if (index == 2) return vertexWeight1.z;\n    if (index == 3) return vertexWeight1.w;\n    if (index == 4) return vertexWeight2.x;\n    if (index == 5) return vertexWeight2.y;\n    if (index == 6) return vertexWeight2.z;\n    if (index == 7) return vertexWeight2.w;\n    return 0.0;\n  }\n  \n  float getVertexWeight(int index) {\n    float weight = _getVertexWeight(index);\n    \n    #if VERTEX_WEIGHT == TYPE_BYTE\n    weight /= 128.0;\n    #elif VERTEX_WEIGHT == TYPE_SHORT\n    weight /= 32768.0;\n    #endif\n\n    return weight;\n  }\n\n  vec4 performSkinning(vec4 vertexIn) {\n    vec4 vertexOut = vec4(0.0, 0.0, 0.0, 0.0);\n  \n    float totalWeight = 0.0;\n    for (int n = 0; n < VERTEX_SKINNING; n++) totalWeight += (getVertexWeight(n));\n    for (int n = 0; n < VERTEX_SKINNING; n++) vertexOut += (getMatrixBone(n) * (getVertexWeight(n)) / totalWeight) * vertexIn;\n\n    return vertexOut;\n  }\n\n  //vec4 prepareNormal(vec4 normal) {\n  //  return hasReversedNormal ? -normal : normal;\n  //}\n#endif\n\n#ifdef VERTEX_COLOR\n\n// We will be able to use >> and && when webgl2 is released.\n// Since the emulator requires quite power, probably mobiles/desktops\n// that we will be able to run it at decent speeds will support opengl es 3.0,\n// and thus webgl2\n\nvoid DecodeColor5650(inout highp vec4 C)\n{\n    int packedBits = int(C.x);\n    int rBits = packedBits - (packedBits / 32 * 32);\n    int gBits = (packedBits / 32) - (packedBits / 32 / 64 * 64);\n    int bBits = packedBits / 2048;\n    C.r = float((rBits * 8) + (rBits /  4));\n    C.g = float((gBits * 4) + (gBits / 16));\n    C.b = float((bBits * 8) + (bBits /  4));\n    C.a = 1.0;\n    C.rgb /= 255.0;\n}\n\nvoid DecodeColor5551(inout highp vec4 C)\n{\n    int packedBits = int(C.x);\n    int rBits = packedBits - (packedBits / 32 * 32);\n    int gBits = (packedBits / 32) - (packedBits / 32 / 32 * 32);\n    int bBits = (packedBits / 1024) - (packedBits / 1024 / 32 * 32);\n    C.r = float((rBits * 8) + (rBits / 4));\n    C.g = float((gBits * 8) + (gBits / 4));\n    C.b = float((bBits * 8) + (bBits / 4));\n    C.a = float(packedBits / 32768);\n    C.rgb /= 255.0;\n}\nvoid DecodeColor4444(inout highp vec4 C)\n{\n    int packedBits = int(C.x);\n    int rBits = packedBits - (packedBits / 16 * 16);\n    int gBits = (packedBits / 16) - (packedBits / 16 / 16 * 16);\n    int bBits = (packedBits / 256) - (packedBits / 256 / 16 * 16);\n    int aBits = packedBits / 4096;\n    C.r = float((rBits * 16) + rBits);\n    C.g = float((gBits * 16) + gBits);\n    C.b = float((bBits * 16) + bBits);\n    C.a = float((aBits * 16) + aBits);\n    C /= 255.0;\n}\n#endif\n\nvoid main() {\n  #ifdef VERTEX_COLOR\n    v_Color = vColor;\n    #ifdef OPTIMIZED\n      #if VERTEX_COLOR == COLOR_5650\n      DecodeColor5650(v_Color);\n      #elif VERTEX_COLOR == COLOR_5551\n      DecodeColor5551(v_Color);\n      #elif VERTEX_COLOR == COLOR_4444\n      DecodeColor4444(v_Color);\n      #elif VERTEX_COLOR == COLOR_8888\n      v_Color /= vec4(255.0);\n      #endif\n    #endif\n  #endif\n  \n  #ifdef VERTEX_TEXTURE\n    vec4 tcoord = vTexcoord;\n    #ifndef TRANSFORM_2D\n      #if VERTEX_TEXTURE == TYPE_BYTE\n      tcoord.xy /= vec2(128.0);\n      #elif VERTEX_TEXTURE == TYPE_SHORT\n      tcoord.xy /= vec2(32768.0);\n      #endif\n    #endif\n    v_Texcoord = u_texMatrix * tcoord;\n  #endif\n\n  vec4 pos = vPosition;\n  #ifndef TRANSFORM_2D\n    #if VERTEX_POSITION == TYPE_BYTE\n    pos.xyz /= vec3(127.0);\n    #elif VERTEX_POSITION == TYPE_SHORT\n    pos.xyz /= vec3(32767.0);\n    #endif\n  #endif\n  \n  #if (VERTEX_SKINNING >= 1)\n    if (u_enableSkinning != 0) {\n      pos = performSkinning(pos);\n    }\n  #endif\n\n  gl_Position = u_modelViewProjMatrix * pos;\n}\n`", "import {PromiseFast} from \"../global/utils\";\n\nexport class EmulatorUI {\n\tstatic openMessageAsync(message: string) {\n\t    console.error(message)\n\t\tif (window.alert) window.alert(message);\n\t\treturn PromiseFast.resolve(true);\n\t}\n}", "\uFEFFimport \"../../../emu/global\"\nimport \"./webgl_enums\"\nimport {\nGpuState, Color, ColorEnum, VertexInfo, PrimitiveType,\nCullingDirection, GuBlendingEquation, TextureMapMode,\nGuBlendingFactor\n} from '../gpu_state';\nimport { GpuStats } from '../gpu_stats'\nimport { ShaderCache } from './webgl_shader';\nimport { Texture, TextureHandler } from './webgl_texture';\nimport { FastFloat32Buffer, WrappedWebGLProgram, WrappedWebGLAttrib } from './webgl_utils';\nimport {downloadFileAsync} from \"../../../global/async\";\nimport {Stream} from \"../../../global/stream\";\nimport {PromiseFast, Signal1} from \"../../../global/utils\";\nimport {ClearBufferSet, GL} from \"./webgl_enums\";\nimport {mat4} from \"../../../global/math\";\nimport {shader_frag, shader_vert} from \"./webgl_shaders\";\nimport {BatchesTransfer, OptimizedBatchTransfer} from \"../gpu_vertex\";\nimport {EmulatorUI} from \"../../../ui/emulator_ui\";\nimport {Memory} from \"../../memory\";\n\nlet globalDriver: WebGlPspDrawDriver|null = null;\nexport class WebGlPspDrawDriver {\n\t// @ts-ignore\n    private gl: WebGLRenderingContext\n    // @ts-ignore\n\tprivate cache: ShaderCache\n    // @ts-ignore\n\tprivate textureHandler: TextureHandler\n\tprivate glAntialiasing: boolean = false\n\n\tconstructor(private canvas: HTMLCanvasElement, public stats: GpuStats) {\n\t\tglobalDriver = this;\n\t\tthis.createCanvas(false);\n\t\tthis.transformMatrix2d = mat4.ortho(mat4.create(), 0, 480, 272, 0, 0, -0xFFFF);\n\t}\n\t\n\tset antialiasing(value:boolean) {\n\t\tif (this.glAntialiasing == value) return;\n\t\tthis.glAntialiasing = value;\n\t\tthis.createCanvas(value);\n\t}\n\t\n\tget antialiasing() {\n\t\treturn this.glAntialiasing;\n\t}\n\n\tprivate createCanvas(glAntialiasing:boolean) {\n\t\tthis.glAntialiasing = glAntialiasing;\n        const webglOptions = {\n            alpha: false,\n            depth: true,\n            stencil: true,\n            antialias: glAntialiasing,\n            //premultipliedAlpha: false,\n            preserveDrawingBuffer: false,\n            //preserveDrawingBuffer: false,\n            //preferLowPowerToHighPerformance: false,\n            //failIfMajorPerformanceCaveat: false,\n        };\n\n        this.gl = <WebGLRenderingContext>this.canvas.getContext('webgl', webglOptions);\n\t\tif (!this.gl) this.gl = <WebGLRenderingContext>this.canvas.getContext('experimental-webgl', webglOptions);\n\n\t\tif (!this.gl) {\n            EmulatorUI.openMessageAsync('Can\\'t initialize WebGL!');\n\t\t\tthrow (new Error(\"Can't initialize WebGL!\"));\n\t\t}\n\n\t\tif (this.cache) this.cache.invalidateWithGl(this.gl);\n\t\tif (this.textureHandler) this.textureHandler.invalidateWithGl(this.gl);\n\t\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\t}\n\n\tinvalidatedMemoryAll() {\n\t\tthis.textureHandler.invalidatedMemoryAll();\n\t}\n\n\tinvalidatedMemoryRange(low: number, high: number) {\n\t\tthis.textureHandler.invalidatedMemoryRange(low, high);\n\t}\n\n\tregister(memory: Memory) {\n        this.cache = new ShaderCache(this.gl, shader_vert, shader_frag);\n        this.textureHandler = new TextureHandler(this.gl, this.stats, memory);\n\t}\n\n\tunregister() {\n\t    this.rehashSignal.clear()\n    }\n\n\tprivate clearing: boolean = false\n\tprivate clearingFlags: ClearBufferSet = 0\n\n\tsetClearMode(clearing: boolean, flags: number) {\n\t\tthis.clearing = clearing;\n\t\tthis.clearingFlags = <ClearBufferSet>flags;\n\t\t//console.log(`clearing: ${clearing}; ${flags}`);\n\t}\n\n\tprojectionMatrix = mat4.create();\n\tviewMatrix = mat4.create();\n\tworldMatrix = mat4.create();\n\ttransformMatrix = mat4.create();\n\ttransformMatrix2d = mat4.create();\n\n\tsetMatrices(projectionMatrix: Float32Array, viewMatrix: Float32Array, worldMatrix: Float32Array) {\n\t\tmat4.from4x4(this.projectionMatrix, projectionMatrix);\n\t\tmat4.from4x3(this.viewMatrix, viewMatrix);\n\t\tmat4.from4x3(this.worldMatrix, worldMatrix);\n\n\t\tmat4.identity(this.transformMatrix);\n\t\tmat4.multiply(this.transformMatrix, this.transformMatrix, this.projectionMatrix);\n\t\tmat4.multiply(this.transformMatrix, this.transformMatrix, this.viewMatrix);\n\t\tmat4.multiply(this.transformMatrix, this.transformMatrix, this.worldMatrix);\n\t}\n\n\tprivate enableDisable(type: number, enable: boolean) {\n\t\tif (enable) this.gl.enable(type); else this.gl.disable(type);\n\t\treturn enable;\n\t}\n\n\tprivate equationTranslate: number[] = [GL.FUNC_ADD, GL.FUNC_SUBTRACT, GL.FUNC_REVERSE_SUBTRACT, GL.FUNC_ADD, GL.FUNC_ADD, GL.FUNC_ADD]; // Add, Subtract, ReverseSubtract, Min, Max, Abs\n\tprivate opsConvertTable: number[] = [GL.KEEP, GL.ZERO, GL.REPLACE, GL.INVERT, GL.INCR, GL.DECR];\n\tprivate testConvertTable: number[] = [GL.NEVER, GL.ALWAYS, GL.EQUAL, GL.NOTEQUAL, GL.LESS, GL.LEQUAL, GL.GREATER, GL.GEQUAL];\n\tprivate testConvertTable_inv: number[] = [GL.NEVER, GL.ALWAYS, GL.EQUAL, GL.NOTEQUAL, GL.GREATER, GL.GEQUAL, GL.LESS, GL.LEQUAL];\n\tprivate updateNormalState(program: WrappedWebGLProgram, vertexInfo: VertexInfo, primitiveType: PrimitiveType) {\n        const state = this.state;\n        const gl = this.gl;\n\n        if (this.enableDisable(gl.CULL_FACE, state.culling.enabled && (primitiveType != PrimitiveType.Sprites))) {\n\t\t\tgl.cullFace((state.culling.direction == CullingDirection.ClockWise) ? gl.FRONT : gl.BACK);\n\t\t}\n\n\t\tif (this.enableDisable(gl.SCISSOR_TEST, state.clipPlane.enabled)) {\n            const rect = state.clipPlane.scissor;\n            const ratio = this.getScaleRatio();\n            gl.scissor(rect.left * ratio, rect.top * ratio, rect.width * ratio, rect.height * ratio);\n\t\t}\n\n        const blending = state.blending;\n        if (this.enableDisable(gl.BLEND, blending.enabled)) {\n            const getBlendFix = (color: Color) => {\n                if (color.equals(0, 0, 0, 1)) return gl.ZERO;\n                if (color.equals(1, 1, 1, 1)) return gl.ONE;\n                return gl.CONSTANT_COLOR;\n            };\n\n            let sfactor = gl.SRC_COLOR + blending.functionSource;\n            let dfactor = gl.SRC_COLOR + blending.functionDestination;\n\n            if (blending.functionSource == GuBlendingFactor.GU_FIX) {\n\t\t\t\tsfactor = getBlendFix(blending.fixColorSource);\n\t\t\t}\n\n\t\t\tif (blending.functionDestination == GuBlendingFactor.GU_FIX) {\n\t\t\t\tif ((sfactor == gl.CONSTANT_COLOR) && ((Color.add(blending.fixColorSource, blending.fixColorDestination).equals(1, 1, 1, 1)))) {\n\t\t\t\t\tdfactor = gl.ONE_MINUS_CONSTANT_COLOR;\n\t\t\t\t} else {\n\t\t\t\t\tdfactor = getBlendFix(blending.fixColorDestination);\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tgl.blendEquation(this.equationTranslate[blending.equation]);\n\t\t\tgl.blendFunc(sfactor, dfactor);\n\t\t\tswitch (blending.equation) {\n\t\t\t\tcase GuBlendingEquation.Abs:\n\t\t\t\tcase GuBlendingEquation.Max:\n\t\t\t\tcase GuBlendingEquation.Min:\n\t\t\t\tcase GuBlendingEquation.Add: gl.blendEquation(gl.FUNC_ADD); break;\n\t\t\t\tcase GuBlendingEquation.Substract: gl.blendEquation(gl.FUNC_SUBTRACT); break;\n\t\t\t\tcase GuBlendingEquation.ReverseSubstract: gl.blendEquation(gl.FUNC_REVERSE_SUBTRACT); break;\n\t\t\t}\n\n            const blendColor = blending.fixColorDestination;\n            gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n\t\t}\n\n        const stencil = state.stencil;\n        if (this.enableDisable(gl.STENCIL_TEST, stencil.enabled)) {\n\t\t\tgl.stencilFunc(this.testConvertTable[stencil.func], stencil.funcRef, stencil.funcMask);\n\t\t\tgl.stencilOp(this.opsConvertTable[stencil.fail], this.opsConvertTable[stencil.zfail], this.opsConvertTable[stencil.zpass]);\n\t\t}\n\n\t\tgl.depthRange(state.depthTest.rangeFar, state.depthTest.rangeNear);\n\t\t//gl.depthRange(0, 1);\n\t\tgl.depthMask(state.depthTest.mask == 0);\n\t\tif (this.enableDisable(gl.DEPTH_TEST, state.depthTest.enabled && !state.vertex.transform2D)) {\n\t\t\tgl.depthFunc(this.testConvertTable_inv[state.depthTest.func]);\n\t\t}\n\n        const alphaTest = state.alphaTest;\n        if (alphaTest.enabled) {\n\t\t\tprogram.getUniform('alphaTestFunc').set1i(alphaTest.func);\n\t\t\tprogram.getUniform('alphaTestReference').set1i(alphaTest.value);\n\t\t\tprogram.getUniform('alphaTestMask').set1i(alphaTest.mask);\n\t\t} else {\n\t\t\t//console.warn(\"alphaTest.enabled = false\");\n\t\t}\n\t}\n\n\tprivate updateClearStateEnd(program: WrappedWebGLProgram, vertexInfo: VertexInfo, primitiveType: PrimitiveType) {\n        const gl = this.gl;\n        gl.colorMask(true, true, true, true);\n\t}\n\n\tprivate updateClearStateStart(program: WrappedWebGLProgram, vertexInfo: VertexInfo, primitiveType: PrimitiveType) {\n        const state = this.state;\n        const gl = this.gl;\n        let ccolorMask = false, calphaMask = false;\n        const clearingFlags = this.clearingFlags;\n        //gl.disable(gl.TEXTURE_2D);\n\t\tgl.disable(gl.SCISSOR_TEST);\n\t\tgl.disable(gl.BLEND);\n\t\tgl.disable(gl.DEPTH_TEST);\n\t\tgl.disable(gl.STENCIL_TEST);\n\t\tgl.disable(gl.CULL_FACE);\n\t\tgl.depthMask(false);\n\n\t\tif (clearingFlags & ClearBufferSet.ColorBuffer) {\n\t\t\tccolorMask = true;\n\t\t}\n\n\t\t//calphaMask = false;\n\t\tif (clearingFlags & ClearBufferSet.StencilBuffer) {\n\t\t\tcalphaMask = true;\n\t\t\tgl.enable(gl.STENCIL_TEST);\n\t\t\tgl.stencilFunc(gl.ALWAYS, 0x00, 0xFF);\n\t\t\tgl.stencilOp(gl.REPLACE, gl.REPLACE, gl.REPLACE);\n\t\t}\n\n\t\tif (clearingFlags & ClearBufferSet.DepthBuffer) {\n\t\t\tgl.enable(gl.DEPTH_TEST);\n\t\t\tgl.depthFunc(gl.ALWAYS);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthRange(state.depthTest.rangeNear, state.depthTest.rangeNear);\n\t\t\t//debugger;\n\t\t}\n\n\t\tgl.colorMask(ccolorMask, ccolorMask, ccolorMask, calphaMask);\n\t}\n\n\tprivate updateCommonState(program: WrappedWebGLProgram, vertexInfo: VertexInfo, primitiveType: PrimitiveType) {\n        const viewport = this.state.viewport;\n        //const region = this.state.region;\n\n        const x = 2048 - viewport.x;\n        const y = 2048 - viewport.y;\n        const width = Math.abs(viewport.width * 2);\n        const height = Math.abs(-viewport.height * 2);\n\n        //debugger;\n\n        const ratio = this.getScaleRatio();\n        this.gl.viewport(x * ratio, y * ratio, width * ratio, height * ratio);\n\t\t//this.gl.viewport(0, 0, 1440, 816);\n\t}\n\n\tprivate updateState(program: WrappedWebGLProgram, vertexInfo: VertexInfo, primitiveType: PrimitiveType) {\n\t\tprogram.getUniform('u_enableColors').set1i(this.enableColors ? 1 : 0);\n\t\tprogram.getUniform('u_enableTextures').set1i(this.enableTextures ? 1 : 0);\n\t\tprogram.getUniform('u_enableSkinning').set1i(this.enableSkinning ? 1 : 0);\n\t\tprogram.getUniform('u_enableBilinear').set1i(this.enableBilinear ? 1 : 0);\n\t\t\n\t\tif (this.state.clearing) {\n\t\t\tthis.updateClearStateStart(program, vertexInfo, primitiveType);\n\t\t} else {\n\t\t\tthis.updateNormalState(program, vertexInfo, primitiveType);\n\t\t}\n\t\tthis.updateCommonState(program, vertexInfo, primitiveType);\n\t}\n\n\tgetScaleRatio() {\n\t\treturn this.canvas.width / 480;\n\t}\n\n\tprivate beforeDraw(state: GpuState) {\n\t\tthis.state.copyFrom(state);\n\t\tthis.setClearMode(state.clearing, state.clearFlags);\n\t\tthis.setMatrices(state.projectionMatrix, state.viewMatrix, state.worldMatrix);\n\t\t//this.display.setEnabledDisplay(false);\n\t}\n\t\n\tprivate setAttribute(databuffer:WebGLBuffer, attribPosition:WrappedWebGLAttrib, componentCount:number, componentType:number, vertexSize:number, offset:number) {\n\t\tif (attribPosition.location < 0) return;\n        const gl = this.gl;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, databuffer);\n\t\tgl.enableVertexAttribArray(attribPosition.location);\n\t\t// vertexAttribPointer(this.texCoordLocation2, 2, gl.FLOAT, false, 0, 0);\n\t\tgl.vertexAttribPointer(attribPosition.location, componentCount, componentType, false, vertexSize, offset);\n\t\t//console.log(`${enabled}, ${name}, ${componentCount}, ${componentType}, ${vertexSize}, ${offset}`);\n\t}\n\t\n\tprivate optimizedDataBuffer:WebGLBuffer|null = null;\n\tprivate optimizedIndexBuffer:WebGLBuffer|null = null;\n\t\n\tget rehashSignal() { return this.textureHandler.rehashSignal }\n\tenableColors: boolean = true;\n\tenableTextures: boolean = true;\n\tenableSkinning: boolean = true;\n\tenableBilinear: boolean = true;\n\t\n\tprivate frameBufferWidth = 480;\n\tprivate frameBufferHeight = 272;\n\tprotected state = new GpuState();\n\t\n\tsetFramebufferSize(width:number, height:number) {\n\t\tthis.canvas.setAttribute('width', `${width}`);\n\t\tthis.canvas.setAttribute('height', `${height}`);\n\t}\n\n\tgetFramebufferSize() {\n\t\treturn { width: +this.canvas.getAttribute('width')!, height: +this.canvas.getAttribute('height')! }\n\t}\n\t\n\tpublic drawRatio: number = 1.0;\n\tprivate lastTransfer: BatchesTransfer|null = null;\n\t\n\tredrawLastTransfer(): void {\n\t\tif (this.lastTransfer != null) this.drawBatchesTransfer(this.lastTransfer);\n\t}\n\t\n\tdrawBatchesTransfer(transfer: BatchesTransfer) {\n\t\tthis.lastTransfer = transfer;\n        const buffer = transfer.buffer;\n        const verticesData = new Uint8Array(buffer, transfer.data.data, transfer.data.datasize);\n        const indicesData = new Uint16Array(buffer, transfer.data.indices, transfer.data.indicesCount);\n        let gl = this.gl;\n\t\tif (!this.optimizedDataBuffer) this.optimizedDataBuffer = gl.createBuffer();\n\t\tif (!this.optimizedIndexBuffer) this.optimizedIndexBuffer = gl.createBuffer();\n\t\tlet databuffer = this.optimizedDataBuffer;\n\t\tlet indexbuffer = this.optimizedIndexBuffer;\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, databuffer);\n\t\tgl.bufferData(gl.ARRAY_BUFFER, verticesData, gl.DYNAMIC_DRAW);\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexbuffer);\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indicesData, gl.DYNAMIC_DRAW);\n\t\t\n\t\tthis.textureHandler.startFrame();\n\t\tfor (let batch of transfer.batches.slice(0, this.drawRatio * transfer.batches.length)) {\n\t\t\tthis.drawOptimized(buffer, batch);\n\t\t}\n\t\tthis.textureHandler.endFrame();\n\t}\n\n\tprivate vs = new VertexInfo();\t\n\tdrawOptimized(data: ArrayBuffer, batch: OptimizedBatchTransfer): void {\n\t\tthis.state.writeData(new Uint32Array(data, batch.stateOffset, 512));\n\t\tthis.beforeDraw(this.state);\n        const state = this.state;\n        let gl = this.gl;\n\t\t\n\t\t\n\t\tif (!this.optimizedDataBuffer) this.optimizedDataBuffer = gl.createBuffer();\n\t\tif (!this.optimizedIndexBuffer) this.optimizedIndexBuffer = gl.createBuffer();\n\t\tlet databuffer = this.optimizedDataBuffer!\n\t\tlet indexbuffer = this.optimizedIndexBuffer;\n\t\tlet vs = this.vs; // required after serializing\n\t\tvs.setState(this.state);\n\t\tlet primType = batch.primType;\n\n        const globalVertexOffset = batch.dataLow;\n        let indexStart = batch.indexLow * 2;\n\t\t\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, databuffer);\n        const program = this.cache.getProgram(vs, state, true);\n        program.use();\n\t\tprogram.getUniform('time').set1f(performance.now() / 1000.0);\n\t\tprogram.getUniform('u_modelViewProjMatrix').setMat4(vs.transform2D ? this.transformMatrix2d : this.transformMatrix);\n\t\tif (vs.hasPosition) {\n\t\t\tthis.setAttribute(databuffer, program.vPosition, vs.positionComponents, convertVertexNumericEnum[vs.position], vs.size, vs.positionOffset + globalVertexOffset);\t\n\t\t}\n\t\tif (vs.hasTexture) {\n\t\t\tthis.setAttribute(databuffer, program.vTexcoord, vs.textureComponents, convertVertexNumericUnsignedEnum[vs.texture], vs.size, vs.textureOffset + globalVertexOffset);\n\t\t}\n\n\t\tif (vs.hasColor) {\n\t\t\tif (vs.color == ColorEnum.Color8888) {\n\t\t\t\tthis.setAttribute(databuffer, program.vColor, 4, GL.UNSIGNED_BYTE, vs.size, vs.colorOffset + globalVertexOffset);\n\t\t\t} else {\n\t\t\t\tthis.setAttribute(databuffer, program.vColor, 1, GL.UNSIGNED_SHORT, vs.size, vs.colorOffset + globalVertexOffset);\n\t\t\t}\n\t\t}\n\n\t\tif (vs.hasNormal) {\n\t\t\tthis.setAttribute(databuffer, program.vNormal, vs.normalComponents, convertVertexNumericEnum[vs.normal], vs.size, vs.normalOffset + globalVertexOffset);\n\t\t}\n\t\t\n\t\tif (vs.realWeightCount > 0) {\n\t\t\tthis.setAttribute(databuffer, program.vertexWeight1, Math.min(4, vs.realWeightCount), convertVertexNumericEnum[vs.weight], vs.size, vs.oneWeightOffset(0) + globalVertexOffset);\n\t\t\tif (vs.realWeightCount > 4) {\n\t\t\t\tthis.setAttribute(databuffer, program.vertexWeight2, Math.min(4, vs.realWeightCount - 4), convertVertexNumericEnum[vs.weight], vs.size, vs.oneWeightOffset(4) + globalVertexOffset);\n\t\t\t}\n\t\t\tfor (let n = 0; n < vs.realWeightCount; n++) {\n\t\t\t\tprogram.getUniform(\"matrixBone\" + n).setMat4x3(this.state.skinning.boneMatrices[n]);\n\t\t\t}\n\t\t}\n\n\t\tif (!vs.hasColor) {\n            const ac = this.state.ambientModelColor;\n            //console.log(ac.r, ac.g, ac.b, ac.a);\n\t\t\tprogram.getUniform('uniformColor').set4f(ac.r, ac.g, ac.b, ac.a);\n\t\t}\n\t\t//console.log(vs.hasPosition, vs.hasColor, vs.hasTexture, vs.hasNormal, vs.hasWeight, vs.position, vs.color, vs.texture);\n\t\t\n\t\tif (vs.hasTexture) {\n\t\t\tprogram.getUniform('tfx').set1i(state.texture.effect);\n\t\t\tprogram.getUniform('tcc').set1i(state.texture.colorComponent);\n\t\t}\n\n\t\tthis.updateState(program, vs, batch.primType);\n\t\t//this.setProgramParameters(gl, program, vs);\n\n\t\t// vertex: VertexState({\"address\":5833460,\"texture\":2,\"color\":7,\"normal\":0,\"position\":3,\"weight\":0,\"index\":0,\"realWeightCount\":0,\"morphingVertexCount\":0,\"transform2D\":true})\n\t\t// jspspemu.js:14054 [0, 1, 2, 3, 4, 5, 6, 7, 6, 7]\n\t\tif (this.clearing) {\n\t\t\tthis.textureHandler.unbindTexture(program, state);\n\t\t} else {\n\t\t\tthis.prepareTexture(gl, program, vs, data, batch);\n\t\t}\n\t\t\n\t\tif (vs.hasTexture) {\n\t\t\tthis.calcTexMatrix(vs);\n\t\t\tprogram.getUniform('u_texMatrix').setMat4(this.texMat);\n\t\t}\n\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexbuffer);\n\t\tgl.drawElements(convertPrimitiveType[primType], batch.indexCount, gl.UNSIGNED_SHORT, indexStart);\n\t\t\n\t\tif (vs.hasPosition) program.vPosition.disable();\n\t\tif (vs.hasColor) program.vColor.disable();\n\t\tif (vs.hasTexture) program.vTexcoord.disable();\n\t\tif (vs.hasNormal) program.vNormal.disable();\n\t\t\n\t\tif (vs.realWeightCount > 0) {\n\t\t\tprogram.vertexWeight1.disable();\n\t\t\tif (vs.realWeightCount > 4) {\n\t\t\t\tprogram.vertexWeight2.disable();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate testCount = 20;\n\tprivate positionData = new FastFloat32Buffer();\n\tprivate colorData = new FastFloat32Buffer();\n\tprivate textureData = new FastFloat32Buffer();\n\tprivate normalData = new FastFloat32Buffer();\n\tprivate vertexWeightData1 = new FastFloat32Buffer();\n\tprivate vertexWeightData2 = new FastFloat32Buffer();\n\n\tprivate lastBaseAddress = 0;\n\n\ttempVec = new Float32Array([0, 0, 0])\n\ttexMat = mat4.create();\n\n\tprivate prepareTexture(gl: WebGLRenderingContext, program: WrappedWebGLProgram, vertexInfo: VertexInfo, buffer:ArrayBuffer, batch: OptimizedBatchTransfer) {\n\t\tif (vertexInfo.hasTexture && this.enableTextures) {\n\t\t\tthis.textureHandler.bindTexture(program, this.state, this.enableBilinear, buffer, batch);\n\t\t} else {\n\t\t\tthis.textureHandler.unbindTexture(program, this.state);\n\t\t}\n\t}\n\n\tprivate calcTexMatrix(vertexInfo: VertexInfo) {\n        const texture = this.state.texture;\n        const mipmap = texture.mipmaps[0];\n        mat4.identity(this.texMat);\n        const t = this.tempVec;\n        if (vertexInfo.transform2D) {\n\t\t\tt[0] = 1.0 / (mipmap.bufferWidth); t[1] = 1.0 / (mipmap.textureHeight); t[2] = 1.0; mat4.scale(this.texMat, this.texMat, t);\n\t\t} else {\n\t\t\tswitch (texture.textureMapMode) {\n\t\t\t\tcase TextureMapMode.GU_TEXTURE_COORDS:\n\t\t\t\t\tt[0] = texture.offsetU; t[1] = texture.offsetV; t[2] = 0.0; mat4.translate(this.texMat, this.texMat, t);\n\t\t\t\t\tt[0] = texture.scaleU; t[1] = texture.scaleV; t[2] = 1.0; mat4.scale(this.texMat, this.texMat, t);\n\n\t\t\t\t\t//switch (vertexState.textureSize) {\n\t\t\t\t\t//\tcase 1: t[0] = 0x80; t[1] = 0x80; t[2] = 1.0; mat4.scale(this.texMat, this.texMat, t); break;\n\t\t\t\t\t//\tcase 2: t[0] = 0x8000; t[1] = 0x8000; t[2] = 1.0; mat4.scale(this.texMat, this.texMat, t); break;\n\t\t\t\t\t//}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setProgramParameters(gl: WebGLRenderingContext, program: WrappedWebGLProgram, vertexInfo: VertexInfo) {\n\t\tprogram.getUniform('u_modelViewProjMatrix').setMat4(vertexInfo.transform2D ? this.transformMatrix2d : this.transformMatrix);\n\n\t\tprogram.getAttrib(\"vPosition\").setFloats(3, this.positionData.slice());\n\t\tif (vertexInfo.hasTexture) {\n\t\t\tprogram.getUniform('tfx').set1i(this.state.texture.effect);\n\t\t\tprogram.getUniform('tcc').set1i(this.state.texture.colorComponent);\n\t\t\tprogram.getAttrib(\"vTexcoord\").setFloats(3, this.textureData.slice());\n\t\t}\n\n\t\tif (vertexInfo.hasNormal) {\n\t\t\tprogram.getAttrib(\"vNormal\").setFloats(3, this.normalData.slice());\n\t\t}\n\n\t\tif (vertexInfo.realWeightCount > 0) {\n\t\t\t//debugger;\n\t\t\tprogram.getAttrib('vertexWeight1').setFloats(4, this.vertexWeightData1.slice());\n\t\t\tif (vertexInfo.realWeightCount > 4) {\n\t\t\t\tprogram.getAttrib('vertexWeight2').setFloats(4, this.vertexWeightData2.slice());\n\t\t\t}\n\t\t\tfor (let n = 0; n < vertexInfo.realWeightCount; n++) {\n\t\t\t\tprogram.getUniform(\"matrixBone\" + n).setMat4x3(this.state.skinning.boneMatrices[n]);\n\t\t\t\t//program.getUniform(\"matrixBone\" + n).setMat4x3(this.state.skinning.linear, 12 * n);\n\t\t\t}\n\t\t}\n\n\t\tif (vertexInfo.hasColor) {\n\t\t\tprogram.getAttrib(\"vColor\").setFloats(4, this.colorData.slice());\n\t\t} else {\n            const ac = this.state.ambientModelColor;\n            //console.log(ac.r, ac.g, ac.b, ac.a);\n\t\t\tprogram.getUniform('uniformColor').set4f(ac.r, ac.g, ac.b, ac.a);\n\t\t}\n\n\t\tif (vertexInfo.hasTexture) {\n\t\t\tthis.calcTexMatrix(vertexInfo);\n\t\t\tprogram.getUniform('u_texMatrix').setMat4(this.texMat);\n\t\t}\n\t}\n\n\tprivate unsetProgramParameters(gl: WebGLRenderingContext, program: WrappedWebGLProgram, vertexInfo: VertexInfo) {\n\t\tprogram.getAttrib(\"vPosition\").disable();\n\t\tif (vertexInfo.hasTexture) program.getAttrib(\"vTexcoord\").disable();\n\t\tif (vertexInfo.hasNormal) program.getAttrib(\"vNormal\").disable();\n\t\tif (vertexInfo.hasColor) program.getAttrib(\"vColor\").disable();\n\t\tif (vertexInfo.realWeightCount >= 1) program.getAttrib('vertexWeight1').disable();\n\t\tif (vertexInfo.realWeightCount >= 4) program.getAttrib('vertexWeight2').disable();\n\t}\n}\n\nconst convertPrimitiveType = new Int32Array([GL.POINTS, GL.LINES, GL.LINE_STRIP, GL.TRIANGLES, GL.TRIANGLE_STRIP, GL.TRIANGLE_FAN, GL.TRIANGLES /*sprites*/]);\nconst convertVertexNumericEnum = new Int32Array([0, GL.BYTE, GL.SHORT, GL.FLOAT]);\nconst convertVertexNumericUnsignedEnum = new Int32Array([0, GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT, GL.FLOAT]);\n", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {AsyncStream, Stream} from \"../../global/stream\";\n\nexport class Vfs {\n\tdevctlAsync(command: number, input: Stream, output: Stream): any {\n\t\tconsole.error('VfsMustOverride devctlAsync', this);\n\t\tthrow new Error(\"Must override devctlAsync : \" + this);\n\t}\n\n\topenAsync(path: string, flags: FileOpenFlags, mode: FileMode): PromiseFast<VfsEntry> {\n\t    return PromiseFast.ensure(this.openPromiseAsync(path, flags, mode))\n\t}\n\n    openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<VfsEntry> {\n        console.error('VfsMustOverride openAsync', this);\n        throw new Error(\"Must override openAsync : \" + this);\n    }\n\n\tasync readAllAsync(path: string) {\n        let entry = await this.openAsync(path, FileOpenFlags.Read, parseInt('0777', 8));\n        return entry.readAllAsync()\n\t}\n\n\tasync writeAllAsync(path: string, data: ArrayBuffer) {\n        let entry = await this.openAsync(path, FileOpenFlags.Create | FileOpenFlags.Truncate | FileOpenFlags.Write, parseInt('0777', 8));\n        return await entry.writeAllAsync(data)\n\t}\n\t\n\tdeleteAsync(path: string): PromiseFast<void> {\n\t\tthrow new Error(\"Must override openAsync : \" + this);\n\t}\n\n\topenDirectoryAsync(path: string) {\n\t\treturn this.openAsync(path, FileOpenFlags.Read, parseInt('0777', 8));\n\t}\n\n\tgetStatAsync(path: string): PromiseFast<VfsStat> {\n\t    return PromiseFast.ensure(this.getStatPromiseAsync(path))\n\t}\n\n\tasync getStatPromiseAsync(path: string): Promise<VfsStat> {\n        const entry = await this.openPromiseAsync(path, FileOpenFlags.Read, parseInt('0777', 8));\n        return entry.stat()\n    }\n\n\texistsAsync(path: string): PromiseFast<boolean> {\n\t    return PromiseFast.ensure(this.existsPromiseAsync(path))\n\t}\n\n    async existsPromiseAsync(path: string) {\n\t    try {\n            await this.getStatPromiseAsync(path)\n            return true\n        } catch (e) {\n\t        return false\n        }\n    }\n}\n\nexport class ProxyVfs extends Vfs {\n\tconstructor(public parentVfsList: Vfs[]) { super(); }\n\n\tprivate _callChainWhenError<T>(callback: (vfs:Vfs, e: Error) => void) {\n        let promise = PromiseFast.reject(new Error());\n        this.parentVfsList.forEach(parentVfs => {\n\t\t\tpromise = promise.catch((e) => {\n\t\t\t\treturn callback(parentVfs, e);\n\t\t\t});\n\t\t});\n\t\treturn promise;\n\t}\n\n    private _callChainWhenErrorPromise<T>(callback: (vfs:Vfs, e: Error) => void) {\n        let promise: Promise<any> = Promise.reject(new Error());\n        this.parentVfsList.forEach(parentVfs => {\n            promise = promise.catch((e) => {\n                return callback(parentVfs, e);\n            });\n        });\n        return promise;\n    }\n\n    devctlAsync(command: number, input: Stream, output: Stream) {\n\t\treturn this._callChainWhenError<number>((vfs, e) => {\n\t\t\treturn vfs.devctlAsync(command, input, output);\n\t\t});\n\t}\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<VfsEntry> {\n\t    const errors = []\n\t    for (const vfs of this.parentVfsList) {\n            try {\n                return await vfs.openPromiseAsync(path, flags, mode)\n            } catch (e) {\n                errors.push(e)\n            }\n        }\n\t    throw errors.first() || new Error(\"Error ProxyVfs.openPromiseAsync\")\n\t}\n\tdeleteAsync(path: string) {\n\t\treturn this._callChainWhenError<VfsEntry>((vfs, e) => {\n\t\t\treturn vfs.deleteAsync(path);\n\t\t});\n\t}\n\topenDirectoryAsync(path: string) {\n\t\treturn this._callChainWhenError<VfsEntry>((vfs, e) => {\n\t\t\treturn vfs.openDirectoryAsync(path);\n\t\t});\n\t}\n\tasync getStatPromiseAsync(path: string): Promise<VfsStat> {\n\t\treturn this._callChainWhenErrorPromise<VfsStat>((vfs, e) => {\n\t\t\treturn vfs.getStatPromiseAsync(path);\n\t\t});\n\t}\n}\n\nexport class VfsEntry {\n\tget isDirectory(): boolean {\n\t\treturn this.stat().isDirectory;\n\t}\n\tget size(): number { return this.stat().size; }\n\n\treadAllAsync() { return this.readChunkAsync(0, this.size); }\n\twriteAllAsync(data: ArrayBuffer) { return this.writeChunkAsync(0, data, true); }\n\n\tenumerateAsync(): PromiseFast<VfsStat[]> { throw (new Error(\"Must override enumerateAsync : \" + this)); }\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> { throw (new Error(\"Must override readChunkAsync : \" + this)); }\n\twriteChunkAsync(offset: number, data: ArrayBuffer, truncate?: boolean): PromiseFast<number> { throw (new Error(\"Must override writeChunkAsync : \" + this)); }\n\tstat(): VfsStat { throw (new Error(\"Must override stat\")); }\n\tclose() { }\n}\n\nexport class VfsEntryStream extends VfsEntry {\n\tconstructor(private asyncStream: AsyncStream) {\n\t\tsuper();\n\t}\n\tget size(): number { return this.asyncStream.size; }\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> {\n\t\treturn this.asyncStream.readChunkAsync(offset, length);\n\t}\n\tclose() { }\n\tstat(): VfsStat {\n\t\treturn {\n\t\t\tname: this.asyncStream.name,\n\t\t\tsize: this.asyncStream.size,\n\t\t\tisDirectory: false,\n\t\t\ttimeCreation: this.asyncStream.date,\n\t\t\ttimeLastAccess: this.asyncStream.date,\n\t\t\ttimeLastModification: this.asyncStream.date,\n\t\t};\n\t}\n}\n\nexport enum FileOpenFlags {\n\tRead = 0x0001,\n\tWrite = 0x0002,\n\tReadWrite = Read | Write,\n\tNoBlock = 0x0004,\n\t_InternalDirOpen = 0x0008, // Internal use for dopen\n\tAppend = 0x0100,\n\tCreate = 0x0200,\n\tTruncate = 0x0400,\n\tExcl = 0x0800,\n\tUnknown1 = 0x4000, // something async?\n\tNoWait = 0x8000,\n\tUnknown2 = 0xf0000, // seen on Wipeout Pure and Infected\n\tUnknown3 = 0x2000000, // seen on Puzzle Guzzle, Hammerin' Hero\n}\n\nexport const enum FileMode {\n}\n\nexport interface VfsStat {\n\tname?: string;\n\tsize: number;\n\tisDirectory: boolean;\n\ttimeCreation: Date;\n\ttimeLastAccess: Date;\n\ttimeLastModification: Date;\n\tdependentData0?: number;\n\tdependentData1?: number;\n}\n", "export async function importScript(src: string){\n    return new Promise<void>((resolve, reject) => {\n        const script = document.createElement('script');\n        script.async = true;\n        script.src = src;\n        script.addEventListener('load', (event)=>{\n            resolve();\n        });\n        script.addEventListener('error', () => reject(`Error loading script \"${src}\"`))\n        script.addEventListener('abort', () => reject(`Script loading aborted for \"${src}\"`))\n        document.head.appendChild(script);\n    });\n}\n", "export class PathInfo {\n    constructor(public fullPath: string) {\n    }\n\n    get parent() {\n        const lastIndex = this.fullPath.lastIndexOf('/')\n        return (lastIndex >= 0) ? new PathInfo(this.fullPath.substr(0, lastIndex)) : null\n    }\n\n    get baseName() {\n        const lastIndex = this.fullPath.lastIndexOf('/')\n        return (lastIndex >= 0) ? this.fullPath.substr(lastIndex + 1) : this.fullPath\n    }\n}", "\uFEFFimport {PromiseFast, StringDictionary} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\nimport {importScript} from \"../../global/importScript\";\nimport {downloadFileChunkAsync} from \"../../global/async\";\nimport {PathInfo} from \"./pathinfo\";\nimport {FileNotFoundError} from \"./errors\";\n\ndeclare const Dropbox: any;\n\nconst DROPBOX_APP_KEY = '4mdwp62ogo4tna1'\n\ninterface FileInfo {\n    \".tag\": \"folder\" | \"file\" | \"none\"\n    id: string\n    name: string\n\n    // For files\n    client_modified?: string\n    content_hash?: string\n    rev?: string\n    server_modified?: string\n    size?: number\n\n    isRemoved?: boolean\n}\n\nclass DirectoryInfo {\n    entriesByName = new Map<string, FileInfo>()\n\n    constructor(public entries: FileInfo[]) {\n        for (const entry of entries) {\n            this.entriesByName.set(entry.name, entry)\n        }\n    }\n\n    add(entry: FileInfo) {\n        this.entries.push(entry)\n        this.entriesByName.set(entry.name, entry)\n    }\n}\n\nfunction getCanonicalPath(name: string) {\n    const canonicalPath = `/${name.replace(/^\\/+/, '').replace(/\\/+$/, '')}`\n    return canonicalPath == '/' ? '' : canonicalPath\n}\n\nexport function hasDropboxToken() {\n    if (!window.localStorage || !window.document) return false\n    return !!localStorage.getItem('DROPBOX_TOKEN')\n}\n\nexport function dropboxTryStoreCodeAndRefresh() {\n    if (!window.localStorage || !window.document) return\n    const params = new URLSearchParams(`?${window.document.location.hash.substr(1)}`)\n    const access_token = params.get('access_token') // 938ZZZZasDVCczUAAAAAAAAAAeoICnAsSE21321321cV441GeeeeeeQQ-YQZX55542135NGtz\n    const token_type = params.get('token_type') // bearer\n    const account_id = params.get('account_id') // dbid%1212131243564577asdasdasdassaddsadsadsasdzzxassasqwq13\n    const scope = params.get('scope') // account_info.read+files.content.read+files.content.write+files.metadata.read+files.metadata.write\n\n    if (access_token) {\n        localStorage.setItem('DROPBOX_TOKEN', access_token)\n        window.document.location.href = '/'\n    }\n}\n\nexport function getDropboxCodeOrRedirect() {\n    if (!window.localStorage || !window.document) return false\n    const token = localStorage.getItem('DROPBOX_TOKEN')\n    if (!token) {\n        window.document.location.href = generateDropboxAuthorizeUrl()\n    }\n    return token\n}\n\nexport function generateDropboxAuthorizeUrl() {\n    return `https://www.dropbox.com/oauth2/authorize?client_id=${DROPBOX_APP_KEY}&redirect_uri=${document.location.protocol}//${document.location.host}&response_type=token`\n}\n\nexport function referenceDropbox() {\n}\n\ndropboxTryStoreCodeAndRefresh()\n\nexport class AsyncClient {\n\tclient: any;\n\n\tconstructor(private key:string) {\n\t}\n\n\tprivate initPromise: Promise<any> | null = null;\n\n\tasync initOnceAsync() {\n\t\tif (!this.initPromise) {\n            this.initPromise = (async () => {\n                await importScript('https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/9.2.0/Dropbox-sdk.min.js')\n                const accessToken = getDropboxCodeOrRedirect()\n                this.client = new Dropbox.Dropbox({ accessToken: accessToken })\n                console.warn(\"Dropbox client initialized\")\n            })()\n\t\t}\n\t\treturn await this.initPromise;\n\t}\n\n\tasync writeFileAsync(fullpath: string, content: ArrayBuffer) {\n        await this.initOnceAsync()\n        const canonicalPath = getCanonicalPath(fullpath)\n\t    const path = new PathInfo(canonicalPath)\n        const folderPath = path.parent!.fullPath!\n        const baseName = path.baseName\n        const statsInfo = await this.readdirInfoAsync(folderPath)\n        const entry = statsInfo.entriesByName.get(baseName)\n        if (entry) {\n            entry.size = content.byteLength\n        } else {\n            this.readdirInfoCachePromise.delete(folderPath)\n        }\n\n        await this.client.filesUpload({ path: canonicalPath, contents: content, mode: 'overwrite', autorename: false })\n\t}\n\n\tasync mkdirAsync(path: string) {\n        await this.initOnceAsync()\n        return await new Promise((resolve, reject) => {\n            this.client.mkdir(path, (e:Error, data:any) => {\n                if (e) {\n                    reject(e);\n                } else {\n                    resolve(data);\n                }\n            });\n        });\n\t}\n\n\t_cacheFileLinks = new Map<string, string>()\n\n\tasync readFileAsync(name: string, offset: number = 0, length: number | undefined = undefined): Promise<ArrayBuffer> {\n        await this.initOnceAsync()\n        const canonicalPath = getCanonicalPath(name)\n        if (offset === 0 && length === undefined) {\n            const result = await this.client.filesDownload({path: canonicalPath})\n            return (result.result.fileBlob as Blob).arrayBuffer()\n        }\n        if (!this._cacheFileLinks.has(canonicalPath)) {\n            const result = await this.client.filesGetTemporaryLink({path: canonicalPath})\n            this._cacheFileLinks.set(canonicalPath, result.result.link)\n        }\n        const link = this._cacheFileLinks.get(canonicalPath)!\n        return await downloadFileChunkAsync(link, offset, length)\n\t}\n\n\tstatCachePromise: StringDictionary<Promise<FileInfo>> = {};\n\tasync statAsync(fullpath: string): Promise<FileInfo> {\n        const canonicalPath = getCanonicalPath(fullpath)\n        const path = new PathInfo(canonicalPath)\n        if (path.parent == null) throw new Error(\"Invalid path\")\n        const folderInfo = await this.readdirInfoAsync(path.parent.fullPath)\n        const baseName = path.baseName\n        const info = folderInfo.entriesByName.get(baseName)\n        if (!info) {\n            return {\".tag\": \"none\", \"name\": baseName, id: \"-\"}\n            //throw new FileNotFoundError(`File '${fullpath}' not found`)\n        }\n        return info\n\t}\n\n\tasync readdirAsync(name: string): Promise<string[]> {\n        return (await this.readdirInfoAsync(name)).entries.map(it => it.name)\n\t}\n\n    readdirInfoCachePromise = new Map<string, Promise<DirectoryInfo>>()\n    async readdirInfoAsync(name: string): Promise<DirectoryInfo> {\n        const canonicalPath = getCanonicalPath(name)\n        await this.initOnceAsync()\n        if (!this.readdirInfoCachePromise.has(canonicalPath)) {\n            this.readdirInfoCachePromise.set(canonicalPath, (async () => {\n                const result = await this.client.filesListFolder({ path: canonicalPath })\n                return new DirectoryInfo(result.result.entries)\n            })())\n        }\n        return await this.readdirInfoCachePromise.get(canonicalPath)!\n    }\n}\n\nconst client = new AsyncClient(DROPBOX_APP_KEY);\n\nexport const dropboxClient = client\n\nexport class DropboxVfs extends Vfs {\n\tenabled = true;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tstatic tryLoginAsync() {\n\t\treturn client.initOnceAsync();\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<VfsEntry> {\n\t\tpath = getCanonicalPath(path);\n\t\tif (!this.enabled) throw new Error(\"Not using dropbox\")\n\t\treturn await DropboxVfsEntry.fromPathAsync(path, flags, mode)\n\t}\n}\n\nexport class DropboxVfsEntry extends VfsEntry {\n\tconstructor(private path: string, private name: string, private _size: number, private isFile: boolean, private date:Date) {\n\t\tsuper();\n\t}\n\n\tstatic async fromPathAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<DropboxVfsEntry> {\n\t\tasync function readedErrorAsync(e: Error) {\n\t\t\tif (flags & FileOpenFlags.Create) {\n\t\t\t\t//console.log('creating file!');\n                const entry = new DropboxVfsEntry(path, path.split('/').pop()!, 0, true, new Date());\n                try {\n                    await client.writeFileAsync(path, new ArrayBuffer(0))\n                    return entry\n                } catch (e) {\n                    console.error(e);\n                    throw(e);\n                }\n\t\t\t} else {\n\t\t\t\tthrow (e);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n            const info = await client.statAsync(path)\n\n            if (info.isRemoved) {\n                return await readedErrorAsync(new Error(\"file not exists\"));\n            } else {\n                //console.log(info);\n                return new DropboxVfsEntry(path, info.name, info.size!, info[\".tag\"] == 'file', new Date(info.server_modified || \"\"));\n            }\n        } catch (e) {\n            return await readedErrorAsync(e);\n        }\n\t}\n\n\tenumerateAsync(): PromiseFast<VfsStat[]> {\n\t    return PromiseFast.ensure((async () => {\n\t        try {\n                const info = await client.readdirInfoAsync(this.path)\n                return info.entries.map(it => {\n                    return {\n                        name: it.name,\n                        size: it.size || 0,\n                        isDirectory: it[\".tag\"] == 'folder',\n                        timeCreation: new Date(it.server_modified ?? \"\"),\n                        timeLastAccess: new Date(it.server_modified ?? \"\"),\n                        timeLastModification: new Date(it.server_modified ?? \"\"),\n                        dependentData0: 0,\n                        dependentData1: 0\n                    }\n                })\n            } catch (e) {\n\t            return []\n            }\n        })())\n\t}\n\n\t// @ts-ignore\n    private cachedContent: ArrayBuffer;\n\tprivate writeTimer = -1;\n\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> {\n\t\t//console.log('dropbox: read chunk!', this.path, offset, length);\n\n        if (this._size < 128 * 1024 * 1024) {\n\t\t\tif (this.cachedContent) return PromiseFast.resolve(this.cachedContent.slice(offset, offset + length));\n\t\t\treturn PromiseFast.ensure(client.readFileAsync(this.path).thenFast(data => {\n\t\t\t\tthis.cachedContent = data;\n\t\t\t\treturn this.cachedContent.slice(offset, offset + length);\n\t\t\t}))\n\t\t} else {\n\t\t\t//console.log(`read dropbox file ${this.path}`);\n\t\t\treturn PromiseFast.ensure(client.readFileAsync(this.path, offset, (length !== undefined) ? offset + length : undefined))\n\t\t}\n\t}\n\n    initialContentPromise?: Promise<Uint8Array> = undefined\n\twriteCache?: Uint8Array = undefined\n\n\twriteChunkAsync(offset: number, dataToWrite: ArrayBuffer, truncate?: boolean): PromiseFast<number> {\n\t    return PromiseFast.ensure((async () => {\n            if (!truncate) {\n                if (!this.initialContentPromise) {\n                    this.initialContentPromise = (async () => {\n                        return new Uint8Array(await this.readAllAsync())\n                    })()\n                }\n                await this.initialContentPromise!\n                if (!this.writeCache) {\n                    this.writeCache = await this.initialContentPromise!\n                }\n            }\n            const newContent = new Uint8Array(Math.max(this.writeCache?.length ?? 0, offset + dataToWrite.byteLength));\n            if (!truncate) {\n                newContent.set(this.writeCache!)\n            }\n            newContent.set(new Uint8Array(dataToWrite), offset)\n            this.writeCache! = newContent.slice()\n\n            clearTimeout(this.writeTimer);\n            this.writeTimer = setTimeout(() => {\n                client.writeFileAsync(this.path, newContent);\n            }, 500) as any;\n            return dataToWrite.byteLength\n        })())\n\t}\n\n\tstat(): VfsStat {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tsize: this._size,\n\t\t\tisDirectory: !this.isFile,\n\t\t\ttimeCreation: this.date,\n\t\t\ttimeLastAccess: this.date,\n\t\t\ttimeLastModification: this.date,\n\t\t\tdependentData0: 0,\n\t\t\tdependentData1: 1,\n\t\t};\n\t}\n\tclose() {\n\t}\n}\n\n\n\n(async () => {\n    //const vfs = new DropboxVfs()\n    //const file = await vfs.openAsync(\"/log.txt\", FileOpenFlags.Read, 0o777)\n    //const file2 = (await vfs.openAsync(\"/demo.txt\", FileOpenFlags.Write, 0o777))\n    //file2.writeAllAsync(new Uint8Array([1,2,3,4]))\n})()\n\n\n/*\nconst dvfs = new DropboxVfs();\n\ndvfs.openAsync('/test', FileOpenFlags.Create | FileOpenFlags.Write | FileOpenFlags.Truncate, <FileMode>parseIntFormat('0777')).thenFast(value => {\n\tconsole.info('dvfs result:', value);\n}).catch(e => {\n\t\tconsole.error('dvfs error:', e);\n});\n*/\n\n/*\nclient.readdirAsync('/PSP/GAME/virtual/SAVE/SharewareDoom').thenFast(result => {\n\tconsole.log(result);\n});\n*/", "///<reference path=\"./global.ts\" />\n\nimport { WebGlPspDrawDriver } from '../core/gpu/webgl/webgl_driver';\nimport { GpuStats } from '../core/gpu/gpu_stats';\nimport { Emulator } from './emulator';\nimport {numberToFileSize, numberToSeparator, Signal0, Signal1, WatchValue} from \"../global/utils\";\nimport {dropboxClient} from \"../hle/vfs/vfs_dropbox\";\n\ninterface OverlaySection {\n    element: HTMLElement;\n    update(): void;\n    reset(): void;\n}\n\nlet canDOMCreateElements = (typeof document != 'undefined');\n\nclass OverlayCounter<T> implements OverlaySection {\n    // @ts-ignore\n    public value: T;\n    // @ts-ignore\n    public element: HTMLElement;\n\n    constructor(public name: string, private resetValue: T, private representer?: (v: T) => any) {\n        this.reset();\n        if (canDOMCreateElements) {\n            this.element = document.createElement('div');\n        }\n    }\n    update() {\n        if (this.element) this.element.innerText = `${this.name}: ${this.representedValue}`;\n    }\n    get representedValue() {\n        return this.representer ? this.representer(this.value) : this.value;\n    }\n    reset() {\n        this.value = this.resetValue;\n    }\n}\n\nclass OverlayIntent implements OverlaySection {\n    // @ts-ignore\n    public element: HTMLButtonElement;\n    constructor(text: string, action: () => void) {\n        if (canDOMCreateElements) {\n            this.element = document.createElement('button');\n            this.element.innerHTML = text;\n            this.element.onclick = e => action();\n        }\n    }\n    update() {\n    }\n    reset() {\n    }\n}\n\nclass OverlaySlider implements OverlaySection {\n    // @ts-ignore\n    public element: HTMLInputElement;\n    constructor(text: string, initialRatio: number, action: (value: number) => void) {\n        if (canDOMCreateElements) {\n            this.element = document.createElement('input');\n            this.element.type = 'range';\n            this.element.min = `0`;\n            this.element.max = `1000`;\n            this.element.value = `${initialRatio * 1000}`;\n            //this.element.innerHTML = text;\n            let lastReportedValue = NaN;\n            const report = (e: any) => {\n                if (this.ratio == lastReportedValue) return;\n                lastReportedValue = this.ratio;\n                action(this.ratio);\n            };\n            this.element.onmousemove = report;\n            this.element.onchange = report;\n        }\n    }\n    set ratio(value: number) {\n        this.value = value * 1000;\n    }\n    get ratio() {\n        return (this.value / 1000);\n    }\n    set value(v: number) {\n        this.element.value = `${v}`;\n    }\n    get value() {\n        return +this.element.value;\n    }\n    update() {\n    }\n    reset() {\n    }\n}\n\nclass Overlay {\n    private element: HTMLDivElement | null;\n    private sections: OverlaySection[] = [];\n\n    constructor() {\n        const element = this.element = canDOMCreateElements ? document.createElement('div') : null;\n        if (element) {\n            element.style.position = 'absolute';\n            element.style.zIndex = '10000';\n            element.style.top = '0';\n            element.style.right = '0';\n            element.style.background = 'rgba(0, 0, 0, 0.3)';\n            element.style.font = '12px Arial';\n            element.style.width = '200px';\n            element.style.height = 'auto';\n            element.style.padding = '4px';\n            element.style.color = 'white';\n            document.body.appendChild(element);\n        }\n    }\n\n    private addElement<T extends OverlaySection>(element: T): T {\n        this.sections.push(element);\n        if (this.element) {\n            this.element.appendChild(element.element);\n        }\n        return element;\n    }\n\n    createCounter<T>(name: string, resetValue: T, representer?: (v: T) => any): OverlayCounter<T> {\n        return this.addElement(new OverlayCounter(name, resetValue, representer));\n    }\n\n    createIntent(text: string, action: () => void) {\n        return this.addElement(new OverlayIntent(text, action));\n    }\n\n    createSlider(text: string, initialRatio: number, action: (value: number) => void) {\n        return this.addElement(new OverlaySlider(text, initialRatio, action));\n    }\n\n    update() {\n        for (let section of this.sections) section.update();\n    }\n\n    private reset() {\n        for (let s of this.sections) s.reset();\n    }\n\n    updateAndReset() {\n        this.update();\n        this.reset();\n    }\n}\n\nexport class DebugOverlay {\n    overlay = new Overlay()\n    freezing = new WatchValue(false)\n    overlayBatchSlider = this.overlay.createSlider('batch', 1.0, (ratio) => {\n        this.webglDriver.drawRatio = ratio;\n        this.webglDriver.redrawLastTransfer();\n    });\n    overlayIndexCount = this.overlay.createCounter<number>('indexCount', 0, numberToSeparator);\n    overlayNonIndexCount = this.overlay.createCounter<number>('nonIndexCount', 0, numberToSeparator);\n    overlayVertexCount = this.overlay.createCounter<number>('vertexCount', 0, numberToSeparator);\n    trianglePrimCount = this.overlay.createCounter<number>('trianglePrimCount', 0, numberToSeparator);\n    triangleStripPrimCount = this.overlay.createCounter<number>('triangleStripPrimCount', 0, numberToSeparator);\n    spritePrimCount = this.overlay.createCounter<number>('spritePrimCount', 0, numberToSeparator);\n    otherPrimCount = this.overlay.createCounter<number>('otherPrimCount', 0, numberToSeparator);\n    hashMemoryCount = this.overlay.createCounter<number>('hashMemoryCount', 0, numberToSeparator);\n    hashMemorySize = this.overlay.createCounter<number>('hashMemorySize', 0, numberToFileSize);\n    totalCommands = this.overlay.createCounter<number>('totalCommands', 0, numberToSeparator);\n    totalStalls = this.overlay.createCounter<number>('totalStalls', 0, numberToSeparator);\n    primCount = this.overlay.createCounter<number>('primCount', 0, numberToSeparator);\n    batchCount = this.overlay.createCounter<number>('batchCount', 0, numberToSeparator);\n    timePerFrame = this.overlay.createCounter<number>('time', 0, (v) => `${v.toFixed(0)} ms`);\n\n    gpuFreezing = new Signal1<boolean>();\n    gpuDumpCommands = new Signal0();\n\n    constructor(public webglDriver: WebGlPspDrawDriver) {\n    }\n\n    register() {\n        let webglDriver = this.webglDriver;\n        let overlay = this.overlay;\n        overlay.createIntent('toggle colors', () => {\n            webglDriver.enableColors = !webglDriver.enableColors;\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('toggle antialiasing', () => {\n            webglDriver.antialiasing = !webglDriver.antialiasing;\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('toggle textures', () => {\n            webglDriver.enableTextures = !webglDriver.enableTextures;\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('skinning', () => {\n            webglDriver.enableSkinning = !webglDriver.enableSkinning;\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('bilinear', () => {\n            webglDriver.enableBilinear = !webglDriver.enableBilinear;\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('freeze', () => {\n            this.freezing.value = !this.freezing.value;\n            this.gpuFreezing.dispatch(this.freezing.value);\n        });\n\n        const dumpFrameCommandsList: string[] = [];\n        overlay.createIntent('dump frame commands', () => {\n            this.gpuDumpCommands.dispatch();\n        });\n\n        overlay.createIntent('dropbox login', () => {\n            dropboxClient.initOnceAsync()\n        });\n\n        overlay.createIntent('x1', () => {\n            webglDriver.setFramebufferSize(480 * 1, 272 * 1);\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('x2', () => {\n            webglDriver.setFramebufferSize(480 * 2, 272 * 2);\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('x3', () => {\n            webglDriver.setFramebufferSize(480 * 3, 272 * 3);\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.createIntent('x4', () => {\n            webglDriver.setFramebufferSize(480 * 4, 272 * 4);\n            webglDriver.redrawLastTransfer();\n        });\n\n        overlay.updateAndReset();\n    }\n\n    linkTo(emulator: Emulator) {\n        let stats = emulator.gpuStats;\n        stats.onStats.add((stats) => {\n            this.totalStalls.value = stats.totalStalls;\n            this.primCount.value = stats.primCount;\n            this.totalCommands.value = stats.totalCommands;\n            this.timePerFrame.value = stats.timePerFrame;\n            this.overlayVertexCount.value = stats.vertexCount;\n            this.batchCount.value = stats.batchCount;\n            this.overlayIndexCount.value = stats.indexCount;\n            this.overlayNonIndexCount.value = stats.nonIndexCount;\n            this.trianglePrimCount.value = stats.trianglePrimCount;\n            this.triangleStripPrimCount.value = stats.triangleStripPrimCountalue;\n            this.spritePrimCount.value = stats.spritePrimCount;\n            this.otherPrimCount.value = stats.otherPrimCount;\n            this.hashMemoryCount.value = stats.hashMemoryCount;\n            this.hashMemorySize.value = stats.hashMemorySize;\n        });\n    }\n}\n", "import {Signal1} from \"../../global/utils\";\n\nexport class GpuStats {\n    onStats = new Signal1<GpuStats>();\n    totalStalls = 0;\n    primCount = 0;\n    totalCommands = 0;\n    timePerFrame = 0;\n    vertexCount = 0;\n    batchCount = 0;\n    indexCount = 0;\n    nonIndexCount = 0;\n    trianglePrimCount = 0;\n    triangleStripPrimCountalue = 0;\n    spritePrimCount = 0;\n    otherPrimCount = 0;\n    hashMemoryCount = 0;\n    hashMemorySize = 0;\n\n    constructor() {\n    }\n\n    private reset() {\n        this.totalStalls = 0;\n        this.primCount = 0;\n        this.totalCommands = 0;\n        this.timePerFrame = 0;\n        this.vertexCount = 0;\n        this.batchCount = 0;\n        this.indexCount = 0;\n        this.nonIndexCount = 0;\n        this.trianglePrimCount = 0;\n        this.triangleStripPrimCountalue = 0;\n        this.spritePrimCount = 0;\n        this.otherPrimCount = 0;\n        this.hashMemoryCount = 0;\n        this.hashMemorySize = 0;\n    }\n    updateAndReset() {\n        this.onStats.dispatch(this);\n        this.reset();\n    }\n}", "\uFEFFimport {IPspDisplay} from \"../core/display\";\nimport {Config} from \"../hle/config\";\nimport {IPspController} from \"../core/controller\";\nimport {Battery} from \"../core/battery\";\nimport {PspRtc} from \"../core/rtc\";\nimport {PspAudio} from \"../core/audio\";\nimport {Memory} from \"../core/memory\";\nimport {InterruptManager} from \"../core/interrupt\";\nimport {Signal1} from \"../global/utils\";\nimport {PspGpu} from \"../core/gpu/gpu_core\";\nimport {NetManager} from \"../hle/manager/net\";\nimport {MemoryManager} from \"../hle/manager/memory\";\nimport {ThreadManager} from \"../hle/manager/thread\";\nimport {CallbackManager} from \"../hle/manager/callback\";\nimport {ModuleManager} from \"../hle/manager/module\";\nimport {FileManager} from \"../hle/manager/file\";\nimport {Interop} from \"../hle/manager/interop\";\n\nexport interface ISymbol {\n\taddress: number;\n\tsize: number;\n\tname: string;\n}\n\nexport interface ISymbolLookup {\n\tgetSymbolAt(address: number): ISymbol | null;\n}\n\nexport class EmulatorContext {\n    // @ts-ignore\n    display: IPspDisplay;\n    // @ts-ignore\n    config: Config;\n    // @ts-ignore\n    controller: IPspController;\n    // @ts-ignore\n    rtc: PspRtc;\n    // @ts-ignore\n    gpu: PspGpu;\n    // @ts-ignore\n    netManager: NetManager;\n    // @ts-ignore\n    memoryManager: MemoryManager;\n    // @ts-ignore\n    threadManager: ThreadManager;\n    // @ts-ignore\n    callbackManager: CallbackManager;\n    // @ts-ignore\n    moduleManager: ModuleManager;\n    // @ts-ignore\n    audio: PspAudio;\n    // @ts-ignore\n    memory: Memory;\n    // @ts-ignore\n    fileManager: FileManager;\n    // @ts-ignore\n    interruptManager: InterruptManager;\n    // @ts-ignore\n    symbolLookup: ISymbolLookup;\n    // @ts-ignore\n    interop: Interop;\n    // @ts-ignore\n    battery: Battery;\n\tonStdout = new Signal1<string>();\n\tonStderr = new Signal1<string>();\n\n\tcontainer: any = {};\n\tgameTitle = 'unknown';\n\tgameId = 'unknown';\n\n\tconstructor() {\n\t}\n\t\n\tget currentThread() { return this.threadManager.current; }\n\tget currentState() { return this.currentThread.state; }\n\tget currentInstructionCache() { return this.currentState.icache; }\n\n\tinit(interruptManager: InterruptManager, display: IPspDisplay, controller: IPspController, gpu: PspGpu, memoryManager: MemoryManager, threadManager: ThreadManager, audio: PspAudio, memory: Memory, fileManager: FileManager, rtc: PspRtc, callbackManager: CallbackManager, moduleManager: ModuleManager, config: Config, interop: Interop, netManager: NetManager, battery: Battery) {\n\t\tthis.interruptManager = interruptManager;\n\t\tthis.display = display;\n\t\tthis.controller = controller;\n\t\tthis.gpu = gpu;\n\t\tthis.memoryManager = memoryManager;\n\t\tthis.threadManager = threadManager;\n\t\tthis.audio = audio;\n\t\tthis.memory = memory;\n\t\tthis.fileManager = fileManager;\n\t\tthis.rtc = rtc;\n\t\tthis.callbackManager = callbackManager;\n\t\tthis.moduleManager = moduleManager;\n\t\tthis.config = config;\n\t\tthis.interop = interop;\n\t\tthis.netManager = netManager;\n\t\tthis.battery = battery;\n\t}\n}\n", "\uFEFFimport \"../emu/global\"\nimport {fields, printf, Signal0, Signal2, sprintf} from \"../global/utils\";\nimport {IType, Pointer} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\nimport {MathUtils} from \"../global/math\";\n\nfunction saveAs(data: Blob, fileName: string): void {\n    const a = document.createElement(\"a\");\n    document.body.appendChild(a)\n    a.style.display = 'none'\n    const url = URL.createObjectURL(data)\n    a.href = url\n    a.download = fileName\n    a.click()\n    URL.revokeObjectURL(url)\n    document.body.removeChild(a)\n}\n\nconst MASK = 0x0FFFFFFF;\n\nconst LWR_MASK = new Uint32Array([0x00000000, 0xFF000000, 0xFFFF0000, 0xFFFFFF00]);\nconst LWR_SHIFT = new Uint32Array([0, 8, 16, 24]);\n\nconst LWL_MASK = new Uint32Array([0x00FFFFFF, 0x0000FFFF, 0x000000FF, 0x00000000]);\nconst LWL_SHIFT = new Uint32Array([24, 16, 8, 0]);\n\nconst SWL_MASK = new Uint32Array([0xFFFFFF00, 0xFFFF0000, 0xFF000000, 0x00000000]);\nconst SWL_SHIFT = new Uint32Array([24, 16, 8, 0]);\n\nconst SWR_MASK = new Uint32Array([0x00000000, 0x000000FF, 0x0000FFFF, 0x00FFFFFF]);\nconst SWR_SHIFT = new Uint32Array([0, 8, 16, 24]);\n\nexport abstract class Memory {\n    read8(addr: number): number {\n        return this.lb(addr)\n    }\n\n    lwl(address: number, value: number) {\n        const align = address & 3;\n        const oldvalue = this.lw(address & ~3);\n        return ((oldvalue << LWL_SHIFT[align]) | (value & LWL_MASK[align]));\n\t}\n\n\tlwr(address: number, value: number) {\n        const align = address & 3;\n        const oldvalue = this.lw(address & ~3);\n        return ((oldvalue >>> LWR_SHIFT[align]) | (value & LWR_MASK[align]));\n\t}\n\n\tswl(address: number, value: number) {\n        const align = address & 3;\n        const aadress = address & ~3;\n        const vwrite = (value >>> SWL_SHIFT[align]) | (this.lw(aadress) & SWL_MASK[align]);\n        this.sw(aadress, vwrite);\n\t}\n\n\tswr(address: number, value: number) {\n        const align = address & 3;\n        const aadress = address & ~3;\n        const vwrite = (value << SWR_SHIFT[align]) | (this.lw(aadress) & SWR_MASK[align]);\n        this.sw(aadress, vwrite);\n\t}\n\n\t// ALIASES!\n\twriteInt8(address: number, value: number) { this.sb(address, value); }\n\twriteInt16(address: number, value: number) { this.sh(address, value); }\n\twriteInt32(address: number, value: number) { this.sw(address, value); }\n\twriteFloat32(address: number, value: number) { this.swc1(address, value); }\n\treadInt8(address: number) { return this.lb(address); }\n\treadUInt8(address: number) { return this.lbu(address); }\n\treadInt16(address: number) { return this.lh(address); }\n\treadUInt16(address: number) { return this.lhu(address); }\n\treadInt32(address: number) { return this.lw(address); }\n\treadUInt32(address: number) { return this.lwu(address); }\n\treadFloat32(address: number) { return this.lwc1(address); }\n\treadUInt32_2(address: number) { return this.lw_2(address); }\n\t\n\tsb(address: number, value: number): void { throw `Must override`; }\n\tsh(address: number, value: number): void { throw `Must override`; }\n\tsw(address: number, value: number): void { throw `Must override`; }\n\tswc1(address: number, value: number): void { throw `Must override`; }\n\tlb(address: number): number { throw `Must override`; }\n\tlbu(address: number): number { throw `Must override`; }\n\tlh(address: number): number { throw `Must override`; }\n\tlhu(address: number): number { throw `Must override`; }\n\tlw(address: number): number { throw `Must override`; }\n\tlwu(address: number): number { throw `Must override`; }\n\tlwc1(address: number): number { throw `Must override`; }\n\tlw_2(address: number): number { throw `Must override`; }\n\n\tprotected getBuffer(address: number):ArrayBuffer { throw `Must override`; }\n\tprotected getOffsetInBuffer(address: number):number { throw `Must override`; }\n\tavailableAfterAddress(address: number): number { throw `Must override`; }\n\n\tstatic DEFAULT_FRAME_ADDRESS: number = 0x04000000;\n\tstatic MASK = 0x0FFFFFFF;\n\tstatic MAIN_OFFSET = 0x08000000;\n\n\tisAddressInRange(address: number, min: number, max: number) {\n\t\taddress &= FastMemory.MASK; address >>>= 0;\n\t\tmin &= FastMemory.MASK; min >>>= 0;\n\t\tmax &= FastMemory.MASK; max >>>= 0;\n\n\t\treturn (address >= min) && (address < max);\n\t}\n\n\tisValidAddress(address: number) {\n\t\taddress &= FastMemory.MASK;\n\t\tif ((address & 0x3E000000) == 0x08000000) return true;\n\t\tif ((address & 0x3F800000) == 0x04000000) return true;\n\t\tif ((address & 0xBFFF0000) == 0x00010000) return true;\n\t\tif (this.isAddressInRange(address, FastMemory.DEFAULT_FRAME_ADDRESS, FastMemory.DEFAULT_FRAME_ADDRESS + 0x200000)) return true;\n\t\tif (this.isAddressInRange(address, 0x08000000, 0x08000000 + 0x04000000)) return true;\n\t\treturn false;\n\t}\n\n\tinvalidateDataRange = new Signal2<number, number>();\n\tinvalidateDataAll = new Signal0();\n\n\tconstructor() {\n\t\t//this._updateWriteFunctions();\n\t}\n\n\tgetPointerPointer<T>(type: IType<T>, address: number) {\n\t\tif (address == 0) return null;\n\t\treturn new Pointer<T>(type, this, address);\n\t}\n\n\tgetPointerDataView(address: number, size: number = this.availableAfterAddress(address)) {\n        const buffer = this.getBuffer(address), offset = this.getOffsetInBuffer(address);\n        return new DataView(buffer, offset, size);\n\t}\n\t\n\tslice(low: number, high: number) {\n        const buffer = this.getBuffer(low), offset = this.getOffsetInBuffer(low);\n        return new Uint8Array(buffer, offset, high - low);\n\t}\n\n\tgetPointerU8Array(address: number, size: number = this.availableAfterAddress(address)): Uint8Array {\n        const buffer = this.getBuffer(address), offset = this.getOffsetInBuffer(address);\n        return new Uint8Array(buffer, offset, size);\n\t}\n\n\tgetPointerU16Array(address: number, size: number = this.availableAfterAddress(address)) {\n        const buffer = this.getBuffer(address), offset = this.getOffsetInBuffer(address);\n        return new Uint16Array(buffer, offset, size / 2);\n\t}\n\n\tgetPointerU32Array(address: number, size: number = this.availableAfterAddress(address)) {\n        const buffer = this.getBuffer(address), offset = this.getOffsetInBuffer(address);\n        return new Uint32Array(buffer, offset, size / 4);\n\t}\n\n\tgetPointerStream(address: number, size?: number): Stream | null {\n\t\t//console.log(sprintf(\"getPointerStream: %08X\", address));\n\t\tif (address == 0) return null;\n\t\tif (size === 0) return new Stream(new DataView(new ArrayBuffer(0)));\n\t\tif (!this.isValidAddress(address)) return Stream.INVALID;\n\t\tif (size === undefined) size = this.availableAfterAddress(address & FastMemory.MASK);\n\t\tif (size < 0) return Stream.INVALID;\n\t\t//if (size > this.u8.length - (address & FastMemory.MASK)) return Stream.INVALID;\n\t\treturn new Stream(this.getPointerDataView(address & FastMemory.MASK, size));\n\t}\n\n\tgetU8Array(address: number, size?: number) {\n\t\tif (address == 0) return null;\n\t\tif (!this.isValidAddress(address)) return null;\n\t\treturn this.getPointerU8Array(address & FastMemory.MASK, size);\n\t}\n\n\tgetU16Array(address: number, size?: number) {\n\t\tif (address == 0) return null;\n\t\tif (!this.isValidAddress(address)) return null;\n\t\treturn this.getPointerU16Array(address & FastMemory.MASK, size);\n\t}\n\n\tprivate writeBreakpoints = <{ address: number; action: (address: number) => void; }[]>[]\n\n\t/*\n\t_updateWriteFunctions() {\n\t\tif (this.writeBreakpoints.length > 0) {\n\t\t\tthis.writeInt8 = this._writeInt8_break;\n\t\t\tthis.writeInt16 = this._writeInt16_break;\n\t\t\tthis.writeInt32 = this._writeInt32_break;\n\t\t\tthis.writeFloat32 = this._writeFloat32_break;\n\t\t} else {\n\t\t\tthis.writeInt8 = this._writeInt8;\n\t\t\tthis.writeInt16 = this._writeInt16;\n\t\t\tthis.writeInt32 = this._writeInt32;\n\t\t\tthis.writeFloat32 = this._writeFloat32;\n\t\t}\n\t}\n\n\tprotected _writeInt8(address: number, value: number) { this.writeInt8(address, value); }\n\tprotected _writeInt16(address: number, value: number) { this.writeInt16(address, value); }\n\tprotected _writeInt32(address: number, value: number) { this.writeInt32(address, value); }\n\tprotected _writeFloat32(address: number, value: number) { this.writeFloat32(address, value); }\n\n\tprotected _writeInt8_break(address: number, value: number) { this._writeInt8(address, value); this._checkWriteBreakpoints(address, address + 1); }\n\tprotected _writeInt16_break(address: number, value: number) { this._writeInt16(address, value); this._checkWriteBreakpoints(address, address + 2); }\n\tprotected _writeInt32_break(address: number, value: number) { this._writeInt32(address, value); this._checkWriteBreakpoints(address, address + 4); }\n\tprotected _writeFloat32_break(address: number, value: number) { this._writeFloat32(address, value); this._checkWriteBreakpoints(address, address + 4); }\n\t*/\n\n\taddWatch4(address: number) {\n\t\tthis.addWriteAction(address, (address: number) => {\n\t\t\tconsole.log(sprintf('Watch:0x%08X <- 0x%08X', address, this.lwu(address)));\n\t\t});\n\t}\n\n\taddBreakpointOnValue(address: number, value: number) {\n\t\t//Watch: 0x0951044C < - 0x2A000000 \n\n\t\tthis.addWriteAction(address, (actualAddress: number) => {\n            const actualValue: number = this.lwu(address);\n\n            console.log(sprintf('TryBreakpoint:0x%08X <- 0x%08X | 0x%08X (%d)', address, actualValue, value, (actualValue == value)));\n\n\t\t\tif (actualValue == value) {\n\t\t\t\tdebugger;\n\t\t\t}\n\t\t});\n\t}\n\n\taddWriteAction(address: number, action: (address: number) => void) {\n\t\tthis.writeBreakpoints.push({ address: address, action: action });\n\t\t//this._updateWriteFunctions();\n\t}\n\n\t/*\n\t_checkWriteBreakpoints(start: number, end: number) {\n\t\tstart &= FastMemory.MASK;\n\t\tend &= FastMemory.MASK;\n\t\tfor (let n = 0; n < this.writeBreakpoints.length; n++) {\n\t\t\tconst writeBreakpoint = this.writeBreakpoints[n];\n\t\t\tconst addressCheck = writeBreakpoint.address & FastMemory.MASK;\n\t\t\tif (addressCheck >= start && addressCheck < end) {\n\t\t\t\twriteBreakpoint.action(writeBreakpoint.address);\n\t\t\t}\n\t\t}\n\t}\n\t*/\n\n\treadArrayBuffer(address: number, length: number) {\n\t\tconst out = new Uint8Array(length);\n\t\tout.set(this.getPointerU8Array(address, length));\n\t\treturn out.buffer;\n\t}\n\n\tsliceWithBounds(low: number, high: number) {\n\t\treturn new Stream(this.getPointerDataView(low, high - low));\n\t}\n\n\tsliceWithSize(address: number, size: number) {\n\t\treturn new Stream(this.getPointerDataView(address, size));\n\t}\n\n\tabstract reset(): this\n\n\tcopy(from: number, to: number, length: number) {\n\t\tif (length <= 0) return;\n\t\t//console.warn('copy:', from, to, length);\n\t\tthis.getPointerU8Array(to, length).set(this.getPointerU8Array(from, length));\n\t\t//this._checkWriteBreakpoints(to, to + length);\n\t}\n\n\tmemset(address: number, value: number, length: number) {\n\t\tlet buffer = this.getPointerU8Array(address, length);\n        let value8 = value & 0xFF;\n\t\tif (typeof buffer.fill != 'undefined') {\n\t\t\tbuffer.fill(value8);\n\t\t} else {\n\t\t\tfor (let n = 0; n < buffer.length; n++) buffer[n] = value8;\n\t\t}\n\t\t//this._checkWriteBreakpoints(address, address + length);\n\t}\n\n\twriteBytes(address: number, data: ArrayBuffer) {\n\t\tthis.getPointerU8Array(address, data.byteLength).set(new Uint8Array(data));\n\t\t//this._checkWriteBreakpoints(address, address + data.byteLength);\n\t}\n\n\twriteUint8Array(address: number, data: Uint8Array) {\n\t\tthis.getPointerU8Array(address, data.length).set(data);\n\t\t//this._checkWriteBreakpoints(address, address + data.length);\n\t}\n\n\twriteStream(address: number, stream: Stream) {\n\t\tthis.writeUint8Array(address, stream.slice().readAllBytes());\n\t\t//this._checkWriteBreakpoints(address, address + stream.length);\n\t}\n\n\treadStringz(address: number): string|null {\n\t\tif (address == 0) return null;\n        let endAddress = address;\n        while (this.lbu(endAddress) != 0) endAddress++;\n        const length = endAddress - address\n        const data = this.getPointerU8Array(address, length)\n\t\t// @ts-ignore\n        return String.fromUint8Array(data);\n\t}\n\n\t/*\n\thashWordCount(addressAligned: number, count: number) {\n\t\taddressAligned >>>= 2;\n\t\tcount >>>= 2;\n\n\t\tlet result = 0;\n\t\tfor (let n = 0; n < count; n++) {\n\t\t\tconst v = this.lw_2(addressAligned + n);\n\t\t\tresult = (result + v ^ n) | 0;\n\t\t}\n\t\treturn result;\n\t}\n\t*/\n\n\thashWordCount(_addressAligned: number, _count: number) {\n\t\tlet addressAligned = (_addressAligned >>> 2) | 0;\n\t\tlet count = (_count >>> 2) | 0;\n\n        let result = 0;\n        for (let n = 0; n < count; n++) {\n            const v = this.lw_2(addressAligned + n);\n            result = (result + v ^ n);\n\t\t}\n\t\treturn result;\n\t}\n\n\thash(address: number, count: number) {\n\t\tlet result = 0;\n\t\t\n\t\taddress &= MASK;\n\n\t\twhile ((address & 3) != 0) { result += this.lbu(address++); count--; }\n\n\t\tconst count2 = MathUtils.prevAligned(count, 4);\n\n\t\tresult += this.hashWordCount(address, count2);\n\n\t\taddress += count2;\n\t\tcount -= count2;\n\n\t\twhile ((address & 3) != 0) { result += this.lbu(address++) * 7; count--; }\n\n\t\treturn result;\n\t}\n\n\tstatic memoryCopy(source: ArrayBuffer, sourcePosition: number, destination: ArrayBuffer, destinationPosition: number, length: number) {\n        const _source = new Uint8Array(source, sourcePosition, length);\n        const _destination = new Uint8Array(destination, destinationPosition, length);\n        _destination.set(_source);\n\t}\n\n\tdump(name = 'memory.bin') {\n\t\tsaveAs(new Blob([this.getPointerDataView(0x08000000, 0x2000000)]), name);\n\t}\n}\n\nexport const MemoryFields = fields<Memory>()\n\nclass FastMemory extends Memory {\n\tprivate buffer: ArrayBuffer;\n\tprivate s8: Int8Array;\n\tprivate u8: Uint8Array;\n\tprivate s16: Int16Array;\n\tprivate u16: Uint16Array;\n\tprivate s32: Int32Array;\n\tprivate u32: Uint32Array;\n\tprivate f32: Float32Array;\n\n\tconstructor(size: number = 0x0a000000 + 4) {\n\t\tsuper();\n\t\tthis.buffer = new ArrayBuffer(size);\n\t\tthis.s8 = new Int8Array(this.buffer);\n\t\tthis.u8 = new Uint8Array(this.buffer);\n\t\tthis.u16 = new Uint16Array(this.buffer);\n\t\tthis.s16 = new Int16Array(this.buffer);\n\t\tthis.s32 = new Int32Array(this.buffer);\n\t\tthis.u32 = new Uint32Array(this.buffer);\n\t\tthis.f32 = new Float32Array(this.buffer);\n\t}\n\n\treset() {\n\t    this.s8.fill(0)\n        return this\n    }\n\n    sb(address: number, value: number) { this.u8[(address & MASK) >> 0] = value; }\n\tsh(address: number, value: number) { this.u16[(address & MASK) >> 1] = value; }\n\tsw(address: number, value: number) { this.u32[(address & MASK) >> 2] = value; }\n\tswc1(address: number, value: number) { this.f32[(address & MASK) >> 2] = value; }\n\tlb(address: number) { return this.s8[(address & MASK) >> 0]; }\n\tlbu(address: number) { return this.u8[(address & MASK) >> 0]; }\n\tlh(address: number) { return this.s16[(address & MASK) >> 1]; }\n\tlhu(address: number) { return this.u16[(address & MASK) >> 1]; }\n\tlw(address: number) { return this.s32[(address & MASK) >> 2]; }\n\tlwu(address: number) { return this.u32[(address & MASK) >> 2]; }\n\tlwc1(address: number) { return this.f32[(address & MASK) >> 2]; }\n\tlw_2(address: number) { return this.u32[address]; }\n\n\tprotected getBuffer(address: number):ArrayBuffer { return this.buffer; }\n\tprotected getOffsetInBuffer(address: number):number { return address & MASK; }\n\n\tavailableAfterAddress(address: number): number {\n\t\treturn this.buffer.byteLength - (address & MASK);\n\t}\n}\n\nclass LowMemorySegment {\n\tsize: number;\n\tlow: number;\n\thigh: number;\n\ts8: Int8Array;\n\tu8: Uint8Array;\n\ts16: Int16Array;\n\tu16: Uint16Array;\n\ts32: Int32Array;\n\tu32: Uint32Array;\n\tf32: Float32Array;\n\n\tconstructor(public name: string, public offset: number, public buffer: ArrayBuffer) {\n\t\tthis.size = buffer.byteLength;\n\t\tthis.low = offset;\n\t\tthis.high = this.low + this.size;\n\t\tthis.s8 = new Int8Array(this.buffer);\n\t\tthis.u8 = new Uint8Array(this.buffer);\n\t\tthis.u16 = new Uint16Array(this.buffer);\n\t\tthis.s16 = new Int16Array(this.buffer);\n\t\tthis.s32 = new Int32Array(this.buffer);\n\t\tthis.u32 = new Uint32Array(this.buffer);\n\t\tthis.f32 = new Float32Array(this.buffer);\n\t}\n\n\tcontains(address: number) {\n\t\taddress &= MASK;\n\t\treturn address >= this.low && address < this.high;\n\t}\n\n\tprivate fixAddress(address:number) { return (address & MASK) - this.offset; }\n\n\tsb(address: number, value: number) { this.u8[this.fixAddress(address) >> 0] = value; }\n\tsh(address: number, value: number) { this.u16[this.fixAddress(address) >> 1] = value; }\n\tsw(address: number, value: number) { this.u32[this.fixAddress(address) >> 2] = value; }\n\tswc1(address: number, value: number) { this.f32[this.fixAddress(address) >> 2] = value; }\n\tlb(address: number) { return this.s8[this.fixAddress(address) >> 0]; }\n\tlbu(address: number) { return this.u8[this.fixAddress(address) >> 0]; }\n\tlh(address: number) { return this.s16[this.fixAddress(address) >> 1]; }\n\tlhu(address: number) { return this.u16[this.fixAddress(address) >> 1]; }\n\tlw(address: number) { return this.s32[this.fixAddress(address) >> 2]; }\n\tlwu(address: number) { return this.u32[this.fixAddress(address) >> 2]; }\n\tlwc1(address: number) { return this.f32[this.fixAddress(address) >> 2]; }\n\n\tgetBuffer(address: number):ArrayBuffer { return this.buffer; }\n\tgetOffsetInBuffer(address: number):number { return this.fixAddress(address); }\n\n\tavailableAfterAddress(address: number): number {\n\t\treturn this.buffer.byteLength - this.fixAddress(address);\n\t}\n}\n\nclass LowMemory extends Memory {\n\tprivate scratchpad: LowMemorySegment;\n\tprivate videomem: LowMemorySegment;\n\tprivate mainmem: LowMemorySegment;\n\n\tconstructor() {\n\t\tsuper();\n\t\t//this.scratchpad = new LowMemorySegment('scatchpad', 0x00010000, new ArrayBuffer(16 * 1024));\n\t\tthis.scratchpad = new LowMemorySegment('scatchpad', 0x00000000, new ArrayBuffer(16 * 1024 + 0x00010000));\n\t\t//this.scratchpad = new LowMemorySegment('scatchpad', 0x00000000, new ArrayBuffer(0x00010000 + 16 * 1024));\n\t\tthis.videomem = new LowMemorySegment('videomem', 0x04000000, new ArrayBuffer(2 * 1024 * 1024));\n\t\tthis.mainmem = new LowMemorySegment('mainmem', 0x08000000, new ArrayBuffer(32 * 1024 * 1024));\n\t\t//this.mainmem = new LowMemorySegment('mainmem', 0x08000000, new ArrayBuffer(64 * 1024 * 1024));\n\t}\n\n    reset() {\n\t    this.scratchpad.u8.fill(0)\n        this.videomem.u8.fill(0)\n        this.mainmem.u8.fill(0)\n        return this\n    }\n\n    getMemRange(address: number): LowMemorySegment | null {\n\t\taddress &= MASK;\n\t\tif (address >= 0x08000000) {\n\t\t\treturn this.mainmem;\n\t\t} else {\n            if (this.mainmem.contains(address)) return this.mainmem;\n            if (this.videomem.contains(address)) return this.videomem;\n\t\t\tif (this.scratchpad.contains(address)) return this.scratchpad;\n\t\t\t// 02203738\n\t\t\tprintf(\"Unmapped: %08X\", address);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tsb(address: number, value: number) { this.getMemRange(address)!.sb(address, value); }\n\tsh(address: number, value: number) { this.getMemRange(address)!.sh(address, value); }\n\tsw(address: number, value: number) { this.getMemRange(address)!.sw(address, value); }\n\tswc1(address: number, value: number) { this.getMemRange(address)!.swc1(address, value); }\n\tlb(address: number) { return this.getMemRange(address)!.lb(address); }\n\tlbu(address: number) { return this.getMemRange(address)!.lbu(address); }\n\tlh(address: number) { return this.getMemRange(address)!.lh(address); }\n\tlhu(address: number) { return this.getMemRange(address)!.lhu(address); }\n\tlw(address: number) { return this.getMemRange(address)!.lw(address); }\n\tlwu(address: number) { return this.getMemRange(address)!.lwu(address); }\n\tlwc1(address: number) { return this.getMemRange(address)!.lwc1(address); }\n\tlw_2(address4: number) { return this.getMemRange(address4 * 4)!.lw(address4 * 4); }\n\n\tprotected getBuffer(address: number):ArrayBuffer { return this.getMemRange(address)!.getBuffer(address); }\n\tprotected getOffsetInBuffer(address: number):number { return this.getMemRange(address)!.getOffsetInBuffer(address); }\n\n\tavailableAfterAddress(address: number): number {\n\t\treturn this.getMemRange(address)!.availableAfterAddress(address);\n\t}\n}\n\nexport class TestMemory extends FastMemory {\n    constructor(size: number) {\n        super(size);\n    }\n}\n\ndeclare const process: any;\nfunction isNodeJs() {\n\treturn typeof process != 'undefined';\n}\n\nfunction allowBigAlloc() {\n\ttry {\n        const ab = new ArrayBuffer(0x0a000000 + 4);\n        return true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\nfunction supportFastMemory() {\n\t//return !isNodeJs() && allowBigAlloc();\n\t//return !isNodeJs();\n\treturn true;\n}\n\nexport function create(): Memory {\n\tif (supportFastMemory()) {\n\t\treturn new FastMemory();\n\t} else {\n\t\treturn new LowMemory();\n\t}\n}\n\nlet _instance: Memory | null = null;\nexport function getMemoryInstance() {\n\tif (_instance == null) _instance = create();\n\treturn _instance;\n}\n\nexport function getMemoryInstanceReset() {\n    return getMemoryInstance().reset()\n}\n", "\uFEFFimport \"../emu/global\"\n\nexport class PspRtc {\n\tgetCurrentUnixSeconds() { return Date.now() / 1000; }\n\tgetCurrentUnixMicroseconds() { return Date.now() * 1000; }\n\tgetClockMicroseconds() { return (performance.now() * 1000) >>> 0; }\n\tgetDayOfWeek(year: number, month: number, day: number) { return new Date(year, month - 1, day).getDay(); }\n\tgetDaysInMonth(year: number, month: number) { return new Date(year, month, 0).getDate(); }\n}\n", "class RelooperBlock {\n\tpublic conditionalBranches:RelooperBranch[] = [];\n\tpublic nextBlock:RelooperBlock|null = null;\n\tpublic conditionalReferences:RelooperBlock[] = [];\n\tconstructor(public index:number, public code:string) { }\n}\n\nclass RelooperBranch {\n\tconstructor(public to:RelooperBlock, public cond?:string, public onjumpCode?:string) {\n\t}\n}\n\nclass IndentWriter {\n\tpublic i:string = '';\n\tpublic startline:boolean = true;\n\tpublic chunks:string[] = [];\n\t\n\twrite(chunk:string) {\n\t\tthis.chunks.push(chunk);\n\t\t/*\n\t\tif (chunk == '') return;\n\t\tconsole.log(chunk);\n\t\tif (this.startline) {\n\t\t\tthis.chunks.push(this.i);\n\t\t\tthis.startline = false;\n\t\t}\n\t\tconst parts = chunk.split('\\n').join();\n\t\tconst jumpIndex = chunk.indexOf('\\n');\n\t\tif (jumpIndex >= 0) {\n\t\t\tthis.chunks.push(chunk.substr(0, jumpIndex));\n\t\t\tthis.chunks.push('\\n');\n\t\t\tthis.startline = true;\n\t\t\tthis.write(chunk.substr(jumpIndex + 1));\n\t\t} else {\n\t\t\tthis.chunks.push(chunk);\n\t\t}\n\t\t*/\n\t}\n\tindent() { this.i += '\\t'; }\n\tunindent() { this.i = this.i.substr(0, -1); }\n\tget output() { return this.chunks.join(''); }\n}\n\nexport class SimpleRelooper {\n\tpublic blocks:RelooperBlock[] = [];\n\tprivate lastId:number = 0;\n\tinit() {\n\t\tthis.lastId = 0;\n\t}\n\tcleanup() {\n\t}\n\taddBlock(code:string) {\n        const block = new RelooperBlock(this.lastId++, code);\n        this.blocks.push(block);\n\t\treturn block;\n\t}\n\taddBranch(from:RelooperBlock, to:RelooperBlock, cond?:string, onjumpcode?:string) {\n\t\tconst branch = new RelooperBranch(to, cond, onjumpcode);\n\t\tif (cond) {\n\t\t\tfrom.conditionalBranches.push(branch);\n\t\t\tto.conditionalReferences.push(from);\n\t\t} else {\n\t\t\tfrom.nextBlock = to;\n\t\t}\n\t}\n\t\n\trender(first:RelooperBlock) {\n        const writer = new IndentWriter();\n\n        if (this.blocks.length <= 1) {\n\t\t\tif (this.blocks.length == 1) writer.write(this.blocks[0].code);\n\t\t} else {\n\t\t\twriter.write('label = 0; loop_label: while (true) switch (label) { case 0:\\n');\n\t\t\twriter.indent();\n\t\t\tfor (let block of this.blocks) {\n\t\t\t\tlet nblock = this.blocks[block.index + 1];\n\t\t\t\t\n\t\t\t\tif (block.index != 0) {\n\t\t\t\t\twriter.write(`case ${block.index}:\\n`);\n\t\t\t\t\twriter.indent();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((block.conditionalBranches.length == 0) && (block.conditionalReferences.length == 1) && (block.conditionalReferences[0] == nblock)) {\n\t\t\t\t\tlet branch = nblock.conditionalBranches[0];\n\t\t\t\t\twriter.write(`while (true) {\\n`);\n\t\t\t\t\twriter.indent();\n\t\t\t\t\twriter.write(block.code);\n\t\t\t\t\twriter.write(`if (!(${branch.cond})) break;\\n`);\n\t\t\t\t\twriter.write(`${branch.onjumpCode};\\n`);\n\t\t\t\t\twriter.unindent();\n\t\t\t\t\twriter.write(`}\\n`);\n\t\t\t\t\twriter.write(nblock.code);\n\t\t\t\t} else {\t\t\n\t\t\t\t\tfor (let branch of block.conditionalBranches) {\n\t\t\t\t\t\twriter.write(`if (${branch.cond}) { ${branch.onjumpCode}; label = ${branch.to.index}; continue loop_label; }\\n`);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\twriter.write(block.code);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (block.nextBlock) {\n\t\t\t\t\tif (block.nextBlock != nblock) {\n\t\t\t\t\t\twriter.write(`label = ${block.nextBlock.index}; continue loop_label;\\n`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twriter.write('break loop_label;\\n');\n\t\t\t\t}\n\t\t\t\tif (block.index != 0) writer.unindent();\n\t\t\t}\n\t\t\twriter.unindent();\n\t\t\twriter.write('}');\n\t\t}\n\t\t\n\t\t\n\t\treturn writer.output;\n\t}\n}\n", "import {SimpleRelooper} from \"./simplerelooper\";\n\ninterface IBlock {\n}\n\ninterface IRelooper {\n\taddBlock(code:string):IBlock;\n\taddBranch(from:IBlock, to:IBlock, cond?:string, onjumpcode?:string):void;\n}\n\nexport function processAdvance(callback: (r:IRelooper) => void):string {\n\t//const sr = new simplerelooper.SimpleRelooper();\n\tthrow new Error(\"Not implemented relooper advanced\");\n}\n\nexport function processSimple(callback: (r:IRelooper) => void):string {\n    const sr = new SimpleRelooper();\n    sr.init();\n\ttry {\n\t\tcallback(sr);\n\t\treturn sr.render(sr.blocks[0]);\n\t} finally {\n\t\tsr.cleanup();\t\n\t}\n}\n\nexport function processType(type:string, callback: (r:IRelooper) => void):string {\n\tswitch (type) {\n\t\tcase 'simple': return processSimple(callback);\n\t\tcase 'advanced':  return processAdvance(callback);\n\t\tdefault: throw new Error(`Invalid relooper process type ${type}`);\n\t}\n\t//const sr = new simplerelooper.SimpleRelooper();\n\t\n}\n\nexport function relooperProcess(callback: (r:IRelooper) => void):string {\n\t//const sr = new simplerelooper.SimpleRelooper();\n\treturn processSimple(callback);\n}", "\uFEFFimport \"../../emu/global\"\n\nimport { CpuState } from './cpu_core';\nimport {addressToHex, NumberDictionary} from \"../../global/utils\";\nimport {MathFloat} from \"../../global/math\";\nimport {relooperProcess} from \"../../codegen/relooper\";\n\nexport class ANode {\n\tindex: number = 0\n\ttoJs(): string { return ''; }\n\toptimize(): ANode { return this; }\n}\n\nexport class ANodeStm extends ANode {\n}\n\nexport class ANodeStmLabel extends ANodeStm {\n\taddress:number = 0;\n\treferences:ANodeStmStaticJump[] = [];\n\ttype = 'normal';\n\t\n\tconstructor(address:number) {\n\t\tsuper();\n\t\tthis.address = address\n\t}\n\t\n\ttoJs() {\n\t\tswitch (this.type) {\n\t\t\tcase 'none': return ``;\n\t\t\tcase 'normal':\n\t\t\t\tif (this.references.length == 0) return ``;\n\t\t\t\treturn `case ${addressToHex(this.address)}:`;\n\t\t\tcase 'while': return `loop_${addressToHex(this.address)}: while (true) {`;\n            default: throw new Error(`Unexpected type ${this.type}`)\n\t\t}\n\t}\n}\n\nexport class ANodeStmStaticJump extends ANodeStm {\n\ttype = 'normal';\n\tconstructor(public cond: ANodeExpr, public address: number, public branchCode?: ANodeStm) { super(); }\n\t\n\tget branchCodeJs() { return this.branchCode?.toJs() ?? ''; }\n\n\ttoJs() {\n\t\tswitch (this.type) {\n\t\t\tcase 'normal': return `if (${this.cond.toJs()}) { ${this.branchCodeJs}; loop_state = ${addressToHex(this.address)}; continue loop; }`;\n\t\t\tcase 'while': return `if (${this.cond.toJs()}) { ${this.branchCodeJs}; continue loop_${addressToHex(this.address)}; } else { break loop_${addressToHex(this.address)}; } }`;\n            default: throw new Error(`Unexpected type ${this.type}`)\n\t\t}\n\t}\n}\n\nexport class ANodeStmReturn extends ANodeStm {\n\ttoJs() { return 'return;'; }\n}\n\nexport class ANodeStmList extends ANodeStm {\n\tconstructor(public childs: ANodeStm[]) { super(); }\n\n\tadd(node: ANodeStm) {\n\t\tthis.childs.push(node);\n\t}\n\n\ttoJs() {\n\t\treturn this.childs.map(c => c.toJs()).join(\"\\n\");\n\t}\n}\n\nclass ABlock {\n\tpublic code:string = '';\n\tpublic rblock:any = null;\n\t\n\tconstructor(public index:number, public label:ANodeStmLabel|null = null, public jump:ANodeStmStaticJump|null = null) {\n\t}\n\t\n\tpublic add(node:ANodeStm) {\n\t\tthis.code += node.toJs() + '\\n';\n\t}\n}\n\n\nexport class ANodeFunction extends ANodeStmList {\n\tconstructor(public address:number, private prefix:ANodeStm, private sufix:ANodeStm, childs: ANodeStm[]) { super(childs); }\n\t\n\ttoJs() {\n\t\tlet block:ABlock = new ABlock(0, null);\n\t\tconst blocksByLabel:NumberDictionary<ABlock> = {};\n\t\tconst blocks = [block];\n\t\tfor (let child of this.childs) {\n\t\t\tif (child instanceof ANodeStmLabel) {\n\t\t\t\tblocks.push(block = new ABlock(blocks.length, child, null));\n\t\t\t\tblocksByLabel[child.address] = block;\n\t\t\t} else if (child instanceof ANodeStmStaticJump) {\n\t\t\t\tblocks.push(block = new ABlock(blocks.length, null, child));\n\t\t\t} else {\n\t\t\t\tblock.add(child);\n\t\t\t}\n\t\t}\n\t\t\n        const text = relooperProcess(relooper => {\n            //Relooper.setDebug(true);\n            for (let block of blocks) block.rblock = relooper.addBlock(block.code);\n\n            for (let n = 0; n < blocks.length; n++) {\n                let block = blocks[n];\n                let nblock = (n < blocks.length - 1) ? blocks[n + 1] : null;\n                let jblock = block.jump ? blocksByLabel[block.jump.address] : null;\n                if (nblock) relooper.addBranch(block.rblock, nblock.rblock);\n                if (jblock) relooper.addBranch(block.rblock, jblock.rblock, block.jump!.cond.toJs(), block.jump!.branchCodeJs);\n            }\n        });\n\n\t\t//console.log(text);\t\t\n\n\t\treturn `${this.prefix.toJs()}\\n${text}${this.sufix.toJs()}\\n`;\n\t}\n}\n\nexport class ANodeStmRaw extends ANodeStm {\n\tconstructor(public content: string) { super(); }\n\ttoJs() { return this.content; }\n}\n\nexport class ANodeStmExpr extends ANodeStm {\n\tconstructor(public expr: ANodeExpr) { super(); }\n\ttoJs() { return this.expr.toJs() + ';'; }\n}\n\nexport class ANodeAllocVarStm extends ANodeStm {\n\tconstructor(public name: string, public initialValue: ANodeExpr) { super(); }\n\ttoJs() { return `var ${this.name} = ${this.initialValue.toJs()};`; }\n}\n\nexport class ANodeExpr extends ANode {\n\n}\n\nexport class ANodeExprLValue extends ANodeExpr {\n\ttoAssignJs(right: ANodeExpr) { return ''; }\n}\n\nexport class ANodeExprLValueSetGet extends ANodeExpr {\n\tconstructor(private setTemplate: string, private getTemplate: string, private replacements: ANodeExpr[]) {\n\t\tsuper();\n\t}\n\n\tprivate _toJs(template:string, right?: ANodeExpr) {\n\t\treturn template.replace(/(\\$\\d|#)/g, (match) => {\n\t\t\tif (match == '#') {\n\t\t\t\treturn right!.toJs();\n\t\t\t} else if (match.startsWith('$')) {\n\t\t\t\treturn this.replacements[parseInt(match.substr(1))].toJs()!;\n\t\t\t} else {\n\t\t\t    return match\n            }\n\t\t})\n\t}\n\n\ttoAssignJs(right: ANodeExpr) {\n\t\treturn this._toJs(this.setTemplate, right);\n\t}\n\n\ttoJs() {\n\t\treturn this._toJs(this.getTemplate);\n\t}\n}\n\nexport class ANodeExprLValueVar extends ANodeExprLValue {\n\tconstructor(public name: string) { super(); }\n\ttoAssignJs(right: ANodeExpr) { return `${this.name} = ${right.toJs()}`; }\n\ttoJs() { return this.name; }\n}\n\nexport class ANodeExprI32 extends ANodeExpr {\n\tconstructor(public value: number) { super(); }\n\ttoJs() { return String(this.value); }\n}\n\nexport class ANodeExprFloat extends ANodeExpr {\n\tconstructor(public value: number) { super(); }\n\ttoJs() {\n        const rfloat = MathFloat.reinterpretFloatAsInt(this.value);\n        if (rfloat & 0x80000000) {\n\t\t\treturn `-${MathFloat.reinterpretIntAsFloat(rfloat & 0x7FFFFFFF)}`;\n\t\t} else {\n\t\t\treturn String(this.value);\n\t\t}\n\t}\n}\n\nexport class ANodeExprU32 extends ANodeExpr {\n\tconstructor(public value: number) { super(); }\n\ttoJs() {\n\t\treturn addressToHex(this.value);\n\t}\n}\n\nexport class ANodeExprBinop extends ANodeExpr {\n\tconstructor(public left: ANodeExpr, public op: string, public right: ANodeExpr) {\n\t\tsuper();\n\t\tif (!this.left || !this.left.toJs) debugger;\n\t\tif (!this.right || !this.right.toJs) debugger;\n\t}\n\ttoJs() { return `(${this.left.toJs()} ${this.op} ${this.right.toJs()})`; }\n}\n\nexport class ANodeExprUnop extends ANodeExpr {\n\tconstructor(public op: string, public right: ANodeExpr) { super(); }\n\ttoJs() { return `(${this.op}(${this.right.toJs()}))`; }\n}\n\nexport class ANodeExprAssign extends ANodeExpr {\n\tconstructor(public left: ANodeExprLValue, public right: ANodeExpr) {\n\t\tsuper();\n\t\tif (!this.left || !this.left.toAssignJs) debugger;\n\t\tif (!this.right) debugger;\n\t}\n\ttoJs() { return this.left.toAssignJs(this.right); }\n}\n\nexport class ANodeExprArray extends ANodeExpr {\n\tconstructor(public _items: ANodeExpr[]) { super(); }\n\ttoJs() { return `[${this._items.map((item) => item.toJs()).join(', ')}]`; }\n}\n\nexport class ANodeExprCall extends ANodeExpr {\n\tconstructor(public name: string, public _arguments: ANodeExpr[]) {\n\t\tsuper();\n\t\tif (!_arguments) debugger;\n\t\tthis._arguments.forEach(argument => {\n\t\t\tif (!argument || !(argument instanceof ANodeExpr)) debugger;\n\t\t});\n\t}\n\ttoJs() { return `${this.name}(${this._arguments.map((argument) => argument.toJs()).join(', ')})`; }\n}\n\nexport class ANodeStmIf extends ANodeStm {\n\tconstructor(public cond: ANodeExpr, public codeTrue: ANodeStm, public codeFalse?: ANodeStm) { super(); }\n\ttoJs() {\n        let result = '';\n        result += `if (${this.cond.toJs()})`;\n\t\tresult += ` { ${this.codeTrue.toJs()} }`;\n\t\tif (this.codeFalse) result += ` else { ${this.codeFalse.toJs()} }`;\n\t\treturn result;\n\t}\n}\n\nexport class AstBuilder {\n\tassign(ref: ANodeExprLValue, value: ANodeExpr) { return new ANodeExprAssign(ref, value); }\n\t_if(cond: ANodeExpr, codeTrue: ANodeStm, codeFalse?: ANodeStm) { return new ANodeStmIf(cond, codeTrue, codeFalse); }\n\tbinop(left: ANodeExpr, op: string, right: ANodeExpr) { return new ANodeExprBinop(left, op, right); }\n\tunop(op: string, right: ANodeExpr) { return new ANodeExprUnop(op, right); }\n\tbinop_i(left: ANodeExpr, op: string, right: number) { return this.binop(left, op, this.imm32(right)); }\n\timm32(value: number) { return new ANodeExprI32(value); }\n\timm_f(value: number) { return new ANodeExprFloat(value); }\n\tu_imm32(value: number) { return new ANodeExprU32(value); }\n\tstm(expr?: ANodeExpr) { return expr ? (new ANodeStmExpr(expr)) : new ANodeStm(); }\n\tstms(stms: ANodeStm[]) { return new ANodeStmList(stms); }\n\tfunc(address:number, prefix:ANodeStm, sufix:ANodeStm, stms: ANodeStm[]) { return new ANodeFunction(address, prefix, sufix, stms); }\n\tarray(exprList: ANodeExpr[]) { return new ANodeExprArray(exprList); }\n\tarrayNumbers(values: number[]) { return this.array(values.map(value => this.imm_f(value))); }\n\tcall(name: string, exprList: ANodeExpr[]) { return new ANodeExprCall(name, exprList); }\n\tlabel(address:number) { return new ANodeStmLabel(address); }\n\t//jump(label: ANodeStmLabel) { return new ANodeStmJump(label); }\n\t//djump(node: ANodeExpr) { return new ANodeStmDynamicJump(node); }\n\tsjump(cond:ANodeExpr, value: number, branchCode?:ANodeStm) { return new ANodeStmStaticJump(cond, value, branchCode); }\n\t_return() { return new ANodeStmReturn(); }\n\traw_stm(content: string) { return new ANodeStmRaw(content); }\n\traw(content: string) { return new ANodeExprLValueVar(content); }\n\tallocVar(name: string, initialValue: ANodeExpr) { return new ANodeAllocVarStm(name, initialValue); }\n}\n\nexport class MipsAstBuilder extends AstBuilder {\n\tdebugger(comment: string = '-'): ANodeStm {\n\t\treturn new ANodeStmRaw(\"debugger; // \" + comment + \"\\n\");\n\t}\n\n\tgpr(index: number): ANodeExprLValueVar {\n\t\tif (index === 0) return new ANodeExprLValueVar('0');\n\t\tif (CpuState.GPR_require_castToInt()) {\n\t\t\treturn new ANodeExprLValueVar(CpuState.GPR_access('state', index));\n\t\t} else {\n\t\t\t// Fast access\n\t\t\treturn new ANodeExprLValueVar(CpuState.GPR_access(null, index));\n\t\t}\n\t}\n\n\tgpr_f(index: number): ANodeExprLValueVar {\n\t\tif (index === 0) return new ANodeExprLValueVar('0');\n\t\treturn new ANodeExprLValueVar(`gpr_f[${index}]`);\n\t}\n\n\ttempr(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.temp[${index}]`); }\n\tvector_vs(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.vector_vs[${index}]`); }\n\tvector_vt(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.vector_vt[${index}]`); }\n\tvfpr(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.vfpr[${index}]`); }\n\tvfprc(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.vfprc[${index}]`); }\n\n\tvfpr_i(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.vfpr_i[${index}]`); }\n\tfpr(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.fpr[${index}]`); }\n\tfpr_i(index: number): ANodeExprLValueVar { return new ANodeExprLValueVar(`state.fpr_i[${index}]`); }\n\tfcr31_cc() { return new ANodeExprLValueVar('state.fcr31_cc'); }\n\tlo() { return new ANodeExprLValueVar('state.LO'); }\n\thi() { return new ANodeExprLValueVar('state.HI'); }\n\tic() { return new ANodeExprLValueVar('state.IC'); }\n\tpc() { return new ANodeExprLValueVar('state.PC'); }\n\tVCC(index: number) {\n\t\treturn new ANodeExprLValueSetGet('state.setVfrCc($0, #)', 'state.getVfrCc($0)', [this.imm32(index)]);\n\t}\n\tra() { return new ANodeExprLValueVar(CpuState.GPR_access('state', 31)); }\n\tbranchflag() { return new ANodeExprLValueVar('BRANCHFLAG'); }\n\tbranchpc() { return new ANodeExprLValueVar('BRANCHPC'); }\n\n\tassignGpr(index: number, expr: ANodeStm) {\n\t\tif (index == 0) return this.stm();\n\t\t//return this.stm(this.assign(this.gpr(index), expr));\n\t\tif (CpuState.GPR_require_castToInt()) {\n\t\t\treturn this.stm(this.assign(this.gpr(index), this.binop(expr, '|', this.imm32(0))));\n\t\t} else {\n\t\t\treturn this.stm(this.assign(this.gpr(index), expr));\n\t\t}\n\t}\n\n\tassignIC(expr: ANodeStm) { return this.stm(this.assign(this.ic(), expr)); }\n\tassignFpr(index: number, expr: ANodeStm) { return this.stm(this.assign(this.fpr(index), expr)); }\n\tassignFpr_I(index: number, expr: ANodeStm) { return this.stm(this.assign(this.fpr_i(index), expr)); }\n}\n", "\uFEFFexport class IndentStringGenerator {\n\tindentation: number = 0;\n\toutput: string = '';\n\tnewLine: boolean = true;\n\n\tindent(callback: () => void) {\n\t\tthis.indentation++;\n\t\ttry {\n\t\t\tcallback();\n\t\t} finally {\n\t\t\tthis.indentation--;\n\t\t}\n\t}\n\n\twrite(text: string) {\n        const chunks = text.split('\\n');\n        for (let n = 0; n < chunks.length; n++) {\n\t\t\tif (n != 0) this.writeBreakLine();\n\t\t\tthis.writeInline(chunks[n]);\n\t\t}\n\t}\n\n\tprivate writeInline(text: string) {\n\t\tif (text == null || text.length == 0) return;\n\n\t\tif (this.newLine) {\n\t\t\tfor (let n = 0; n < this.indentation; n++) this.output += '\\t';\n\t\t\tthis.newLine = false;\n\t\t}\n\t\tthis.output += text;\n\t}\n\n\tprivate writeBreakLine() {\n\t\tthis.output += '\\n';\n\t\tthis.newLine = true;\n\t}\n}\n", "\uFEFFimport \"../../emu/global\"\n\nimport {addressToHex, NumberDictionary, sprintf, StringDictionary} from \"../../global/utils\";\nimport {IndentStringGenerator} from \"../../util/IndentStringGenerator\";\n\nexport interface ValueMask {\n\tvalue: number;\n\tmask: number;\n}\n\nconst ADDR_TYPE_NONE = 0;\nconst ADDR_TYPE_REG = 1;\nconst ADDR_TYPE_16 = 2;\nconst ADDR_TYPE_26 = 3;\nconst INSTR_TYPE_PSP = (1 << 0);\nconst INSTR_TYPE_SYSCALL = (1 << 1);\nconst INSTR_TYPE_B = (1 << 2);\nconst INSTR_TYPE_LIKELY = (1 << 3);\nconst INSTR_TYPE_JAL = (1 << 4);\nconst INSTR_TYPE_JUMP = (1 << 5);\nconst INSTR_TYPE_BREAK = (1 << 6);\n\nfunction VM(format: string): ValueMask {\n    const counts: { [k: string]: number } = {\n        \"cstw\": 1, \"cstz\": 1, \"csty\": 1, \"cstx\": 1,\n        \"absw\": 1, \"absz\": 1, \"absy\": 1, \"absx\": 1,\n        \"mskw\": 1, \"mskz\": 1, \"msky\": 1, \"mskx\": 1,\n        \"negw\": 1, \"negz\": 1, \"negy\": 1, \"negx\": 1,\n        \"one\": 1, \"two\": 1, \"vt1\": 1,\n        \"vt2\": 2,\n        \"satw\": 2, \"satz\": 2, \"saty\": 2, \"satx\": 2,\n        \"swzw\": 2, \"swzz\": 2, \"swzy\": 2, \"swzx\": 2,\n        \"imm3\": 3,\n        \"imm4\": 4,\n        \"fcond\": 4,\n        \"c0dr\": 5, \"c0cr\": 5, \"c1dr\": 5, \"c1cr\": 5, \"imm5\": 5, \"vt5\": 5,\n        \"rs\": 5, \"rd\": 5, \"rt\": 5, \"sa\": 5, \"lsb\": 5, \"msb\": 5, \"fs\": 5, \"fd\": 5, \"ft\": 5,\n        \"vs\": 7, \"vt\": 7, \"vd\": 7, \"imm7\": 7,\n        \"imm8\": 8,\n        \"imm14\": 14,\n        \"imm16\": 16,\n        \"imm20\": 20,\n        \"imm26\": 26\n    };\n\n    let value: number = 0;\n    let mask: number = 0;\n\n    format.split(':').forEach((item) => {\n\t\t// normal chunk\n\t\tif (/^[01\\-]+$/.test(item)) {\n\t\t\tfor (let n = 0; n < item.length; n++) {\n\t\t\t\tvalue <<= 1;\n\t\t\t\tmask <<= 1;\n\t\t\t\tif (item[n] == '0') { value |= 0; mask |= 1; }\n\t\t\t\tif (item[n] == '1') { value |= 1; mask |= 1; }\n\t\t\t\tif (item[n] == '-') { value |= 0; mask |= 0; }\n\t\t\t}\n\t\t}\n\t\t// special chunk\n\t\telse {\n\t\t\tconst displacement = counts[item];\n\t\t\tif (displacement === undefined) throw (\"Invalid item '\" + item + \"'\");\n\t\t\tvalue <<= displacement;\n\t\t\tmask <<= displacement;\n\t\t}\n\t});\n\n\treturn { value: value, mask: mask };\n}\n\nexport class InstructionType {\n\tconstructor(public name: string, public vm: ValueMask, public format: string, public addressType: number, public instructionType: number) { }\n\tmatch(i32: number) { return (i32 & this.vm.mask) == (this.vm.value & this.vm.mask); }\n\tprivate isInstructionType(mask: number) { return (this.instructionType & mask) != 0; }\n\tget isSyscall() { return this.isInstructionType(INSTR_TYPE_SYSCALL); }\n\tget isBreak() { return this.isInstructionType(INSTR_TYPE_BREAK); }\n\tget isBranch() { return this.isInstructionType(INSTR_TYPE_B); }\n\tget isCall() { return this.isInstructionType(INSTR_TYPE_JAL); }\n\tget isJump() { return this.isInstructionType(INSTR_TYPE_JAL) || this.isInstructionType(INSTR_TYPE_JUMP); }\n\tget isJumpNoLink() { return this.isInstructionType(INSTR_TYPE_JUMP); }\n\tget isJal() { return this.isInstructionType(INSTR_TYPE_JAL); }\n\tget isJumpOrBranch() { return this.isBranch || this.isJump; }\n\tget isLikely() { return this.isInstructionType(INSTR_TYPE_LIKELY); }\n\tget isRegister() { return this.addressType == ADDR_TYPE_REG; }\n\tget isFixedAddressJump() { return this.isJumpOrBranch && !this.isRegister; }\n\tget hasDelayedBranch() { return this.isJumpOrBranch; }\n\ttoString() { return `InstructionType('${this.name}', ${addressToHex(this.vm.value)}, ${addressToHex(this.vm.mask)})`; }\n}\n\nexport class Instructions {\n\tprivate static _instance: Instructions;\n\n\tstatic get instance() {\n\t\tif (!Instructions._instance) Instructions._instance = new Instructions();\n\t\treturn Instructions._instance;\n\t}\n\n\tinstructionTypeListByName: { [name: string]: InstructionType; } = {};\n\tinstructionTypeList: InstructionType[] = [];\n\n\tget instructions() { return this.instructionTypeList.slice(0); }\n\n\tconstructor() {\n\t\tconst ID = (name: string, vm: ValueMask, format: string, addressType: number, instructionType: number) => { this.add(name, vm, format, addressType, instructionType); };\n\n\t\t// Arithmetic operations.\n\t\tID(\"add\", VM(\"000000:rs:rt:rd:00000:100000\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"addu\", VM(\"000000:rs:rt:rd:00000:100001\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"addi\", VM(\"001000:rs:rt:imm16\"), \"%t, %s, %i\", ADDR_TYPE_NONE, 0);\n\t\tID(\"addiu\", VM(\"001001:rs:rt:imm16\"), \"%t, %s, %i\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sub\", VM(\"000000:rs:rt:rd:00000:100010\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"subu\", VM(\"000000:rs:rt:rd:00000:100011\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\n\t\t// Logical Operations.\n\t\tID(\"and\", VM(\"000000:rs:rt:rd:00000:100100\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"andi\", VM(\"001100:rs:rt:imm16\"), \"%t, %s, %I\", ADDR_TYPE_NONE, 0);\n\t\tID(\"nor\", VM(\"000000:rs:rt:rd:00000:100111\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"or\", VM(\"000000:rs:rt:rd:00000:100101\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"ori\", VM(\"001101:rs:rt:imm16\"), \"%t, %s, %I\", ADDR_TYPE_NONE, 0);\n\t\tID(\"xor\", VM(\"000000:rs:rt:rd:00000:100110\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"xori\", VM(\"001110:rs:rt:imm16\"), \"%t, %s, %I\", ADDR_TYPE_NONE, 0);\n\n\t\t// Shift Left/Right Logical/Arithmethic (Variable).\n\t\tID(\"sll\", VM(\"000000:00000:rt:rd:sa:000000\"), \"%d, %t, %a\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sllv\", VM(\"000000:rs:rt:rd:00000:000100\"), \"%d, %t, %s\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sra\", VM(\"000000:00000:rt:rd:sa:000011\"), \"%d, %t, %a\", ADDR_TYPE_NONE, 0);\n\t\tID(\"srav\", VM(\"000000:rs:rt:rd:00000:000111\"), \"%d, %t, %s\", ADDR_TYPE_NONE, 0);\n\t\tID(\"srl\", VM(\"000000:00000:rt:rd:sa:000010\"), \"%d, %t, %a\", ADDR_TYPE_NONE, 0);\n\t\tID(\"srlv\", VM(\"000000:rs:rt:rd:00000:000110\"), \"%d, %t, %s\", ADDR_TYPE_NONE, 0);\n\t\tID(\"rotr\", VM(\"000000:00001:rt:rd:sa:000010\"), \"%d, %t, %a\", ADDR_TYPE_NONE, 0);\n\t\tID(\"rotrv\", VM(\"000000:rs:rt:rd:00001:000110\"), \"%d, %t, %s\", ADDR_TYPE_NONE, 0);\n\n\t\t// Set Less Than (Immediate) (Unsigned).\n\t\tID(\"slt\", VM(\"000000:rs:rt:rd:00000:101010\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"slti\", VM(\"001010:rs:rt:imm16\"), \"%t, %s, %i\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sltu\", VM(\"000000:rs:rt:rd:00000:101011\"), \"%d, %s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sltiu\", VM(\"001011:rs:rt:imm16\"), \"%t, %s, %i\", ADDR_TYPE_NONE, 0);\n\n\t\t// Load Upper Immediate.\n\t\tID(\"lui\", VM(\"001111:00000:rt:imm16\"), \"%t, %I\", ADDR_TYPE_NONE, 0);\n\n\t\t// Sign Extend Byte/Half word.\n\t\tID(\"seb\", VM(\"011111:00000:rt:rd:10000:100000\"), \"%d, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"seh\", VM(\"011111:00000:rt:rd:11000:100000\"), \"%d, %t\", ADDR_TYPE_NONE, 0);\n\n\t\t// BIT REVerse.\n\t\tID(\"bitrev\", VM(\"011111:00000:rt:rd:10100:100000\"), \"%d, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// MAXimum/MINimum.\n\t\tID(\"max\", VM(\"000000:rs:rt:rd:00000:101100\"), \"%d, %s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"min\", VM(\"000000:rs:rt:rd:00000:101101\"), \"%d, %s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// DIVide (Unsigned).\n\t\tID(\"div\", VM(\"000000:rs:rt:00000:00000:011010\"), \"%s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"divu\", VM(\"000000:rs:rt:00000:00000:011011\"), \"%s, %t\", ADDR_TYPE_NONE, 0);\n\n\t\t// MULTiply (Unsigned).\n\t\tID(\"mult\", VM(\"000000:rs:rt:00000:00000:011000\"), \"%s, %t\", ADDR_TYPE_NONE, 0);\n\t\tID(\"multu\", VM(\"000000:rs:rt:00000:00000:011001\"), \"%s, %t\", ADDR_TYPE_NONE, 0);\n\n\t\t// Multiply ADD/SUBstract (Unsigned).\n\t\tID(\"madd\", VM(\"000000:rs:rt:00000:00000:011100\"), \"%s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"maddu\", VM(\"000000:rs:rt:00000:00000:011101\"), \"%s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"msub\", VM(\"000000:rs:rt:00000:00000:101110\"), \"%s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"msubu\", VM(\"000000:rs:rt:00000:00000:101111\"), \"%s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Move To/From HI/LO.\n\t\tID(\"mfhi\", VM(\"000000:00000:00000:rd:00000:010000\"), \"%d\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mflo\", VM(\"000000:00000:00000:rd:00000:010010\"), \"%d\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mthi\", VM(\"000000:rs:00000:00000:00000:010001\"), \"%s\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mtlo\", VM(\"000000:rs:00000:00000:00000:010011\"), \"%s\", ADDR_TYPE_NONE, 0);\n\n\t\t// Move if Zero/Non zero.\n\t\tID(\"movz\", VM(\"000000:rs:rt:rd:00000:001010\"), \"%d, %s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"movn\", VM(\"000000:rs:rt:rd:00000:001011\"), \"%d, %s, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// EXTract/INSert.\n\t\tID(\"ext\", VM(\"011111:rs:rt:msb:lsb:000000\"), \"%t, %s, %a, %ne\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"ins\", VM(\"011111:rs:rt:msb:lsb:000100\"), \"%t, %s, %a, %ni\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Count Leading Ones/Zeros in word.\n\t\tID(\"clz\", VM(\"000000:rs:00000:rd:00000:010110\"), \"%d, %s\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"clo\", VM(\"000000:rs:00000:rd:00000:010111\"), \"%d, %s\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Word Swap Bytes Within Halfwords/Words.\n\t\tID(\"wsbh\", VM(\"011111:00000:rt:rd:00010:100000\"), \"%d, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"wsbw\", VM(\"011111:00000:rt:rd:00011:100000\"), \"%d, %t\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Branch Equal (Likely).\n\t\tID(\"beq\", VM(\"000100:rs:rt:imm16\"), \"%s, %t, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"beql\", VM(\"010100:rs:rt:imm16\"), \"%s, %t, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\n\t\t// Branch on Greater Equal Zero (And Link) (Likely).\n\t\tID(\"bgez\", VM(\"000001:rs:00001:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bgezl\", VM(\"000001:rs:00011:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\t\tID(\"bgezal\", VM(\"000001:rs:10001:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_JAL);\n\t\tID(\"bgezall\", VM(\"000001:rs:10011:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_JAL | INSTR_TYPE_LIKELY);\n\n\t\t// Branch on Less Than Zero (And Link) (Likely).\n\t\tID(\"bltz\", VM(\"000001:rs:00000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bltzl\", VM(\"000001:rs:00010:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\t\tID(\"bltzal\", VM(\"000001:rs:10000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_JAL);\n\t\tID(\"bltzall\", VM(\"000001:rs:10010:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_JAL | INSTR_TYPE_LIKELY);\n\n\t\t// Branch on Less Or Equals than Zero (Likely).\n\t\tID(\"blez\", VM(\"000110:rs:00000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"blezl\", VM(\"010110:rs:00000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\n\t\t// Branch on Great Than Zero (Likely).\n\t\tID(\"bgtz\", VM(\"000111:rs:00000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bgtzl\", VM(\"010111:rs:00000:imm16\"), \"%s, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\n\t\t// Branch on Not Equals (Likely).\n\t\tID(\"bne\", VM(\"000101:rs:rt:imm16\"), \"%s, %t, %O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bnel\", VM(\"010101:rs:rt:imm16\"), \"%s, %t, %O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\n\t\t// Jump (And Link) (Register).\n\t\tID(\"j\", VM(\"000010:imm26\"), \"%j\", ADDR_TYPE_26, INSTR_TYPE_JUMP);\n\t\tID(\"jr\", VM(\"000000:rs:00000:00000:00000:001000\"), \"%J\", ADDR_TYPE_REG, INSTR_TYPE_JUMP);\n\t\tID(\"jalr\", VM(\"000000:rs:00000:rd:00000:001001\"), \"%J, %d\", ADDR_TYPE_REG, INSTR_TYPE_JAL);\n\t\tID(\"jal\", VM(\"000011:imm26\"), \"%j\", ADDR_TYPE_26, INSTR_TYPE_JAL);\n\n\t\t// Branch on C1 False/True (Likely).\n\t\tID(\"bc1f\", VM(\"010001:01000:00000:imm16\"), \"%O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bc1t\", VM(\"010001:01000:00001:imm16\"), \"%O\", ADDR_TYPE_16, INSTR_TYPE_B);\n\t\tID(\"bc1fl\", VM(\"010001:01000:00010:imm16\"), \"%O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\t\tID(\"bc1tl\", VM(\"010001:01000:00011:imm16\"), \"%O\", ADDR_TYPE_16, INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\n\t\tID(\"lb\", VM(\"100000:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lh\", VM(\"100001:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lw\", VM(\"100011:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lwl\", VM(\"100010:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lwr\", VM(\"100110:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lbu\", VM(\"100100:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"lhu\", VM(\"100101:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\n\t\t// Store Byte/Half word/Word (Left/Right).\n\t\tID(\"sb\", VM(\"101000:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sh\", VM(\"101001:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sw\", VM(\"101011:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"swl\", VM(\"101010:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"swr\", VM(\"101110:rs:rt:imm16\"), \"%t, %i(%s)\", ADDR_TYPE_NONE, 0);\n\n\t\t// Load Linked word.\n\t\t// Store Conditional word.\n\t\tID(\"ll\", VM(\"110000:rs:rt:imm16\"), \"%t, %O\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sc\", VM(\"111000:rs:rt:imm16\"), \"%t, %O\", ADDR_TYPE_NONE, 0);\n\n\t\t// Load Word to Cop1 floating point.\n\t\t// Store Word from Cop1 floating point.\n\t\tID(\"lwc1\", VM(\"110001:rs:ft:imm16\"), \"%T, %i(%s)\", ADDR_TYPE_NONE, 0);\n\t\tID(\"swc1\", VM(\"111001:rs:ft:imm16\"), \"%T, %i(%s)\", ADDR_TYPE_NONE, 0);\n\n\t\t// Binary Floating Point Unit Operations\n\t\tID(\"add.s\", VM(\"010001:10000:ft:fs:fd:000000\"), \"%D, %S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"sub.s\", VM(\"010001:10000:ft:fs:fd:000001\"), \"%D, %S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mul.s\", VM(\"010001:10000:ft:fs:fd:000010\"), \"%D, %S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"div.s\", VM(\"010001:10000:ft:fs:fd:000011\"), \"%D, %S, %T\", ADDR_TYPE_NONE, 0);\n\n\t\t// Unary Floating Point Unit Operations\n\t\tID(\"sqrt.s\", VM(\"010001:10000:00000:fs:fd:000100\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"abs.s\", VM(\"010001:10000:00000:fs:fd:000101\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mov.s\", VM(\"010001:10000:00000:fs:fd:000110\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"neg.s\", VM(\"010001:10000:00000:fs:fd:000111\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"round.w.s\", VM(\"010001:10000:00000:fs:fd:001100\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"trunc.w.s\", VM(\"010001:10000:00000:fs:fd:001101\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"ceil.w.s\", VM(\"010001:10000:00000:fs:fd:001110\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"floor.w.s\", VM(\"010001:10000:00000:fs:fd:001111\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\n\t\t// Convert\n\t\tID(\"cvt.s.w\", VM(\"010001:10100:00000:fs:fd:100000\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"cvt.w.s\", VM(\"010001:10000:00000:fs:fd:100100\"), \"%D, %S\", ADDR_TYPE_NONE, 0);\n\n\t\t// Move float point registers\n\t\tID(\"mfc1\", VM(\"010001:00000:rt:c1dr:00000:000000\"), \"%t, %S\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mtc1\", VM(\"010001:00100:rt:c1dr:00000:000000\"), \"%t, %S\", ADDR_TYPE_NONE, 0);\n\t\t// CFC1 -- move Control word from/to floating point (C1)\n\t\tID(\"cfc1\", VM(\"010001:00010:rt:c1cr:00000:000000\"), \"%t, %p\", ADDR_TYPE_NONE, 0);\n\t\tID(\"ctc1\", VM(\"010001:00110:rt:c1cr:00000:000000\"), \"%t, %p\", ADDR_TYPE_NONE, 0);\n\n\t\t// Compare <condition> Single.\n\t\tID(\"c.f.s\", VM(\"010001:10000:ft:fs:00000:11:0000\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.un.s\", VM(\"010001:10000:ft:fs:00000:11:0001\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.eq.s\", VM(\"010001:10000:ft:fs:00000:11:0010\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ueq.s\", VM(\"010001:10000:ft:fs:00000:11:0011\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.olt.s\", VM(\"010001:10000:ft:fs:00000:11:0100\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ult.s\", VM(\"010001:10000:ft:fs:00000:11:0101\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ole.s\", VM(\"010001:10000:ft:fs:00000:11:0110\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ule.s\", VM(\"010001:10000:ft:fs:00000:11:0111\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.sf.s\", VM(\"010001:10000:ft:fs:00000:11:1000\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ngle.s\", VM(\"010001:10000:ft:fs:00000:11:1001\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.seq.s\", VM(\"010001:10000:ft:fs:00000:11:1010\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ngl.s\", VM(\"010001:10000:ft:fs:00000:11:1011\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.lt.s\", VM(\"010001:10000:ft:fs:00000:11:1100\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.nge.s\", VM(\"010001:10000:ft:fs:00000:11:1101\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.le.s\", VM(\"010001:10000:ft:fs:00000:11:1110\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\t\tID(\"c.ngt.s\", VM(\"010001:10000:ft:fs:00000:11:1111\"), \"%S, %T\", ADDR_TYPE_NONE, 0);\n\n\t\t// Syscall\n\t\tID(\"syscall\", VM(\"000000:imm20:001100\"), \"%C\", ADDR_TYPE_NONE, INSTR_TYPE_SYSCALL);\n\n\t\tID(\"cache\", VM(\"101111:rs:-----:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\n\t\t//ID(\"icache_index_invalidate\", VM(\"101111:rs:00100:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"icache_index_unlock\", VM(\"101111:rs:00110:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"icache_hit_invalidate\", VM(\"101111:rs:01000:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"icache_fill\", VM(\"101111:rs:01010:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"icache_fill_with_lock\", VM(\"101111:rs:01011:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//\n\t\t//ID(\"dcache_index_writeback_invalidate\", VM(\"101111:rs:10100:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_index_unlock\", VM(\"101111:rs:10110:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_create_dirty_exclusive\", VM(\"101111:rs:11000:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_hit_invalidate\", VM(\"101111:rs:11001:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_hit_writeback\", VM(\"101111:rs:11010:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_hit_writeback_invalidate\", VM(\"101111:rs:11011:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_create_dirty_exclusive_with_lock\", VM(\"101111:rs:11100:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_fill\", VM(\"101111:rs:11110:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t//ID(\"dcache_fill_with_lock\", VM(\"101111:rs:11111:imm16\"), \"%k, %o\", ADDR_TYPE_NONE, 0);\n\t\t\n\t\tID(\"sync\", VM(\"000000:00000:00000:00000:00000:001111\"), \"\", ADDR_TYPE_NONE, 0);\n\n\t\tID(\"break\", VM(\"000000:imm20:001101\"), \"%c\", ADDR_TYPE_NONE, INSTR_TYPE_BREAK);\n\t\tID(\"dbreak\", VM(\"011100:00000:00000:00000:00000:111111\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP | INSTR_TYPE_BREAK);\n\t\tID(\"halt\", VM(\"011100:00000:00000:00000:00000:000000\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// (D?/Exception) RETurn\n\t\tID(\"dret\", VM(\"011100:00000:00000:00000:00000:111110\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"eret\", VM(\"010000:10000:00000:00000:00000:011000\"), \"\", ADDR_TYPE_NONE, 0);\n\n\t\t// Move (From/To) IC\n\t\tID(\"mfic\", VM(\"011100:rt:00000:00000:00000:100100\"), \"%t, %p\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"mtic\", VM(\"011100:rt:00000:00000:00000:100110\"), \"%t, %p\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Move (From/To) DR\n\t\tID(\"mfdr\", VM(\"011100:00000:----------:00000:111101\"), \"%t, %r\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"mtdr\", VM(\"011100:00100:----------:00000:111101\"), \"%t, %r\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// C? (From/To) Cop0\n\t\tID(\"cfc0\", VM(\"010000:00010:----------:00000:000000\"), \"%t, %p\", ADDR_TYPE_NONE, INSTR_TYPE_PSP); // CFC0(010000:00010:rt:c0cr:00000:000000)\n\t\tID(\"ctc0\", VM(\"010000:00110:----------:00000:000000\"), \"%t, %p\", ADDR_TYPE_NONE, INSTR_TYPE_PSP); // CTC0(010000:00110:rt:c0cr:00000:000000)\n\n\t\t// Move (From/To) Cop0\n\t\tID(\"mfc0\", VM(\"010000:00000:----------:00000:000000\"), \"%t, %0\", ADDR_TYPE_NONE, 0);              // MFC0(010000:00000:rt:c0dr:00000:000000)\n\t\tID(\"mtc0\", VM(\"010000:00100:----------:00000:000000\"), \"%t, %0\", ADDR_TYPE_NONE, 0);              // MTC0(010000:00100:rt:c0dr:00000:000000)\n\n\t\t// Move From/to Vfpu (C?).\n\t\tID(\"mfv\", VM(\"010010:00:011:rt:0:0000000:0:vd\"), \"%t, %zs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"mfvc\", VM(\"010010:00:011:rt:0:0000000:1:vd\"), \"%t, %2d\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"mtv\", VM(\"010010:00:111:rt:0:0000000:0:vd\"), \"%t, %zs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"mtvc\", VM(\"010010:00:111:rt:0:0000000:1:vd\"), \"%t, %2d\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Load/Store Vfpu (Left/Right).\n\t\tID(\"lv.s\", VM(\"110010:rs:vt5:imm14:vt2\"), \"%Xs, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"lv.q\", VM(\"110110:rs:vt5:imm14:0:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"lvl.q\", VM(\"110101:rs:vt5:imm14:0:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"lvr.q\", VM(\"110101:rs:vt5:imm14:1:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"sv.q\", VM(\"111110:rs:vt5:imm14:0:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu DOT product\n\t\t// Vfpu SCaLe/ROTate\n\t\tID(\"vdot\", VM(\"011001:001:vt:two:vs:one:vd\"), \"%zs, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vscl\", VM(\"011001:010:vt:two:vs:one:vd\"), \"%zp, %yp, %xs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsge\", VM(\"011011:110:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\t//ID(\"vslt\",        VM(\"011011:100:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vslt\", VM(\"011011:111:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP); // FIXED 2013-07-14\n\n\t\t// ROTate\n\t\tID(\"vrot\", VM(\"111100:111:01:imm5:two:vs:one:vd\"), \"%zp, %ys, %vr\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu ZERO/ONE\n\t\tID(\"vzero\", VM(\"110100:00:000:0:0110:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vone\", VM(\"110100:00:000:0:0111:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu MOVe/SiGN/Reverse SQuare root/COSine/Arc SINe/LOG2\n\t\tID(\"vmov\", VM(\"110100:00:000:0:0000:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vabs\", VM(\"110100:00:000:0:0001:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vneg\", VM(\"110100:00:000:0:0010:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vocp\", VM(\"110100:00:010:0:0100:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsgn\", VM(\"110100:00:010:0:1010:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrcp\", VM(\"110100:00:000:1:0000:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrsq\", VM(\"110100:00:000:1:0001:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsin\", VM(\"110100:00:000:1:0010:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vcos\", VM(\"110100:00:000:1:0011:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vexp2\", VM(\"110100:00:000:1:0100:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vlog2\", VM(\"110100:00:000:1:0101:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsqrt\", VM(\"110100:00:000:1:0110:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vasin\", VM(\"110100:00:000:1:0111:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vnrcp\", VM(\"110100:00:000:1:1000:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vnsin\", VM(\"110100:00:000:1:1010:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrexp2\", VM(\"110100:00:000:1:1100:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vsat0\", VM(\"110100:00:000:0:0100:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsat1\", VM(\"110100:00:000:0:0101:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu ConSTant\n\t\tID(\"vcst\", VM(\"110100:00:011:imm5:two:0000000:one:vd\"), \"%zp, %vk\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu Matrix MULtiplication\n\t\tID(\"vmmul\", VM(\"111100:000:vt:two:vs:one:vd\"), \"%zm, %tym, %xm\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// -\n\t\tID(\"vhdp\", VM(\"011001:100:vt:two:vs:one:vd\"), \"%zs, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vcrs.t\", VM(\"011001:101:vt:1:vs:0:vd\"), \"%zt, %yt, %xt\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vcrsp.t\", VM(\"111100:101:vt:1:vs:0:vd\"), \"%zt, %yt, %xt\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu Integer to(2) Color\n\t\tID(\"vi2c\", VM(\"110100:00:001:11:101:two:vs:one:vd\"), \"%zs, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vi2uc\", VM(\"110100:00:001:11:100:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// -\n\t\tID(\"vtfm2\", VM(\"111100:001:vt:0:vs:1:vd\"), \"%zp, %ym, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vtfm3\", VM(\"111100:010:vt:1:vs:0:vd\"), \"%zt, %yn, %xt\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vtfm4\", VM(\"111100:011:vt:1:vs:1:vd\"), \"%zq, %yo, %xq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vhtfm2\", VM(\"111100:001:vt:0:vs:0:vd\"), \"%zp, %ym, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vhtfm3\", VM(\"111100:010:vt:0:vs:1:vd\"), \"%zt, %yn, %xt\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vhtfm4\", VM(\"111100:011:vt:1:vs:0:vd\"), \"%zq, %yo, %xq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vsrt3\", VM(\"110100:00:010:01000:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vfad\", VM(\"110100:00:010:00110:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu MINimum/MAXium/ADD/SUB/DIV/MUL\n\t\tID(\"vmin\", VM(\"011011:010:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmax\", VM(\"011011:011:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vadd\", VM(\"011000:000:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsub\", VM(\"011000:001:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vdiv\", VM(\"011000:111:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmul\", VM(\"011001:000:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Vfpu (Matrix) IDenTity\n\t\tID(\"vidt\", VM(\"110100:00:000:0:0011:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmidt\", VM(\"111100:111:00:00011:two:0000000:one:vd\"), \"%zm\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"viim\", VM(\"110111:11:0:vd:imm16\"), \"%xs, %vi\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vmmov\", VM(\"111100:111:00:00000:two:vs:one:vd\"), \"%zm, %ym\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmzero\", VM(\"111100:111:00:00110:two:0000000:one:vd\"), \"%zm\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmone\", VM(\"111100:111:00:00111:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vnop\", VM(\"111111:1111111111:00000:00000000000\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsync\", VM(\"111111:1111111111:00000:01100100000\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vflush\", VM(\"111111:1111111111:00000:10000001101\"), \"\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vpfxd\", VM(\"110111:10:------------:mskw:mskz:msky:mskx:satw:satz:saty:satx\"), \"[%vp4, %vp5, %vp6, %vp7]\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vpfxs\", VM(\"110111:00:----:negw:negz:negy:negx:cstw:cstz:csty:cstx:absw:absz:absy:absx:swzw:swzz:swzy:swzx\"), \"[%vp0, %vp1, %vp2, %vp3]\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vpfxt\", VM(\"110111:01:----:negw:negz:negy:negx:cstw:cstz:csty:cstx:absw:absz:absy:absx:swzw:swzz:swzy:swzx\"), \"[%vp0, %vp1, %vp2, %vp3]\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vdet\", VM(\"011001:110:vt:two:vs:one:vd\"), \"%zs, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vrnds\", VM(\"110100:00:001:00:000:two:vs:one:0000000\"), \"%ys\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrndi\", VM(\"110100:00:001:00:001:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrndf1\", VM(\"110100:00:001:00:010:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vrndf2\", VM(\"110100:00:001:00:011:two:0000000:one:vd\"), \"%zp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vcmp\", VM(\"011011:000:vt:two:vs:one:000:imm4\"), \"%Zn, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vcmovf\", VM(\"110100:10:101:01:imm3:two:vs:one:vd\"), \"%zp, %yp, %v3\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vcmovt\", VM(\"110100:10:101:00:imm3:two:vs:one:vd\"), \"%zp, %yp, %v3\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vavg\", VM(\"110100:00:010:00111:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vf2id\", VM(\"110100:10:011:imm5:two:vs:one:vd\"), \"%zp, %yp, %v5\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vf2in\", VM(\"110100:10:000:imm5:two:vs:one:vd\"), \"%zp, %yp, %v5\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vf2iu\", VM(\"110100:10:010:imm5:two:vs:one:vd\"), \"%zp, %yp, %v5\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vf2iz\", VM(\"110100:10:001:imm5:two:vs:one:vd\"), \"%zp, %yp, %v5\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vi2f\", VM(\"110100:10:100:imm5:two:vs:one:vd\"), \"%zp, %yp, %v5\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vscmp\", VM(\"011011:101:vt:two:vs:one:vd\"), \"%zp, %yp, %xp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmscl\", VM(\"111100:100:vt:two:vs:one:vd\"), \"%zm, %ym, %xs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vt4444.q\", VM(\"110100:00:010:11001:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vt5551.q\", VM(\"110100:00:010:11010:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vt5650.q\", VM(\"110100:00:010:11011:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vmfvc\", VM(\"110100:00:010:10000:1:imm7:0:vd\"), \"%zs, %2s\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vmtvc\", VM(\"110100:00:010:10001:0:vs:1:imm7\"), \"%2d, %ys\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"mfvme\", VM(\"011010--------------------------\"), \"%t, %i\", ADDR_TYPE_NONE, 0);\n\t\tID(\"mtvme\", VM(\"101100--------------------------\"), \"%t, %i\", ADDR_TYPE_NONE, 0);\n\n\t\tID(\"sv.s\", VM(\"111010:rs:vt5:imm14:vt2\"), \"%Xs, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vfim\", VM(\"110111:11:1:vt:imm16\"), \"%xs, %vh\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"svl.q\", VM(\"111101:rs:vt5:imm14:0:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"svr.q\", VM(\"111101:rs:vt5:imm14:1:vt1\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vbfy1\", VM(\"110100:00:010:00010:two:vs:one:vd\"), \"%zp, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vbfy2\", VM(\"110100:00:010:00011:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vf2h\", VM(\"110100:00:001:10:010:two:vs:one:vd\"), \"%zs, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vh2f\", VM(\"110100:00:001:10:011:two:vs:one:vd\"), \"%zq, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vi2s\", VM(\"110100:00:001:11:111:two:vs:one:vd\"), \"%zs, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vi2us\", VM(\"110100:00:001:11:110:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vlgb\", VM(\"110100:00:001:10:111:two:vs:one:vd\"), \"%zs, %ys\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vqmul\", VM(\"111100:101:vt:1:vs:1:vd\"), \"%zq, %yq, %xq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vs2i\", VM(\"110100:00:001:11:011:two:vs:one:vd\"), \"%zq, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Working on it.\n\n\t\t//\"110100:00:001:11:000:1000000010000001\"\n\t\tID(\"vc2i\", VM(\"110100:00:001:11:001:two:vs:one:vd\"), \"%zs, %ys, %xs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vuc2i\", VM(\"110100:00:001:11:000:two:vs:one:vd\"), \"%zq, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\n\t\tID(\"vsbn\", VM(\"011000:010:vt:two:vs:one:vd\"), \"%zs, %ys, %xs\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vsbz\", VM(\"110100:00:001:10110:two:vs:one:vd\"), \"%zs, %ys\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsocp\", VM(\"110100:00:010:00101:two:vs:one:vd\"), \"%zq, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsrt1\", VM(\"110100:00:010:00000:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsrt2\", VM(\"110100:00:010:00001:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vsrt4\", VM(\"110100:00:010:01001:two:vs:one:vd\"), \"%zq, %yq\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\tID(\"vus2i\", VM(\"110100:00:001:11010:two:vs:one:vd\"), \"%zq, %yp\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\tID(\"vwbn\", VM(\"110100:11:imm8:two:vs:one:vd\"), \"%zs, %xs, %I\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\t\t//ID(\"vwb.q\",       VM(\"111110------------------------1-\"), \"%Xq, %Y\", ADDR_TYPE_NONE, INSTR_TYPE_PSP);\n\n\t\t// Branch Vfpu (True/False) (Likely)\n\t\tID(\"bvf\", VM(\"010010:01:000:imm3:00:imm16\"), \"%Zc, %O\", ADDR_TYPE_16, INSTR_TYPE_PSP | INSTR_TYPE_B);\n\t\tID(\"bvt\", VM(\"010010:01:000:imm3:01:imm16\"), \"%Zc, %O\", ADDR_TYPE_16, INSTR_TYPE_PSP | INSTR_TYPE_B);\n\t\tID(\"bvfl\", VM(\"010010:01:000:imm3:10:imm16\"), \"%Zc, %O\", ADDR_TYPE_16, INSTR_TYPE_PSP | INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\t\tID(\"bvtl\", VM(\"010010:01:000:imm3:11:imm16\"), \"%Zc, %O\", ADDR_TYPE_16, INSTR_TYPE_PSP | INSTR_TYPE_B | INSTR_TYPE_LIKELY);\n\t}\n\n\tadd(name: string, vm: ValueMask, format: string, addressType: number, instructionType: number) {\n        const it: InstructionType = new InstructionType(name, vm, format, addressType, instructionType);\n        this.instructionTypeListByName[name] = it;\n\t\tthis.instructionTypeList.push(it);\n\t}\n\n\tfindByName(name: string) {\n        const instructionType = this.instructionTypeListByName[name];\n        if (!instructionType) throw (\"Cannot find instruction \" + sprintf(\"%s\", name));\n\t\treturn instructionType;\n\t}\n\n\tfindByData(i32: number, pc: number = 0) {\n\t\t//return this.slowFindByData(i32, pc);\n\t\treturn this.fastFindByData(i32, pc);\n\t}\n\n    // @ts-ignore\n\tprivate decoder: (instructionsByName: StringDictionary<InstructionType>, i32: number, pc: number) => InstructionType;\n\n\tprivate fastFindByData(i32: number, pc: number = 0) {\n\t\tif (!this.decoder) {\n            const switchCode = DecodingTable.createSwitch(this.instructionTypeList, iname =>\n                `return instructionsByName[${JSON.stringify(iname)}];`\n            );\n            this.decoder = <any>(new Function('instructionsByName', 'value', 'pc', `\"use strict\";${switchCode}`));\n\t\t}\n\t\treturn this.decoder(this.instructionTypeListByName, i32, pc);\n\t\t/*\n\t\ttry {\n\t\t} catch (e) {\n\t\t\tconsole.log(this.decoder);\n\t\t\tconsole.log(this.instructionTypeListByName);\n\t\t\tconsole.log(this.instructionTypeList);\n\t\t\tthrow (e);\n\t\t}\n\t\t*/\n\t}\n\n\tprivate slowFindByData(i32: number, pc: number = 0) {\n\t\t//printf(\"%08X\", i32);\n\t\tfor (let n = 0; n < this.instructionTypeList.length; n++) {\n            const instructionType = this.instructionTypeList[n];\n            if (instructionType.match(i32)) return instructionType;\n\t\t}\n\t\tthrow (sprintf(\"Cannot find instruction 0x%08X at 0x%08X\", i32, pc));\n\t}\n}\n\nexport const CpuInstructions = Instructions\n\nexport class DecodingTable {\n\tprivate lastId = 0;\n\n\tprivate getCommonMask(instructions: InstructionType[], baseMask: number = 0xFFFFFFFF) {\n\t\treturn instructions.reduce<number>((left, item) => left & item.vm.mask, baseMask);\n\t}\n\n\tstatic createSwitch(instructions: InstructionType[], gen: (name: string) => string) {\n        const writer = new IndentStringGenerator();\n        const decodingTable = new DecodingTable();\n        decodingTable._createSwitch(writer, instructions, gen);\n\t\treturn writer.output;\n\t}\n\n\tprivate _createSwitch(writer: IndentStringGenerator, instructions: InstructionType[], gen: (name: string) => string, baseMask: number = 0xFFFFFFFF, level: number = 0) {\n\t\tif (level >= 10) throw ('ERROR: Recursive detection');\n        const commonMask = this.getCommonMask(instructions, baseMask);\n        const groups: NumberDictionary<InstructionType[]> = {};\n        instructions.forEach((item) => {\n            const commonValue = item.vm.value & commonMask;\n            if (!groups[commonValue]) groups[commonValue] = [];\n\t\t\tgroups[commonValue].push(item);\n\t\t});\n\n\t\twriter.write(`switch ((value & ${sprintf('0x%08X', commonMask)}) >>> 0) {\\n`);\n\t\twriter.indent(() => {\n\t\t\tfor (const groupKey in groups) {\n                const group = groups[groupKey];\n                writer.write(`case ${sprintf('0x%08X', groupKey)}:`);\n\t\t\t\twriter.indent(() => {\n\t\t\t\t\tif (group.length == 1) {\n\t\t\t\t\t    writer.write(` ${gen(group[0].name)}`)\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriter.write('\\n');\n\t\t\t\t\t\tthis._createSwitch(writer, group, gen, ~commonMask, level + 1);\n\t\t\t\t\t\twriter.write('break;\\n');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\twriter.write(`default: throw(sprintf(\"Invalid instruction 0x%08X at 0x%08X (${this.lastId++}) failed mask 0x%08X\", value, pc, ${commonMask}));\\n`);\n\t\t});\n\t\twriter.write('}\\n');\n\t}\n}\n\n", "\uFEFFimport {ArrayUtils, BitUtils, xrange} from \"../../global/math\";\nimport {ANodeExpr, ANodeExprLValue, ANodeExprLValueSetGet, ANodeStm, MipsAstBuilder} from \"./cpu_ast\";\nimport {CpuStateFields, VFPU_CTRL} from \"./cpu_core\";\nimport {Instruction} from \"./cpu_instruction\";\nimport {MemoryFields} from \"../memory\";\n\nconst ast: MipsAstBuilder = new MipsAstBuilder();\n\nfunction assignGpr(index: number, expr: ANodeStm) { return ast.assignGpr(index, expr); }\nfunction assignFpr(index: number, expr: ANodeStm) { return ast.assignFpr(index, expr); }\nfunction assignFpr_I(index: number, expr: ANodeStm) { return ast.assignFpr_I(index, expr); }\nfunction assignIC(expr: ANodeStm) { return ast.assignIC(expr); }\n\nfunction fcr31_cc() { return ast.fcr31_cc(); }\nfunction fpr(index: number) { return ast.fpr(index); }\nfunction fpr_i(index: number) { return ast.fpr_i(index); }\nfunction gpr(index: number) { return ast.gpr(index); }\nfunction gpr_f(index: number) { return ast.gpr_f(index); }\nfunction tempr(index: number) { return ast.tempr(index); }\nfunction vfpr(reg: number) { return ast.vfpr(reg); }\nfunction vfprc(reg: number) { return ast.vfprc(reg); }\nfunction vfpr_i(index: number) { return ast.vfpr_i(index); }\nfunction immBool(value: boolean) { return ast.imm32(value ? 1 : 0); }\nfunction imm32(value: number) { return ast.imm32(value); }\nfunction imm_f(value: number) { return ast.imm_f(value); }\nfunction u_imm32(value: number) { return ast.u_imm32(value); }\nfunction unop(op: string, right: ANodeExpr) { return ast.unop(op, right); }\nfunction binop(left: ANodeExpr, op: string, right: ANodeExpr) { return ast.binop(left, op, right); }\nfunction binop_i(left: ANodeExpr, op: string, right: number) { return ast.binop_i(left, op, right); }\nfunction _if(cond: ANodeExpr, codeTrue: ANodeStm, codeFalse?: ANodeStm) { return ast._if(cond, codeTrue, codeFalse); }\nfunction call(name: string, exprList: ANodeExpr[]) { return ast.call(name, exprList); }\nfunction call_stm(name: string, exprList: ANodeExpr[]) { return stm(ast.call(name, exprList)); }\nfunction stm(expr: ANodeExpr) { return ast.stm(expr); }\nfunction stms(stms: ANodeStm[]) { return ast.stms(stms); }\nfunction pc() { return ast.pc(); }\nfunction lo() { return ast.lo(); }\nfunction hi() { return ast.hi(); }\nfunction ic() { return ast.ic(); }\nfunction branchflag() { return ast.branchflag(); }\nfunction branchpc() { return ast.branchpc(); }\nfunction assign(ref: ANodeExprLValue, value: ANodeExpr) { return ast.assign(ref, value); }\nfunction assign_stm(ref: ANodeExprLValue, value: ANodeExpr) { return stm(ast.assign(ref, value)); }\nfunction i_simm16(i: Instruction) { return imm32(i.imm16); }\nfunction i_uimm16(i: Instruction) { return u_imm32(i.u_imm16); }\nfunction rs_imm16(i: Instruction) { return binop(binop(gpr(i.rs), '+', imm32(i.imm16)), '|', imm32(0)); }\nfunction cast_uint(expr: ANodeExpr) { return binop(expr, '>>>', ast.imm32(0)); }\n\nclass VMatRegClass {\n\tconstructor(private reg: number) {\n\t}\n\n\t_setMatrix(generator: (column: number, row: number) => ANodeExpr) {\n\t\t// @TODO\n        const array = <ANodeExpr[]>[];\n        for (let column = 0; column < 4; column++) {\n\t\t\tfor (let row = 0; row < 4; row++) {\n\t\t\t\tarray.push(generator(column, row));\n\t\t\t}\n\t\t}\n\n\t\treturn stm(ast.call(`state.${CpuStateFields.vfpuSetMatrix}`, <ANodeExpr[]>[imm32(this.reg), ast.array(array)]));\n\t}\n\n\tsetMatrix(generator: (column: number, row: number) => ANodeExpr) {\n\t\treturn stms([\n\t\t\tthis._setMatrix(generator),\n\t\t\tstm(ast.debugger('wip vfpu'))\n\t\t]);\n\t}\n\n\tsetMatrixDebug(generator: (column: number, row: number) => ANodeExpr) {\n\t\treturn stms([\n\t\t\tthis._setMatrix(generator),\n\t\t\tstm(ast.debugger('wip vfpu'))\n\t\t]);\n\t}\n}\n\nclass VVecRegClass {\n\tconstructor(private reg: number, size:VectorSize) {\n\t}\n\n\tprivate _setVector(generator: (index: number) => ANodeExpr) {\n\t\t// @TODO\n        const array = <ANodeExpr[]>[];\n        const statements: ANodeExpr[] = [];\n        const regs = getVectorRegs(this.reg, VectorSize.Quad);\n\n        statements.push(stm(ast.call(`state.${CpuStateFields.vfpuStore}`, [\n\t\t\tast.array(regs.map(item => imm32(item))),\n\t\t\tast.array([0, 1, 2, 3].map(index => generator(index)))\n\t\t])));\n\n\t\treturn stms(statements);\n\t}\n\n\tsetVector(generator: (index: number) => ANodeExpr) {\n\t\treturn stms([\n\t\t\tthis._setVector(generator),\n\t\t\tstm(ast.debugger('wip vfpu'))\n\t\t]);\n\t}\n\n}\n\n\nfunction VMatReg(index: number) {\n\treturn new VMatRegClass(index);\n}\n\nfunction VVecReg(index: number, size:VectorSize) {\n\treturn new VVecRegClass(index, size);\n}\n\nexport const enum VectorSize { Single = 1, Pair = 2, Triple = 3, Quad = 4 }\nexport const enum MatrixSize { M_2x2 = 2, M_3x3 = 3, M_4x4 = 4 };\n\n//function getVectorRegsValues(vectorReg: number, N: VectorSize) {\n//}\n\nfunction getVectorRegs(vectorReg: number, N: VectorSize) {\n    const mtx = (vectorReg >>> 2) & 7;\n    const col = vectorReg & 3;\n    let row = 0;\n    let length = 0;\n    let transpose = (vectorReg >>> 5) & 1;\n\n    switch (N) {\n\t\tcase VectorSize.Single: transpose = 0; row = (vectorReg >>> 5) & 3; length = 1; break;\n\t\tcase VectorSize.Pair: row = (vectorReg >>> 5) & 2; length = 2; break;\n\t\tcase VectorSize.Triple: row = (vectorReg >>> 6) & 1; length = 3; break;\n\t\tcase VectorSize.Quad: row = (vectorReg >>> 5) & 2; length = 4; break;\n\t\tdefault: debugger;\n\t}\n\n    const regs: number[] = new Array(length);\n    for (let i = 0; i < length; i++) {\n        let index = mtx * 4;\n        if (transpose) {\n\t\t\tindex += ((row + i) & 3) + col * 32;\n\t\t} else {\n\t\t\tindex += col + ((row + i) & 3) * 32;\n\t\t}\n\t\tregs[i] = index;\n\t}\n\treturn regs;\n}\n\nfunction getMatrixRegs(matrixReg: number, N: MatrixSize) {\n    const mtx = (matrixReg >> 2) & 7;\n    const col = matrixReg & 3;\n\n    let row = 0;\n    let side = 0;\n\n    switch (N) {\n\t\tcase MatrixSize.M_2x2: row = (matrixReg >> 5) & 2; side = 2; break;\n\t\tcase MatrixSize.M_3x3: row = (matrixReg >> 6) & 1; side = 3; break;\n\t\tcase MatrixSize.M_4x4: row = (matrixReg >> 5) & 2; side = 4; break;\n\t\tdefault: debugger;\n\t}\n\n    const transpose = (matrixReg >> 5) & 1;\n\n    const regs: number[] = new Array(side * side);\n    for (let i = 0; i < side; i++) {\n\t\tfor (let j = 0; j < side; j++) {\n            let index = mtx * 4;\n            if (transpose) {\n\t\t\t\tindex += ((row + i) & 3) + ((col + j) & 3) * 32;\n\t\t\t} else {\n\t\t\t\tindex += ((col + j) & 3) + ((row + i) & 3) * 32;\n\t\t\t}\n\t\t\tregs[j * side + i] = index;\n\t\t}\n\t}\n\treturn regs;\n}\n\nfunction readVector_f(vectorReg: number, N: VectorSize) {\n\treturn getVectorRegs(vectorReg, N).map(index => vfpr(index));\n}\n\nfunction readVector_i(vectorReg: number, N: VectorSize) {\n\treturn getVectorRegs(vectorReg, N).map(index => vfpr_i(index));\n}\n\nfunction readVector_type(vectorReg: number, N: VectorSize, type: string) {\n\treturn (type == 'float') ? readVector_f(vectorReg, N) : readVector_i(vectorReg, N);\n}\n\nfunction readMatrix(vectorReg: number, N: MatrixSize) {\n\treturn getMatrixRegs(vectorReg, N).map(index => vfpr(index));\n}\n\nfunction setMemoryVector(offset: ANodeExpr, items: ANodeExpr[]) {\n    //return call_stm('state.storeFloats', [offset, ast.array(items)]);\n    const out: ANodeExpr[] = [];\n    for (let n = 0; n < items.length; n++) {\n        const item = items[n];\n        out.push(ast.raw_stm(`memory.${MemoryFields.swc1}(${offset.toJs()} + ${n * 4}, ${item.toJs()});`));\n\t}\n\treturn ast.stms(out);\n}\n\nfunction memoryRef(type: string, address: ANodeExpr) {\n\tswitch (type) {\n\t\tcase 'float': return new ANodeExprLValueSetGet(\n\t\t\t`memory.${MemoryFields.swc1}($0, #)`,\n\t\t\t//'memory.swc1(#, $0)',\n\t\t\t`memory.${MemoryFields.lwc1}($0)`,\n\t\t\t[address]\n\t\t);\n\t\tdefault: throw(new Error(\"Not implemented memoryRef type '\" + type + \"'\"));\n\t}\n\t\n}\n\nfunction getMemoryVector(offset: ANodeExpr, count: number) {\n\treturn ArrayUtils.range(0, count).map(item => memoryRef('float', binop(offset, '+', imm32(item * 4))));\n}\n\nfunction setItems(leftList: ANodeExprLValue[], values: ANodeExpr[]) {\n\treturn stms(leftList.map((left, index) => ast.assign(left, values[index])));\n}\n\nfunction address_RS_IMM14(i: Instruction, offset: number = 0) {\n\treturn binop(gpr(i.rs), '+', imm32(i.IMM14 * 4 + offset));\n}\n\nfunction setMatrix(leftList: number[], generator: (column: number, row: number, index?:number) => ANodeExpr) {\n    const side = Math.sqrt(leftList.length);\n    return call_stm(`state.${CpuStateFields.vfpuStore}`, [\n\t\tast.array(leftList.map(item => imm32(item))),\n\t\tast.array(ArrayUtils.range(0, leftList.length).map(index => generator(Math.floor(index % side), Math.floor(index / side), index)))\n\t]);\n}\n\nfunction setVector(leftList: number[], generator: (index: number) => ANodeExpr) {\n\treturn call_stm(`state.${CpuStateFields.vfpuStore}`, [\n\t\tast.array(leftList.map(item => imm32(item))),\n\t\tast.array(ArrayUtils.range(0, leftList.length).map(index => generator(index)))\n\t]);\n}\n\nfunction setVector_i(leftList: number[], generator: (index: number) => ANodeExpr) {\n\treturn call_stm(`state.${CpuStateFields.vfpuStore_i}`, [\n\t\tast.array(leftList.map(item => imm32(item))),\n\t\tast.array(ArrayUtils.range(0, leftList.length).map(index => generator(index)))\n\t]);\n}\n\n/*\nprivate AstNodeExpr Address_RS_IMM14(int Offset = 0)\n{\nreturn ast.Cast<uint>(ast.Binary(ast.GPR_s(RS), \"+\", Instruction.IMM14 * 4 + Offset), false);\n}\n*/\n\n// @TODO: Convert into enum?\nconst VfpuConstants = [\n\t{ name: \"VFPU_ZERO\", value: 0.0 },\n\t{ name: \"VFPU_HUGE\", value: 340282346638528859811704183484516925440 },\n\t{ name: \"VFPU_SQRT2\", value: Math.sqrt(2.0) },\n\t{ name: \"VFPU_SQRT1_2\", value: Math.sqrt(1.0 / 2.0) },\n\t{ name: \"VFPU_2_SQRTPI\", value: 2.0 / Math.sqrt(Math.PI) },\n\t{ name: \"VFPU_2_PI\", value: 2.0 / Math.PI },\n\t{ name: \"VFPU_1_PI\", value: 1.0 / Math.PI },\n\t{ name: \"VFPU_PI_4\", value: Math.PI / 4.0 },\n\t{ name: \"VFPU_PI_2\", value: Math.PI / 2.0 },\n\t{ name: \"VFPU_PI\", value: Math.PI },\n\t{ name: \"VFPU_E\", value: Math.E },\n\t{ name: \"VFPU_LOG2E\", value: Math.log2(Math.E) },\n\t{ name: \"VFPU_LOG10E\", value: Math.log10(Math.E) },\n\t{ name: \"VFPU_LN2\", value: Math.log(2) },\n\t{ name: \"VFPU_LN10\", value: Math.log(10) },\n\t{ name: \"VFPU_2PI\", value: 2.0 * Math.PI },\n\t{ name: \"VFPU_PI_6\", value: Math.PI / 6.0 },\n\t{ name: \"VFPU_LOG10TWO\", value: Math.log10(2.0) },\n\t{ name: \"VFPU_LOG2TEN\", value: Math.log2(10.0) },\n\t{ name: \"VFPU_SQRT3_2\", value: Math.sqrt(3.0) / 2.0 },\n];\n\nfunction getMatrixRegsVD(i: Instruction) {\n\treturn getMatrixRegs(i.VD, i.ONE_TWO);\n}\n\nclass VfpuPrefixes {\n\tstatic transformRead(n: number, info: number, values: ANodeExpr[]) {\n        const sourceIndex = (info >> (0 + n * 2)) & 3;\n        const sourceAbsolute = (info >> (8 + n * 1)) & 1;\n        const sourceConstant = (info >> (12 + n * 1)) & 1;\n        const sourceNegate = (info >> (16 + n * 1)) & 1;\n\n        let value: ANodeExpr;\n        if (sourceConstant) {\n\t\t\tswitch (sourceIndex) {\n\t\t\t\tcase 0: value = imm_f(sourceAbsolute ? (3) : (0)); break;\n\t\t\t\tcase 1: value = imm_f(sourceAbsolute ? (1 / 3) : (1)); break;\n\t\t\t\tcase 2: value = imm_f(sourceAbsolute ? (1 / 4) : (2)); break;\n\t\t\t\tcase 3: value = imm_f(sourceAbsolute ? (1 / 6) : (1 / 2)); break;\n\t\t\t\tdefault: throw new Error(\"Invalid operation\");\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = values[sourceIndex];\n\t\t\tif (sourceAbsolute) value = call('Math.abs', [value]);\n\t\t}\n\n\t\tif (sourceNegate) value = call('MathFloat.neg', [value]);\n\t\treturn value;\n\t}\n\n\tstatic transformStore(n: number, info: number, left: ANodeExprLValue, value: ANodeExpr) {\n        const destinationSaturation = (info >> (0 + n * 2)) & 3;\n        const destinationMask = (info >> (8 + n * 1)) & 1;\n        if (destinationMask) {\n\t\t\treturn ast.stm(); // Masked. No write value.\n\t\t} else {\n\t\t\tlet v = value;\n\t\t\tswitch (destinationSaturation) {\n\t\t\t\tcase 1: v = call('MathFloat.sat0', [v]); break;\n\t\t\t\tcase 3: v = call('MathFloat.sat1', [v]); break;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t\treturn assign_stm(left, v);\n\t\t}\n\t}\n}\n\nclass PrefixPrediction {\n\tstatic DEFAULT_LOAD_VALUE = 0xDC0000E4;\n\tstatic DEFAULT_STORE_VALUE = 0x00000000;\n\n\tconstructor(private default_value: number) {\n\t}\n\n\tknown = true;\n\tvalue = this.default_value;\n\n\treset() {\n\t\tthis.set(this.default_value);\n\t\t//this.setUnknown();\n\t}\n\n\teat() {\n\t\tthis.set(this.default_value);\n\t}\n\n\tset(value: number) {\n\t\tthis.known = true;\n\t\tthis.value = value;\n\t}\n\n\tsetUnknown() {\n\t\tthis.known = false;\n\t\tthis.value = this.default_value;\n\t}\n}\n\nexport class BranchFlagStm extends ANodeStm {\n\tconstructor(public cond:ANodeExpr, public pc:number) {\n\t\tsuper();\n\t}\n\t\n\ttoJs() {\n\t\t//return `BRANCHFLAG = ${this.cond.toJs()}; BRANCHPC = ${addressToHex(this.pc)};`;\n\t\treturn `BRANCHFLAG = ${this.cond.toJs()};`;\n\t}\n}\n\t\t\nexport class InstructionAst {\n\tconstructor() {\n\t}\n\n\tprivate _vpfxs = new PrefixPrediction(PrefixPrediction.DEFAULT_LOAD_VALUE);\n\tprivate _vpfxt = new PrefixPrediction(PrefixPrediction.DEFAULT_LOAD_VALUE);\n\tprivate _vpfxd = new PrefixPrediction(PrefixPrediction.DEFAULT_STORE_VALUE);\n\tprivate enableStaticPrefixVfpuOptimization = true;\n\t//private enableStaticPrefixVfpuOptimization = false;\n\n\treset() {\n\t\tthis._vpfxs.reset();\n\t\tthis._vpfxt.reset();\n\t\tthis._vpfxd.reset();\n\t}\n\n\teatPrefixes() {\n\t\tthis._vpfxs.eat();\n\t\tthis._vpfxt.eat();\n\t\tthis._vpfxd.eat();\n\t}\n\n\tlui(i: Instruction) { return assignGpr(i.rt, u_imm32(i.imm16 << 16)); }\n\n\tprivate _vset1(i: Instruction, generate: (index: number) => ANodeExpr, destSize: number = 0, destType = 'float') {\n        const st: ANodeExpr[] = [];\n        this._vset_storeVD(st, i, destType, destSize, (index: number) => generate(index));\n\t\treturn stms(st);\n\t}\n\n\tprivate _vset2(i: Instruction, generate: (index: number, src: ANodeExprLValue[]) => ANodeExpr, destSize: number = 0, srcSize: number = 0, destType = 'float', srcType = 'float') {\n        const st: ANodeExpr[] = [];\n        const src = this._vset_readVS(st, i, srcType, srcSize);\n        this._vset_storeVD(st, i, destType, destSize, (index: number) => generate(index, src));\n\t\treturn stms(st);\n\t}\n\n\tprivate _vset3(i: Instruction, generate: (index: number, src: ANodeExprLValue[], target: ANodeExprLValue[]) => ANodeExpr, destSize = 0, srcSize = 0, targetSize = 0, destType = 'float', srcType = 'float', targetType = 'float') {\n        const st: ANodeExpr[] = [];\n        const src = this._vset_readVS(st, i, srcType, srcSize);\n        const target = this._vset_readVT(st, i, targetType, targetSize);\n        this._vset_storeVD(st, i, destType, destSize, (index: number) => generate(index, src, target));\n\t\treturn stms(st);\n\t}\n\n\tprivate _vset_readVS(st: ANodeStm[], i: Instruction, type: string, size: number) {\n\t\treturn this._vset_readVSVT(st, i, type, size, 'vs');\n\t}\n\n\tprivate _vset_readVT(st: ANodeStm[], i: Instruction, type: string, size: number) {\n\t\treturn this._vset_readVSVT(st, i, type, size, 'vt');\n\t}\n\n\tprivate _vset_readVSVT(st: ANodeStm[], i: Instruction, type: string, size: number, name: string) {\n\t\tif (size <= 0) size = i.ONE_TWO;\n        const regs = readVector_type((name == 'vs') ? i.VS : i.VT, size, type);\n        const prefix = (name == 'vs') ? this._vpfxs : this._vpfxt;\n        if (this.enableStaticPrefixVfpuOptimization && prefix.known) {\n            const out: ANodeExprLValue[] = [];\n            for (let n = 0; n < size; n++) {\n                const vname = ((name == 'vs') ? 's' : 't') + n;\n                out.push(ast.raw(vname));\n\t\t\t\tst.push(ast.allocVar(vname, VfpuPrefixes.transformRead(n, prefix.value, regs)));\n\t\t\t}\n\t\t\t//if (prefix.value != PrefixPrediction.DEFAULT_LOAD_VALUE) st.push(ast.debugger());\n\t\t\treturn out;\n\t\t} else {\n\t\t\tst.push(call_stm(((name == 'vs') ? `state.${CpuStateFields.loadVs_prefixed}` : `state.${CpuStateFields.loadVt_prefixed}`), [ast.array(regs)]));\n\t\t}\n\t\treturn xrange(0, size).map(index => (name == 'vs') ? ast.vector_vs(index) : ast.vector_vt(index));\n\t}\n\n\tprivate _vset_storeVD(st: ANodeStm[], i: Instruction, type:string, size: number, generate: (index: number) => ANodeExpr) {\n\t\tif (size <= 0) size = i.ONE_TWO;\n        const dest_regs = getVectorRegs(i.VD, size);\n        if (this.enableStaticPrefixVfpuOptimization && this._vpfxd.known) {\n\t\t\tfor (let n = 0; n < size; n++) {\n                const dest_reg = dest_regs[n];\n                st.push(VfpuPrefixes.transformStore(n, this._vpfxd.value, (type == 'float') ? vfpr(dest_reg) : vfpr_i(dest_reg), generate(n)));\n\t\t\t}\n\t\t} else {\n\t\t\tst.push(call_stm((type == 'float') ? `state.${CpuStateFields.storeVd_prefixed}` : `state.${CpuStateFields.storeVd_prefixed_i}`, [\n\t\t\t\tast.arrayNumbers(dest_regs),\n\t\t\t\tast.array(xrange(0, size).map(n => generate(n))),\n\t\t\t]));\n\t\t}\n\t\t\n\t\tst.push(call_stm(`state.${CpuStateFields.eatPrefixes}`, []));\n\t\t//st.push(ast.debugger());\n\t\tthis.eatPrefixes();\n\t}\n\n\t// Prefixes\n\tvpfxs(i: Instruction) {\n\t\tthis._vpfxs.set(i.IDATA);\n\t\treturn stms([\n\t\t\tcall_stm(`state.${CpuStateFields.setVpfxs}`, [imm32(i.IDATA)]),\n\t\t\t//ast.debugger(),\n\t\t]);\n\t}\n\tvpfxt(i: Instruction) {\n\t\tthis._vpfxt.set(i.IDATA);\n\t\treturn stms([\n\t\t\tcall_stm(`state.${CpuStateFields.setVpfxt}`, [imm32(i.IDATA)]),\n\t\t\t//ast.debugger(),\n\t\t]);\n\t}\n\tvpfxd(i: Instruction) {\n\t\tthis._vpfxd.set(i.IDATA);\n\t\treturn stms([\n\t\t\tcall_stm(`state.${CpuStateFields.setVpfxd}`, [imm32(i.IDATA)]),\n\t\t\t//ast.debugger(),\n\t\t]);\n\t}\n\n\t// Memory read/write\n\n\t\"lv.s\"(i: Instruction) { return assign_stm(vfpr(i.VT5_2), call(`memory.${MemoryFields.lwc1}`, [address_RS_IMM14(i, 0)])); }\n\t\"sv.s\"(i: Instruction) { return call_stm(`memory.${MemoryFields.swc1}`, [address_RS_IMM14(i, 0), vfpr(i.VT5_2)]); }\n\n\t\"lv.q\"(i: Instruction) { return setItems(readVector_f(i.VT5_1, VectorSize.Quad), getMemoryVector(address_RS_IMM14(i), 4)); }\n\t\"lvl.q\"(i: Instruction) { return call_stm(`state.${CpuStateFields.lvl_q}`, [address_RS_IMM14(i, 0), ast.array(getVectorRegs(i.VT5_1, VectorSize.Quad).map(item => imm32(item)))]); }\n\t\"lvr.q\"(i: Instruction) { return call_stm(`state.${CpuStateFields.lvr_q}`, [address_RS_IMM14(i, 0), ast.array(getVectorRegs(i.VT5_1, VectorSize.Quad).map(item => imm32(item)))]); }\n\t\"sv.q\"(i: Instruction) { return setMemoryVector(address_RS_IMM14(i), readVector_f(i.VT5_1, VectorSize.Quad)); }\n\t\"svl.q\"(i: Instruction) { return call_stm(`state.${CpuStateFields.svl_q}`, [address_RS_IMM14(i, 0), ast.array(getVectorRegs(i.VT5_1, VectorSize.Quad).map(item => imm32(item)))]); }\n\t\"svr.q\"(i: Instruction) { return call_stm(`state.${CpuStateFields.svr_q}`, [address_RS_IMM14(i, 0), ast.array(getVectorRegs(i.VT5_1, VectorSize.Quad).map(item => imm32(item)))]); }\n\n\t// Constants\n\t// @TODO: d-prefix in vt register\n\tviim(i: Instruction) { return assign_stm(vfpr(i.VT), imm32(i.imm16)); }\n\tvfim(i: Instruction) { return assign_stm(vfpr(i.VT), imm_f(i.IMM_HF)); }\n\tvcst(i: Instruction) { return assign_stm(vfpr(i.VD), imm_f(VfpuConstants[i.IMM5].value)); }\n\tvhdp(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        return this._vset3(i, (_, src, target) => {\n\t\t\treturn this._aggregateV(imm_f(0), vectorSize, (aggregate, index) => {\n\t\t\t\treturn binop(aggregate, '+', binop(target[index], '*', (index == (vectorSize - 1)) ? <ANodeExpr>imm_f(1.0) : src[index]))\n\t\t\t});\n\t\t}, 1, vectorSize, vectorSize);\n\t}\n\n\tvmidt(i: Instruction) { return setMatrix(getMatrixRegsVD(i), (c, r) => imm32((c == r) ? 1 : 0)); }\n\tvmzero(i: Instruction) { return setMatrix(getMatrixRegsVD(i), (c, r) => imm32(0)); }\n\tvmone(i: Instruction) { return setMatrix(getMatrixRegsVD(i), (c, r) => imm32(1)); }\n\n\t_vtfm_x(i: Instruction, vectorSize: number) {\n        const srcMat = readMatrix(i.VS, vectorSize);\n        const st: ANodeStm[] = [];\n        st.push(call_stm(`state.${CpuStateFields.loadVt_prefixed}`, [ast.array(readVector_f(i.VT, vectorSize))]));\n\t\tst.push(call_stm(`state.${CpuStateFields.storeVd_prefixed}`, [\n\t\t\tast.arrayNumbers(getVectorRegs(i.VD, vectorSize)),\n\t\t\tast.array(xrange(0, vectorSize).map(n => {\n\t\t\t\treturn this._aggregateV(imm_f(0), vectorSize, (aggregated, m) => binop(aggregated, '+', binop(srcMat[n * vectorSize + m], '*', <ANodeExpr>ast.vector_vt(m))));\n\t\t\t})),\n\t\t]));\n\t\t//if (vectorSize == 3) st.push(ast.debugger());\n\t\tthis.eatPrefixes();\n\t\treturn stms(st);\n\t}\n\n\t_vhtfm_x(i: Instruction, vectorSize: number) {\n        const srcMat = readMatrix(i.VS, vectorSize);\n        const st: ANodeStm[] = [];\n        st.push(call_stm(`state.${CpuStateFields.loadVt_prefixed}`, [ast.array(readVector_f(i.VT, vectorSize))]));\n\t\tst.push(call_stm(`state.${CpuStateFields.storeVd_prefixed}`, [\n\t\t\tast.arrayNumbers(getVectorRegs(i.VD, vectorSize)),\n\t\t\tast.array(xrange(0, vectorSize).map(n => {\n\t\t\t\treturn this._aggregateV(imm_f(0), vectorSize, (aggregated, m) => binop(aggregated, '+', binop(srcMat[n * vectorSize + m], '*', ((m == vectorSize - 1) ? <ANodeExpr>imm_f(1) : <ANodeExpr>ast.vector_vt(m)))));\n\t\t\t})),\n\t\t]));\n\t\tthis.eatPrefixes();\n\t\treturn stms(st);\n\t}\n\n\tvtfm2(i: Instruction) { return this._vtfm_x(i, 2); }\n\tvtfm3(i: Instruction) { return this._vtfm_x(i, 3); }\n\tvtfm4(i: Instruction) { return this._vtfm_x(i, 4); }\n\n\tvhtfm2(i: Instruction) { return this._vhtfm_x(i, 2); }\n\tvhtfm3(i: Instruction) { return this._vhtfm_x(i, 3); }\n\tvhtfm4(i: Instruction) { return this._vhtfm_x(i, 4); }\n\n\tvmscl(i: Instruction) {\n        const vectorSize = i.ONE_TWO\n        //return ast.stm(ast.debugger('not implemented'))\n        const src = readMatrix(i.VS, vectorSize)\n        return setMatrix(getMatrixRegsVD(i), (c, r, index) => binop(src[index!], '*', vfpr(i.VT)))\n\t}\n\n\tvzero(i: Instruction) { return this._vset1(i, (i) => imm_f(0)) }\n\tvone(i: Instruction) { return this._vset1(i, (i) => imm_f(1)) }\n\n\tvmov(i: Instruction) { return this._vset3(i, (i, s, t) => s[i]); } // vset3 in order to eat prefixes\n\tvrcp(i: Instruction) { return this._vset2(i, (i, s) => binop(imm_f(1.0), '/', s[i])); }\n\tvmul(i: Instruction) { return this._vset3(i, (i, s, t) => binop(s[i], '*', t[i])); }\n\n\tvbfy1(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return binop(src[0], '+', src[1]);\n\t\t\t\tcase 1: return binop(src[0], '-', src[1]);\n\t\t\t\tcase 2: return binop(src[2], '+', src[3]);\n\t\t\t\tcase 3: return binop(src[2], '-', src[3]);\n\t\t\t\tdefault: throw (new Error(\"vbfy1: Invalid operation\"));\n\t\t\t}\n\t\t});\n\t}\n\tvbfy2(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return binop(src[0], '+', src[2]);\n\t\t\t\tcase 1: return binop(src[1], '+', src[3]);\n\t\t\t\tcase 2: return binop(src[0], '-', src[2]);\n\t\t\t\tcase 3: return binop(src[1], '-', src[3]);\n\t\t\t\tdefault: throw (new Error(\"vbfy1: Invalid operation\"));\n\t\t\t}\n\t\t});\n\t}\n\tvsocp(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        return this._vset2(i, (index, src) => {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0: return ast.call('MathFloat.sat0', [binop(imm_f(1), '-', src[0])]);\n\t\t\t\tcase 1: return ast.call('MathFloat.sat0', [src[0]]);\n\t\t\t\tcase 2: return ast.call('MathFloat.sat0', [binop(imm_f(1), '-', src[1])]);\n\t\t\t\tcase 3: return ast.call('MathFloat.sat0', [src[1]]);\n\t\t\t\tdefault: throw (new Error(\"vsocp: \" + index));\n\t\t\t}\n\t\t}, vectorSize * 2, vectorSize);\n\t}\n\tvsrt1(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return call('MathFloat.min', [src[0], src[1]]);\n\t\t\t\tcase 1: return call('MathFloat.max', [src[0], src[1]]);\n\t\t\t\tcase 2: return call('MathFloat.min', [src[2], src[3]]);\n\t\t\t\tcase 3: return call('MathFloat.max', [src[2], src[3]]);\n\t\t\t\tdefault: throw (new Error(\"vsrt1: Invalid operation\"));\n\t\t\t}\n\t\t}, i.ONE_TWO, 4);\n\t}\n\tvsrt2(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return call('MathFloat.min', [src[0], src[3]]);\n\t\t\t\tcase 1: return call('MathFloat.min', [src[1], src[2]]);\n\t\t\t\tcase 2: return call('MathFloat.max', [src[1], src[2]]);\n\t\t\t\tcase 3: return call('MathFloat.max', [src[0], src[3]]);\n\t\t\t\tdefault: throw (new Error(\"vsrt2: Invalid operation\"));\n\t\t\t}\n\t\t}, i.ONE_TWO, 4);\n\t}\n\tvsrt3(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return call('MathFloat.max', [src[0], src[1]]);\n\t\t\t\tcase 1: return call('MathFloat.min', [src[0], src[1]]);\n\t\t\t\tcase 2: return call('MathFloat.max', [src[2], src[3]]);\n\t\t\t\tcase 3: return call('MathFloat.min', [src[2], src[3]]);\n\t\t\t\tdefault: throw (new Error(\"vsrt3: Invalid operation\"));\n\t\t\t}\n\t\t}, i.ONE_TWO, 4);\n\t}\n\tvsrt4(i: Instruction) {\n\t\treturn this._vset2(i, (i, src) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return call('MathFloat.max', [src[0], src[3]]);\n\t\t\t\tcase 1: return call('MathFloat.max', [src[1], src[2]]);\n\t\t\t\tcase 2: return call('MathFloat.min', [src[1], src[2]]);\n\t\t\t\tcase 3: return call('MathFloat.min', [src[0], src[3]]);\n\t\t\t\tdefault: throw (new Error(\"vsrt4: Invalid operation\"));\n\t\t\t}\n\t\t}, i.ONE_TWO, 4);\n\t}\n\n\tvrnds(i: Instruction) { return call_stm(`state.${CpuStateFields.vrnds}`, []); }\n\tvrndi(i: Instruction) { return this._vset1(i, (i) => call(`state.${CpuStateFields.vrndi}`, []), undefined, 'int'); }\n\tvrndf1(i: Instruction) { return this._vset1(i, (i) => call(`state.${CpuStateFields.vrndf1}`, [])); }\n\tvrndf2(i: Instruction) { return this._vset1(i, (i) => call(`state.${CpuStateFields.vrndf2}`, [])); }\n\n\t/*\n\tpublic AstNodeStm vrnds(i: Instruction) { return ast.Statement(ast.CallStatic((Action < CpuThreadState, int>) CpuEmitterUtils._vrnds, ast.CpuThreadState)); }\n\tpublic AstNodeStm vrndi(i: Instruction) { return VEC_VD_i.SetVector(Index => ast.CallStatic((Func < CpuThreadState, int>) CpuEmitterUtils._vrndi, ast.CpuThreadState), PC); }\n\tpublic AstNodeStm vrndf1(i: Instruction) { return VEC_VD.SetVector(Index => ast.CallStatic((Func < CpuThreadState, float>) CpuEmitterUtils._vrndf1, ast.CpuThreadState), PC); }\n\tpublic AstNodeStm vrndf2(i: Instruction) { return VEC_VD.SetVector(Index => ast.CallStatic((Func < CpuThreadState, float>) CpuEmitterUtils._vrndf2, ast.CpuThreadState), PC); }\n\t*/\n\n\t_aggregateV(val: ANodeExpr, size: number, generator: (value: ANodeExpr, index: number) => ANodeExpr) {\n\t\tfor (let n = 0; n < size; n++) val = generator(val, n);\n\t\treturn val;\n\t}\n\n\tvnop(i: Instruction) { return ast.stm(); }\n\tvsync(i: Instruction) { return ast.stm(); }\n\tvflush(i: Instruction) { return ast.stm(); }\n\n\tvfad(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        return this._vset2(i, (i, src) => {\n\t\t\treturn this._aggregateV(imm_f(0), vectorSize, (value, index) => binop(value, '+', src[index]));\n\t\t}, 1, vectorSize);\n\t}\n\tvavg(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        return this._vset2(i, (i, src) => {\n\t\t\treturn binop(this._aggregateV(imm_f(0), vectorSize, (value, index) => binop(value, '+', src[index])), '/', imm_f(vectorSize));\n\t\t}, 1, vectorSize);\n\t}\n\n\tvidt(i: Instruction) {\n\t\treturn this._vset1(i, (index) => imm_f((index == (i.IMM7 % i.ONE_TWO)) ? 1 : 0));\n\t}\n\n\t\"vcrs.t\"(i: Instruction) {\n\t\treturn this._vset3(i, (index, src, target) => {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0: return binop(src[1], '*', target[2]);\n\t\t\t\tcase 1: return binop(src[2], '*', target[0]);\n\t\t\t\tcase 2: return binop(src[0], '*', target[1]);\n\t\t\t\tdefault: throw(new Error(\"vcrs_t not implemented\"));\n\t\t\t}\n\t\t}, 3, 3, 3);\n\t}\n\t\"vcrsp.t\"(i: Instruction) {\n\t\treturn this._vset3(i, (index, src, target) => {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0: return binop(binop(src[1], '*', target[2]), '-', binop(src[2], '*', target[1]));\n\t\t\t\tcase 1: return binop(binop(src[2], '*', target[0]), '-', binop(src[0], '*', target[2]));\n\t\t\t\tcase 2: return binop(binop(src[0], '*', target[1]), '-', binop(src[1], '*', target[0]));\n\t\t\t\tdefault: throw (new Error(\"vcrs_t assert\"));\n\t\t\t}\n\t\t}, 3, 3, 3);\n\t}\n\n\tvc2i(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vc2i}`, [imm32(index), src[0]]), 0, 1, 'int', 'int'); }\n\tvuc2i(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vuc2i}`, [imm32(index), src[0]]), 0, 1, 'int', 'int'); }\n\tvs2i(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vs2i}`, [imm32(index), src[Math.floor(index / 2)]]), i.ONE_TWO * 2, i.ONE_TWO, 'int', 'int'); }\n\tvi2f(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vi2f}`, [src[index], imm32(-i.IMM5)]), 0, 0, 'float', 'int'); }\n\tvi2uc(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vi2uc}`, [src[0], src[1], src[2], src[3]]), 1, 4, 'int', 'int'); }\n\tvf2id(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vf2id}`, [src[index], imm32(i.IMM5)]), 0, 0, 'int', 'float'); }\n\tvf2in(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vf2in}`, [src[index], imm32(i.IMM5)]), 0, 0, 'int', 'float'); }\n\tvf2iu(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vf2iu}`, [src[index], imm32(i.IMM5)]), 0, 0, 'int', 'float'); }\n\tvf2iz(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vf2iz}`, [src[index], imm32(i.IMM5)]), 0, 0, 'int', 'float'); }\n\tvf2h(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vf2h}`, [imm32(index), src[index]]), 0, 0, 'float', 'float'); }\n\tvh2f(i: Instruction) { return this._vset2(i, (index, src) => call(`state.${CpuStateFields.vh2f}`, [imm32(index), src[index]]), 0, 0, 'float', 'float'); }\n\n\tvdet(i: Instruction) {\n\t\treturn this._vset3(i, (i, s, t) => {\n\t\t\treturn binop(binop(s[0], '*', t[1]), '-', binop(s[1], '*', t[0]));\n\t\t}, 1, 2, 2);\n\t}\n\n\tvqmul(i: Instruction) {\n\t\treturn this._vset3(i, (i, s, t) => {\n\t\t\tswitch (i) {\n\t\t\t\tcase 0: return call(`state.${CpuStateFields.vqmul0}`, [s[0], s[1], s[2], s[3], t[0], t[1], t[2], t[3]]);\n\t\t\t\tcase 1: return call(`state.${CpuStateFields.vqmul1}`, [s[0], s[1], s[2], s[3], t[0], t[1], t[2], t[3]]);\n\t\t\t\tcase 2: return call(`state.${CpuStateFields.vqmul2}`, [s[0], s[1], s[2], s[3], t[0], t[1], t[2], t[3]]);\n\t\t\t\tcase 3: return call(`state.${CpuStateFields.vqmul3}`, [s[0], s[1], s[2], s[3], t[0], t[1], t[2], t[3]]);\n                default: throw new Error(`Unexpected ${i}`)\n\t\t\t}\n\t\t}, 4, 4, 4);\n\t}\n\n\tvslt(i: Instruction) { return this._vset3(i, (i, s, t) => call(`MathFloat.vslt`, [s[i], t[i]])); }\n\tvsle(i: Instruction) { return this._vset3(i, (i, s, t) => call(`MathFloat.vsle`, [s[i], t[i]])); }\n\tvsge(i: Instruction) { return this._vset3(i, (i, s, t) => call(`MathFloat.vsge`, [s[i], t[i]])); }\n\tvsgt(i: Instruction) { return this._vset3(i, (i, s, t) => call(`MathFloat.vsgt`, [s[i], t[i]])); }\n\tvscmp(i: Instruction) { return this._vset3(i, (i, s, t) => call(`MathFloat.sign2`, [s[i], t[i]])); }\n\n\tprivate _bvtf(i: Instruction, cond: boolean) {\n        const reg = i.IMM3;\n        let branchExpr = <ANodeExpr>ast.VCC(reg);\n        if (!cond) branchExpr = unop(\"!\", branchExpr);\n\t\treturn this._branch(i, branchExpr);\n\t}\n\t\n\tbvf(i: Instruction) { return this._bvtf(i, false); }\n\tbvt(i: Instruction) { return this._bvtf(i, true); }\n\n\tbvfl(i: Instruction) { return this.bvf(i); }\n\tbvtl(i: Instruction) { return this.bvt(i); }\n\n\tmtv(i: Instruction) { return this._vset1(i, (_) => gpr(i.rt), 1, 'int'); }\n\tmfv(i: Instruction) { return assign_stm(gpr(i.rt), vfpr_i(i.VD)); }\n\n\tmtvc(i: Instruction) {\n\t\tswitch (i.IMM7) {\n\t\t\tcase 0: this._vpfxs.setUnknown(); break;\n\t\t\tcase 1: this._vpfxt.setUnknown(); break;\n\t\t\tcase 2: this._vpfxd.setUnknown(); break;\n\t\t}\n\t\treturn assign_stm(vfprc(i.IMM7), gpr(i.rt));\n\t}\n\tmfvc(i: Instruction) {\n\t\treturn assign_stm(gpr(i.rt), vfprc(i.IMM7));\n\t}\n\n\tprivate _vcmovtf(i: Instruction, True: boolean) {\n        const result = call_stm(`state.${CpuStateFields.vcmovtf}`, [\n            imm32(i.IMM3),\n            immBool(True),\n            ast.arrayNumbers(getVectorRegs(i.VD, i.ONE_TWO)),\n            ast.arrayNumbers(getVectorRegs(i.VS, i.ONE_TWO))\n        ]);\n        this.eatPrefixes();\n\t\treturn result;\n\t}\n\n\tvcmovt(i: Instruction) { return this._vcmovtf(i, true); }\n\tvcmovf(i: Instruction) { return this._vcmovtf(i, false); }\n\n\tvcmp(ins: Instruction) {\n\t\t/*\n        return call_stm('state.vcmp', [\n            imm32(ins.IMM4),\n            ast.array(readVector_f(ins.VS, ins.ONE_TWO)),\n            ast.array(readVector_f(ins.VT, ins.ONE_TWO))\n        ]);\n\t\t*/\n\n        const out: ANodeStm[] = [];\n        const vectorSize = ins.ONE_TWO;\n\n        //out.push(ast.raw_stm(`debugger;`));\n\t\tthis._vset_readVS(out, ins, 'float', vectorSize);\n\t\tthis._vset_readVT(out, ins, 'float', vectorSize);\n        const conds: string[] = [];\n        for (let i = 0; i < vectorSize; i++) {\n            const c = false;\n            let cond = '';\n            switch (ins.IMM4) {\n\t\t\t\tcase VCondition.FL: cond = `false`; break;\n\t\t\t\tcase VCondition.EQ: cond = `s${i} == t${i}`; break;\n\t\t\t\tcase VCondition.LT: cond = `s${i} < t${i}`; break;\n\t\t\t\tcase VCondition.LE: cond = `s${i} <= t${i}`; break;\n\n\t\t\t\tcase VCondition.TR: cond = `true`; break;\n\t\t\t\tcase VCondition.NE: cond = `s${i} != t${i}`; break;\n\t\t\t\tcase VCondition.GE: cond = `s${i} >= t${i}`; break;\n\t\t\t\tcase VCondition.GT: cond = `s${i} > t${i}`; break;\n\n\t\t\t\tcase VCondition.EZ: cond = `(s${i} == 0.0) || (s${i} == -0.0)`; break;\n\t\t\t\tcase VCondition.EN: cond = `MathFloat.isnan(s${i})`; break;\n\t\t\t\tcase VCondition.EI: cond = `MathFloat.isinf(s${i})`; break;\n\t\t\t\tcase VCondition.ES: cond = `MathFloat.isnanorinf(s${i})`; break;   // Tekken Dark Resurrection\n\t\t\t\t\t \n\t\t\t\tcase VCondition.NZ: cond = `s${i} != 0;`; break;\n\t\t\t\tcase VCondition.NN: cond = `!MathFloat.isnan(s${i})`; break;\n\t\t\t\tcase VCondition.NI: cond = `!MathFloat.isinf(s${i})`; break;\n\t\t\t\tcase VCondition.NS: cond = `!(MathFloat.isnanorinf(s${i}))`; break;   // How about t[i] ?\t\n\t\t\t}\n\t\t\tconds.push(`((${cond}) << ${i})`);\n\t\t}\n\t\tlet mask = (1 << vectorSize) - 1;\n\t\tlet inv_affected_bits = ~(mask | (1 << 4) | (1 << 5));\n\t\t//out.push(ast.raw_stm(`debugger;`));\n\t\tout.push(ast.raw_stm(`\n\t\t{\n\t\t    let cc = ${conds.join(' | ')};\n\t\t    cc |= ((cc & ${mask}) != 0) << 4;\n\t\t    cc |= ((cc & ${mask}) == ${mask}) << 5;\n\t\t    state.vfprc[${VFPU_CTRL.CC}] = (state.vfprc[${VFPU_CTRL.CC}] & ${inv_affected_bits}) | cc;\n        }\n        `));\n\t\tthis.eatPrefixes();\n\n\t\treturn ast.stms(out);\n\t}\n\n\t// @TODO:\n\t//vwbn(i: Instruction) { return ast.stm(ast.debugger('not implemented')); }\n\t//vsbn(i: Instruction) { return ast.stm(ast.debugger('not implemented')); }\n\tvwbn(i: Instruction) { return ast.stm(); }\n\tvsbn(i: Instruction) { return ast.stm(); }\n\n\tvabs(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.abs', [src[i]])); }\n\tvocp(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.ocp', [src[i]])); }\n\tvneg(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.neg', [src[i]])); }\n\tvsgn(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.sign', [src[i]])); }\n\tvsat0(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.sat0', [src[i]])); }\n\tvsat1(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.sat1', [src[i]])); }\n\tvrsq(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.rsq', [src[i]])); }\n\tvsin(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.sinv1', [src[i]])); }\n\tvcos(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.cosv1', [src[i]])); }\n\tvexp2(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.exp2', [src[i]])); }\n\tvrexp2(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.rexp2', [src[i]])); }\n\tvlog2(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.log2', [src[i]])); }\n\tvsqrt(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.sqrt', [src[i]])); }\n\tvasin(i: Instruction) {\n\t\t//return this._vset2(i, (i, src) => call('MathFloat.asinv1', [src[i]]));\n\t\treturn stms([\n\t\t\tthis._vset2(i, (i, src) => call('MathFloat.asinv1', [src[i]])),\n\t\t\t//ast.debugger()\n\t\t]);\n\t}\n\tvnsin(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.nsinv1', [src[i]])); }\n\tvnrcp(i: Instruction) { return this._vset2(i, (i, src) => call('MathFloat.nrcp', [src[i]])); }\n\n\tvmin(i: Instruction) { return this._vset3(i, (i, src, target) => call('MathFloat.min', [src[i], target[i]])); }\n\tvmax(i: Instruction) { return this._vset3(i, (i, src, target) => call('MathFloat.max', [src[i], target[i]])); }\n\tvdiv(i: Instruction) { return this._vset3(i, (i, src, target) => binop(src[i], '/', target[i])); }\n\tvadd(i: Instruction) { return this._vset3(i, (i, src, target) => binop(src[i], '+', target[i])); }\n\tvsub(i: Instruction) { return this._vset3(i, (i, src, target) => binop(src[i], '-', target[i])); }\n\tvscl(i: Instruction) { return this._vset3(i, (i, src, target) => binop(src[i], '*', target[0]), 0, 0, 1); }\n\tvdot(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        return this._vset3(i, (i, s, t) => {\n\t\t\treturn this._aggregateV(imm_f(0), vectorSize, (sum, n) => binop(sum, '+', binop(s[n], '*', t[n])));\n\t\t}, 1, vectorSize, vectorSize);\n\t}\n\tvrot(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        const imm5 = i.IMM5;\n        const cosIndex = BitUtils.extract(imm5, 0, 2);\n        const sinIndex = BitUtils.extract(imm5, 2, 2);\n        const negateSin = BitUtils.extractBool(imm5, 4);\n        const dest = getVectorRegs(i.VD, i.ONE_TWO);\n\n        return this._vset2(i, (i, s) => {\n            let sine = <ANodeExpr>call('MathFloat.sinv1', [s[0]]);\n            const cosine = <ANodeExpr>call('MathFloat.cosv1', [s[0]]);\n            if (negateSin) sine = unop('-', sine);\n\n\t\t\tif (i == cosIndex) return cosine;\n\t\t\tif (i == sinIndex) return sine;\n\t\t\treturn (sinIndex == cosIndex) ? sine : imm32(0);\n\t\t}, vectorSize, 1);\n\t}\n\tvmmov(i: Instruction) {\n        const vectorSize = i.ONE_TWO;\n        const dest = getMatrixRegs(i.VD, vectorSize);\n        const src = readMatrix(i.VS, vectorSize);\n        //const target = readMatrix(i.VT, i.ONE_TWO);\n        const result = setMatrix(dest, (column, row, index) => src[index!]);\n        this.eatPrefixes();\n\t\treturn result;\n\t}\n\n\tvmmul(i: Instruction) {\n        const VectorSize = i.ONE_TWO;\n        const dest = getMatrixRegs(i.VD, VectorSize);\n        const src = readMatrix(i.VS, VectorSize);\n        const target = readMatrix(i.VT, VectorSize);\n        const st: ANodeStm[] = [];\n        //st.push(ast.debugger());\n\t\tst.push(setMatrix(dest, (Column, Row, Index) =>\n\t\t{\n            let sum = <ANodeExpr>imm_f(0);\n            for (let n = 0; n < VectorSize; n++) {\n\t\t\t\tsum = binop(sum, '+', binop(src[Column * VectorSize + n], '*', target[Row * VectorSize + n]));\n\t\t\t}\n\t\t\treturn sum;\n\t\t}));\n\t\tst.push(call_stm(`state.${CpuStateFields.eatPrefixes}`, []));\n\t\tthis.eatPrefixes();\n\t\treturn stms(st);\n\t}\n\n\t'vt4444.q'(i: Instruction) { return this._vtXXX_q(i, `${CpuStateFields._vt4444_step}`); }\n\t'vt5551.q'(i: Instruction) { return this._vtXXX_q(i, `${CpuStateFields._vt5551_step}`); }\n\t'vt5650.q'(i: Instruction) { return this._vtXXX_q(i, `${CpuStateFields._vt5650_step}`); }\n\n\t_vtXXX_q(i: Instruction, func: string) {\n        const size = i.ONE_TWO;\n        if (size != 4) throw (new Error(\"Not implemented _vtXXXX_q for VectorSize=\" + size));\n        const dest = getVectorRegs(i.VD, 2);\n        const src = readVector_i(i.VS, 4);\n        const result = setVector_i(dest, (index) => ast.call(`state.${func}`, [src[index * 2 + 0], src[index * 2 + 1]]));\n        this.eatPrefixes();\n\t\treturn result;\n\t}\n\n\t// CPU\n\tadd(i: Instruction) { return this.addu(i); }\n\taddu(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rs), '+', gpr(i.rt))); }\n\taddi(i: Instruction) { return this.addiu(i); }\n\taddiu(i: Instruction) { return assignGpr(i.rt, binop(gpr(i.rs), '+', imm32(i.imm16))); }\n\n\tsub(i: Instruction) { return this.subu(i); }\n\tsubu(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rs), '-', gpr(i.rt))); }\n\n\tsll(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '<<', imm32(i.pos))); }\n\tsra(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '>>', imm32(i.pos))); }\n\tsrl(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '>>>', imm32(i.pos))); }\n\trotr(i: Instruction) { return assignGpr(i.rd, call('BitUtils.rotr', [gpr(i.rt), imm32(i.pos)])); }\n\n\tsllv(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '<<', binop(gpr(i.rs), '&', imm32(31)))); }\n\tsrav(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '>>', binop(gpr(i.rs), '&', imm32(31)))); }\n\tsrlv(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rt), '>>>', binop(gpr(i.rs), '&', imm32(31)))); }\n\t//srlv(i: Instruction) { return assignGpr(i.rd, call('BitUtils.srl', [gpr(i.rt), gpr(i.rs)])); }\n\trotrv(i: Instruction) { return assignGpr(i.rd, call('BitUtils.rotr', [gpr(i.rt), gpr(i.rs)])); }\n\n\tbitrev(i: Instruction) { return assignGpr(i.rd, call('BitUtils.bitrev32', [gpr(i.rt)])); }\n\n\tand(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rs), '&', gpr(i.rt))); }\n\tor(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rs), '|', gpr(i.rt))); }\n\txor(i: Instruction) { return assignGpr(i.rd, binop(gpr(i.rs), '^', gpr(i.rt))); }\n\tnor(i: Instruction) { return assignGpr(i.rd, unop('~', binop(gpr(i.rs), '|', gpr(i.rt)))); }\n\n\tandi(i: Instruction) { return assignGpr(i.rt, binop(gpr(i.rs), '&', u_imm32(i.u_imm16))); }\n\tori(i: Instruction) { return assignGpr(i.rt, binop(gpr(i.rs), '|', u_imm32(i.u_imm16))); }\n\txori(i: Instruction) { return assignGpr(i.rt, binop(gpr(i.rs), '^', u_imm32(i.u_imm16))); }\n\n\tmflo(i: Instruction) { return assignGpr(i.rd, lo()); }\n\tmfhi(i: Instruction) { return assignGpr(i.rd, hi()); }\n\tmfic(i: Instruction) { return assignGpr(i.rt, ic()); }\n\n\tmtlo(i: Instruction) { return assign(lo(), gpr(i.rs)); }\n\tmthi(i: Instruction) { return assign(hi(), gpr(i.rs)); }\n\tmtic(i: Instruction) { return assignIC(gpr(i.rt)); }\n\n\tslt(i: Instruction) { return assignGpr(i.rd, call(`state.${CpuStateFields.slt}`, [gpr(i.rs), gpr(i.rt)])); }\n\tsltu(i: Instruction) { return assignGpr(i.rd, call(`state.${CpuStateFields.sltu}`, [gpr(i.rs), gpr(i.rt)])); }\n\tslti(i: Instruction) { return assignGpr(i.rt, call(`state.${CpuStateFields.slt}`, [gpr(i.rs), imm32(i.imm16)])); }\n\tsltiu(i: Instruction) { return assignGpr(i.rt, call(`state.${CpuStateFields.sltu}`, [gpr(i.rs), <any>u_imm32(i.imm16)])); }\n\n\tmovz(i: Instruction) { return _if(binop(gpr(i.rt), '==', imm32(0)), assignGpr(i.rd, gpr(i.rs))); }\n\tmovn(i: Instruction) { return _if(binop(gpr(i.rt), '!=', imm32(0)), assignGpr(i.rd, gpr(i.rs))); }\n\n\text(i: Instruction) { return assignGpr(i.rt, call('BitUtils.extract', [gpr(i.rs), imm32(i.pos), imm32(i.size_e)])); }\n\tins(i: Instruction) { return assignGpr(i.rt, call('BitUtils.insert', [gpr(i.rt), imm32(i.pos), imm32(i.size_i), gpr(i.rs)])); }\n\n\tclz(i: Instruction) { return assignGpr(i.rd, call('BitUtils.clz', [gpr(i.rs)])); }\n\tclo(i: Instruction) { return assignGpr(i.rd, call('BitUtils.clo', [gpr(i.rs)])); }\n\tseb(i: Instruction) { return assignGpr(i.rd, call('BitUtils.seb', [gpr(i.rt)])); }\n\tseh(i: Instruction) { return assignGpr(i.rd, call('BitUtils.seh', [gpr(i.rt)])); }\n\n\twsbh(i: Instruction) { return assignGpr(i.rd, call('BitUtils.wsbh', [gpr(i.rt)])); }\n\twsbw(i: Instruction) { return assignGpr(i.rd, call('BitUtils.wsbw', [gpr(i.rt)])); }\n\n\t_trace_state() { return stm(ast.call(`state.${CpuStateFields._trace_state}`, [])); }\n\n\t\"mov.s\"(i: Instruction) { return assignFpr(i.fd, fpr(i.fs)); }\n\t\"add.s\"(i: Instruction) { return assignFpr(i.fd, binop(fpr(i.fs), '+', fpr(i.ft))); }\n\t\"sub.s\"(i: Instruction) { return assignFpr(i.fd, binop(fpr(i.fs), '-', fpr(i.ft))); }\n\t\"mul.s\"(i: Instruction) { return assignFpr(i.fd, binop(fpr(i.fs), '*', fpr(i.ft))); }\n\t\"div.s\"(i: Instruction) { return assignFpr(i.fd, binop(fpr(i.fs), '/', fpr(i.ft))); }\n\t\"abs.s\"(i: Instruction) { return assignFpr(i.fd, call('Math.abs', [fpr(i.fs)])); }\n\t\"sqrt.s\"(i: Instruction) { return assignFpr(i.fd, call('Math.sqrt', [fpr(i.fs)])); }\n\t\"neg.s\"(i: Instruction) { return assignFpr(i.fd, unop('-', fpr(i.fs))); }\n\n\tmin(i: Instruction) { return assignGpr(i.rd, call(`state.${CpuStateFields.min}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmax(i: Instruction) { return assignGpr(i.rd, call(`state.${CpuStateFields.max}`, [gpr(i.rs), gpr(i.rt)])); }\n\n\tdiv(i: Instruction) { return stm(call(`state.${CpuStateFields.div}`, [gpr(i.rs), gpr(i.rt)])); }\n\tdivu(i: Instruction) { return stm(call(`state.${CpuStateFields.divu}`, [gpr(i.rs), gpr(i.rt)])); }\n\n\tmult(i: Instruction) { return stm(call(`state.${CpuStateFields.mult}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmultu(i: Instruction) { return stm(call(`state.${CpuStateFields.multu}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmadd(i: Instruction) { return stm(call(`state.${CpuStateFields.madd}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmaddu(i: Instruction) { return stm(call(`state.${CpuStateFields.maddu}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmsub(i: Instruction) { return stm(call(`state.${CpuStateFields.msub}`, [gpr(i.rs), gpr(i.rt)])); }\n\tmsubu(i: Instruction) { return stm(call(`state.${CpuStateFields.msubu}`, [gpr(i.rs), gpr(i.rt)])); }\n\n\tcache(i: Instruction) { return stm(call(`state.${CpuStateFields.cache}`, [gpr(i.rs), imm32(i.rt), imm32(i.imm16)])); }\n\n\tsyscall(i: Instruction) { return stm(call(`state.${CpuStateFields.syscall}`, [imm32(i.vsyscall)])); }\n\t\"break\"(i: Instruction) { return stm(call(`state.${CpuStateFields.break}`, [])); }\n\tdbreak(i: Instruction) { return ast.debugger(\"dbreak\"); }\n\n\t_storePC(_pc: number) {\n\t\treturn assign(pc(), u_imm32(_pc));\n\t}\n\n\tprivate _branch(i: Instruction, cond: ANodeExpr) {\n\t\treturn new BranchFlagStm(cond, i.PC + i.imm16 * 4 + 4);\n\t}\n\n\tbeq(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \"==\", gpr(i.rt))); }\n\tbne(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \"!=\", gpr(i.rt))); }\n\tbltz(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \"<\", imm32(0))); }\n\tblez(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \"<=\", imm32(0))); }\n\tbgtz(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \">\", imm32(0))); }\n\tbgez(i: Instruction) { return this._branch(i, binop(gpr(i.rs), \">=\", imm32(0))); }\n\n\tbeql(i: Instruction) { return this.beq(i); }\n\tbnel(i: Instruction) { return this.bne(i); }\n\tbltzl(i: Instruction) { return this.bltz(i); }\n\tblezl(i: Instruction) { return this.blez(i); }\n\tbgtzl(i: Instruction) { return this.bgtz(i); }\n\tbgezl(i: Instruction) { return this.bgez(i); }\n\n\tbltzal(i: Instruction) { return stms([assignGpr(31, u_imm32(i.PC + 8)), this.bltz(i)]); }\n\tbltzall(i: Instruction) { return stms([assignGpr(31, u_imm32(i.PC + 8)), this.bltzl(i)]); }\n\n\tbgezal(i: Instruction) { return stms([assignGpr(31, u_imm32(i.PC + 8)), this.bgez(i)]); }\n\tbgezall(i: Instruction) { return stms([assignGpr(31, u_imm32(i.PC + 8)), this.bgezl(i)]); }\n\n\tbc1t(i: Instruction) { return this._branch(i, fcr31_cc()); }\n\tbc1f(i: Instruction) { return this._branch(i, unop(\"!\", fcr31_cc())); }\n\n\tbc1tl(i: Instruction) { return this.bc1t(i); }\n\tbc1fl(i: Instruction) { return this.bc1f(i); }\n\n\n\tmfc1(i: Instruction) { return assignGpr(i.rt, ast.fpr_i(i.fs)); }\n\tmtc1(i: Instruction) { return assignFpr_I(i.fs, ast.gpr(i.rt)); }\n\tcfc1(i: Instruction) { return stm(call(`state.${CpuStateFields._cfc1_impl}`, [imm32(i.rd), imm32(i.rt)])); }\n\tctc1(i: Instruction) { return stm(call(`state.${CpuStateFields._ctc1_impl}`, [imm32(i.rd), gpr(i.rt)])); }\n\n\t\"trunc.w.s\"(i: Instruction) { return assignFpr_I(i.fd, call('MathFloat.trunc', [fpr(i.fs)])); }\n\t\"round.w.s\"(i: Instruction) { return assignFpr_I(i.fd, call('MathFloat.round', [fpr(i.fs)])); }\n\t\"ceil.w.s\"(i: Instruction) { return assignFpr_I(i.fd, call('MathFloat.ceil', [fpr(i.fs)])); }\n\t\"floor.w.s\"(i: Instruction) { return assignFpr_I(i.fd, call('MathFloat.floor', [fpr(i.fs)])); }\n\n\t\"cvt.s.w\"(i: Instruction) { return assignFpr(i.fd, fpr_i(i.fs)); }\n\t\"cvt.w.s\"(i: Instruction) { return assignFpr_I(i.fd, call(`state.${CpuStateFields._cvt_w_s_impl}`, [fpr(i.fs)])); }\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t// MEMORY\n\t///////////////////////////////////////////////////////////////////////////////\n\t\n\tsb  (i: Instruction) { return stm(call(`memory.${MemoryFields.sb}`  , [rs_imm16(i), gpr(i.rt)])); }\n\tsh  (i: Instruction) { return stm(call(`memory.${MemoryFields.sh}`  , [rs_imm16(i), gpr(i.rt)])); }\n\tsw  (i: Instruction) { return stm(call(`memory.${MemoryFields.sw}`  , [rs_imm16(i), gpr(i.rt)])); }\n\tswc1(i: Instruction) { return stm(call(`memory.${MemoryFields.sw}`  , [rs_imm16(i), fpr_i(i.ft)])); }\n\tswl (i: Instruction) { return stm(call(`memory.${MemoryFields.swl}` , [rs_imm16(i), gpr(i.rt)])); }\n\tswr (i: Instruction) { return stm(call(`memory.${MemoryFields.swr}` , [rs_imm16(i), gpr(i.rt)])); }\n\n\tlb  (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lb}`,   [rs_imm16(i)])); }\n\tlbu (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lbu}`,  [rs_imm16(i)])); }\n\tlh  (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lh}`,   [rs_imm16(i)])); }\n\tlhu (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lhu}`,  [rs_imm16(i)])); }\n\tlw  (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lw}`,   [rs_imm16(i)])); }\n\tlwc1(i: Instruction) { return assignFpr_I(i.ft, call(`memory.${MemoryFields.lw}`,   [rs_imm16(i)])); }\n\tlwl (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lwl}`,  [rs_imm16(i), gpr(i.rt)])); }\n\tlwr (i: Instruction) { return assignGpr  (i.rt, call(`memory.${MemoryFields.lwr}`,  [rs_imm16(i), gpr(i.rt)])); }\n\n\t_callstackPush(i: Instruction) {\n\t\t//return stm(call('state.callstackPush', [imm32(i.PC)]));\n\t\treturn ast.stm();\n\t}\n\n\t_callstackPop(i: Instruction) {\n\t\t//return stm(call('state.callstackPop', []));\n\t\treturn ast.stm();\n\t}\n\t\t\n\tj(i: Instruction) {\n\t\treturn stms([\n\t\t\tstm(assign(branchflag(), imm32(1))),\n\t\t\tstm(assign(branchpc(), u_imm32(i.jump_address)))\n\t\t]);\n\t}\n\tjr(i: Instruction) {\n        const statements: ANodeStm[] = [];\n        statements.push(stm(assign(branchflag(), imm32(1))));\n\t\tstatements.push(stm(assign(branchpc(), gpr(i.rs))));\n\t\tif (i.rs == 31) {\n\t\t\tstatements.push(this._callstackPop(i));\n\t\t}\n\t\treturn stms(statements);\n\t}\n\t\n\t_jrOpt(i: Instruction) {\n\t\treturn stms([stm(assign(branchpc(), gpr(i.rs)))]);\n\t}\n\t\n\tjal(i: Instruction) { return stms([this.j(i), this._callstackPush(i), assignGpr(31, u_imm32(i.PC + 8))]); }\n\tjalr(i: Instruction) { return stms([this.jr(i), this._callstackPush(i), assignGpr(i.rd, u_imm32(i.PC + 8)),]); }\n\n\t_comp(i: Instruction, fc02: number, fc3: number) {\n        const fc_unordererd = ((fc02 & 1) != 0);\n        const fc_equal = ((fc02 & 2) != 0);\n        const fc_less = ((fc02 & 4) != 0);\n        const fc_inv_qnan = (fc3 != 0); // TODO -- Only used for detecting invalid operations?\n\t\t\n        //return stm(call('state._comp_impl', [fpr(i.fs), fpr(i.ft), immBool(fc_unordererd), immBool(fc_equal), immBool(fc_less), immBool(fc_inv_qnan)]));\n\n        const s = fpr(i.fs).toJs();\n        const t = fpr(i.ft).toJs();\n\n        let parts: string[] = [];\n        if (fc_equal) parts.push(`(${s} == ${t})`);\n\t\tif (fc_less) parts.push(`(${s} < ${t})`);\n\t\tif (parts.length == 0) parts = ['false'];\n\t\t\n\t\treturn stm(ast.raw_stm(`state.${CpuStateFields.fcr31_cc} = (isNaN(${s}) || isNaN(${t})) ? ${fc_unordererd} : (${parts.join(' | ')})`));\n    }\n\n\t\"c.f.s\"(i: Instruction) { return this._comp(i, 0, 0); }\n\t\"c.un.s\"(i: Instruction) { return this._comp(i, 1, 0); }\n\t\"c.eq.s\"(i: Instruction) { return this._comp(i, 2, 0); }\n\t\"c.ueq.s\"(i: Instruction) { return this._comp(i, 3, 0); }\n\t\"c.olt.s\"(i: Instruction) { return this._comp(i, 4, 0); }\n\t\"c.ult.s\"(i: Instruction) { return this._comp(i, 5, 0); }\n\t\"c.ole.s\"(i: Instruction) { return this._comp(i, 6, 0); }\n\t\"c.ule.s\"(i: Instruction) { return this._comp(i, 7, 0); }\n\n\t\"c.sf.s\"(i: Instruction) { return this._comp(i, 0, 1); }\n\t\"c.ngle.s\"(i: Instruction) { return this._comp(i, 1, 1); }\n\t\"c.seq.s\"(i: Instruction) { return this._comp(i, 2, 1); }\n\t\"c.ngl.s\"(i: Instruction) { return this._comp(i, 3, 1); }\n\t\"c.lt.s\"(i: Instruction) { return this._comp(i, 4, 1); }\n\t\"c.nge.s\"(i: Instruction) { return this._comp(i, 5, 1); }\n\t\"c.le.s\"(i: Instruction) { return this._comp(i, 6, 1); }\n\t\"c.ngt.s\"(i: Instruction) { return this._comp(i, 7, 1); }\n}\n\nexport const enum VCondition {\n\tFL, EQ, LT, LE, TR, NE, GE, GT,\n\tEZ, EN, EI, ES, NZ, NN, NI, NS\n}\n", "import {Memory} from \"../memory\";\nimport {BitUtils} from \"../../global/math\";\nimport {HalfFloat} from \"../../global/utils\";\nimport {InstructionType} from \"./cpu_instructions\";\n\nexport class Instruction {\n    constructor(public PC: number, public IDATA: number) {\n    }\n\n    static fromMemoryAndPC(memory: Memory, PC: number) { return new Instruction(PC, memory.readInt32(PC)); }\n\n    extract(offset: number, length: number) { return BitUtils.extract(this.IDATA, offset, length); }\n    extract_s(offset: number, length: number) { return BitUtils.extractSigned(this.IDATA, offset, length); }\n    insert(offset: number, length: number, value: number) { this.IDATA = BitUtils.insert(this.IDATA, offset, length, value); }\n\n    get rd() { return (this.IDATA >> 11) & 0b11111; } set rd(value: number) { this.insert(11, 5, value); }\n    get rt() { return (this.IDATA >> 16) & 0b11111; } set rt(value: number) { this.insert(16, 5, value); }\n    get rs() { return (this.IDATA >> 21) & 0b11111; } set rs(value: number) { this.insert(21, 5, value); }\n\n    get fd() { return (this.IDATA >> 6) & 0b11111; } set fd(value: number) { this.insert(6, 5, value); }\n    get fs() { return (this.IDATA >> 11) & 0b11111; } set fs(value: number) { this.insert(11, 5, value); }\n    get ft() { return (this.IDATA >> 16) & 0b11111; } set ft(value: number) { this.insert(16, 5, value); }\n\n    get VD() { return (this.IDATA >> 0) & 0b1111111; } set VD(value: number) { this.insert(0, 7, value); }\n    get VS() { return (this.IDATA >> 8) & 0b1111111; } set VS(value: number) { this.insert(8, 7, value); }\n    get VT() { return (this.IDATA >> 16) & 0b1111111; } set VT(value: number) { this.insert(16, 7, value); }\n    get VT5_1() { return this.VT5 | (this.VT1 << 5); } set VT5_1(value: number) { this.VT5 = value; this.VT1 = (value >>> 5); }\n    get IMM14() { return this.extract_s(2, 14); } set IMM14(value: number) { this.insert(2, 14, value); }\n\n    get ONE() { return (this.IDATA >> 7) & 1; } set ONE(value: number) { this.insert(7, 1, value); }\n    get TWO() { return (this.IDATA >> 15) & 1; } set TWO(value: number) { this.insert(15, 1, value); }\n    get ONE_TWO() { return (1 + 1 * this.ONE + 2 * this.TWO); } set ONE_TWO(value: number) { this.ONE = (((value - 1) >>> 0) & 1); this.TWO = (((value - 1) >>> 1) & 1); }\n\n    get IMM8() { return this.extract(16, 8); } set IMM8(value: number) { this.insert(16, 8, value); }\n    get IMM5() { return this.extract(16, 5); } set IMM5(value: number) { this.insert(16, 5, value); }\n    get IMM3() { return this.extract(18, 3); } set IMM3(value: number) { this.insert(18, 3, value); }\n    get IMM7() { return this.extract(0, 7); } set IMM7(value: number) { this.insert(0, 7, value); }\n    get IMM4() { return this.extract(0, 4); } set IMM4(value: number) { this.insert(0, 4, value); }\n    get VT1() { return this.extract(0, 1); } set VT1(value: number) { this.insert(0, 1, value); }\n    get VT2() { return this.extract(0, 2); } set VT2(value: number) { this.insert(0, 2, value); }\n    get VT5() { return this.extract(16, 5); } set VT5(value: number) { this.insert(16, 5, value); }\n    get VT5_2() { return this.VT5 | (this.VT2 << 5); }\n    get IMM_HF() { return HalfFloat.toFloat(this.imm16); }\n\n    get pos() { return this.lsb; } set pos(value: number) { this.lsb = value; }\n    get size_e() { return this.msb + 1; } set size_e(value: number) { this.msb = value - 1; }\n    get size_i() { return this.msb - this.lsb + 1; } set size_i(value: number) { this.msb = this.lsb + value - 1; }\n\n    get lsb() { return (this.IDATA >> 6) & 0b11111; } set lsb(value: number) { this.insert(6, 5, value); }\n    get msb() { return (this.IDATA >> 11) & 0b11111; } set msb(value: number) { this.insert(11, 5, value); }\n    //get c1cr() { return (this.IDATA >> 11) & 0b11111; } set c1cr(value: number) { this.insert(11, 5, value); }\n\n    get vsyscall() { return (this.IDATA >> 6) & 0xFFFFF; } set vsyscall(value: number) { this.insert(6, 20, value); }\n\n    get imm16() { return this.IDATA << 16 >> 16; } set imm16(value: number) { this.insert(0, 16, value); }\n    get u_imm16() { return this.IDATA & 0xFFFF; } set u_imm16(value: number) { this.insert(0, 16, value); }\n    get u_imm26() { return this.IDATA & 0x3FFFFFF; } set u_imm26(value: number) { this.insert(0, 26, value); }\n\n    get jump_bits() { return this.IDATA & 0x3FFFFFF; } set jump_bits(value: number) { this.insert(0, 26, value); }\n    get jump_real() { return (this.jump_bits * 4) >>> 0; } set jump_real(value: number) { this.jump_bits = (value / 4) >>> 0; }\n\n    set branch_address(value: number) { this.imm16 = (value - this.PC - 4) / 4; }\n    set jump_address(value: number) { this.u_imm26 = value / 4; }\n\n    get branch_address() { return this.PC + this.imm16 * 4 + 4; }\n    get jump_address() { return this.u_imm26 * 4; }\n}\n\nexport class DecodedInstruction {\n    constructor(public instruction: Instruction, public type: InstructionType) {\n    }\n\n    get PC() {\n        return this.instruction.PC;\n    }\n\n    get isUnconditional() {\n        switch (this.type.name) {\n            case 'j':\n            case 'b':\n                return true;\n            // @TODO: Check beq rX, rX\n        }\n        return false;\n    }\n\n    get isUnconditionalFixedJump() {\n        return this.type.name == 'j';\n    }\n\n    get targetAddress() {\n        if (this.type.isRegister) return this.PC;\n        if (this.type.isBranch) return this.instruction.branch_address;\n        if (this.type.isJump) return this.instruction.jump_address;\n        return this.PC + 4;\n    }\n}", "import \"../../emu/global\"\n\nimport {addressToHex, sprintf, StringDictionary} from \"../../global/utils\";\nimport {Instructions} from \"./cpu_instructions\";\nimport {Memory} from \"../memory\";\nimport {Instruction} from \"./cpu_instruction\";\nimport {parseIntFormat, xrange} from \"../../global/math\";\n\nclass Labels {\n\tpublic labels: StringDictionary<number> = {};\n}\n\nexport class MipsAssemblerResult {\n\tpublic constructor(public entrypoint:number) {\n\t\t\n\t}\n}\n\nexport class MipsAssembler {\n\tprivate instructions: Instructions = Instructions.instance;\n\n\tconstructor() {\n\t}\n\n\tassembleToMemory(memory: Memory, startPC: number, lines: string[]):MipsAssemblerResult {\n        const labels = new Labels();\n        let entryPoint = startPC;\n        for (let n = 0; n < 2; n++) { // hack to get labels working without patching or extra code\n            let PC = startPC;\n            for (let line of lines) {\n\t\t\t\tswitch (line.substr(0, 1)) {\n\t\t\t\t\tcase '.':\n\t\t\t\t\t\tswitch (line) {\n\t\t\t\t\t\t\tcase '.entrypoint': entryPoint = PC; break;\n\t\t\t\t\t\t\tdefault: throw new Error(`Invalid ${line}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ':':\n\t\t\t\t\t\tlabels.labels[line.substr(1)] = PC;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n                        const instructions = this.assemble(PC, line, labels);\n                        for (let instruction of instructions) {\n\t\t\t\t\t\t\tmemory.writeInt32(PC, instruction.IDATA);\n\t\t\t\t\t\t\tPC += 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new MipsAssemblerResult(entryPoint);\n\t}\n\n\tassemble(PC: number, line: string, labels?:Labels): Instruction[] {\n\t\tif (labels == null) labels = new Labels();\n\t\t//console.log(line);\n\n        let matches = line.match(/^\\s*(\\w+)(.*)$/);\n        if (matches == null) throw new Error(`Invalid assembly line '${line}'`)\n        const instructionName = matches[1];\n        const instructionArguments = matches[2].replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n        switch (instructionName) {\n\t\t\tcase 'nop': return this.assemble(PC, 'sll r0, r0, 0');\n\t\t\tcase 'li':\n                const parts = instructionArguments.split(',');\n                //console.log(parts);\n\t\t\t\treturn this.assemble(PC, `addiu ${parts[0]}, r0, ${parts[1]}`);\n\t\t}\n\n        const instructionType = this.instructions.findByName(instructionName);\n        const instruction = new Instruction(PC, instructionType.vm.value);\n        const types: string[] = [];\n\n        const formatPattern = instructionType.format\n\t\t\t.replace('(', '\\\\(')\n\t\t\t.replace(')', '\\\\)')\n\t\t\t.replace(/(%\\w+)/g, (type) => {\n\t\t\t\ttypes.push(type);\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\t// Register\n\t\t\t\t\tcase '%J': case '%s': case '%d': case '%t': return '([$r]\\\\d+)';\n\t\t\t\t\t// Immediate\n\t\t\t\t\tcase '%i': case '%C': case '%c': case '%a': return '((?:0b|0x|\\\\-)?[0-9A-Fa-f_]+)';\n\t\t\t\t\t// Label\n\t\t\t\t\tcase '%j': case '%O': return '(\\\\w+)';\n\t\t\t\t\tdefault: throw (new Error(\"MipsAssembler.Transform: Unknown type '\" + type + \"'\"));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.replace(/\\s+/g, '\\\\s*')\n\t\t;\n\t\t//console.log(formatPattern);\n        const regex = new RegExp(`^${formatPattern}$`, '');\n\n        //console.log(line);\n\t\t//console.log(formatPattern);\n\n        matches = instructionArguments.match(regex);\n        //console.log(matches);\n\t\t//console.log(types);\n\n\t\tif (matches === null) {\n\t\t\tthrow (`Not matching ${instructionArguments} : ${regex} : ${instructionType.format}`);\n\t\t}\n\n\t\tfor (let n = 0; n < types.length; n++) {\n            const type = types[n];\n            const match = matches[n + 1];\n            //console.log(`${type} = ${match}`);\n\t\t\tthis.update(instruction, type, match, labels);\n\t\t}\n\n\t\t//console.log(instructionType);\n\t\t//console.log(matches);\n\n\t\treturn [instruction];\n\t}\n\n\tprivate decodeRegister(name: string) {\n\t\t//console.log(name);\n\t\tif (name.charAt(0) == '$') return parseInt(name.substr(1));\n\t\tif (name.charAt(0) == 'r') return parseInt(name.substr(1));\n\t\tthrow (`Invalid register \"${name}\"`);\n\t}\n\n\tprivate decodeInteger(str: string) { return parseIntFormat(str) }\n\n\tprivate update(instruction: Instruction, type: string, value: string, labels: Labels) {\n\t\tswitch (type) {\n\t\t\tcase '%J': case '%s': instruction.rs = this.decodeRegister(value); break;\n\t\t\tcase '%d': instruction.rd = this.decodeRegister(value); break;\n\t\t\tcase '%t': instruction.rt = this.decodeRegister(value); break;\n\t\t\tcase '%a': case '%i': instruction.imm16 = this.decodeInteger(value); break;\n\t\t\tcase '%C': instruction.vsyscall = this.decodeInteger(value); break;\n\t\t\tcase '%c': instruction.vsyscall = this.decodeInteger(value); break;\n\t\t\tcase '%O': instruction.branch_address = labels.labels[value]; break;\n\t\t\tcase '%j': instruction.jump_address = labels.labels[value]; break;\n\t\t\tdefault: throw (`MipsAssembler.Update: Unknown type '${type}' with value '${value}'`);\n\t\t}\n\t}\n}\n\nexport class MipsDisassembler {\n\tprivate instructions: Instructions = Instructions.instance;\n\n\tconstructor() {\n\t}\n\n\t// noinspection JSMethodCanBeStatic\n    private encodeRegister(index: number) { return `$${index}`; }\n\n\tdisassemble(instruction: Instruction) {\n\t    if (instruction.IDATA == 0) return 'nop'\n\n        const instructionType = this.instructions.findByData(instruction.IDATA);\n        const args = instructionType.format.replace(/(%\\w+)/g, (type) => {\n\t\t\tswitch (type) {\n                case '%J': case '%s': return this.encodeRegister(instruction.rs);\n\t\t\t\tcase '%d': return this.encodeRegister(instruction.rd);\n\t\t\t\tcase '%t': return this.encodeRegister(instruction.rt);\n                case '%i': return `${instruction.imm16}`;\n                case '%I': return `${addressToHex(instruction.imm16 << 16)}`;\n                case '%j': return `${addressToHex(instruction.jump_real)}`;\n                case '%a': return `${instruction.pos}`;\n\t\t\t\tdefault: return `UNHANDLED[${type}]`\n\t\t\t}\n\t\t});\n\t\treturn `${instructionType.name} ${args}`;\n\t}\n\n\tdisassembleMemory(memory: Memory, PC: number) {\n\t    return this.disassemble(Instruction.fromMemoryAndPC(memory, PC))\n    }\n\n    disassembleMemoryWithAddress(memory: Memory, PC: number) {\n        return sprintf(\"0x%08X[0x%08X]: %s\", PC, memory.readInt32(PC), this.disassembleMemory(memory, PC))\n    }\n\n    disassembleMemoryWithAddressArray(memory: Memory, PC: number, count: number): string[] {\n\t    return xrange(0, count).map(n => this.disassembleMemoryWithAddress(memory, PC + n * 4))\n    }\n\n    dump(memory: Memory, PC: number, count: number, print: ((msg: String) => void) = (it => console.log(it))) {\n\t    for (const line of this.disassembleMemoryWithAddressArray(memory, PC, count)) {\n            print(line)\n        }\n    }\n}\n\n", "export enum AnsiEscapeCodes {\n    RESET = \"\\u001B[0m\",\n    BLACK = \"\\u001B[30m\",\n    RED = \"\\u001B[31m\",\n    GREEN = \"\\u001B[32m\",\n    YELLOW = \"\\u001B[33m\",\n    BLUE = \"\\u001B[34m\",\n    PURPLE = \"\\u001B[35m\",\n    CYAN = \"\\u001B[36m\",\n    WHITE = \"\\u001B[37m\"\n}", "\uFEFFimport \"../../emu/global\"\n\nimport {\n    addressToHex,\n    CpuBreakException, fields, InterruptBreakException,\n    logger,\n    NumberDictionary, ProgramExitException,\n    sprintf,\n    StringDictionary\n} from \"../../global/utils\";\nimport {BitUtils, MathFloat, MathUtils, MathVfpu} from \"../../global/math\";\nimport {compareNumbers} from \"../../global/array\";\nimport {Integer64} from \"../../global/int64\";\nimport {Memory} from \"../memory\";\nimport {ANodeStm, ANodeStmLabel, MipsAstBuilder} from \"./cpu_ast\";\nimport {Instructions} from \"./cpu_instructions\";\nimport {BranchFlagStm, InstructionAst} from \"./cpu_codegen\";\nimport {DecodedInstruction, Instruction} from \"./cpu_instruction\";\nimport {MipsDisassembler} from \"./cpu_assembler\";\nimport {AnsiEscapeCodes} from \"../../util/AnsiEscapeCodes\";\nimport {Float32, Int32, Int64, IType, Ptr, StringzVariable, UInt32} from \"../../global/struct\";\nimport {Stream} from \"../../global/stream\";\n\n//const DEBUG_FUNCGEN = true;\nconst DEBUG_FUNCGEN = false;\n\nconst DEBUG_NATIVEFUNC = false;\n//const DEBUG_NATIVEFUNC = true;\n\nconst BUILD_FUNC_ON_REFERENCED = true;\n//const BUILD_FUNC_ON_REFERENCED = false;\n\nexport class BaseCustomType implements IType<number> {\n    read(stream: Stream): any { return stream.readUInt32LE(); }\n    write(stream: Stream, value: any): void { stream.writeUInt32LE(value); }\n    get length() { return 4; }\n}\n\nexport class MemoryType extends BaseCustomType { }\nexport class ThreadType extends BaseCustomType { }\nexport class BoolType extends BaseCustomType { }\nexport class VoidType extends BaseCustomType { }\nexport class BytesType extends BaseCustomType { }\nexport class CpuStateType extends BaseCustomType { }\nexport class FixedBytesType extends BaseCustomType {\n    constructor(public size: number) {\n        super();\n    }\n}\n\nexport const MemoryTypeType = new MemoryType()\nexport const ThreadTypeType = new ThreadType()\nexport const CpuStateTypeType = new CpuStateType()\nexport const BoolTypeType = new BoolType()\nexport const VoidTypeType = new VoidType()\nexport const BytesTypeType = new BytesType()\n\n\nexport const enum CpuSpecialAddresses {\n\tEXIT_THREAD = 0x01337000,\n    EXIT_INTERRUPT = 0x01337004,\n}\n\nexport interface ICpuExecutable {\n\texecute(state: CpuState): void;\n}\n\nexport interface IInstructionCache {\n\tgetFunction(pc: number): ICpuExecutable;\n}\n\nclass VfpuPrefixBase {\n\tenabled = false;\n\tconstructor(private vfrc: Int32Array, private index: number) { }\n\t_info: number = 0;\n\t_readInfo() { this._info = this.getInfo(); }\n\teat() { this.enabled = false; }\n\tgetInfo() { return this.vfrc[this.index]; }\n\tsetInfo(info: number) {\n\t\tthis.vfrc[this.index] = info;\n\t\tthis.enabled = true;\n\t}\n}\n\nexport interface IEmulatorContext {\n}\n\nexport class NativeFunction {\n\tname: string = '';\n\tnid: number = 0;\n\tfirmwareVersion: number = 0;\n    // @ts-ignore\n\tcall: (context: IEmulatorContext, state: CpuState) => void;\n    // @ts-ignore\n\tnativeCall: Function;\n}\n\nexport class SyscallManager {\n    private calls: NumberDictionary<NativeFunction> = {};\n    private lastId: number = 1;\n\n\tconstructor(public context: IEmulatorContext) {\n    }\n\n    register(nativeFunction: NativeFunction) {\n        return this.registerWithId(this.lastId++, nativeFunction);\n    }\n\n    registerWithId(id: number, nativeFunction: NativeFunction) {\n        this.calls[id] = nativeFunction;\n        return id;\n    }\n\n\tgetName(id: number) {\n        const c = this.calls[id];\n        if (c) return c.name;\n\t\treturn `syscall_${id}`;\n\t}\n\t\n\tgetNativeFunction(id:number) {\n\t\treturn this.calls[id];\n\t}\n\n\tcall(state: CpuState, id: number) {\n        const nativeFunction: NativeFunction = this.calls[id];\n        if (!nativeFunction) throw `Can't call syscall ${this.getName(id)}: ${addressToHex(id)}\"`;\n\t\tif (DEBUG_NATIVEFUNC) {\n\t\t\tconsole.log(`calling syscall ${addressToHex(id)}, ${id}, ${nativeFunction.name} with cpustate:${state.id}`);\n\t\t}\n\n        nativeFunction.call(this.context, state);\n    }\n}\n\n\n\nclass VfpuPrefixRead extends VfpuPrefixBase {\n\t//private getSourceIndex(i: number) { return BitUtils.extract(this._info, 0 + i * 2, 2); }\n\t//private getSourceAbsolute(i: number) { return BitUtils.extractBool(this._info, 8 + i * 1); }\n\t//private getSourceConstant(i: number) { return BitUtils.extractBool(this._info, 12 + i * 1); }\n\t//private getSourceNegate(i: number) { return BitUtils.extractBool(this._info, 16 + i * 1); }\n\n\ttransformValues(input: Int32Array | number[], output: any) {\n\t\tthis._readInfo();\n\t\tconst info = this._info;\n\n\t\tif (!this.enabled) {\n\t\t\tfor (let n = 0; n < input.length; n++) output[n] = input[n];\n\t\t} else {\n\t\t\tfor (let n = 0; n < input.length; n++) {\n\t\t\t\t//const sourceIndex = this.getSourceIndex(n);\n\t\t\t\t//const sourceAbsolute = this.getSourceAbsolute(n);\n\t\t\t\t//const sourceConstant = this.getSourceConstant(n);\n\t\t\t\t//const sourceNegate = this.getSourceNegate(n);\n\n\t\t\t\tconst sourceIndex = (info >> (0 + n * 2)) & 3;\n\t\t\t\tconst sourceAbsolute = (info >> (8 + n * 1)) & 1;\n\t\t\t\tconst sourceConstant = (info >> (12 + n * 1)) & 1;\n\t\t\t\tconst sourceNegate = (info >> (16 + n * 1)) & 1;\n\n\t\t\t\tlet value: number;\n\t\t\t\tif (sourceConstant) {\n\t\t\t\t\tswitch (sourceIndex) {\n\t\t\t\t\t\tcase 0: value = sourceAbsolute ? (3) : (0); break;\n\t\t\t\t\t\tcase 1: value = sourceAbsolute ? (1 / 3) : (1); break;\n\t\t\t\t\t\tcase 2: value = sourceAbsolute ? (1 / 4) : (2); break;\n\t\t\t\t\t\tcase 3: value = sourceAbsolute ? (1 / 6) : (1 / 2); break;\n\t\t\t\t\t\tdefault: throw new Error(\"Invalid operation\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//debugger;\n\t\t\t\t\tvalue = input[sourceIndex];\n\t\t\t\t\tif (sourceAbsolute) value = Math.abs(value);\n\t\t\t\t}\n\n\t\t\t\tif (sourceNegate) value = MathFloat.neg(value);\n\t\t\t\toutput[n] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass VfpuPrefixWrite extends VfpuPrefixBase {\n\t//getDestinationSaturation(i: number) { return (this._info >> (0 + i * 2)) & 3; }\n\t//getDestinationMask(i: number) { return (this._info >> (8 + i * 1)) & 1; }\n\n\tstoreTransformedValues(vfpr: any, indices: number[], values: number[]) {\n\t\tthis._readInfo();\n\t\tconst info = this._info;\n\n\t\tif (!this.enabled) {\n\t\t\tfor (let n = 0; n < indices.length; n++) {\n\t\t\t\tvfpr[indices[n]] = values[n];\n\t\t\t}\n\t\t} else {\n\t\t\t//debugger;\n\t\t\tfor (let n = 0; n < indices.length; n++) {\n\t\t\t\t//const destinationSaturation = this.getDestinationSaturation(n);\n\t\t\t\t//const destinationMask = this.getDestinationMask(n);\n\t\t\t\tconst destinationSaturation = (info >> (0 + n * 2)) & 3;\n\t\t\t\tconst destinationMask = (info >> (8 + n * 1)) & 1;\n\t\t\t\tif (destinationMask) {\n\t\t\t\t\t// Masked. No write value.\n\t\t\t\t} else {\n                    let value = values[n];\n\t\t\t\t\tswitch (destinationSaturation) {\n\t\t\t\t\t\tcase 1: value = MathFloat.sat0(value); break;\n\t\t\t\t\t\tcase 3: value = MathFloat.sat1(value); break;\n\t\t\t\t\t\tdefault: break;\n\t\t\t\t\t}\n\t\t\t\t\tvfpr[indices[n]] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const enum VFPU_CTRL {\n\tSPREFIX, TPREFIX, DPREFIX, CC, INF4, RSV5, RSV6, REV,\n\tRCX0, RCX1, RCX2, RCX3, RCX4, RCX5, RCX6, RCX7, MAX,\n}\n\nexport const enum VCondition {\n\tFL, EQ, LT, LE, TR, NE, GE, GT,\n\tEZ, EN, EI, ES, NZ, NN, NI, NS\n}\n\nexport class CpuConfig {\n    public constructor(public interpreted: boolean = false) {\n    //public constructor(public interpreted: boolean = true) {\n    }\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport class CpuState extends Instruction {\n\tstatic lastId:number = 0;\n\tid = CpuState.lastId++;\n\n\tget interpreted() { return this.config.interpreted }\n\n    constructor(public memory: Memory, public syscallManager: SyscallManager, public config: CpuConfig) {\n        super(0, 0)\n\t\tthis.icache = new InstructionCache(memory, syscallManager);\n\t\tthis.fcr0 = 0x00003351;\n\t\tthis.fcr31 = 0x00000e00;\n        this.vfpr.fill(NaN)\n\t}\n\n\tclone() {\n        const that = new CpuState(this.memory, this.syscallManager, this.config);\n        that.icache = this.icache;\n\t\tthat.copyRegistersFrom(this);\n\t\treturn that;\n\t}\n\n\tthrowInterruptBreakException(): never {\n\t    throw new InterruptBreakException()\n    }\n\n    throwCpuBreakException(): never {\n        this.thread.stop('CpuSpecialAddresses.EXIT_THREAD');\n        this.throwEndCycles()\n    }\n\n    throwEndCycles(): never {\n        throw new CpuBreakException()\n    }\n\n    icache: InstructionCache;\n\n\tinsideInterrupt: boolean = false;\n\tgpr_Buffer = new ArrayBuffer(32 * 4);\n\tgpr_f = new Float32Array(this.gpr_Buffer);\n\n    jumpCall: InvalidatableCpuFunction | null = null\n\n\ttemp = new Array(16);\n\n\tfpr_Buffer = new ArrayBuffer(32 * 4);\n\tfpr = new Float32Array(this.fpr_Buffer);\n\tfpr_i = new Int32Array(this.fpr_Buffer);\n\t//fpr: Float32Array = new Float32Array(32);\n\n\tvfpr_Buffer = new ArrayBuffer(128 * 4);\n\tvfpr: Float32Array = new Float32Array(this.vfpr_Buffer);\n\tvfpr_i: Int32Array = new Int32Array(this.vfpr_Buffer);\n\tvfprc: Int32Array = new Int32Array([0, 0, 0, 0xFF, 0, 0, 0, 0, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000, 0x3F800000]);\n\tsetVfrCc(index: number, value: boolean) {\n\t\tif (value) {\n\t\t\tthis.vfprc[VFPU_CTRL.CC] |= (1 << index);\n\t\t} else {\n\t\t\tthis.vfprc[VFPU_CTRL.CC] &= ~(1 << index);\n\t\t}\n\t}\n\n\tvrnds() { }\n\tvrndi() {\n        let v = 0;\n        for (let n = 0; n < 4; n++) {\n\t\t\tv <<= 8;\n\t\t\tv |= (Math.round(Math.random() * 255) & 0xFF);\n\t\t}\n\t\treturn v;\n\t}\n\tvrndf1() { return Math.random() * 2; }\n\tvrndf2() { return Math.random() * 4; }\n\n\tgetVfrCc(index: number) {\n\t\treturn ((this.vfprc[VFPU_CTRL.CC] & (1 << index)) != 0);\n\t}\n\n\tvcmovtf(register: number, _true: boolean, vdRegs: number[], vsRegs: number[]) {\n        const vectorSize = vdRegs.length;\n        this.loadVs_prefixed(vsRegs.map(reg => this.vfpr[reg]));\n\t\tthis.loadVdRegs(vdRegs);\n\n        const compare = _true ? 1 : 0;\n        const cc = this.vfprc[VFPU_CTRL.CC];\n\n        if (register < 6) {\n\t\t\tif (((cc >> register) & 1) == compare) {\n\t\t\t\tfor (let n = 0; n < vectorSize; n++) {\n\t\t\t\t\tthis.vector_vd[n] = this.vector_vs[n];\n\t\t\t\t}\n\t\t\t}\n\t\t} if (register == 6) {\n\t\t\tfor (let n = 0; n < vectorSize; n++) {\n\t\t\t\tif (((cc >> n) & 1) == compare) {\n\t\t\t\t\tthis.vector_vd[n] = this.vector_vs[n];\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t}\n\t\tthis.storeVdRegsWithPrefix(vdRegs);\n\t}\n\n    storeFloats(address: number, values: number[]) {\n        for (let n = 0; n < values.length; n++) {\n            this.memory.writeFloat32(address + n * 4, values[n]);\n        }\n    }\n\n\tprivate vpfxs = new VfpuPrefixRead(this.vfprc, VFPU_CTRL.SPREFIX);\n\tprivate vpfxt = new VfpuPrefixRead(this.vfprc, VFPU_CTRL.TPREFIX);\n\tprivate vpfxd = new VfpuPrefixWrite(this.vfprc, VFPU_CTRL.DPREFIX);\n\n\tsetVpfxt(value: number) { this.vpfxt.setInfo(value); }\n\tsetVpfxs(value: number) { this.vpfxs.setInfo(value); }\n\tsetVpfxd(value: number) { this.vpfxd.setInfo(value); }\n\n\tvector_vs = [0, 0, 0, 0];\n\tvector_vt = [0, 0, 0, 0];\n\tvector_vd = [0, 0, 0, 0];\n\n\tget vfpumatrix0() { return this.getVfpumatrix(0); }\n\tget vfpumatrix1() { return this.getVfpumatrix(1); }\n\tget vfpumatrix2() { return this.getVfpumatrix(2); }\n\tget vfpumatrix3() { return this.getVfpumatrix(3); }\n\tget vfpumatrix4() { return this.getVfpumatrix(4); }\n\tget vfpumatrix5() { return this.getVfpumatrix(5); }\n\tget vfpumatrix6() { return this.getVfpumatrix(6); }\n\tget vfpumatrix7() { return this.getVfpumatrix(7); }\n\n\teatPrefixes() {\n\t\tthis.vpfxd.eat();\n\t\tthis.vpfxt.eat();\n\t\tthis.vpfxs.eat();\n\t}\n\n\tgetVfpumatrix(index: number) {\n        const values: number[] = [];\n        for (let r = 0; r < 4; r++) {\n\t\t\tfor (let c = 0; c < 4; c++) {\n\t\t\t\tvalues.push(this.vfpr[r * 32 + index * 4 + c]);\n\t\t\t}\n\t\t}\n\t\treturn values;\n\t}\n\n\tloadVdRegs(regs: number[]) {\n\t\tfor (let n = 0; n < regs.length; n++) {\n\t\t\tthis.vector_vd[n] = this.vfpr[regs[n]];\n\t\t}\n\t}\n\n\tstoreVdRegsWithPrefix(regs: number[]) {\n\t\tthis.vpfxd.storeTransformedValues(this.vfpr, regs, this.vector_vd);\n\t\tthis.vpfxd.eat();\n\t\tthis.storeVdRegs(regs);\n\t}\n\n\tstoreVdRegsWithPrefix1(regs: number[]) {\n\t\tthis.vpfxd.storeTransformedValues(this.vfpr, regs, this.vector_vd);\n\t\tthis.vpfxd.eat();\n\t\tthis.storeVdRegs(regs);\n\t}\n\n\tstoreVdRegs(regs: number[]) {\n\t\tfor (let n = 0; n < regs.length; n++) this.vfpr[regs[n]] = this.vector_vd[n];\n\t}\n\n\tloadVs_prefixed(values: number[]) {\n\t\tthis.vpfxs.transformValues(values, this.vector_vs);\n\t\tthis.vpfxs.eat();\n\t}\n\n\tloadVt_prefixed(values: number[]) {\n\t\tthis.vpfxt.transformValues(values, this.vector_vt);\n\t\tthis.vpfxt.eat();\n\t}\n\n\tstoreVd_prefixed(indices: number[], values: number[]) {\n\t\tthis.vpfxd.storeTransformedValues(this.vfpr, indices, values);\n\t\tthis.vpfxd.eat();\n\t}\n\n\tstoreVd_prefixed_i(indices: number[], values: number[]) {\n\t\tthis.vpfxd.storeTransformedValues(this.vfpr_i, indices, values);\n\t\tthis.vpfxd.eat();\n\t}\n\n    vqmul0(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return MathVfpu.vqmul0(s0, s1, s2, s3, t0, t1, t2, t3); }\n    vqmul1(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return MathVfpu.vqmul1(s0, s1, s2, s3, t0, t1, t2, t3); }\n    vqmul2(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return MathVfpu.vqmul2(s0, s1, s2, s3, t0, t1, t2, t3); }\n    vqmul3(s0:number, s1:number, s2:number, s3:number, t0:number, t1:number, t2:number, t3:number) { return MathVfpu.vqmul3(s0, s1, s2, s3, t0, t1, t2, t3); }\n    vi2uc(x: number, y: number, z: number, w: number) { return MathVfpu.vi2uc(x, y, z, w) }\n    vc2i(index: number, value: number) { return MathVfpu.vc2i(index, value) }\n    vuc2i(index: number, value: number) { return MathVfpu.vuc2i(index, value) }\n    vs2i(index: number, value: number) { return MathVfpu.vs2i(index, value) }\n    vi2f(value: number, count: number) { return MathVfpu.vi2f(value, count) }\n    vf2id(value: number, count: number) { return MathVfpu.vf2id(value, count) }\n    vf2in(value: number, count: number) { return MathVfpu.vf2in(value, count) }\n    vf2iu(value: number, count: number) { return MathVfpu.vf2iu(value, count) }\n    vf2iz(value: number, count: number) { return MathVfpu.vf2iz(value, count) }\n    vf2h() { debugger; return 0; }\n    vh2f() { debugger; return 0; }\n\n\t_vt4444_step(i0: number, i1: number) {\n        let o = 0;\n        o |= ((i0 >> 4) & 15) << 0;\n\t\to |= ((i0 >> 12) & 15) << 4;\n\t\to |= ((i0 >> 20) & 15) << 8;\n\t\to |= ((i0 >> 28) & 15) << 12;\n\t\to |= ((i1 >> 4) & 15) << 16;\n\t\to |= ((i1 >> 12) & 15) << 20;\n\t\to |= ((i1 >> 20) & 15) << 24;\n\t\to |= ((i1 >> 28) & 15) << 28;\n\t\treturn o;\n\t}\n\n\t_vt5551_step(i0: number, i1: number) {\n        let o = 0;\n        o |= ((i0 >> 3) & 31) << 0;\n\t\to |= ((i0 >> 11) & 31) << 5;\n\t\to |= ((i0 >> 19) & 31) << 10;\n\t\to |= ((i0 >> 31) & 1) << 15;\n\t\to |= ((i1 >> 3) & 31) << 16;\n\t\to |= ((i1 >> 11) & 31) << 21;\n\t\to |= ((i1 >> 19) & 31) << 26;\n\t\to |= ((i1 >> 31) & 1) << 31;\n\t\treturn o;\n\t}\n\n\t_vt5650_step(i0: number, i1: number) {\n        let o = 0;\n        o |= ((i0 >> 3) & 31) << 0;\n\t\to |= ((i0 >> 10) & 63) << 5;\n\t\to |= ((i0 >> 19) & 31) << 11;\n\t\to |= ((i1 >> 3) & 31) << 16;\n\t\to |= ((i1 >> 10) & 63) << 21;\n\t\to |= ((i1 >> 19) & 31) << 27;\n\t\treturn o;\n\t}\n\n\tsvl_q(address: number, r: number[]) {\n        const k = (3 - ((address >>> 2) & 3));\n        address &= ~0xF;\n\t\tfor (let n = k; n < 4; n++, address += 4) this.memory.sw(address, this.vfpr_i[r[n]]);\n\t}\n\n\tsvr_q(address: number, r: number[]) {\n        const k = (4 - ((address >>> 2) & 3));\n        for (let n = 0; n < k; n++, address += 4) this.memory.sw(address, this.vfpr_i[r[n]]);\n\t}\n\n\tlvl_q(address: number, r: number[]) {\n        const k = (3 - ((address >>> 2) & 3));\n        address &= ~0xF;\n\t\tfor (let n = k; n < 4; n++, address += 4) this.vfpr_i[r[n]] = this.memory.lw(address);\n\t}\n\n\tlvr_q(address: number, r: number[]) {\n        const k = (4 - ((address >>> 2) & 3));\n        for (let n = 0; n < k; n++, address += 4) this.vfpr_i[r[n]] = this.memory.lw(address);\n\t}\n\n\tvfpuStore(indices: number[], values: number[]) { for (let n = 0; n < indices.length; n++) this.vfpr[indices[n]] = values[n]; }\n\tvfpuStore_i(indices: number[], values: number[]) { for (let n = 0; n < indices.length; n++) this.vfpr_i[indices[n]] = values[n]; }\n\n\tvfpuSetMatrix(m: number, values: number[]) {\n\t\t// @TODO\n\t\tthis.vfpr[0] = 0;\n\t\tthrow new Error(\"Not implemented vfpuSetMatrix!\");\n\t}\n\t\n    vcmp(cond: VCondition, vsValues: number[], vtValues: number[]) {\n        const vectorSize = vsValues.length;\n        this.loadVs_prefixed(vsValues);\n        this.loadVt_prefixed(vtValues);\n        const s = this.vector_vs;\n        const t = this.vector_vt;\n\n        let cc = 0;\n        let or_val = 0;\n        let and_val = 1;\n        let affected_bits = (1 << 4) | (1 << 5);  // 4 and 5\n\n        for (let i = 0; i < vectorSize; i++) {\n            let c = false;\n            switch (cond) {\n                case VCondition.FL: c = false; break;\n                case VCondition.EQ: c = s[i] == t[i]; break;\n                case VCondition.LT: c = s[i] < t[i]; break;\n                case VCondition.LE: c = s[i] <= t[i]; break;\n\n                case VCondition.TR: c = true; break;\n                case VCondition.NE: c = s[i] != t[i]; break;\n                case VCondition.GE: c = s[i] >= t[i]; break;\n                case VCondition.GT: c = s[i] > t[i]; break;\n\n                //case VCondition.EZ: c = s[i] === 0.0 || s[i] === -0.0; break;\n                case VCondition.EZ: c = s[i] === 0.0; break;\n                case VCondition.EN: c = MathFloat.isnan(s[i]); break;\n                case VCondition.EI: c = MathFloat.isinf(s[i]); break;\n                case VCondition.ES: c = MathFloat.isnanorinf(s[i]); break;   // Tekken Dark Resurrection\n                     \n                case VCondition.NZ: c = s[i] != 0; break;\n                case VCondition.NN: c = !MathFloat.isnan(s[i]); break;\n                case VCondition.NI: c = !MathFloat.isinf(s[i]); break;\n                case VCondition.NS: c = !(MathFloat.isnanorinf(s[i])); break;   // How about t[i] ?    \n            }\n            const c_i = (c ? 1 : 0);\n            cc |= (c_i << i);\n            or_val |= c_i;\n            and_val &= c_i;\n            affected_bits |= 1 << i;\n        }\n\n        this.vfprc[VFPU_CTRL.CC] = (this.vfprc[VFPU_CTRL.CC] & ~affected_bits) | ((cc | (or_val << 4) | (and_val << 5)) & affected_bits);\n        this.eatPrefixes();\n    }\n\n    nPC: number = 4;\n\tPC: number = 0;\n\tIC: number = 0;\n\tLO: number = 0;\n\tHI: number = 0;\n\n\tthread: any = null;\n\n\tsetPC(pc: number) {\n\t    this.PC = pc\n        this.nPC = pc + 4\n    }\n\n    get RD(): number { return this.getGPR(this.rd) }\n    set RD(value: number) { this.setGPR(this.rd, value) }\n    get RS(): number { return this.getGPR(this.rs) }\n    set RS(value: number) { this.setGPR(this.rs, value) }\n    get RT(): number { return this.getGPR(this.rt) }\n    set RT(value: number) { this.setGPR(this.rt, value) }\n\n    get FD(): number { return this.fpr[this.fd] }\n    set FD(value: number) { this.fpr[this.fd] = value }\n    get FS(): number { return this.fpr[this.fs] }\n    set FS(value: number) { this.fpr[this.fs] = value }\n    get FT(): number { return this.fpr[this.ft] }\n    set FT(value: number) { this.fpr[this.ft] = value }\n\n    get FD_I(): number { return this.fpr_i[this.fd] }\n    set FD_I(value: number) { this.fpr_i[this.fd] = value }\n    get FS_I(): number { return this.fpr_i[this.fs] }\n    set FS_I(value: number) { this.fpr_i[this.fs] = value }\n    get FT_I(): number { return this.fpr_i[this.ft] }\n    set FT_I(value: number) { this.fpr_i[this.ft] = value }\n\n    get RS_IMM16() { return this.RS + this.imm16 }\n\n    advance_pc(offset: number = 4) {\n\t    this.jump_pc(this.nPC + offset)\n    }\n\n    dump_asm(address: number, count: number) {\n        const disassembler = new MipsDisassembler()\n        for (let n = 0; n < count; n++) {\n            console.error(disassembler.disassembleMemoryWithAddress(this.memory, address + n * 4))\n        }\n    }\n\n    jump_pc(address: number) {\n\t    //const oldPC = this.PC\n        this.PC = this.nPC\n        this.nPC = address\n        //if (address % 4 != 0) {\n        //    try {\n        //        const NLINES = 4\n        //        this.dump_asm(oldPC - NLINES * 4, NLINES)\n        //    } catch (e) {\n        //        console.error(e)\n        //    }\n        //    throw new Error(sprintf(`ERROR[oldPc=0x%08X]. Jumping to invalid new address: 0x%08X`, oldPC, address))\n        //}\n    }\n\n    preserveRegisters(callback: () => void) {\n        const temp = this.clone()\n\t\ttry {\n            callback();\n        } finally {\n            this.copyRegistersFrom(temp);\n        }\n\t}\n\n\tcopyRegistersFrom(other: CpuState) {\n        this.nPC = other.nPC;\n\t\tthis.PC = other.PC;\n\t\tthis.IC = other.IC;\n\t\tthis.LO = other.LO;\n\t\tthis.HI = other.HI;\n\t\tthis.insideInterrupt = other.insideInterrupt;\n\t\tthis.gpr.set(other.gpr)\n        this.fpr.set(other.fpr)\n        this.vfpr.set(other.vfpr)\n        this.vfprc.set(other.vfprc)\n\t\t//for (let n = 0; n < 32; n++) this.setGPR(n, other.getGPR(n));\n        //for (let n = 0; n < 32; n++) this.fpr[n] = other.fpr[n];\n\t\t//for (let n = 0; n < 128; n++) this.vfpr[n] = other.vfpr[n];\n\t\t//for (let n = 0; n < 8; n++) this.vfprc[n] = other.vfprc[n];\n\t}\n\n\tprivate gpr = new Int32Array(this.gpr_Buffer);\n\n\tsetGPR(n: number, value: number) {\n\t\tif (n != 0) this.gpr[n] = value;\n\t\t//if (n == 31) {\n        //    //this.dump_asm(this.PC - 4, 2)\n\t\t//    //console.warn(sprintf(\"SET RA=0x%08X\", value))\n        //    //if (value == 0x0FFFFFFF || value == 0) throw new Error(\"RA=???\")\n        //}\n    }\n\n\tgetGPR(n: number) {\n\t\treturn this.gpr[n];\n\t}\n\n\tstatic GPR_access(base: string | null, n: number) {\n\t\tif (base == null) return `gpr[${n}]`;\n\t\treturn base + `.gpr[${n}]`;\n\t}\n\n\tstatic GPR_require_castToInt() {\n\t\treturn false;\n\t}\n\n\t/*\n\tgpr1 = 0;\n\tgpr2 = 0;\n\tgpr3 = 0;\n\tgpr4 = 0;\n\tgpr5 = 0;\n\tgpr6 = 0;\n\tgpr7 = 0;\n\tgpr8 = 0;\n\tgpr9 = 0;\n\tgpr10 = 0;\n\tgpr11 = 0;\n\tgpr12 = 0;\n\tgpr13 = 0;\n\tgpr14 = 0;\n\tgpr15 = 0;\n\tgpr16 = 0;\n\tgpr17 = 0;\n\tgpr18 = 0;\n\tgpr19 = 0;\n\tgpr20 = 0;\n\tgpr21 = 0;\n\tgpr22 = 0;\n\tgpr23 = 0;\n\tgpr24 = 0;\n\tgpr25 = 0;\n\tgpr26 = 0;\n\tgpr27 = 0;\n\tgpr28 = 0;\n\tgpr29 = 0;\n\tgpr30 = 0;\n\tgpr31 = 0;\n\n\tsetGPR(n: number, value: number) {\n\t\tswitch (n) {\n\t\t\tcase 0: return;\n\t\t\tcase 1: this.gpr1 = value; return;\n\t\t\tcase 2: this.gpr2 = value; return;\n\t\t\tcase 3: this.gpr3 = value; return;\n\t\t\tcase 4: this.gpr4 = value; return;\n\t\t\tcase 5: this.gpr5 = value; return;\n\t\t\tcase 6: this.gpr6 = value; return;\n\t\t\tcase 7: this.gpr7 = value; return;\n\t\t\tcase 8: this.gpr8 = value; return;\n\t\t\tcase 9: this.gpr9 = value; return;\n\t\t\tcase 10: this.gpr10 = value; return;\n\t\t\tcase 11: this.gpr11 = value; return;\n\t\t\tcase 12: this.gpr12 = value; return;\n\t\t\tcase 13: this.gpr13 = value; return;\n\t\t\tcase 14: this.gpr14 = value; return;\n\t\t\tcase 15: this.gpr15 = value; return;\n\t\t\tcase 16: this.gpr16 = value; return;\n\t\t\tcase 17: this.gpr17 = value; return;\n\t\t\tcase 18: this.gpr18 = value; return;\n\t\t\tcase 19: this.gpr19 = value; return;\n\t\t\tcase 20: this.gpr20 = value; return;\n\t\t\tcase 21: this.gpr21 = value; return;\n\t\t\tcase 22: this.gpr22 = value; return;\n\t\t\tcase 23: this.gpr23 = value; return;\n\t\t\tcase 24: this.gpr24 = value; return;\n\t\t\tcase 25: this.gpr25 = value; return;\n\t\t\tcase 26: this.gpr26 = value; return;\n\t\t\tcase 27: this.gpr27 = value; return;\n\t\t\tcase 28: this.gpr28 = value; return;\n\t\t\tcase 29: this.gpr29 = value; return;\n\t\t\tcase 30: this.gpr30 = value; return;\n\t\t\tcase 31: this.gpr31 = value; return;\n\t\t}\n\t\treturn;\n\t}\n\n\tgetGPR(n: number) {\n\t\tswitch (n) {\n\t\t\tcase 0: return 0;\n\t\t\tcase 1: return this.gpr1;\n\t\t\tcase 2: return this.gpr2;\n\t\t\tcase 3: return this.gpr3;\n\t\t\tcase 4: return this.gpr4;\n\t\t\tcase 5: return this.gpr5;\n\t\t\tcase 6: return this.gpr6;\n\t\t\tcase 7: return this.gpr7;\n\t\t\tcase 8: return this.gpr8;\n\t\t\tcase 9: return this.gpr9;\n\t\t\tcase 10: return this.gpr10;\n\t\t\tcase 11: return this.gpr11;\n\t\t\tcase 12: return this.gpr12;\n\t\t\tcase 13: return this.gpr13;\n\t\t\tcase 14: return this.gpr14;\n\t\t\tcase 15: return this.gpr15;\n\t\t\tcase 16: return this.gpr16;\n\t\t\tcase 17: return this.gpr17;\n\t\t\tcase 18: return this.gpr18;\n\t\t\tcase 19: return this.gpr19;\n\t\t\tcase 20: return this.gpr20;\n\t\t\tcase 21: return this.gpr21;\n\t\t\tcase 22: return this.gpr22;\n\t\t\tcase 23: return this.gpr23;\n\t\t\tcase 24: return this.gpr24;\n\t\t\tcase 25: return this.gpr25;\n\t\t\tcase 26: return this.gpr26;\n\t\t\tcase 27: return this.gpr27;\n\t\t\tcase 28: return this.gpr28;\n\t\t\tcase 29: return this.gpr29;\n\t\t\tcase 30: return this.gpr30;\n\t\t\tcase 31: return this.gpr31;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tstatic GPR_access(base: string, n: number) {\n\t\t//if (base == null) return `gpr[${n}]`;\n\t\t//return base + `.gpr[${n}]`;\n\t\tif (base == null) return `gpr${n}`;\n\t\treturn `${base}.gpr${n}`;\n\t}\n\n\tstatic GPR_require_castToInt() {\n\t\treturn true;\n\t}\n\t*/\n\n\tget V0(): number { return this.getGPR(2); } set V0(value: number) { this.setGPR(2, value); }\n\tget V1(): number { return this.getGPR(3); } set V1(value: number) { this.setGPR(3, value); }\n\tget K0(): number { return this.getGPR(26); } set K0(value: number) { this.setGPR(26, value); }\n\tget GP(): number { return this.getGPR(28); } set GP(value: number) { this.setGPR(28, value); }\n\tget SP(): number { return this.getGPR(29); } set SP(value: number) { this.setGPR(29, value); }\n\tget FP(): number { return this.getGPR(30); } set FP(value: number) { this.setGPR(30, value); }\n\tget RA(): number { return this.getGPR(31); } set RA(value: number) { this.setGPR(31, value); }\n\tgetRA(): number { return this.getGPR(31); } setRA(value: number) { this.setGPR(31, value); }\n\n\tprivate callstack: number[] = [];\n\n\tcallstackPush(PC: number) {\n\t\t//this.callstack.push(PC);\n\t}\n\n\tcallstackPop() {\n\t\t//this.callstack.pop();\n\t}\n\n\tprintCallstack(symbolLookup: any = null) {\n\t\tthis.getCallstack().forEach((PC) => {\n            let line = addressToHex(PC);\n            if (symbolLookup) {\n\t\t\t\tline += ` : ${symbolLookup.getSymbolAt(PC)}`;\n\t\t\t}\n\t\t\tconsole.log(line);\n\t\t});\n\t}\n\n\tgetCallstack() {\n\t\treturn this.callstack.slice(0);\n\t}\n\n\tfcr31_rm: number = 0;\n\tfcr31_2_21: number = 0;\n\tfcr31_25_7: number = 0;\n\tfcr31_cc: boolean = false;\n\tfcr31_fs: boolean = false;\n\tfcr0 = 0x00003351;\n\n\t_trace_state() {\n\t\tconsole.info(this);\n\t\tthrow ('_trace_state');\n\t}\n\n\tget fcr31() {\n        let value = 0;\n        value = BitUtils.insert(value, 0, 2, this.fcr31_rm);\n\t\tvalue = BitUtils.insert(value, 2, 21, this.fcr31_2_21);\n\t\tvalue = BitUtils.insert(value, 23, 1, this.fcr31_cc ? 1 : 0);\n\t\tvalue = BitUtils.insert(value, 24, 1, this.fcr31_fs ? 1 : 0);\n\t\tvalue = BitUtils.insert(value, 25, 7, this.fcr31_25_7);\n\t\treturn value;\n\t}\n\n\tset fcr31(value: number) {\n\t\tthis.fcr31_rm = BitUtils.extract(value, 0, 2);\n\t\tthis.fcr31_2_21 = BitUtils.extract(value, 2, 21);\n\t\tthis.fcr31_cc = (BitUtils.extract(value, 23, 1) != 0);\n\t\tthis.fcr31_fs = (BitUtils.extract(value, 24, 1) != 0);\n\t\tthis.fcr31_25_7 = BitUtils.extract(value, 25, 7);\n\t}\n\n\tget fcr0_rev() { return BitUtils.extract(this.fcr0, 0, 8); }\n\tget fcr0_imp() { return BitUtils.extract(this.fcr0, 8, 24); }\n\n\t_cfc1_impl(d: number, t: number) {\n\t\tswitch (d) {\n\t\t\tcase 0: this.setGPR(t, this.fcr0); break;\n\t\t\tcase 31: this.setGPR(t, this.fcr31); break;\n\t\t\tdefault: this.setGPR(t, 0); break;\n\t\t}\n\t}\n\n\t_ctc1_impl(d: number, t: number) {\n\t\tswitch (d) {\n\t\t\tcase 31: this.fcr31 = t; break;\n\t\t}\n\t}\n\n\t_comp_impl(s: number, t: number, fc_unordererd: boolean, fc_equal: boolean, fc_less: boolean, fc_inv_qnan: boolean) {\n\n\t\tif (isNaN(s) || isNaN(t)) {\n\t\t\tthis.fcr31_cc = fc_unordererd;\n\t\t}\n\t\telse {\n\t\t\t//bool cc = false;\n\t\t\t//if (fc_equal) cc = cc || (s == t);\n\t\t\t//if (fc_less) cc = cc || (s < t);\n\t\t\t//return cc;\n            const equal = (fc_equal) && (s == t);\n            const less = (fc_less) && (s < t);\n\n            this.fcr31_cc = (less || equal);\n\t\t}\n\t}\n\n\t_cvt_w_s_impl(FS: number) {\n\t\t//Console.WriteLine(\"_cvt_w_s_impl: {0}\", CpuThreadState.FPR[FS]);\n\t\tswitch (this.fcr31_rm) {\n\t\t\tcase 0: return MathFloat.rint(FS); // rint: round nearest\n\t\t\tcase 1: return MathFloat.cast(FS); // round to zero\n\t\t\tcase 2: return MathFloat.ceil(FS); // round up (ceil)\n\t\t\tcase 3: return MathFloat.floor(FS); // round down (floor)\n\t\t}\n\n\t\tthrow (\"RM has an invalid value!!\");\n\t}\n\n\tcache(rs: number, type: number, offset: number) {\n\t\t//if (DebugOnce('state.cache', 100)) console.warn(sprintf('cache opcode! %08X+%d, type: %d', rs, offset, type));\n\t}\n\tsyscall(id: number) {\n\t\tthis.syscallManager.call(this, id);\n\t\tthis.checkCyclesSyscall(id);\n\t}\n\n\tmin(a: number, b: number) { return ((a | 0) < (b | 0)) ? a : b; }\n\tmax(a: number, b: number) { return ((a | 0) > (b | 0)) ? a : b; }\n\n\tslt(a: number, b: number) { return ((a | 0) < (b | 0)) ? 1 : 0; }\n\tsltu(a: number, b: number) { return ((a >>> 0) < (b >>> 0)) ? 1 : 0; }\n\n\tdiv(rs: number, rt: number) {\n\t\trs |= 0; // signed\n\t\trt |= 0; // signed\n\t\tthis.LO = (rs / rt) | 0;\n\t\tthis.HI = (rs % rt) | 0;\n\t}\n\n\tdivu(rs: number, rt: number) {\n\t\trs >>>= 0; // unsigned\n\t\trt >>>= 0; // unsigned\n\t\tthis.LO = (rs / rt) | 0;\n\t\tthis.HI = (rs % rt) | 0;\n\t}\n\n\tprivate static _mult_temp = new Int32Array(2);\n\n\tmult(rs: number, rt: number) {\n\t\tMath.imul32_64(rs, rt, CpuState._mult_temp);\n\t\tthis.LO = CpuState._mult_temp[0];\n\t\tthis.HI = CpuState._mult_temp[1];\n\t}\n\n\tmadd(rs: number, rt: number) {\n        const a64 = Integer64.fromInt(rs);\n        const b64 = Integer64.fromInt(rt);\n        const result = Integer64.fromBits(this.LO, this.HI).add(a64.multiply(b64));\n        this.HI = result.high;\n\t\tthis.LO = result.low;\n\t}\n\n\tmsub(rs: number, rt: number) {\n        const a64 = Integer64.fromInt(rs);\n        const b64 = Integer64.fromInt(rt);\n        const result = Integer64.fromBits(this.LO, this.HI).sub(a64.multiply(b64));\n        this.HI = result.high;\n\t\tthis.LO = result.low;\n\t}\n\n\tmultu(rs: number, rt: number) {\n        const info = Math.umul32_64(rs, rt, CpuState._mult_temp);\n        this.LO = info[0];\n\t\tthis.HI = info[1];\n\t}\n\n\tmaddu(rs: number, rt: number) {\n        const a64 = Integer64.fromUnsignedInt(rs);\n        const b64 = Integer64.fromUnsignedInt(rt);\n        const result = Integer64.fromBits(this.LO, this.HI).add(a64.multiply(b64));\n        this.HI = result.high;\n\t\tthis.LO = result.low;\n\t}\n\n\tmsubu(rs: number, rt: number) {\n        const a64 = Integer64.fromUnsignedInt(rs);\n        const b64 = Integer64.fromUnsignedInt(rt);\n        const result = Integer64.fromBits(this.LO, this.HI).sub(a64.multiply(b64));\n        this.HI = result.high;\n\t\tthis.LO = result.low;\n\t}\n\n\tgetFunction(pc: number): InvalidatableCpuFunction {\n\t\treturn this.icache.getFunction(pc, 0);\n\t}\n\n\t//executeAtPC() {\n\t//\tthis.startThreadStep();\n    //    while (true) {\n    //        if (this.PC == CpuSpecialAddresses.EXIT_INTERRUPT) break;\n    //        this.getFunction(this.PC).execute(this);\n    //    }\n\t//}\n\t//executeAtPCAsync() {\n\t//\tthis.startThreadStep();\n\t//\ttry {\n\t//\t\tthis.getFunction(this.PC).execute(this);\n\t//\t} catch (e) {\n\t//\t\tif (!CpuBreakException.is(e)) throw e;\n\t//\t}\n\t//}\n\n\tbreak() {\n\t    this.throwEndCycles()\n\t}\n\t\n\tprivate cycles: number = 0;\n\tprivate cycles2: number = 0;\n\tprivate syscallCount: number = 0;\n\tprivate lastSyscallCalled: string = '';\n\tstartThreadStep() {\n\t\t//this.time = performance.now();\n\t\tthis.cycles = 0;\n\t\tthis.cycles2 = 0;\n\t\tthis.syscallCount = 0;\n\t\tthis.lastSyscallCalled = '';\n\t}\n\t\n\tcheckCycles(cycles: number) {\n\t\t/*\n\t\tthis.cycles += cycles;\n\t\tif (this.cycles >= 1000000) {\n\t\t\tconsole.info('syscallCount:', this.syscallCount);\n\t\t\tconsole.info('last syscall called:', this.lastSyscallCalled);\n\t\t\tthis.startThreadStep();\n\t\t\tdebugger;\n\t\t\t//if (!this.insideInterrupt) state.throwEndCycles();\n\t\t}\n\t\t*/\n\t}\n\t\n\tcheckCyclesSyscall(id: number) {\n\t\t/*\n\t\tthis.syscallCount++;\n\t\tthis.lastSyscallCalled = this.syscallManager.getName(id);\n\t\tthis.cycles2 += 1;\n\t\t*/\n\t\t/*\n\t\tif (this.cycles2 >= 1000) {\n\t\t\tthis.cycles2 = 0;\n\t\t\tif (!this.insideInterrupt) state.throwEndCycles();\n\t\t}\n\t\t*/\n\t}\n\n    // https://phoenix.goucher.edu/~kelliher/f2009/cs220/mipsir.html\n\n    // UNKNOWN\n    int_unknown(name: string) {\n\t    this.advance_pc();\n\t    const message = `${AnsiEscapeCodes.RED}Unimplemented instruction '${name}'${AnsiEscapeCodes.RESET}`\n        console.error(message)\n        throw new ProgramExitException(message)\n\t}\n\n    // CPU\n    int_lui() { this.RT = this.imm16 << 16; this.advance_pc() }\n    int_add() { this.RD = this.RS + this.RT; this.advance_pc() }\n    int_addu() { this.RD = this.RS + this.RT; this.advance_pc() }\n    int_addi() { this.RT = this.RS + this.imm16; this.advance_pc() }\n    int_addiu() { this.RT = this.RS + this.imm16; this.advance_pc() }\n    int_sub() { this.RD = this.RS - this.RT; this.advance_pc() }\n    int_subu() { this.RD = this.RS - this.RT; this.advance_pc() }\n    int_sll() { this.RD = this.RT << this.pos; this.advance_pc() }\n    int_sra() { this.RD = this.RT >> this.pos; this.advance_pc() }\n    int_srl() { this.RD = this.RT >>> this.pos; this.advance_pc() }\n    int_rotr() { this.RD = BitUtils.rotr(this.RT, this.pos); this.advance_pc() }\n    int_sllv() { this.RD = this.RT << (this.RS & 0b11111); this.advance_pc() }\n    int_srav() { this.RD = this.RT >> (this.RS & 0b11111); this.advance_pc() }\n    int_srlv() { this.RD = this.RT >>> (this.RS & 0b11111); this.advance_pc() }\n    int_rotrv() { this.RD = BitUtils.rotr(this.RT, this.RS); this.advance_pc() }\n    int_bitrev() { this.RD = BitUtils.bitrev32(this.RT); this.advance_pc() }\n    int_and() { this.RD = this.RS & this.RT; this.advance_pc() }\n    int_or() { this.RD = this.RS | this.RT; this.advance_pc() }\n    int_xor() { this.RD = this.RS ^ this.RT; this.advance_pc()}\n    int_nor() { this.RD = ~(this.RS | this.RT); this.advance_pc()}\n    int_andi() { this.RT = this.RS & this.u_imm16; this.advance_pc() }\n    int_ori() { this.RT = this.RS | this.u_imm16; this.advance_pc() }\n    int_xori() { this.RT = this.RS ^ this.u_imm16; this.advance_pc() }\n    int_mflo() { this.RD = this.LO; this.advance_pc() }\n    int_mfhi() { this.RD = this.HI; this.advance_pc() }\n    int_mfic() { this.RT = this.IC; this.advance_pc() }\n    int_mtlo() { this.LO = this.RS; this.advance_pc() }\n    int_mthi() { this.HI = this.RS; this.advance_pc() }\n    int_mtic() { this.IC = this.RT; this.advance_pc() }\n    int_slt() { this.RD = this.slt(this.RS, this.RT); this.advance_pc() }\n    int_sltu() { this.RD = this.sltu(this.RS, this.RT); this.advance_pc() }\n    int_slti() { this.RT = this.slt(this.RS, this.imm16); this.advance_pc() }\n    int_sltiu() { this.RT = this.sltu(this.RS, this.imm16); this.advance_pc() }\n    int_movz() { if (this.RT == 0) { this.RD = this.RS } this.advance_pc() }\n    int_movn() { if (this.RT != 0) { this.RD = this.RS } this.advance_pc() }\n    int_ext() { this.RT = BitUtils.extract(this.RS, this.pos, this.size_e); this.advance_pc() }\n    int_ins() { this.RT = BitUtils.insert(this.RT, this.pos, this.size_i, this.RS); this.advance_pc() }\n    int_clz() { this.RD = BitUtils.clz(this.RS); this.advance_pc() }\n    int_clo() { this.RD = BitUtils.clo(this.RS); this.advance_pc() }\n    int_seb() { this.RD = BitUtils.seb(this.RT); this.advance_pc() }\n    int_seh() { this.RD = BitUtils.seh(this.RT); this.advance_pc() }\n    int_wsbh() { this.RD = BitUtils.wsbh(this.RT); this.advance_pc() }\n    int_wsbw() { this.RD = BitUtils.wsbw(this.RT); this.advance_pc() }\n    int_min() { this.RD = this.min(this.RS, this.RT); this.advance_pc() }\n    int_max() { this.RD = this.max(this.RS, this.RT); this.advance_pc() }\n    int_div() { this.div(this.RS, this.RT); this.advance_pc() }\n    int_divu() { this.divu(this.RS, this.RT); this.advance_pc() }\n    int_mult() { this.mult(this.RS, this.RT); this.advance_pc() }\n    int_multu() { this.multu(this.RS, this.RT); this.advance_pc() }\n    int_madd() { this.madd(this.RS, this.RT); this.advance_pc() }\n    int_maddu() { this.maddu(this.RS, this.RT); this.advance_pc() }\n    int_msub() { this.msub(this.RS, this.RT); this.advance_pc() }\n    int_msubu() { this.msubu(this.RS, this.RT); this.advance_pc() }\n    int_cache() { this.cache(this.RS, this.RT, this.imm16); this.advance_pc() }\n    int_syscall() { this.advance_pc(); this.syscall(this.vsyscall) }\n    int_break() { this.advance_pc(); this.break() }\n    int_dbreak() { debugger; this.advance_pc() }\n\n    // MEMORY\n\n    int_sb  () { this.memory.sb(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_sh  () { this.memory.sh(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_sw  () { this.memory.sw(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_swc1() { this.memory.sw(this.RS_IMM16, this.FT_I); this.advance_pc() }\n    int_swl () { this.memory.swl(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_swr () { this.memory.swr(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_lb  () { this.RT = this.memory.lb(this.RS_IMM16); this.advance_pc() }\n    int_lbu () { this.RT = this.memory.lbu(this.RS_IMM16); this.advance_pc() }\n    int_lh  () { this.RT = this.memory.lh(this.RS_IMM16); this.advance_pc() }\n    int_lhu () { this.RT = this.memory.lhu(this.RS_IMM16); this.advance_pc() }\n    int_lw  () { this.RT = this.memory.lw(this.RS_IMM16); this.advance_pc() }\n    int_lwc1() { this.FT_I = this.memory.lw(this.RS_IMM16); this.advance_pc() }\n    int_lwl () { this.RT = this.memory.lwl(this.RS_IMM16, this.RT); this.advance_pc() }\n    int_lwr () { this.RT = this.memory.lwr(this.RS_IMM16, this.RT); this.advance_pc() }\n\n    // BRANCHES\n\n    int__link() {\n\t    this.RA = this.nPC + 4\n    }\n\n    int__branchN(cond: boolean) {\n        this.advance_pc(cond ? (this.imm16 * 4) : 4)\n    }\n\n    int__branchN_likely(cond: boolean) {\n\t    if (cond) {\n            this.advance_pc(this.imm16 * 4)\n        } else {\n            this.PC = this.nPC + 4\n            this.nPC = this.PC + 4\n        }\n    }\n\n    int__j(link: boolean) {\n        if (link) {\n            this.RA = this.PC + 8\n        }\n        this.jump_pc(this.jump_address)\n    }\n\n    int__jr(link: boolean) {\n\t    const newAddress = (this.PC & 0xf0000000) | (this.RS & ~0b11)\n        if (link) {\n            this.RD = this.PC + 8\n        }\n        this.jump_pc(newAddress)\n    }\n\n    int_beq () { this.int__branchN(this.RS == this.RT) }\n    int_bne () { this.int__branchN(this.RS != this.RT) }\n    int_bltz() { this.int__branchN(this.RS < 0) }\n    int_blez() { this.int__branchN(this.RS <= 0) }\n    int_bgtz() { this.int__branchN(this.RS > 0) }\n    int_bgez() { this.int__branchN(this.RS >= 0) }\n\n    int_beql () { this.int__branchN_likely(this.RS == this.RT) }\n    int_bnel () { this.int__branchN_likely(this.RS != this.RT) }\n    int_bltzl() { this.int__branchN_likely(this.RS < 0) }\n    int_blezl() { this.int__branchN_likely(this.RS <= 0) }\n    int_bgtzl() { this.int__branchN_likely(this.RS > 0) }\n    int_bgezl() { this.int__branchN_likely(this.RS >= 0) }\n\n    int_bltzal()  { this.int__link(); this.int__branchN(this.RS < 0) }\n    int_bgezal()  { this.int__link(); this.int__branchN(this.RS >= 0) }\n    int_bltzall() { this.int__link(); this.int__branchN_likely(this.RS < 0) }\n    int_bgezall() { this.int__link(); this.int__branchN_likely(this.RS >= 0) }\n\n    int_bc1t() { this.int__branchN(this.fcr31_cc) }\n    int_bc1f() { this.int__branchN(!this.fcr31_cc) }\n    int_bc1tl() { this.int__branchN_likely(this.fcr31_cc) }\n    int_bc1fl() { this.int__branchN_likely(!this.fcr31_cc) }\n\n    int_mfc1() { this.RT = this.FS_I; this.advance_pc() }\n    int_mtc1() { this.FS_I = this.RT; this.advance_pc() }\n    int_cfc1() { this._cfc1_impl(this.rd, this.rt); this.advance_pc() }\n    int_ctc1() { this._ctc1_impl(this.rd, this.RT); this.advance_pc() }\n\n    int_j() { this.int__j(false) }\n    int_jr() { this.int__jr(false) }\n    int_jal() { this.int__j(true) }\n    int_jalr() { this.int__jr(true) }\n\n    // FPU\n\n    \"int_mov.s\"() { this.FD = this.FS; this.advance_pc() }\n    \"int_add.s\"() { this.FD = this.FS + this.FT; this.advance_pc() }\n    \"int_sub.s\"() { this.FD = this.FS - this.FT; this.advance_pc() }\n    \"int_mul.s\"() { this.FD = this.FS * this.FT; this.advance_pc() }\n    \"int_div.s\"() { this.FD = this.FS / this.FT; this.advance_pc() }\n    \"int_abs.s\"() { this.FD = Math.abs(this.FS); this.advance_pc() }\n    \"int_sqrt.s\"() { this.FD = Math.sqrt(this.FS); this.advance_pc() }\n    \"int_neg.s\"() { this.FD = -this.FS; this.advance_pc() }\n\n    \"int_trunc.w.s\"() { this.FD_I = MathFloat.trunc(this.FS); this.advance_pc() }\n    \"int_round.w.s\"() { this.FD_I = MathFloat.round(this.FS); this.advance_pc() }\n    \"int_ceil.w.s\"() { this.FD_I = MathFloat.ceil(this.FS); this.advance_pc() }\n    \"int_floor.w.s\"() { this.FD_I = MathFloat.floor(this.FS); this.advance_pc() }\n\n    \"int_cvt.s.w\"() { this.FD = this.FS_I; this.advance_pc() }\n    \"int_cvt.w.s\"() { this.FD_I = this._cvt_w_s_impl(this.FS); this.advance_pc() }\n\n    \"int_c.f.s\"() { return this.int__comp(0, 0) }\n    \"int_c.un.s\"() { return this.int__comp(1, 0) }\n    \"int_c.eq.s\"() { return this.int__comp(2, 0) }\n    \"int_c.ueq.s\"() { return this.int__comp(3, 0) }\n    \"int_c.olt.s\"() { return this.int__comp(4, 0) }\n    \"int_c.ult.s\"() { return this.int__comp(5, 0) }\n    \"int_c.ole.s\"() { return this.int__comp(6, 0) }\n    \"int_c.ule.s\"() { return this.int__comp(7, 0) }\n\n    \"int_c.sf.s\"() { return this.int__comp(0, 1) }\n    \"int_c.ngle.s\"() { return this.int__comp(1, 1) }\n    \"int_c.seq.s\"() { return this.int__comp(2, 1) }\n    \"int_c.ngl.s\"() { return this.int__comp(3, 1) }\n    \"int_c.lt.s\"() { return this.int__comp(4, 1) }\n    \"int_c.nge.s\"() { return this.int__comp(5, 1) }\n    \"int_c.le.s\"() { return this.int__comp(6, 1) }\n    \"int_c.ngt.s\"() { return this.int__comp(7, 1) }\n\n    int__comp(fc02: number, fc3: number) {\n        const fc_unordererd = ((fc02 & 1) != 0);\n        const fc_equal = ((fc02 & 2) != 0);\n        const fc_less = ((fc02 & 4) != 0);\n        const fc_inv_qnan = (fc3 != 0); // TODO -- Only used for detecting invalid operations?\n\n        const s = this.FS;\n        const t = this.FT;\n\n        let result = false\n        if (isNaN(s) || isNaN(t)) {\n            result = result || fc_unordererd\n        } else {\n            if (fc_equal) result = result || (s == t)\n            if (fc_less) result = result || (s < t)\n        }\n\n        this.fcr31_cc = result\n        this.advance_pc()\n    }\n}\n\nconst ast = new MipsAstBuilder();\n\nexport interface InstructionUsage {\n\tname: string;\n\tcount: number;\n}\n\nclass PspInstructionStm extends ANodeStm {\n\tpublic PC: number;\n\tconstructor(public di: DecodedInstruction, public code: ANodeStm) {\n\t\tsuper();\n\t\tthis.PC = di.PC;\n\t}\n\n\ttoJs() {\n\t\treturn `${this.code.toJs()} /* ${this.di.type.name} */`;\n\t\t//return \"/*\" + addressToHex(this.PC) + \"*/ /* \" + StringUtils.padLeft(this.di.type.name, ' ', 6) + \" */  \" + this.code.toJs();\n\t}\n\toptimize() { return new PspInstructionStm(this.di, this.code.optimize()); }\n}\n\ninterface FunctionInfo {\n\tstart: number;\n\tmin: number;\n\tmax: number;\n\tlabels: NumberDictionary<boolean>;\n}\n\ntype ICpuFunction = (state: CpuState) => void;\ntype ICpuFunctionWithArgs = (state: CpuState, args: any) => void;\nclass CpuFunctionWithArgs {\n\tpublic constructor(public func: ICpuFunction, public args: any) { }\n}\ntype IFunctionGenerator = (address: number, level: number) => CpuFunctionWithArgs;\n\nexport class InvalidatableCpuFunction {\n\tprivate func: CpuFunctionWithArgs | null = null;\n\n\tpublic constructor(public PC: number, private generator: IFunctionGenerator) { }\n\tpublic invalidate() { this.func = null; }\n\tpublic execute(state: CpuState): void {\n\t\tif (this.func == null) this.func = this.generator(this.PC, 0);\n\t\tstate.checkCycles(0);\n\t\tthis.func.func(state);\n\t}\n}\n\nexport class InstructionCache {\n\tfunctionGenerator: FunctionGenerator;\n\tprivate cache: NumberDictionary<InvalidatableCpuFunction> = {};\n\tprivate functions: NumberDictionary<FunctionGeneratorResult | undefined> = {};\n\tprivate examinedAddress: NumberDictionary<boolean> = {};\n\tprivate createBind: IFunctionGenerator;\n\n\tconstructor(public memory: Memory, public syscallManager: SyscallManager) {\n\t\tthis.functionGenerator = new FunctionGenerator(memory, syscallManager, this);\n\t\tthis.createBind = this.create.bind(this);\n\t}\n\n\tinvalidateAll() {\n\t\tfor (let pc in this.examinedAddress) {\n\t\t\tdelete this.examinedAddress[pc];\n\t\t}\n\t\tfor (let pc in this.cache) {\n\t\t\tthis.cache[pc].invalidate();\n\t\t\tdelete this.functions[pc];\n\t\t}\n\t}\n\n\tinvalidateRange(from: number, to: number) {\n\t\tfor (let pc = from; pc < to; pc += 4) {\n\t\t\tif (this.cache[pc]) this.cache[pc].invalidate();\n\t\t\tdelete this.examinedAddress[pc];\n\t\t\tdelete this.functions[pc];\n\t\t}\n\t}\n\n\tprivate create(address: number, level:number): CpuFunctionWithArgs {\n\t\tthis.examinedAddress[address] = true;\n\t\t// @TODO: check if we have a function in this range already range already!\n        const info = this.functionGenerator.getFunctionInfo(address, level);\n        //let func = this.functions[info.min];\n        let func = this.functions[info.start];\n        if (func === undefined) {\n\t\t\t//console.log(`Creating function ${addressToHex(address)}`);\n\t\t\t//this.functions[info.min] = func = this.functionGenerator.getFunction(info);\n\t\t\tthis.functions[info.start] = undefined;\n\t\t\tthis.functions[info.start] = func = this.functionGenerator.getFunction(info, level);\n\n\t\t\tif (DEBUG_FUNCGEN) {\n\t\t\t\tconsole.log('****************************************');\n\t\t\t\tconsole.log('****************************************');\n\t\t\t\tconsole.log(func.info);\n\t\t\t\tconsole.log(func.code.code);\n\t\t\t}\n\t\t}\n\t\treturn func!.fargs;\n\t}\n\n\tgetFunction(address: number, level:number): InvalidatableCpuFunction {\n\t\taddress &= Memory.MASK;\n\t\tif (!this.cache[address]) {\n\t\t\tthis.cache[address] = new InvalidatableCpuFunction(address, this.createBind);\n\t\t}\n\t\tif (BUILD_FUNC_ON_REFERENCED) {\n\t\t\t//if (level <= 1 && !this.examinedAddress[address]) this.create(address, level);\n\t\t\t//if (!this.examinedAddress[address]) this.create(address, level);\n\t\t}\n\t\treturn this.cache[address];\n\t}\n}\n\nclass FunctionGeneratorResult {\n\tconstructor(public func: ICpuFunction, public code: FunctionCode, public info: FunctionInfo, public fargs: CpuFunctionWithArgs) { }\n}\n\nclass FunctionCode {\n\tconstructor(public code: string, public args: any) { }\n}\n\nexport class FunctionGenerator {\n\tprivate instructions: Instructions = Instructions.instance;\n\tprivate instructionAst = new InstructionAst();\n\t//private instructionGenerartorsByName = <StringDictionary<Function>>{ };\n\tprivate instructionUsageCount: StringDictionary<number> = {};\n\n\tenableJumpBranch = true;\n\t//enableJumpBranch = false;\n\t//supportsTailCallOptimization = true;\n\t//supportsTailCallOptimization = false;\n\n\tconstructor(public memory: Memory, public syscallManager: SyscallManager, public instructionCache: InstructionCache) {\n\t}\n\n\tgetInstructionUsageCount(): InstructionUsage[] {\n        const items: InstructionUsage[] = [];\n        for (const key in this.instructionUsageCount) {\n            const value = this.instructionUsageCount[key];\n            items.push({ name: key, count: value });\n\t\t}\n\t\titems.sort((a, b) => compareNumbers(a.count, b.count)).reverse();\n\t\treturn items;\n\t}\n\n\tprivate decodeInstruction(address: number) {\n        const instruction = Instruction.fromMemoryAndPC(this.memory, address);\n        const instructionType = this.getInstructionType(instruction);\n        return new DecodedInstruction(instruction, instructionType);\n\t}\n\n\tprivate getInstructionType(i: Instruction) {\n\t\treturn this.instructions.findByData(i.IDATA, i.PC);\n\t}\n\n\tprivate generatePspInstruction(di: DecodedInstruction): PspInstructionStm {\n\t\treturn new PspInstructionStm(di, this.generateInstructionAstNode(di));\n\t}\n\n\tprivate generateInstructionAstNode(di: DecodedInstruction): ANodeStm {\n        const instruction = di.instruction;\n        const instructionType = di.type;\n        const func: Function = (<any>this.instructionAst)[instructionType.name];\n        if (func === undefined) throw (sprintf(\"Not implemented '%s' at 0x%08X\", instructionType, di.instruction.PC));\n\t\treturn func.call(this.instructionAst, instruction, di);\n\t}\n\n\tcreate(address: number, level:number): FunctionGeneratorResult {\n\t\treturn this.getFunction(this.getFunctionInfo(address, level), level);\n\t}\n\n\tgetFunction(info: FunctionInfo, level:number): FunctionGeneratorResult {\n        const start = performance.now();\n        const code = this.getFunctionCode(info, level);\n        try {\n\t\t\t//const func = <ICpuFunction>(new Function('state', 'args', `\"use strict\";${code.code}`));\n            const startHex = addressToHex(info.start);\n            const func: ICpuFunction = <ICpuFunction>(new Function('args', `return function func_${startHex}(state) { \"use strict\"; ${code.code} }`)(code.args));\n            const result = new FunctionGeneratorResult(func, code, info, new CpuFunctionWithArgs(func, code.args));\n            const end = performance.now();\n            const elapsed = end - start;\n            if (elapsed >= 20) console.warn(`generated function ${startHex} in ${end - start} ms. ${addressToHex(info.min)}-${addressToHex(info.max)} : ${addressToHex(info.start)} : instructions:${(info.max - info.start) / 4}`);\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.info('code:\\n', code.code);\n\t\t\tconsole.info('args:\\n', code.args);\n\t\t\tconsole.error(e);\n\t\t\tthrow (e);\n\t\t}\n\t}\n\t\n\tgetFunctionInfo(address: number, level: number): FunctionInfo {\n\t\tif (address == CpuSpecialAddresses.EXIT_THREAD) return { start: address, min: address, max: address + 4, labels: {} };\n        if (address == CpuSpecialAddresses.EXIT_INTERRUPT) return { start: address, min: address, max: address + 4, labels: {} };\n\t\tif (address == 0x00000000) throw new ProgramExitException(\"Trying to execute 0x00000000\");\n\n\t\tconst explored: NumberDictionary<Boolean> = {};\n\t\tconst explore = [address];\n\t\tconst info: FunctionInfo = { start: address, min: address, max: address, labels: {} };\n\t\tconst MAX_EXPLORE = 20000;\n        //const MAX_EXPLORE = 50000;\n        let exploredCount = 0;\n\n        function addToExplore(pc: number) {\n\t\t\tif (explored[pc]) return;\n\t\t\texplored[pc] = true;\n\t\t\texplore.push(pc);\n\t\t}\n\n\t\twhile (explore.length > 0) {\n            const PC = explore.shift()!;\n            const di = this.decodeInstruction(PC);\n            const type = di.type;\n            info.min = Math.min(info.min, PC);\n\t\t\tinfo.max = Math.max(info.max, PC + 4); // delayed branch\n\t\t\t\n\t\t\t//printf(\"PC: %08X: %s\", PC, di.type.name);\n\t\t\tif (++exploredCount >= MAX_EXPLORE) {\n                let disassembler = new MipsDisassembler();\n                disassembler.dump(this.memory, info.min, 4, console.error)\n                console.error(\"...\")\n                disassembler.dump(this.memory, info.max - 4 * 4, 4, console.error)\n                console.error(this)\n\t\t\t    throw new ProgramExitException(`Function too big ${exploredCount}`);\n            }\n\n            let exploreNext = true;\n            const exploreTarget = type.isBranch && !type.isRegister;\n\n            //if (this.enableJumpBranch && type.isFixedAddressJump && !explored[di.targetAddress]) exploreTarget = true;\n\t\t\tif (type.isBreak) exploreNext = false;\n\t\t\tif (type.isJumpNoLink) exploreNext = false;\n\t\t\tif (di.isUnconditional) exploreNext = false;\n\t\t\t\n\t\t\t// It is a local jump, a long loop for example\n\t\t\t\n\t\t\tif (exploreTarget) {\n\t\t\t\tif (di.targetAddress >= info.min - 8) {\n\t\t\t\t\tinfo.labels[di.targetAddress] = true;\n\t\t\t\t\tif (exploreNext) info.labels[PC + 8] = true;\n\t\t\t\t\taddToExplore(di.targetAddress);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (exploreNext) {\n\t\t\t\taddToExplore(PC + 4);\n\t\t\t}\n\t\t}\n\n\t\tinfo.labels[info.start] = true;\n\t\tinfo.labels[info.min] = true;\n\n\t\treturn info;\n\t}\n\t\n\tprivate detectSyscallCall(pc: number): number {\n        const di = this.decodeInstruction(pc);\n        const di2 = this.decodeInstruction(pc + 4);\n        if (di.type.name == 'jr' && di2.type.name == 'syscall') {\n\t\t\treturn di2.instruction.vsyscall;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tgetFunctionCode(info: FunctionInfo, level:number): FunctionCode {\n        const args: any = {};\n        if (info.start == CpuSpecialAddresses.EXIT_THREAD) return new FunctionCode(\"state.throwCpuBreakException();\", args);\n        if (info.start == CpuSpecialAddresses.EXIT_INTERRUPT) return new FunctionCode(\"state.throwInterruptBreakException();\", args);\n\n        const state_PC = `state.${CpuStateFields.PC}`\n        const state_RA = `state.${CpuStateFields.RA}`\n        const state_jumpCall = `state.${CpuStateFields.jumpCall}`\n\n        const func = ast.func(\n            info.start,\n            ast.raw_stm(`let label = 0, BRANCHPC = 0, BRANCHFLAG = false, expectedRA = 0, doJumps = false; const memory = state.memory, gpr = state.gpr, gpr_f = state.gpr_f;`),\n            ast.raw_stm(`${state_jumpCall} = null; return;`),\n            []\n        );\n\n        const labels: NumberDictionary<ANodeStmLabel> = {};\n        for (let labelPC in info.labels) labels[labelPC] = ast.label(<number><any>labelPC);\n\n\t\tif (info.min != info.start) {\n\t\t\tfunc.add(ast.sjump(ast.raw('true'), info.start));\n\t\t}\n\n\t\tif ((info.max - info.min) == 4) {\n            const syscallId = this.detectSyscallCall(info.min);\n            if (syscallId >= 0) {\n\t\t\t\treturn new FunctionCode(\n\t\t\t\t\t`\n\t\t\t\t\t/* ${this.syscallManager.getName(syscallId)} at ${addressToHex(info.start)} */\n\t\t\t\t\t${state_PC} = ${state_RA}; ${state_jumpCall} = null;\n\t\t\t\t\tstate.syscall(${syscallId});\n\t\t\t\t\treturn;\n\t\t\t\t\t`,\n\t\t\t\t\targs\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlet cycles = 0;\n\n\t\tfunction createCycles(PC:number) {\n\t\t\tlet out = ast.raw(`${state_PC} = ${addressToHex(PC)}; state.${CpuStateFields.checkCycles}(${cycles});`);\n\t\t\tcycles = 0;\n\t\t\treturn out;\n\t\t}\n\t\t\t\n\t\tfor (let PC = info.min; PC <= info.max; PC += 4) {\n            const di = this.decodeInstruction(PC);\n            const type = di.type;\n            const ins = this.generatePspInstruction(di);\n            let delayedSlotInstruction: PspInstructionStm;\n\n            // @TODO: we should check the cycles per instruction\n\t\t\tcycles++;\n\t\t\t\n\t\t\tif (labels[PC]) func.add(labels[PC]);\n\t\t\tif (type.name == 'syscall') {\n\t\t\t\tfunc.add(ast.raw(`${state_PC} = ${PC + 4};`));\n\t\t\t}\n\n\t\t\tif (!type.hasDelayedBranch) {\n\t\t\t\tfunc.add(ins);\n\t\t\t} else {\n                const di2 = this.decodeInstruction(PC + 4);\n                delayedSlotInstruction = this.generatePspInstruction(di2);\n                let isLikely = di.type.isLikely;\n                const delayedCode = ast.stm(di.type.isLikely ? ast._if(ast.branchflag(), delayedSlotInstruction) : delayedSlotInstruction);\n\n                const targetAddress = di.targetAddress & Memory.MASK;\n                const nextAddress = (PC + 8) & Memory.MASK;\n                const targetAddressHex = addressToHex(targetAddress);\n                const nextAddressHex = addressToHex(nextAddress);\n\n                if (type.name == 'jal' || type.name == 'j') {\n                    const cachefuncName = `cache_${addressToHex(targetAddress)}`;\n                    args[cachefuncName] = this.instructionCache.getFunction(targetAddress, level + 1);\n                    func.add(ast.raw(`${state_PC} = ${targetAddressHex};`));\n                    if (type.name == 'j') {\n                        func.add(delayedCode);\n                        if (labels[targetAddress]) {\n                            func.add(ast.sjump(ast.raw('true'), targetAddress));\n                        } else {\n                            func.add(ast.raw(`${state_jumpCall} = args.${cachefuncName};`));\n                            func.add(ast.raw(`return;`));\n                        }\n                    } else {\n                        func.add(ast.raw(`expectedRA = ${state_RA} = ${nextAddressHex};`));\n                        func.add(delayedCode);\n                        func.add(ast.raw(`args.${cachefuncName}.execute(state);`));\n                        func.add(ast.raw(`if (${state_PC} != expectedRA) { doJumps = true; break loop_label; }`))\n                    }\n\t\t\t\t} else if (type.isJal) { // jalr, bgezal...\n\t\t\t\t\tconst cachefuncName = `cachefunc_${addressToHex(PC)}`; args[cachefuncName] = null;\n                    const cacheaddrName = `cacheaddr_${addressToHex(PC)}`; args[cacheaddrName] = -1;\n\t\t\t\t\tfunc.add(ins);\n\t\t\t\t\tfunc.add(delayedCode);\n\t\t\t\t\tfunc.add(ast.raw('if (BRANCHFLAG) {'));\n\t\t\t\t\tfunc.add(ast.raw(`${state_PC} = BRANCHPC & ${Memory.MASK};`));\n\t\t\t\t\tfunc.add(ast.raw(`expectedRA = ${state_RA};`));\n\t\t\t\t\tfunc.add(ast.raw(`if (args.${cacheaddrName} != ${state_PC}) args.${cachefuncName} = state.${CpuStateFields.getFunction}(args.${cacheaddrName} = ${state_PC});`));\n\t\t\t\t\tfunc.add(ast.raw(`args.${cachefuncName}.execute(state);`));\n\t\t\t\t\tfunc.add(ast.raw(`while ((${state_PC} != expectedRA) && (${state_jumpCall} != null)) ${state_jumpCall}.execute(state);`));\n\t\t\t\t\tfunc.add(ast.raw(`if (${state_PC} != expectedRA) { ${state_jumpCall} = null; return; }`));\n\t\t\t\t\tfunc.add(ast.raw('}'));\n\t\t\t\t} else if (type.isJumpNoLink) {\n\t\t\t\t\tfunc.add(createCycles(PC));\n\t\t\t\t\t//func.add(createCycles(PC));\n\t\t\t\t\t//func.add(ast.raw('state.jumpCall = state.getFunction(state.PC = BRANCHPC);'));\n\t\t\t\t\tif (type.name == 'jr') {\n\t\t\t\t\t\tfunc.add(delayedCode);\n\t\t\t\t\t\t\n\t\t\t\t\t\tfunc.add(ast.raw(`${state_PC} = ${CpuState.GPR_access('state', di.instruction.rs)};`));\n\t\t\t\t\t\tfunc.add(ast.raw(`${state_jumpCall} = null;`));\n\t\t\t\t\t\tfunc.add(ast.raw(`return;`));\n\t\t\t\t\t} else if (type.name == 'j') {\n\t\t\t\t\t\tfunc.add(ins);\n\t\t\t\t\t\tfunc.add(delayedCode);\n\t\t\t\t\t\tfunc.add(ast.raw(`${state_jumpCall} = state.${CpuStateFields.getFunction}(${state_PC} = BRANCHPC);`));\n\t\t\t\t\t\tfunc.add(ast.raw(`return;`));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdebugger;\n\t\t\t\t\t\tthrow new Error(\"Unexpected!\");\n\t\t\t\t\t}\n\t\t\t\t} else { // branch\n\t\t\t\t\tif (type.isFixedAddressJump && labels[targetAddress]) {\n\t\t\t\t\t\tlet bf:BranchFlagStm = <any>((<PspInstructionStm>ins).code);\n\t\t\t\t\t\t//console.log(ins);\n\t\t\t\t\t\t//console.log(bf.cond);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (isLikely) {\n\t\t\t\t\t\t\tfunc.add(ast.sjump(bf.cond, targetAddress, delayedSlotInstruction));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfunc.add(ins);\n\t\t\t\t\t\t\tfunc.add(delayedCode);\n\t\t\t\t\t\t\tfunc.add(ast.sjump(ast.raw('BRANCHFLAG'), targetAddress));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfunc.add(createCycles(nextAddress));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfunc.add(createCycles(PC));\n\t\t\t\t\t\tfunc.add(ins);\n\t\t\t\t\t\tfunc.add(delayedCode);\n\t\t\t\t\t\tfunc.add(ast.raw(`if (BRANCHFLAG) {`));\n\t\t\t\t\t\tfunc.add(ast.raw(`${state_PC} = ${targetAddressHex};`));\n\t\t\t\t\t\tfunc.add(ast.raw(`${state_jumpCall} = state.${CpuStateFields.getFunction}(${state_PC});`));\n\t\t\t\t\t\tfunc.add(ast.raw(`return;`));\n\t\t\t\t\t\tfunc.add(ast.raw(`}`));\n\t\t\t\t\t}\n\t\t\t\t\t//func.add(ast.raw(`} else {`));\n\t\t\t\t\t//func.add(ast.raw(`state.PC = ${nextAddressHex};`));\n\t\t\t\t}\n\n\t\t\t\tPC += 4;\n\t\t\t}\n\t\t}\n        const code = func.toJs();\n        args.code = code + `\n            if (doJumps) {\n                while ((${state_PC} != expectedRA) && (${state_jumpCall} != null)) ${state_jumpCall}.execute(state);\n                ${state_jumpCall} = null;\n                return;\n            }\n        `;\n\t\treturn new FunctionCode(code, args);\n\t}\n}\n\nexport interface CreateOptions {\n    originalName?: string;\n\tdisableInsideInterrupt?: boolean;\n\tdoNotWait?: boolean\n}\n\nexport function createNativeFunction(\n    exportId: number,\n    firmwareVersion: number,\n    retvalIType: IType<any>|undefined,\n    arcITypes: IType<any>[]|undefined,\n    that: any,\n    internalFunc: Function,\n    options?: CreateOptions,\n    classname?:string,\n    name?:string\n) {\n\toptions = options || {};\n\t//const console = logger.named('createNativeFunction');\n    let code = '';\n    //let code = 'debugger;';\n\n\tlet V0 = CpuState.GPR_access('state', 2);\n\tlet V1 = CpuState.GPR_access('state', 3);\n\n    const args: string[] = [];\n    const maxGprIndex = 12;\n    let gprindex = 4;\n    let fprindex = 0;\n    //let fprindex = 2;\n\n\tfunction _readGpr32() {\n\t\tif (gprindex >= maxGprIndex) {\n\t\t\t//return ast.MemoryGetValue(Type, PspMemory, ast.GPR_u(29) + ((MaxGprIndex - Index) * 4));\n\n\t\t\tlet gpr_29 = CpuState.GPR_access('state', 29);\n\t\t\treturn `memory.lw(${gpr_29} + ` + ((maxGprIndex - gprindex++) * 4) + ')';\n\t\t} else {\n\t\t\treturn CpuState.GPR_access('state', gprindex++);\n\t\t}\n\t}\n\n\tfunction readFpr32() { return `state.state.${CpuStateFields.fpr}[${fprindex++}]`; }\n\tfunction readGpr32_S() { return `(${_readGpr32()} | 0)`; }\n\tfunction readGpr32_U() { return `(${_readGpr32()} >>> 0)`; }\n\n\tfunction readGpr64() {\n\t\tgprindex = MathUtils.nextAligned(gprindex, 2);\n        const gprLow = readGpr32_S();\n        const gprHigh = readGpr32_S();\n        return `Integer64.fromBits(${gprLow}, ${gprHigh})`;\n\t}\n\n\tif (arcITypes) {\n        arcITypes.forEach(item => {\n            switch (item) {\n                case Int32: args.push(`${readGpr32_S()} | 0`); break;\n                case UInt32: args.push(`${readGpr32_U()} >>> 0`); break;\n                case BoolTypeType: args.push(`${readGpr32_S()} != 0`); break;\n                case Ptr: args.push(`state.${CpuStateFields.memory}.getPointerStream(${readGpr32_S()})`); break;\n                case BytesTypeType: args.push(`state.${CpuStateFields.memory}.getPointerStream(${readGpr32_S()}, ${readGpr32_S()})`); break;\n                case ThreadTypeType: args.push(`state.${CpuStateFields.thread}`); break;\n                case CpuStateTypeType: args.push(`state`); break;\n                case MemoryTypeType: args.push(`state.${CpuStateFields.memory}`); break;\n                case StringzVariable: args.push(`state.${CpuStateFields.memory}.readStringz(${readGpr32_S()})`); break;\n                case Int64: args.push(readGpr64()); break;\n                default:\n                    if (item instanceof FixedBytesType) {\n                        args.push(`state.${CpuStateFields.memory}.getPointerU8Array(${readGpr32_S()}, ${item.size})`);\n                    } else {\n                        throw new Error(`Invalid parameter type ${item.constructor.name}`)\n                    }\n            }\n        })\n    }\n\n\tif (options.disableInsideInterrupt) {\n\t\t// ERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT\n\t\tcode += `if (state.${CpuStateFields.insideInterrupt}) return 0x80020064; \\n`;\n\t}\n\n\n\tcode += 'let error = false;\\n';\n\tif (DEBUG_NATIVEFUNC) {\n\t\tcode += `console.info(state.${CpuStateFields.thread}.name, nativeFunction.name);`;\n\t}\n\tcode += `let result = internalFunc(${args.join(', ')});\\n`;\n\n\t/*\n\tlet debugSyscalls = false;\n\t//let debugSyscalls = true;\n\n\tif (debugSyscalls) {\n\t\tcode += \"const info = 'calling:' + state.thread.name + ':RA=' + state.RA.toString(16) + ':' + nativeFunction.name;\\n\";\n\t\tcode += \"if (DebugOnce(info, 10)) {\\n\";\n\t\tcode += \"logger.warn('#######', info, 'args=', args, 'result=', \" + ((retval == 'uint') ? \"sprintf('0x%08X', result) \" : \"result\") + \");\\n\";\n\t\tcode += \"}\\n\";\n\t}\n\t*/\n\n    //const nameof = <T>(name: Extract<keyof T, string>): string => name;\n\n\n\n    if (!options.doNotWait) {\n        code += `\n            if (PromiseFast.isPromise(result)) {\n                ${DEBUG_NATIVEFUNC ? 'console.log(\"returned promise!\");' : ''}\n                state.${CpuStateFields.thread}.suspendUntilPromiseDone(PromiseFast.ensure(result), nativeFunction);\n                state.${CpuStateFields.throwEndCycles}();\n                //return state.thread.suspendUntilPromiseDone(result, nativeFunction);\n            }\n            if (result instanceof WaitingThreadInfo) {\n                ${DEBUG_NATIVEFUNC ? 'console.log(\"returned WaitingThreadInfo!\");' : ''}\n                if (PromiseFast.isPromise(result.promise)) {\n                    state.${CpuStateFields.thread}.suspendUntilDone(result);\n                    state.${CpuStateFields.throwEndCycles}();\n                } else {\n                    result = result.promise;\n                }\n            }\n        `;\n    }\n\n    //console.log(arcITypes)\n\n    if (retvalIType) {\n        switch (retvalIType) {\n            case VoidTypeType: break;\n            case Int32: case UInt32: code += `${V0} = result | 0;\\n`; break;\n            case BoolTypeType: code += `${V0} = result ? 1 : 0;\\n`; break;\n            case Float32: code += 'state.fpr[0] = result;\\n'; break;\n            case Int64:\n                code += 'if (!error) {\\n';\n                code += 'if (!(result instanceof Integer64)) { logger.info(\"FUNC:\", nativeFunction); throw(new Error(\"Invalid long result. Expecting Integer64 but found \\'\" + result + \"\\'.\")); }\\n';\n                code += `${V0} = result.low; ${V1} = result.high;\\n`;\n                code += '} else {\\n';\n                code += `${V0} = result; ${V1} = 0;\\n`;\n                code += '}\\n';\n                break;\n            default: throw new Error(`Invalid return value \"${retvalIType}\"`)\n        }\n    }\n\n    const nativeFunction = new NativeFunction();\n    nativeFunction.name = name ?? 'unknown';\n    nativeFunction.nid = exportId;\n    nativeFunction.firmwareVersion = firmwareVersion;\n\t\n\tif (DEBUG_FUNCGEN) {\n\t\tconsole.log(code);\n\t}\n\n\tnativeFunction.nativeCall = internalFunc.bind(that);\n\tconst funcName = ensureValidFunctionName(`${classname}.${name}.${addressToHex(nativeFunction.nid)}`)\n\tnativeFunction.call = <any>new Function(\n\t\t'logger', 'internalFunc', 'nativeFunction',\n\t\t`return function ${funcName}_wrapper(context, state) { \"use strict\"; /* ${addressToHex(nativeFunction.nid)} ${classname}.${name} */\\n${code} };`\n\t)(\n\t\tlogger, nativeFunction.nativeCall, nativeFunction\n\t);\n\n    return nativeFunction;\n}\n\nexport function ensureValidFunctionName(name: string) {\n    const out = String(name).replace(/\\W/g, '_')\n    return out.substr(0, 1).match(/\\d/) ? `_${out}` : out\n}\n\nexport const CpuStateFields = fields<CpuState>();\n", "import {DecodingTable, Instructions} from \"./cpu_instructions\";\nimport {CpuState} from \"./cpu_core\";\nimport {BitUtils, MathFloat} from \"../../global/math\";\nimport {ANodeStm} from \"./cpu_ast\";\nimport {Instruction} from \"./cpu_instruction\";\n\nconst dummy = new CpuState(null as any, null as any, null as any) as any\n\nconst switchCode = DecodingTable.createSwitch(Instructions.instance.instructionTypeList, iname => {\n    const iiname = `int_${iname}`\n    const qname = JSON.stringify(iiname)\n    if (dummy[iiname]) {\n        return `state[${qname}](); return;`\n    } else {\n        return `state.int_unknown(${qname}); return;`\n    }\n});\n\n// noinspection UnnecessaryLocalVariableJS\nexport const interpretCpuInstruction: (s: CpuState) => void = eval(`(function switchFunction(state) {\n    \"use strict\";\n    const pc = state.PC\n    const value = state.memory.lw(pc)\n    state.IDATA = value\n    ${switchCode}\n})`)\n", "import {CpuSpecialAddresses, CpuState} from \"./cpu_core\";\nimport {interpretCpuInstruction} from \"./cpu_interpreter\";\nimport {CpuBreakException, InterruptBreakException} from \"../../global/utils\";\n\nexport class CpuExecutor {\n    static executeAtPC(state: CpuState) {\n        state.startThreadStep();\n        //const expectedRA = this.RA;\n        //while (this.PC != this.RA) {\n        try {\n            if (state.interpreted) {\n                // noinspection InfiniteLoopJS\n                while (true) {\n                    if (state.PC == CpuSpecialAddresses.EXIT_INTERRUPT) state.throwInterruptBreakException();\n                    if (state.PC == CpuSpecialAddresses.EXIT_THREAD) state.throwCpuBreakException();\n                    interpretCpuInstruction(state)\n                }\n            } else {\n                // noinspection InfiniteLoopJS\n                while (true) {\n                    state.getFunction(state.PC).execute(state);\n                }\n            }\n        } catch (e) {\n            if (InterruptBreakException.is(e)) return;\n            throw e;\n        }\n    }\n\n    static executeAtPCAsync(state: CpuState) {\n        state.startThreadStep();\n        try {\n            if (state.interpreted) {\n                for (let n = 0; n < 100000; n++) {\n                    if (state.PC == CpuSpecialAddresses.EXIT_INTERRUPT) state.throwInterruptBreakException();\n                    if (state.PC == CpuSpecialAddresses.EXIT_THREAD) state.throwCpuBreakException();\n                    interpretCpuInstruction(state)\n                }\n            } else {\n                state.getFunction(state.PC).execute(state);\n            }\n        } catch (e) {\n            if (CpuBreakException.is(e)) return;\n            if (InterruptBreakException.is(e)) return;\n            throw e;\n        }\n    }\n}", "\uFEFFimport \"../emu/global\"\n\nimport {NumberDictionary, Signal0} from \"../global/utils\";\nimport {CpuSpecialAddresses, CpuState} from \"./cpu/cpu_core\";\nimport {CpuExecutor} from \"./cpu/cpu_executor\";\n\nexport class InterruptHandler {\n\tenabled = false;\n\taddress = 0;\n\targument = 0;\n\tcpuState: CpuState|null = null;\n\n\tconstructor(public no:number) {\n\t}\n}\n\nexport class InterruptHandlers {\n\thandlers: NumberDictionary<InterruptHandler> = {};\n\n\tconstructor(public pspInterrupt: PspInterrupts) {\n\t}\n\n\tget(handlerIndex: number) {\n\t\tif (!this.handlers[handlerIndex]) this.handlers[handlerIndex] = new InterruptHandler(handlerIndex);\n\t\treturn this.handlers[handlerIndex];\n\t}\n\n\tremove(handlerIndex: number) {\n\t\tdelete this.handlers[handlerIndex];\n\t}\n\n\thas(handlerIndex: number) {\n\t\treturn (this.handlers[handlerIndex] !== undefined);\n\t}\n}\n\nexport class InterruptManager {\n\tenabled: boolean = true;\n\tflags: number = 0xFFFFFFFF;\n\tinterruptHandlers: NumberDictionary<InterruptHandlers> = {};\n\tevent = new Signal0();\n\tqueue = <InterruptHandler[]>[];\n\n\tsuspend() {\n        const currentFlags = this.flags;\n        this.flags = 0;\n\t\tthis.enabled = false;\n\t\treturn currentFlags;\n\t}\n\n\tresume(value: number) {\n\t\tthis.flags = value;\n\t\tthis.enabled = true;\n\t}\n\n\tget(pspInterrupt: PspInterrupts) {\n\t\tif (!this.interruptHandlers[pspInterrupt]) this.interruptHandlers[pspInterrupt] = new InterruptHandlers(pspInterrupt);\n\t\treturn this.interruptHandlers[pspInterrupt];\n\t}\n\n\tinterrupt(pspInterrupt: PspInterrupts) {\n        const interrupt = this.get(pspInterrupt);\n        const handlers = interrupt.handlers;\n        for (let n in handlers) {\n            const handler = handlers[n];\n            if (handler.enabled) {\n\t\t\t\t//debugger;\n\t\t\t\tthis.queue.push(handler);\n\t\t\t\tthis.execute(null);\n\t\t\t}\n\t\t}\n\t}\n\n\texecute(_state: CpuState | null) {\n\t\twhile (this.queue.length > 0) {\n\t\t\tconst item = this.queue.shift()!\n\t\t\tconst state = (item.cpuState ?? _state)!\n\t\t\tstate.preserveRegisters(() => {\n\t\t\t\tstate.RA = CpuSpecialAddresses.EXIT_INTERRUPT;\n\t\t\t\tstate.setGPR(4, item.no);\n\t\t\t\tstate.setGPR(5, item.argument);\n\t\t\t\tstate.insideInterrupt = true;\n\t\t\t\tstate.setPC(item.address);\n\t\t\t\tstate.startThreadStep();\n                CpuExecutor.executeAtPC(state)\n\t\t\t\t//let RA = state.RA;\n\t\t\t\t//// @FIXME! @TODO: this is probably wrong, since the CpuBreakException means that a promise was yielded and we should not continue until it has been resolved!!!\n\t\t\t\t//while (state.PC != RA) {\n\t\t\t\t//\ttry {\n\t\t\t\t//\t\tstate.executeAtPC();\n\t\t\t\t//\t} catch (e) {\n\t\t\t\t//\t\tif (!CpuBreakException.is(e)) throw e;\n\t\t\t\t//\t}\n\t\t\t\t//}\n\t\t\t});\n\t\t}\n\t\t//state.callPCSafe();\n\t}\n}\n\nexport enum PspInterrupts {\n\tPSP_GPIO_INT = 4,\n\tPSP_ATA_INT = 5,\n\tPSP_UMD_INT = 6,\n\tPSP_MSCM0_INT = 7,\n\tPSP_WLAN_INT = 8,\n\tPSP_AUDIO_INT = 10,\n\tPSP_I2C_INT = 12,\n\tPSP_SIRCS_INT = 14,\n\tPSP_SYSTIMER0_INT = 15,\n\tPSP_SYSTIMER1_INT = 16,\n\tPSP_SYSTIMER2_INT = 17,\n\tPSP_SYSTIMER3_INT = 18,\n\tPSP_THREAD0_INT = 19,\n\tPSP_NAND_INT = 20,\n\tPSP_DMACPLUS_INT = 21,\n\tPSP_DMA0_INT = 22,\n\tPSP_DMA1_INT = 23,\n\tPSP_MEMLMD_INT = 24,\n\tPSP_GE_INT = 25,\n\tPSP_VBLANK_INT = 30, // 0x1E\n\tPSP_MECODEC_INT = 31,\n\tPSP_HPREMOTE_INT = 36,\n\tPSP_MSCM1_INT = 60,\n\tPSP_MSCM2_INT = 61,\n\tPSP_THREAD1_INT = 65,\n\tPSP_INTERRUPT_INT = 66,\n\tPSP_NUMBER_INTERRUPTS = 67,\n}\n", "import \"../emu/global\"\nimport {PromiseFast, Signal1, SignalPromise, SortedSet} from \"../global/utils\";\nimport {Component} from \"./component\";\n\nexport class Sample {\n\tconstructor(public left: number, public right: number) {\n\t}\n\n\tset(left: number, right: number) {\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\treturn this;\n\t}\n\n\tscale(leftScale: number, rightScale: number) {\n\t\tthis.left *= leftScale;\n\t\tthis.right *= rightScale;\n\t}\n\n\taddScaled(sample: Sample, leftScale: number, rightScale: number) {\n\t\tthis.left += sample.left * leftScale;\n\t\tthis.right += sample.right * rightScale;\n\t}\n\n\tGetNextSample() {\n\t}\n}\n\nexport class PspAudioChannel {\n\tconstructor(public id:number, public audio:PspAudio) {\n\t}\n\n\tstart() {\n\t\tthis.audio.onStart.dispatch(this.id);\n\t}\n\n\tstop() {\n\t\tthis.audio.onStop.dispatch(this.id);\n\t}\n\n\tplayAsync(channels: number, data: Int16Array, leftVolume: number, rightVolume: number): Promise<any> {\n\t\treturn this.audio.onPlayDataAsync.dispatchAsync(this.id, channels, data, leftVolume, rightVolume);\n\t}\n}\n\nexport class PspAudio implements Component {\n    //private context: AudioContext = null;\n    private lastId: number = 0;\n    playingChannels = new SortedSet<PspAudioChannel>();\n\n    constructor() {\n    }\n\n    createChannel() {\n        return new PspAudioChannel(this.lastId++, this);\n    }\n\n    onPlayDataAsync = new SignalPromise<number, number, Int16Array, number, number>();\n    onStart = new Signal1<number>();\n    onStop = new Signal1<number>();\n\n    register() {\n        this.lastId = 0;\n    }\n\n    unregister() {\n        this.playingChannels.forEach((channel:PspAudioChannel) => {\n            channel.stop();\n        });\n        this.lastId = 0;\n        //this.onPlayDataAsync.clear()\n        //this.onStart.clear()\n        //this.onStop.clear()\n    }\n\n    startAsync() {\n        this.register()\n        return PromiseFast.resolve();\n    }\n\n    stopAsync() {\n        this.unregister()\n        return PromiseFast.resolve();\n    }\n\n    frame() {\n    }\n}\n\nexport function convertS16ToF32(channels: number, input: Int16Array, leftVolume: number, rightVolume: number) {\n    const output = new Float32Array(input.length * 2 / channels);\n    const optimized = leftVolume == 1.0 && rightVolume == 1.0;\n    switch (channels) {\n        case 2: {\n            if (optimized) {\n                for (let n = 0; n < output.length; n++) output[n] = input[n] / 32767.0;\n            } else {\n                for (let n = 0; n < output.length; n += 2) {\n                    output[n + 0] = (input[n + 0] / 32767.0) * leftVolume;\n                    output[n + 1] = (input[n + 1] / 32767.0) * rightVolume;\n                }\n            }\n            break;\n        }\n        case 1: {\n            if (optimized) {\n                for (let n = 0, m = 0; n < input.length; n++) {\n                    output[m++] = output[m++] = (input[n] / 32767.0);\n                }\n            } else {\n                for (let n = 0, m = 0; n < input.length; n++) {\n                    let sample = (input[n] / 32767.0);\n                    output[m++] = sample * leftVolume;\n                    output[m++] = sample * rightVolume;\n                }\n            }\n            break;\n        }\n    }\n    return output;\n}\n", "\uFEFFimport \"../emu/global\"\n\nimport {ArrayBufferUtils, logger, PromiseFast, Signal1} from \"../global/utils\";\nimport {PixelConverter, PixelFormat} from \"./pixelformat\";\nimport {Memory} from \"./memory\";\nimport {InterruptManager, PspInterrupts} from \"./interrupt\";\n\nexport interface ThreadWaiter {\n\tdelayMicrosecondsAsync(delayMicroseconds: number, allowcompensating:boolean): Promise<number>;\n}\n\nexport interface IPspDisplay {\n\taddress: number;\n\tbufferWidth: number;\n\tpixelFormat: PixelFormat;\n\tsync: number;\n\twaitVblankAsync(waiter: ThreadWaiter): Promise<number>;\n\twaitVblankStartAsync(waiter: ThreadWaiter): Promise<number>;\n\tsetEnabledDisplay(enable: boolean): void;\n\tupdateTime(): void;\n\tvblankCount: number;\n\thcountTotal: number;\n\tsecondsLeftForVblank: number;\n\tsecondsLeftForVblankStart: number;\n\tvblank: Signal1<number>;\n}\n\nexport class BasePspDisplay {\n\taddress = Memory.DEFAULT_FRAME_ADDRESS\n\tbufferWidth = 512\n\tpixelFormat = PixelFormat.RGBA_8888\n\tsync = 1\n}\n\nexport class DummyPspDisplay extends BasePspDisplay implements IPspDisplay {\n\tvblankCount: number = 0;\n\thcountTotal = 0;\n\tsecondsLeftForVblank = 0.1;\n\tsecondsLeftForVblankStart = 0.1;\n\tvblank = new Signal1<number>();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tupdateTime() {\n\t}\n\n\twaitVblankAsync(waiter: ThreadWaiter) {\n\t\treturn waiter.delayMicrosecondsAsync(20000, true);\n\t}\n\n\twaitVblankStartAsync(waiter: ThreadWaiter) {\n\t\treturn waiter.delayMicrosecondsAsync(20000, true);\n\t}\n\n\tsetEnabledDisplay(enable: boolean) {\n\t}\n}\n\nconst console = logger.named('display')\n\nexport class PspDisplay extends BasePspDisplay implements IPspDisplay {\n\tprivate context: CanvasRenderingContext2D|null;\n\tvblank = new Signal1<number>();\n    // @ts-ignore\n\tprivate imageData: ImageData;\n\tprivate enabled: boolean = true;\n\tprivate _hcount: number = 0;\n\tprivate startTime: number = 0;\n\n\tstatic PROCESSED_PIXELS_PER_SECOND = 9000000; // hz\n\tstatic CYCLES_PER_PIXEL = 1;\n\tstatic PIXELS_IN_A_ROW = 525;\n\n\tstatic VSYNC_ROW = 272;\n\t//static VSYNC_ROW = 100;\n\n\tstatic NUMBER_OF_ROWS = 286;\n\tstatic HCOUNT_PER_VBLANK = 285.72;\n\n\tstatic HORIZONTAL_SYNC_HZ = (PspDisplay.PROCESSED_PIXELS_PER_SECOND * PspDisplay.CYCLES_PER_PIXEL) / PspDisplay.PIXELS_IN_A_ROW; // 17142.85714285714\n\tstatic HORIZONTAL_SECONDS = 1 / PspDisplay.HORIZONTAL_SYNC_HZ; // 5.8333333333333E-5\n\n\tstatic VERTICAL_SYNC_HZ = PspDisplay.HORIZONTAL_SYNC_HZ / PspDisplay.HCOUNT_PER_VBLANK; // 59.998800024\n\tstatic VERTICAL_SECONDS = 1 / PspDisplay.VERTICAL_SYNC_HZ; // 0.016667\n\n\tprivate currentMs:number = 0;\n\tprivate elapsedSeconds:number = 0\n\thcountTotal = 0;\n\thcountCurrent = 0;\n\tvblankCount = 0;\n\tprivate isInVblank = false;\n\n\tprivate rowsLeftForVblank = 0;\n\tsecondsLeftForVblank = 0;\n\n\tprivate rowsLeftForVblankStart = 0;\n\tsecondsLeftForVblankStart = 0;\n\n\tprivate getCurrentMs() {\n\t\treturn performance.now();\n\t}\n\n\tupdateTime() {\n\t\tthis.currentMs = this.getCurrentMs();\n\t\tthis.elapsedSeconds = (this.currentMs - this.startTime) / 1000;\n\t\tthis.hcountTotal = (this.elapsedSeconds * PspDisplay.HORIZONTAL_SYNC_HZ) | 0;\n\t\tthis.hcountCurrent = (((this.elapsedSeconds % 1.00002) * PspDisplay.HORIZONTAL_SYNC_HZ) | 0) % PspDisplay.NUMBER_OF_ROWS;\n\t\tthis.vblankCount = (this.elapsedSeconds * PspDisplay.VERTICAL_SYNC_HZ) | 0;\n\t\t//console.log(this.elapsedSeconds);\n\t\tif (this.hcountCurrent >= PspDisplay.VSYNC_ROW) {\n\t\t\tthis.isInVblank = true;\n\t\t\tthis.rowsLeftForVblank = 0;\n\t\t\tthis.rowsLeftForVblankStart = (PspDisplay.NUMBER_OF_ROWS - this.hcountCurrent) + PspDisplay.VSYNC_ROW;\n\t\t} else {\n\t\t\tthis.isInVblank = false;\n\t\t\tthis.rowsLeftForVblank = PspDisplay.VSYNC_ROW - this.hcountCurrent;\n\t\t\tthis.rowsLeftForVblankStart = this.rowsLeftForVblank;\n\t\t}\n\t\tthis.secondsLeftForVblank = this.rowsLeftForVblank * PspDisplay.HORIZONTAL_SECONDS;\n\t\tthis.secondsLeftForVblankStart = this.rowsLeftForVblankStart * PspDisplay.HORIZONTAL_SECONDS;\n\t}\n\n\tconstructor(public memory: Memory, private interruptManager: InterruptManager, public canvas: HTMLCanvasElement, private webglcanvas: HTMLCanvasElement) {\n\t\tsuper();\n\t\tif (this.canvas) {\n            console.info('Canvas');\n\t\t\tthis.context = <CanvasRenderingContext2D>this.canvas.getContext('2d');\n\t\t\tthis.imageData = this.context.createImageData(512, 272);\n\t\t\tthis.setEnabledDisplay(true);\n\t\t} else {\n            console.info('NO Canvas');\n\t\t\tthis.context = null;\n\t\t\tthis.setEnabledDisplay(false);\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (!this.context || !this.imageData) return;\n\t\tif (!this.enabled) return;\n\n        const imageData = this.imageData;\n        //const w8 = <Uint8ClampedArray><any>imageData.data;\n        const w8 = <Uint8Array><any>imageData.data;\n        const w32 = ArrayBufferUtils.uint8ToUint32(w8);\n        const baseAddress = this.address & 0x0FFFFFFF;\n\n        PixelConverter.decode(this.pixelFormat, this.memory.getPointerU8Array(baseAddress), w32, false);\n\t\tthis.context.putImageData(imageData, 0, 0);\n\t}\n\n\tsetEnabledDisplay(enable: boolean) {\n\t\t//console.log(`display.setEnabledDisplay:${enable}`);\n\t\tthis.enabled = enable;\n\t\tif (this.canvas) this.canvas.style.display = enable ? 'block' : 'none';\n\t\tif (this.webglcanvas) this.webglcanvas.style.display = !enable ? 'block' : 'none';\n\n\t\t//this.canvas.style.display = 'none';\n\t\t//this.webglcanvas.style.display = 'block';\n\t}\n\n\tregister() {\n        this.startTime = this.getCurrentMs();\n        this.updateTime();\n    }\n\n    unregister() {\n    }\n\n    frameLastMs = 0\n    frameCccumulatedMs = 0\n\n    frame() {\n\t    const MAX_SIMULATE_FRAMES = 2\n\t    const VBLANK_MS = 1000 / PspDisplay.VERTICAL_SYNC_HZ\n        const currentMs = this.getCurrentMs()\n        if (this.frameLastMs == 0) this.frameLastMs = currentMs\n        const elapsedMs = currentMs - this.frameLastMs\n        this.frameLastMs = currentMs\n        this.frameCccumulatedMs += elapsedMs\n\n        this.frameCccumulatedMs = Math.min(this.frameCccumulatedMs, VBLANK_MS * MAX_SIMULATE_FRAMES)\n\n        while (this.frameCccumulatedMs >= VBLANK_MS) {\n            this.frameCccumulatedMs -= VBLANK_MS\n            this.updateTime();\n            this.vblankCount++;\n            this.update();\n            this.vblank.dispatch(this.vblankCount);\n            this.interruptManager.interrupt(PspInterrupts.PSP_VBLANK_INT);\n        }\n    }\n\n\tmustWaitVBlank = true;\n\tlastTimeVblank = 0;\n\t//mustWaitVBlank = false;\n\n\tprivate checkVblankThrottle() {\n        const currentTime = performance.now();\n        if ((currentTime - this.lastTimeVblank) >= (PspDisplay.VERTICAL_SECONDS * 1000)) {\n\t\t\tthis.lastTimeVblank = currentTime;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync waitVblankAsync(waiter: ThreadWaiter) {\n\t\tthis.updateTime();\n\t\tif (!this.mustWaitVBlank) return 0;\n\t\tif (this.checkVblankThrottle()) return 0;\n\t\treturn waiter.delayMicrosecondsAsync(this.secondsLeftForVblank * 1000000, true);\n\t}\n\n    async waitVblankStartAsync(waiter: ThreadWaiter) {\n\t\tthis.updateTime();\n\t\tif (!this.mustWaitVBlank) return 0\n\t\tif (this.checkVblankThrottle()) return 0\n\t\treturn waiter.delayMicrosecondsAsync(this.secondsLeftForVblankStart * 1000000, true);\n\t}\n}\n", "export class Battery {\n\tpublic charging: boolean = false\n\tpublic level: number = 0\n\tpublic lifetime: number = 0\n\t\n\tget isLowBattery() {\n\t\treturn this.level < 0.22;\n\t}\n\t\n\tget chargingType() {\n\t\treturn <ChargingEnum>(+this.charging);\n\t}\n\t\n\tget iconStatus() {\n        const level = this.level;\n        if (level < 0.15) return BatteryStatusEnum.VeryLow;\n\t\tif (level < 0.30) return BatteryStatusEnum.Low;\n\t\tif (level < 0.80) return BatteryStatusEnum.PartiallyFilled;\n\t\treturn BatteryStatusEnum.FullyFilled;\n\t}\n}\n\nexport enum ChargingEnum {\n\tNotCharging = 0,\n\tCharging = 1,\n}\n\nexport enum BatteryStatusEnum {\n\tVeryLow = 0,\n\tLow = 1,\n\tPartiallyFilled = 2,\n\tFullyFilled = 3,\n}\n\nexport interface BatteryInfo {\n\tcharging: boolean;\n\tlevel: number;\n\tlifetime: number;\n}\n\n", "\uFEFFimport \"../emu/global\"\nimport {\n    Int8,\n    Struct,\n    StructInt8,\n    StructStructArray,\n    StructUInt32\n} from \"../global/struct\";\nimport {MathUtils} from \"../global/math\";\nimport {Component} from \"./component\";\n\nexport class PspController implements IPspController {\n    data = new SceCtrlData()\n    latchSamplingCount: number = 0\n\n    private contributors: PspControllerContributor[] = []\n\n    addContributor(contributor: PspControllerContributor) {\n        this.addContributors(contributor)\n    }\n\n    addContributors(...contributors: PspControllerContributor[]) {\n        this.contributors.push(...contributors)\n        contributors.forEach(it => it.register())\n        return this\n    }\n\n    register() {\n    }\n\n    unregister() {\n        let contributor: PspControllerContributor | undefined\n        while (contributor = this.contributors.pop()) {\n            contributor.unregister()\n        }\n    }\n\n    frame() {\n        this.data.reset()\n        for (const contributor of this.contributors) {\n            contributor.computeFrame()\n            this.data.setToMerge(this.data, contributor.data)\n        }\n    }\n}\n\nexport class SceCtrlData extends Struct {\n\t@StructUInt32 timeStamp: number = 0;\n    @StructUInt32 buttons: PspCtrlButtons = PspCtrlButtons.none;\n    @StructInt8 lx: number = 0;\n    @StructInt8 ly: number = 0;\n\t@StructStructArray(Int8, 6) _rsrv = new Int32Array(5)\n\n    constructor() {\n\t    super()\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treset(timeStamp: number = 0) {\n\t    this.timeStamp = timeStamp\n        this.buttons = PspCtrlButtons.none\n\t    this.x = 0\n        this.y = 0\n    }\n\n    setToMerge(l: SceCtrlData, r: SceCtrlData) {\n\t    this.timeStamp = l.timeStamp\n\t    this.x = l.x + r.x\n        this.y = l.y + r.y\n        this.buttons = l.buttons | r.buttons\n    }\n\n    copyFrom(other: SceCtrlData) {\n        this.timeStamp = other.timeStamp\n        this.buttons = other.buttons\n        this.lx = other.lx\n        this.ly = other.ly\n    }\n\t\t\n\tget x() { return MathUtils.clampM1_1(((this.lx / 255.0) - 0.5) * 2.0); }\n\tget y() { return MathUtils.clampM1_1(((this.ly / 255.0) - 0.5) * 2.0); }\n\n\tset x(value: number) { this.lx = MathUtils.clamp0_255(((value / 2.0) + 0.5) * 255.0); }\n\tset y(value: number) { this.ly = MathUtils.clamp0_255(((value / 2.0) + 0.5) * 255.0); }\n}\n\nexport abstract class PspControllerContributor implements Component {\n    public data: SceCtrlData = new SceCtrlData()\n    computeFrame(): void { }\n    register(): void { }\n    unregister(): void { }\n}\n\nexport interface IPspController extends Component {\n    data: SceCtrlData;\n    latchSamplingCount: number;\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport const enum PspCtrlButtons {\n    none = 0x0000000,\n\tselect = 0x0000001,\n\tstart = 0x0000008,\n\tup = 0x0000010,\n\tright = 0x0000020,\n\tdown = 0x0000040,\n\tleft = 0x0000080,\n\tleftTrigger = 0x0000100,\n\trightTrigger = 0x0000200,\n\ttriangle = 0x0001000,\n\tcircle = 0x0002000,\n\tcross = 0x0004000,\n\tsquare = 0x0008000,\n\thome = 0x0010000,\n\thold = 0x0020000,\n\twirelessLanUp = 0x0040000,\n\tremote = 0x0080000,\n\tvolumeUp = 0x0100000,\n\tvolumeDown = 0x0200000,\n\tscreen = 0x0400000,\n\tnote = 0x0800000,\n\tdiscPresent = 0x1000000,\n\tmemoryStickPresent = 0x2000000,\n}\n", "\uFEFFimport {\n    Int16,\n    Int32,\n    Int64,\n    Stringz,\n    Struct,\n    StructArray,\n    StructClass,\n    StructEntry,\n    StructInt16, StructInt32, StructInt64, StructMember, StructStringz, StructStructArray, StructStructStringz\n} from \"../global/struct\";\nimport {Integer64} from \"../global/int64\";\n\nexport const enum SeekAnchor {\n\tSet = 0,\n\tCursor = 1,\n\tEnd = 2,\n}\n\nexport const enum SceMode {\n}\n\nexport const enum IOFileModes {\n\tFormatMask = 0x0038,\n\tSymbolicLink = 0x0008,\n\tDirectory = 0x0010,\n\tFile = 0x0020,\n\tCanRead = 0x0004,\n\tCanWrite = 0x0002,\n\tCanExecute = 0x0001,\n}\n\nexport class ScePspDateTime extends Struct {\n    @StructInt16 year: number = 0;\n    @StructInt16 month: number = 0;\n    @StructInt16 day: number = 0;\n    @StructInt16 hour: number = 0;\n    @StructInt16 minute: number = 0;\n    @StructInt16 second: number = 0;\n    @StructInt32 microseconds: number = 0;\n\n\tstatic fromDate(date: Date) {\n\t\tif (!date) date = new Date();\n        const pspdate = new ScePspDateTime();\n\t\tpspdate.year = date.getFullYear();\n\t\tpspdate.month = date.getMonth();\n\t\tpspdate.day = date.getDay();\n\t\tpspdate.hour = date.getHours();\n\t\tpspdate.minute = date.getMinutes();\n\t\tpspdate.second = date.getSeconds();\n\t\tpspdate.microseconds = date.getMilliseconds() * 1000;\n\t\treturn pspdate;\n\t}\n\n\tstatic fromTicks(ticks: Integer64) {\n\t\treturn ScePspDateTime.fromDate(new Date(ticks.getNumber()));\n\t}\n\n\tgetTotalMicroseconds() {\n\t\treturn Integer64.fromNumber(\n\t\t\t(Date.UTC(this.year + 1970, this.month - 1, this.day, this.hour, this.minute, this.second, this.microseconds / 1000) * 1000)// + 62135596800000000\n\t\t);\n\t}\n}\n\nexport class SceIoStat extends Struct {\n\t@StructInt32 mode = <SceMode>0;\n    @StructInt32 attributes = IOFileModes.File;\n    @StructInt64 size = 0;\n    @StructMember(ScePspDateTime.struct) timeCreation = new ScePspDateTime();\n    @StructMember(ScePspDateTime.struct) timeLastAccess = new ScePspDateTime();\n    @StructMember(ScePspDateTime.struct) timeLastModification = new ScePspDateTime();\n\t@StructStructArray(Int32, 6) deviceDependentData = [0, 0, 0, 0, 0, 0];\n}\n\nexport class HleIoDirent extends Struct {\n\t@StructMember(SceIoStat.struct) stat = new SceIoStat();\n\t@StructStructStringz(256) name = '';\n\t@StructInt32 privateData = 0;\n    @StructInt32 dummy = 0;\n}\n\nexport const enum PspLanguages { // ISO-639-1\n\tJAPANESE = 0, // ja\n\tENGLISH = 1, // en\n\tFRENCH = 2, // fr\n\tSPANISH = 3, // es\n\tGERMAN = 4, // de\n\tITALIAN = 5, // it\n\tDUTCH = 6, // nl\n\tPORTUGUESE = 7, // pt\n\tRUSSIAN = 8, // ru\n\tKOREAN = 9, // ko\n\tTRADITIONAL_CHINESE = 10, // zh\n\tSIMPLIFIED_CHINESE = 11, // zh?\n}\n\nexport const enum ButtonPreference {\n\tJAP = 0,\n\tNA = 1,\n}", "\uFEFFimport {ButtonPreference, PspLanguages} from \"./structs\";\n\nexport class Config {\n\tlanguage = PspLanguages.ENGLISH;\n\tbuttonPreference = ButtonPreference.NA;\n\n\tconstructor() {\n\t\tthis.language = Config.detectLanguage();\n\t}\n\n\tstatic detectLanguage() {\n\t\tif (typeof navigator == 'undefined') return PspLanguages.ENGLISH;\n\t\tif (!navigator.language) return PspLanguages.ENGLISH;\n\t\t// en_US\n\t\tswitch (navigator.language.split(/[_\\-]/g)[0]) {\n\t\t\tcase 'ja': return PspLanguages.JAPANESE;\n\t\t\tcase 'en': return PspLanguages.ENGLISH;\n\t\t\tcase 'fr': return PspLanguages.FRENCH;\n\t\t\tcase 'es': return PspLanguages.SPANISH;\n\t\t\tcase 'de': return PspLanguages.GERMAN;\n\t\t\tcase 'it': return PspLanguages.ITALIAN;\n\t\t\tcase 'nl': return PspLanguages.DUTCH;\n\t\t\tcase 'pt': return PspLanguages.PORTUGUESE;\n\t\t\tcase 'ru': return PspLanguages.RUSSIAN;\n\t\t\tcase 'ko': return PspLanguages.KOREAN;\n\t\t\t// @TODO which value have navigators for chinese?\n\t\t\tcase 'zh': return PspLanguages.TRADITIONAL_CHINESE;\n\t\t\tcase 'zh2': return PspLanguages.SIMPLIFIED_CHINESE;\n\t\t\tdefault: return PspLanguages.ENGLISH;\n\t\t}\n\t}\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\nimport {nativeFunction, U32} from \"../utils\";\n\nexport class ExceptionManagerForKernel {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x565C0B0E, 150)\n\t@U32 sceKernelRegisterDefaultExceptionHandler(@U32 exceptionHandlerFunction: number) {\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {\n    BoolTypeType,\n    BytesTypeType, CpuStateTypeType,\n    createNativeFunction,\n    CreateOptions, FixedBytesType,\n    MemoryTypeType,\n    ThreadTypeType,\n    VoidTypeType\n} from \"../core/cpu/cpu_core\";\nimport {Float32, Int32, Int64, IType, Pointer, Ptr, StringzVariable, UInt32} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\n\nexport function nativeFunction(exportId: number, firmwareVersion: number, options?: CreateOptions) {\n    return (target: any, key: string, descriptor: TypedPropertyDescriptor<any>) => {\n        //console.log(target, key, descriptor);\n        if (typeof target.natives == 'undefined') target.natives = [];\n        if (typeof target.nativesParams == 'undefined') target.nativesParams = {};\n        if (typeof target.nativeRet == 'undefined') target.nativeRet = {};\n        if (!descriptor) {\n            console.error(\"descriptor == null\");\n            console.error(target);\n            console.error(key);\n            console.error(descriptor);\n        }\n        target.natives.push((target: any) => {\n            return createNativeFunction(exportId, firmwareVersion, target.nativeRet[key], target.nativesParams[key], target, descriptor.value, options, `${target.constructor.name}`, key)\n        });\n        return descriptor;\n    };\n}\n\n//export function nativeFunction2(): any {\n//    return (target: any, key: string, descriptor: TypedPropertyDescriptor<any>) => {\n//        console.warn(\"nativeFunction2\", target, key)\n//        console.log(target.nativesParams[key])\n//    }\n//}\n\n// https://www.typescriptlang.org/docs/handbook/decorators.html\nexport function param(type: IType<any>): any {\n    return (target: any, key: string, info: number | TypedPropertyDescriptor<any>) => {\n        if (typeof info == \"number\") {\n            const parameterIndex = info as number\n            if (typeof target.nativesParams == 'undefined') target.nativesParams = {};\n            if (!target.nativesParams[key]) target.nativesParams[key] = []\n            target.nativesParams[key][parameterIndex] = type\n        } else {\n            if (typeof target.nativeRet == 'undefined') target.nativeRet = {};\n            target.nativeRet[key] = type\n            //console.warn(\"target.nativeRet\", key, type)\n        }\n        //console.warn(\"param\", parameterIndex, type, target, key)\n    }\n}\n\nexport const VOID: any = param(VoidTypeType)\nexport const STRING: any = param(StringzVariable)\nexport const THREAD: any = param(ThreadTypeType)\nexport const CPUSTATE: any = param(CpuStateTypeType)\nexport const MEMORY: any = param(MemoryTypeType)\nexport const I64: any = param(Int64)\nexport const F32: any = param(Float32)\nexport const U32: any = param(UInt32)\nexport const I32: any = param(Int32)\nexport const BOOL: any = param(BoolTypeType)\nexport const PTR: any = param(Ptr)\nexport const BYTES: any = param(BytesTypeType)\nexport function FBYTES(size: number): any { return param(new FixedBytesType(size)) }\n", "\uFEFFimport {addressToHex} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\nimport {InterruptHandler, PspInterrupts} from \"../../core/interrupt\";\n\nexport class InterruptManager {\n\tconstructor(private context: EmulatorContext) {\n\t\tthis.context.display.vblank.add(() => {\n\t\t\t//this.context.callbackManager.notify(\n\t\t});\n\t}\n\n\t@nativeFunction(0xCA04A2B9, 150)\n\t@U32 sceKernelRegisterSubIntrHandler(\n\t    @THREAD thread:Thread,\n        @I32 interrupt: PspInterrupts,\n        @I32 handlerIndex: number,\n        @U32 callbackAddress: number,\n        @U32 callbackArgument: number\n    ) {\n        const interruptManager = this.context.interruptManager;\n        const interruptHandler: InterruptHandler = interruptManager.get(interrupt).get(handlerIndex);\n\n        console.info(`sceKernelRegisterSubIntrHandler: ${PspInterrupts[interrupt]}: ${handlerIndex}: ${addressToHex(callbackAddress)}: ${addressToHex(callbackArgument)}`);\n\t\tinterruptHandler.address = callbackAddress;\n\t\tinterruptHandler.argument = callbackArgument;\n\t\tinterruptHandler.cpuState = thread.state;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xFB8E22EC, 150)\n\t@U32 sceKernelEnableSubIntr(@I32 interrupt: PspInterrupts, @I32 handlerIndex: number) {\n        const interruptManager = this.context.interruptManager;\n\n        if (interrupt >= PspInterrupts.PSP_NUMBER_INTERRUPTS) return -1;\n\t\tif (!interruptManager.get(interrupt).has(handlerIndex)) return -1;\n\n\t\tinterruptManager.get(interrupt).get(handlerIndex).enabled = true;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD61E6961, 150)\n\t@U32 sceKernelReleaseSubIntrHandler(@I32 pspInterrupt: PspInterrupts, @I32 handlerIndex: number) {\n        const interruptManager = this.context.interruptManager;\n\n        if (pspInterrupt >= PspInterrupts.PSP_NUMBER_INTERRUPTS) return -1;\n\t\tif (!interruptManager.get(pspInterrupt).has(handlerIndex)) return -1;\n\n\t\tinterruptManager.get(pspInterrupt).get(handlerIndex).enabled = false;\n\t\treturn 0;\n\t}\n}\n\n", "\uFEFFimport {nativeFunction, STRING, VOID} from \"../utils\";\nimport {EmulatorContext} from \"../../emu/context\";\n\nexport class KDebugForKernel {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x84F370BC, 150)\n\t@VOID Kprintf(@STRING format: string) {\n\t\tconsole.info(`Kprintf: ${format}`);\n\t}\n}\n", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\n\nexport class Kernel_Library {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x092968F4, 150)\n\t@U32 sceKernelCpuSuspendIntr() {\n\t\treturn PromiseFast.resolve(this.context.interruptManager.suspend());\n\t}\n\n\t@nativeFunction(0x5F10D406, 150)\n\t@U32 sceKernelCpuResumeIntr(@THREAD thread:Thread, @U32 flags: number): any {\n\t\tthis.context.interruptManager.resume(flags);\n\t\t//return 0;\n\t\t//throw(new CpuBreakException());\n\t\t//thread.state.V0 = 0;\n\t\t//throw (new CpuBreakException());\n\t\tthread.sceKernelCpuResumeIntrCount++;\n\t\tif (thread.sceKernelCpuResumeIntrCount >= 3) {\n\t\t\tthread.sceKernelCpuResumeIntrCount = 0;\n\t\t\treturn PromiseFast.resolve(0);\n\t\t\t//return thread.delayMicrosecondsAsync(1000);\n\t\t} else {\n\t\t\treturn PromiseFast.resolve(0);\n\t\t}\n\t}\n\n\t@nativeFunction(0xA089ECA4, 150)\n\t@U32 sceKernelMemset(@U32 address: number, @I32 value: number, @I32 size: number) {\n\t\tthis.context.memory.memset(address, value, size);\n\t\treturn address;\n\t}\n\n\t@nativeFunction(0x1839852A, 150)\n\t@U32 sceKernelMemcpy(@U32 dst: number, @U32 src: number, @I32 size: number) {\n\t\tthis.context.memory.copy(src, dst, size);\n\t\treturn dst;\n\t}\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, VOID} from \"../utils\";\n\nexport class LoadCoreForKernel {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xD8779AC6, 150)\n\t@VOID sceKernelIcacheClearAll() {\n\t\tthis.context.currentInstructionCache.invalidateAll();\n\t}\n\n\t@nativeFunction(0xCCE4A157, 150)\n\t@I32 sceKernelFindModuleByUID(@I32 moduleID: number) {\n\t\tconsole.warn(`Not implemented sceKernelFindModuleByUID(${moduleID})`)\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {logger} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {CPUSTATE, I32, nativeFunction, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\nimport {CpuState} from \"../../core/cpu/cpu_core\";\n\nconst console = logger.named('module.LoadExecForUser');\n\nexport class LoadExecForUser {\n    constructor(private context: EmulatorContext) { }\n\n    @nativeFunction(0xBD2F1094, 150)\n\t@U32 sceKernelExitGame(@THREAD thread: Thread, @CPUSTATE state: CpuState) {\n        console.info('sceKernelExitGame');\n\t\tthread.stop('sceKernelExitGame');\n\t\tthis.context.threadManager.exitGame(0);\n\t\tstate.throwEndCycles()\n        return 0;\n\t}\n\n\t@nativeFunction(0x05572A5F, 150)\n    @U32 sceKernelExitGame2(@THREAD thread: Thread, @CPUSTATE state: CpuState) {\n\t\tconsole.info(\"Call stack:\");\n\t\tstate.printCallstack(this.context.symbolLookup);\n\t\t//this.context.instructionCache.functionGenerator.getInstructionUsageCount().forEach((item) => { console.log(item.name, ':', item.count); });\n\n\t\tconsole.info('sceKernelExitGame2');\n\t\tthis.context.threadManager.exitGame(0);\n\t\tthread.stop('sceKernelExitGame2');\n        state.throwEndCycles();\n    }\n\n    @nativeFunction(0x4AC57943, 150)\n    @U32 sceKernelRegisterExitCallback(@I32 callbackId: number) {\n        //console.warn(`Not implemented sceKernelRegisterExitCallback: ${callbackId}`);\n        return 0;\n    }\n}\n", "\uFEFFimport {sprintf} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\n\nexport class ModuleMgrForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xD1FF982A, 150)\n    @U32 sceKernelStopModule() {\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x2E0911AA, 150)\n\t@U32 sceKernelUnloadModule(@I32 id: number) {\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD675EBB8, 150)\n    @U32 sceKernelSelfStopUnloadModule(@I32 unknown: number, @I32 argsize: number, @I32 argp: number, @THREAD thread: Thread) {\n\t\tconsole.info(\"Call stack:\");\n\t\tthread.state.printCallstack(this.context.symbolLookup);\n\t\t//this.context.instructionCache.functionGenerator.getInstructionUsageCount().forEach((item) => { console.log(item.name, ':', item.count); });\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelSelfStopUnloadModule(%d, %d, %d)', unknown, argsize, argp));\n\t\tthrow new Error(\"sceKernelSelfStopUnloadModule\");\n\t}\n\n\t@nativeFunction(0xCC1D3699, 150)\n    @U32 sceKernelStopUnloadSelfModule(@I32 argsize: number, @I32 argp: number, @I32 optionsAddress:number, @THREAD thread: Thread) {\n\t\tthrow new Error(\"sceKernelStopUnloadSelfModule\");\n\t}\n\n\t@nativeFunction(0x977DE386, 150)\n\t@U32 sceKernelLoadModule(@STRING path: string, @U32 flags: number, @PTR sceKernelLMOption: Stream) {\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelLoadModule(\"%s\", %d)', path, flags));\n\t\treturn 0x08900000;\n\t}\n\n\t@nativeFunction(0x50F0C1EC, 150)\n    @U32 sceKernelStartModule(@I32 moduleId: number, @I32 argumentSize: number, @U32 argumentPointer: number, @PTR status:Stream, @PTR sceKernelSMOption:Stream) {\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelStartModule(%d, %d, %d)', moduleId, argumentSize, argumentPointer));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD8B73127, 150)\n    @U32 sceKernelGetModuleIdByAddress(@U32 address: number) {\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelGetModuleIdByAddress(%08X)', address));\n\t\treturn 3;\n\t}\n\n\t@nativeFunction(0xF0A26395, 150)\n    @U32 sceKernelGetModuleId() {\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelGetModuleId()'));\n\t\treturn 4; // TODO!\n\t}\n\n\t@nativeFunction(0xB7F46618, 150)\n    @U32 sceKernelLoadModuleByID(@U32 fileId: number, @U32 flags: number, @PTR sceKernelLMOption: Stream) {\n\t\tconsole.warn(sprintf('Not implemented ModuleMgrForUser.sceKernelLoadModuleByID(%d, %08X)', fileId, flags));\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {logger} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, U32} from \"../utils\";\nimport {Atrac3PlusUtil, AtracFileInfo} from \"../../me/atrac3plus/Atrac3PlusUtil\";\nimport {Atrac3plusDecoder} from \"../../me/atrac3plus/Atrac3plusDecoder\";\nimport {ArrayUtils} from \"../../global/math\";\nimport {Atrac3plusConstants, CodecType} from \"../../me/atrac3plus/Atrac3plusConstants\";\nimport {IMemory} from \"../../me/MeUtils\";\n\ntype Int = number\n\nconst log = logger.named(\"sceAtrac3plus\")\n\nexport class sceAtrac3plus {\n\tconstructor(private context: EmulatorContext) { }\n\n    getStartSkippedSamples(codecType: CodecType) {\n        switch (codecType) {\n            case Atrac3plusConstants.PSP_CODEC_AT3: return 69\n            case Atrac3plusConstants.PSP_CODEC_AT3PLUS: return 368\n            default: return 0\n        }\n    }\n\n    getMaxSamples(codecType: CodecType) {\n        switch (codecType) {\n            case Atrac3plusConstants.PSP_CODEC_AT3: return 1024\n            case Atrac3plusConstants.PSP_CODEC_AT3PLUS: return Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES\n            default: return 0\n        }\n    }\n\n    private atracIDs = ArrayUtils.create(6, i => new AtracID(i))\n\n    @nativeFunction(0x7A20E7AF, 150)\n\t@U32 sceAtracSetDataAndGetID(@I32 dataPtr: number, @I32 bufferSize: number) {\n        const id = this.atracIDs.first(it => !it.inUse)\n        if (!id) return SceKernelErrors.ERROR_ATRAC_NO_ID\n        this.sceAtracSetData(id.id, dataPtr, bufferSize)\n        return id.id\n\t}\n\n    @nativeFunction(0x0E2A73AB, 150)\n    @U32 sceAtracSetData(@I32 atID: number, @I32 dataPtr: number, @I32 bufferSize: number) {\n        if (!this.hasById(atID)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const id = this.getAtrac(atID)\n        const info = id.info\n        const mem = this.context.memory\n        const dataStream = mem.getPointerStream(dataPtr, bufferSize)!\n        //const fileData = dataStream.clone().readAllBytes()\n        log.trace(\"sceAtracSetData Partially implemented\")\n\n        const res = Atrac3PlusUtil.analyzeRiffFile(dataStream.clone(), 0, bufferSize, id.info)\n        if (res < 0) {\n            console.error(\"Invalid atrac data\")\n            return res\n        }\n        const outputChannels = 2\n        //id.inputBuffer = fileData\n        const startSkippedSamples = this.getStartSkippedSamples(Atrac3plusConstants.PSP_CODEC_AT3PLUS)\n        const maxSamples = this.getMaxSamples(Atrac3plusConstants.PSP_CODEC_AT3PLUS)\n        const skippedSamples = startSkippedSamples + info.atracSampleOffset\n        const skippedFrames = Math.ceil(skippedSamples / maxSamples)\n        //id.startAddr = dataPtr + id.info.inputFileDataOffset + (skippedFrames * info.atracBytesPerFrame)\n        id.data = dataStream.clone().skipThis(id.info.inputFileDataOffset).readBytesCloned(id.info.inputDataSize)\n        id.dataMem = new Uint8ArrayMem(id.data)\n        id.startAddr = 0\n        id.readAddr = id.startAddr\n        id.endAddr = id.startAddr + id.info.inputDataSize\n        id.decoder.init(id.info.atracBytesPerFrame, id.info.atracChannels, outputChannels, 0)\n        //console.log(id.info)\n        //console.error(`Decoder initialized with ${id.info.atracBytesPerFrame}, ${id.info.atracChannels}, ${outputChannels}, 0`)\n        return 0;\n    }\n\n    getAtrac(id: Int) { return this.atracIDs[id] }\n\n    @nativeFunction(0x83E85EA0, 150)\n    @U32 sceAtracGetSecondBufferInfo(@I32 atID: number, @PTR puiPosition: Stream, @PTR puiDataByte: Stream) {\n        logger.error(`sceAtracGetSecondBufferInfo Not implemented (${atID}, ${puiPosition}, ${puiDataByte})`)\n        const id = this.getAtrac(atID)\n        if (!id.isSecondBufferNeeded) {\n            puiPosition.writeInt32(0)\n            puiDataByte.writeInt32(0)\n            return SceKernelErrors.ERROR_ATRAC_SECOND_BUFFER_NOT_NEEDED\n        } else {\n            puiPosition.writeInt32(id.secondBufferReadPosition)\n            puiDataByte.writeInt32(id.secondBufferSize)\n            return 0\n        }\n    }\n\n    @nativeFunction(0x83BF7AFD, 150)\n    @U32 sceAtracSetSecondBuffer(@I32 id: number, @PTR pucSecondBufferAddr: Stream, @U32 uiSecondBufferByte: number) {\n        //throw (new Error(\"Not implemented sceAtracSetSecondBuffer\"));\n        return 0;\n    }\n\n    @nativeFunction(0xA2BBA8BE, 150)\n    @U32 sceAtracGetSoundSample(@I32 id: number, @PTR endSamplePtr: Stream, @PTR loopStartSamplePtr: Stream, @PTR loopEndSamplePtr: Stream) {\n        if (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        const hasLoops = (atrac3.info.loops != null) && (atrac3.info.loops.length > 0);\n        if (endSamplePtr) endSamplePtr.writeInt32(atrac3.info.atracEndSample)\n        //if (loopStartSamplePtr) loopStartSamplePtr.writeInt32(hasLoops ? atrac3.LoopInfoList[0].StartSample : -1);\n        if (loopStartSamplePtr) loopStartSamplePtr.writeInt32(-1);\n        //if (loopEndSamplePtr) *LoopEndSamplePointer = hasLoops ? atrac3.LoopInfoList[0].EndSample : -1;\n        if (loopEndSamplePtr) loopEndSamplePtr.writeInt32(-1);\n        return 0;\n    }\n\n    @nativeFunction(0x868120B5, 150)\n    @U32 sceAtracSetLoopNum(@I32 id: number, @I32 numberOfLoops: number) {\n        if (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        atrac3.info.numLoops = numberOfLoops;\n        return 0;\n    }\n    /**\n     * Gets the remaining (not decoded) number of frames\n     * Pointer to a integer that receives either -1 if all at3 data is already on memory,\n     * or the remaining (not decoded yet) frames at memory if not all at3 data is on memory\n     * @return Less than 0 on error, otherwise 0\n     */\n    @nativeFunction(0x9AE849A7, 150)\n    @U32 sceAtracGetRemainFrame(@I32 id: number, @PTR remainFramePtr: Stream) {\n        if (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        if (remainFramePtr) remainFramePtr.writeInt32(atrac3.remainFrames);\n        return 0;\n    }\n\n    @nativeFunction(0xE23E3A35, 150)\n    @U32 sceAtracGetNextDecodePosition(@I32 id: number, @PTR samplePositionPtr: Stream) {\n        if (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        if (atrac3.decodingReachedEnd) return SceKernelErrors.ERROR_ATRAC_ALL_DATA_DECODED;\n        if (samplePositionPtr) samplePositionPtr.writeInt32(atrac3.currentFrame);\n        return 0;\n    }\n\n    @nativeFunction(0x6A8C3CD5, 150)\n    @U32 sceAtracDecodeData(\n        @I32 idAT: number,\n        @PTR samplesAddr: Stream,\n        @PTR samplesNbrAddr: Stream,\n        @PTR outEndAddr: Stream,\n        @PTR remainFramesAddr: Stream\n    ) {\n        logger.trace(\"sceAtracDecodeData Not implemented ($idAT, $samplesAddr, $samplesNbrAddr, $outEndAddr, $remainFramesAddr)\")\n        const id = this.getAtrac(idAT)\n        const info = id.info\n        if (id.isSecondBufferNeeded && !id.isSecondBufferSet) {\n            logger.warn(\"sceAtracDecodeData atracID=0x%X needs second buffer!\".format(idAT))\n            return SceKernelErrors.ERROR_ATRAC_SECOND_BUFFER_NEEDED\n        }\n\n        const result = id.decoder.decode(id.dataMem, id.readAddr, info.atracBytesPerFrame, samplesAddr)\n        if (result < 0) {\n            samplesNbrAddr.writeInt32(0)\n            return result\n        }\n\n        id.moveNext()\n        samplesNbrAddr.writeInt32(id.decoder.numberOfSamples)\n        //remainFramesAddr.set(id.remainFrames)\n        remainFramesAddr.writeInt32(id.remainFrames)\n\n        if (result == 0) {\n            this.context.threadManager.delayThread(2300)\n        }\n\n        return result\n    }\n\n\t@nativeFunction(0x61EB33F5, 150)\n    @U32 sceAtracReleaseAtracID(@I32 atID: number) {\n        const atrac = this.getAtrac(atID)\n        atrac.inUse = false\n        return 0\n\t}\n\n\t@nativeFunction(0xA554A158, 150)\n\t@U32 sceAtracGetBitrate(@I32 id: number, @PTR bitratePtr: Stream) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        bitratePtr.writeInt32(atrac3.info.atracBitrate);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x31668baa, 150)\n\t@U32 sceAtracGetChannel(@I32 id: number, @PTR channelsPtr: Stream) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        channelsPtr.writeInt32(atrac3.info.atracChannels);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD6A5F2F7, 150)\n\t@U32 sceAtracGetMaxSample(@I32 id: number, @PTR maxNumberOfSamplesPtr: Stream) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        maxNumberOfSamplesPtr.writeInt32(this.getMaxSamples(Atrac3plusConstants.PSP_CODEC_AT3PLUS));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x36FAABFB, 150)\n\t@U32 sceAtracGetNextSample(@I32 id: number, @PTR numberOfSamplesInNextFramePtr: Stream) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n\n        numberOfSamplesInNextFramePtr.writeInt32(Math.min(this.getMaxSamples(Atrac3plusConstants.PSP_CODEC_AT3PLUS), atrac3.byteAvailable));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x780F88D1, 150)\n\t@U32 sceAtracGetAtracID(@I32 codecType: CodecType) {\n\t\tif (codecType != CodecType.PSP_MODE_AT_3 && codecType != CodecType.PSP_MODE_AT_3_PLUS) {\n\t\t\treturn SceKernelErrors.ATRAC_ERROR_INVALID_CODECTYPE;\n\t\t}\n\t\treturn 1\n\t}\n\n\thasById(id: number) {\n        return id >= 0 && id < this.atracIDs.length\n    }\n\t\n\t@nativeFunction(0x7DB31251, 150)\n\t@U32 sceAtracAddStreamData(@I32 id: number, @I32 bytesToAdd: number) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        //console.warn(\"Not implemented sceAtracAddStreamData\", id, bytesToAdd, atrac3);\n\t\t//throw (new Error(\"Not implemented sceAtracAddStreamData\"));\n\t\t//return -1;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x5D268707, 150)\n\t@U32 sceAtracGetStreamDataInfo(\n\t    @I32 id: number,\n        @PTR writePointerPointer: Stream,\n        @PTR availableBytesPtr: Stream,\n        @PTR readOffsetPtr: Stream\n    ) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        writePointerPointer.writeInt32(0);\n\t\tavailableBytesPtr.writeInt32(0);\n\t\treadOffsetPtr.writeInt32(0);\n\t\t//WritePointerPointer = Atrac.PrimaryBuffer.Low; // @FIXME!!\n\t\t//AvailableBytes = Atrac.PrimaryBuffer.Size;\n\t\t//ReadOffset = Atrac.PrimaryBufferReaded;\n\n\t\t//console.warn(\"Not implemented sceAtracGetStreamDataInfo\");\n\t\t//throw (new Error(\"Not implemented sceAtracGetStreamDataInfo\"));\n\t\t//return -1;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xCA3CA3D2, 150)\n\t@U32 sceAtracGetBufferInfoForReseting(@I32 id: number, @U32 uiSample: number, @PTR bufferInfoPtr: Stream) {\n\t\tthrow new Error(\"Not implemented sceAtracGetBufferInfoForReseting\");\n\t}\n\n\t@nativeFunction(0x644E5607, 150)\n\t@U32 sceAtracResetPlayPosition(@I32 id: number, @U32 uiSample: number, @U32 uiWriteByteFirstBuf: number, @U32 uiWriteByteSecondBuf: number) {\n\t\tthrow new Error(\"Not implemented sceAtracResetPlayPosition\");\n\t}\n\n\t@nativeFunction(0xE88F759B, 150)\n\t@U32 sceAtracGetInternalErrorInfo(@I32 id: number, @PTR errorResultPtr: Stream) {\n\t\tthrow new Error(\"Not implemented sceAtracGetInternalErrorInfo\");\n\t}\n\n\t@nativeFunction(0xB3B5D042, 150)\n\t@U32 sceAtracGetOutputChannel(@I32 id: number, @PTR outputChannelPtr: Stream) {\n\t\tif (!this.hasById(id)) return SceKernelErrors.ATRAC_ERROR_NO_ATRACID;\n        const atrac3 = this.getAtrac(id);\n        const sceAudioChReserve = this.context.moduleManager.getByName('sceAudio').getByName('sceAudioChReserve').nativeCall;\n        const channel = sceAudioChReserve(-1, this.getMaxSamples(Atrac3plusConstants.PSP_CODEC_AT3PLUS), 0);\n        outputChannelPtr.writeInt32(channel);\n\t\treturn 0;\n\t}\n}\n\nclass Uint8ArrayMem implements IMemory {\n    constructor(public data: Uint8Array) {\n    }\n\n    read8(addr: Int): Int {\n        return this.data[addr]\n    }\n}\n\nclass AtracID {\n    constructor(public id: Int) {\n    }\n\n    decoder = new Atrac3plusDecoder()\n    inUse = false\n    isSecondBufferNeeded = false\n    isSecondBufferSet = false\n    info = new AtracFileInfo()\n    atracCurrentSample: Int = 0\n    get atracEndSample(): Int { return this.info.atracEndSample }\n    secondBufferReadPosition: Int = 0\n    secondBufferSize: Int = 0\n    data = new Uint8Array(0)\n    // @ts-ignore\n    dataMem: IMemory\n    startAddr: Int = 0\n    readAddr: Int = 0\n    endAddr: Int = 0\n    currentFrame = 0\n\n    get byteLength(): Int { return this.endAddr - this.startAddr }\n    get byteOffset(): Int { return this.readAddr - this.startAddr }\n    get byteAvailable(): Int { return this.byteLength - this.byteOffset }\n    get remainFrames(): Int {\n        return Math.floor(this.byteAvailable / this.info.atracBytesPerFrame)\n    }\n\n    get decodingReachedEnd() {\n        return this.remainFrames <= 0\n    }\n\n    getNumberOfSamplesInNextFrame() {\n        return Math.min(this.getMaxSamples(CodecType.PSP_MODE_AT_3_PLUS), this.info.atracEndSample - this.currentFrame);\n    }\n\n    getMaxSamples(codecType: CodecType) {\n        switch (codecType) {\n            case Atrac3plusConstants.PSP_CODEC_AT3: return 1024\n            case Atrac3plusConstants.PSP_CODEC_AT3PLUS: return Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES\n            default: return 0\n        }\n    }\n\n    moveNext() {\n        this.readAddr += this.info.atracBytesPerFrame\n    }\n}", "\uFEFFexport enum SceKernelErrors {\n\t/*\n\t * PSP Errors:\n\t * Represented by a 32-bit value with the following scheme:\n\t *\n\t *  31  30  29  28  27        16  15        0\n\t * | 1 | 0 | 0 | 0 | X | ... | X | E |... | E |\n\t *\n\t * Bits 31 and 30: Can only be 1 or 0.\n\t *      -> If both are 0, there's no error (0x0==SUCCESS).\n\t *      -> If 31 is 1 but 30 is 0, there's an error (0x80000000).\n\t *      -> If both bits are 1, a critical error stops the PSP (0xC0000000).\n\t *\n\t * Bits 29 and 28: Unknown. Never change.\n\t *\n\t * Bits 27 to 16 (X): Represent the system area associated with the error.\n\t *      -> 0x000 - Null (can be used anywhere).\n\t *      -> 0x001 - Errno (PSP's implementation of errno.h).\n\t *      -> 0x002 - Kernel.\n\t *      -> 0x011 - Utility.\n\t *      -> 0x021 - UMD.\n\t *      -> 0x022 - MemStick.\n\t *      -> 0x026 - Audio.\n\t *      -> 0x02b - Power.\n\t *      -> 0x041 - Wlan.\n\t *      -> 0x042 - SAS.\n\t *      -> 0x043 - HTTP(0x0431)/HTTPS/SSL(0x0435).\n\t *      -> 0x044 - WAVE.\n\t *      -> 0x046 - Font.\n\t *      -> 0x061 - MPEG(0x0618)/PSMF(0x0615)/PSMF Player(0x0616).\n\t *      -> 0x062 - AVC.\n\t *      -> 0x063 - ATRAC.\n\t *      -> 0x07f - Codec.\n\t *\n\t * Bits 15 to 0 (E): Represent the error code itself (different for each area).\n\t *      -> E.g.: 0x80110001 - Error -> Utility -> Some unknown error.\n\t */\n\n\tERROR_OK = 0x00000000,\n\n\tERROR_ERROR = 0x80020001,\n\tERROR_NOTIMP = 0x80020002,\n\n\tERROR_ALREADY = 0x80000020,\n\tERROR_BUSY = 0x80000021,\n\tERROR_OUT_OF_MEMORY = 0x80000022,\n\n\tERROR_INVALID_ID = 0x80000100,\n\tERROR_INVALID_NAME = 0x80000101,\n\tERROR_INVALID_INDEX = 0x80000102,\n\tERROR_INVALID_POINTER = 0x80000103,\n\tERROR_INVALID_SIZE = 0x80000104,\n\tERROR_INVALID_FLAG = 0x80000105,\n\tERROR_INVALID_COMMAND = 0x80000106,\n\tERROR_INVALID_MODE = 0x80000107,\n\tERROR_INVALID_FORMAT = 0x80000108,\n\tERROR_INVALID_VALUE = 0x800001FE,\n\tERROR_INVALID_ARGUMENT = 0x800001FF,\n\n\tERROR_BAD_FILE = 0x80000209,\n\tERROR_ACCESS_ERROR = 0x8000020D,\n\n\tERROR_ERRNO_OPERATION_NOT_PERMITTED = 0x80010001,\n\tERROR_ERRNO_FILE_NOT_FOUND = 0x80010002,\n\tERROR_ERRNO_FILE_OPEN_ERROR = 0x80010003,\n\tERROR_ERRNO_IO_ERROR = 0x80010005,\n\tERROR_ERRNO_ARG_LIST_TOO_LONG = 0x80010007,\n\tERROR_ERRNO_INVALID_FILE_DESCRIPTOR = 0x80010009,\n\tERROR_ERRNO_RESOURCE_UNAVAILABLE = 0x8001000B,\n\tERROR_ERRNO_NO_MEMORY = 0x8001000C,\n\tERROR_ERRNO_NO_PERM = 0x8001000D,\n\tERROR_ERRNO_FILE_INVALID_ADDR = 0x8001000E,\n\tERROR_ERRNO_DEVICE_BUSY = 0x80010010,\n\tERROR_ERRNO_FILE_ALREADY_EXISTS = 0x80010011,\n\tERROR_ERRNO_CROSS_DEV_LINK = 0x80010012,\n\tERROR_ERRNO_DEVICE_NOT_FOUND = 0x80010013,\n\tERROR_ERRNO_NOT_A_DIRECTORY = 0x80010014,\n\tERROR_ERRNO_IS_DIRECTORY = 0x80010015,\n\tERROR_ERRNO_INVALID_ARGUMENT = 0x80010016,\n\tERROR_ERRNO_TOO_MANY_OPEN_SYSTEM_FILES = 0x80010018,\n\tERROR_ERRNO_FILE_IS_TOO_BIG = 0x8001001B,\n\tERROR_ERRNO_DEVICE_NO_FREE_SPACE = 0x8001001C,\n\tERROR_ERRNO_READ_ONLY = 0x8001001E,\n\tERROR_ERRNO_CLOSED = 0x80010020,\n\tERROR_ERRNO_FILE_PATH_TOO_LONG = 0x80010024,\n\tERROR_ERRNO_FILE_PROTOCOL = 0x80010047,\n\tERROR_ERRNO_DIRECTORY_IS_NOT_EMPTY = 0x8001005A,\n\tERROR_ERRNO_TOO_MANY_SYMBOLIC_LINKS = 0x8001005C,\n\tERROR_ERRNO_FILE_ADDR_IN_USE = 0x80010062,\n\tERROR_ERRNO_CONNECTION_ABORTED = 0x80010067,\n\tERROR_ERRNO_CONNECTION_RESET = 0x80010068,\n\tERROR_ERRNO_NO_FREE_BUF_SPACE = 0x80010069,\n\tERROR_ERRNO_FILE_TIMEOUT = 0x8001006E,\n\tERROR_ERRNO_IN_PROGRESS = 0x80010077,\n\tERROR_ERRNO_ALREADY = 0x80010078,\n\tERROR_ERRNO_NO_MEDIA = 0x8001007B,\n\tERROR_ERRNO_INVALID_MEDIUM = 0x8001007C,\n\tERROR_ERRNO_ADDRESS_NOT_AVAILABLE = 0x8001007D,\n\tERROR_ERRNO_IS_ALREADY_CONNECTED = 0x8001007F,\n\tERROR_ERRNO_NOT_CONNECTED = 0x80010080,\n\tERROR_ERRNO_FILE_QUOTA_EXCEEDED = 0x80010084,\n\tERROR_ERRNO_FUNCTION_NOT_SUPPORTED = 0x8001B000,\n\tERROR_ERRNO_ADDR_OUT_OF_MAIN_MEM = 0x8001B001,\n\tERROR_ERRNO_INVALID_UNIT_NUM = 0x8001B002,\n\tERROR_ERRNO_INVALID_FILE_SIZE = 0x8001B003,\n\tERROR_ERRNO_INVALID_FLAG = 0x8001B004,\n\n\tERROR_KERNEL_CANNOT_BE_CALLED_FROM_INTERRUPT = 0x80020064,\n\tERROR_KERNEL_INTERRUPTS_ALREADY_DISABLED = 0x80020066,\n\tERROR_KERNEL_UNKNOWN_UID = 0x800200cb,\n\tERROR_KERNEL_UNMATCH_TYPE_UID = 0x800200cc,\n\tERROR_KERNEL_NOT_EXIST_ID = 0x800200cd,\n\tERROR_KERNEL_NOT_FOUND_FUNCTION_UID = 0x800200ce,\n\tERROR_KERNEL_ALREADY_HOLDER_UID = 0x800200cf,\n\tERROR_KERNEL_NOT_HOLDER_UID = 0x800200d0,\n\tERROR_KERNEL_ILLEGAL_PERMISSION = 0x800200d1,\n\tERROR_KERNEL_ILLEGAL_ARGUMENT = 0x800200d2,\n\tERROR_KERNEL_ILLEGAL_ADDR = 0x800200d3,\n\tERROR_KERNEL_MEMORY_AREA_OUT_OF_RANGE = 0x800200d4,\n\tERROR_KERNEL_MEMORY_AREA_IS_OVERLAP = 0x800200d5,\n\tERROR_KERNEL_ILLEGAL_PARTITION_ID = 0x800200d6,\n\tERROR_KERNEL_PARTITION_IN_USE = 0x800200d7,\n\tERROR_KERNEL_ILLEGAL_MEMBLOCK_ALLOC_TYPE = 0x800200d8,\n\tERROR_KERNEL_FAILED_ALLOC_MEMBLOCK = 0x800200d9,\n\tERROR_KERNEL_INHIBITED_RESIZE_MEMBLOCK = 0x800200da,\n\tERROR_KERNEL_FAILED_RESIZE_MEMBLOCK = 0x800200db,\n\tERROR_KERNEL_FAILED_ALLOC_HEAPBLOCK = 0x800200dc,\n\tERROR_KERNEL_FAILED_ALLOC_HEAP = 0x800200dd,\n\tERROR_KERNEL_ILLEGAL_CHUNK_ID = 0x800200de,\n\tERROR_KERNEL_CANNOT_FIND_CHUNK_NAME = 0x800200df,\n\tERROR_KERNEL_NO_FREE_CHUNK = 0x800200e0,\n\tERROR_KERNEL_MEMBLOCK_FRAGMENTED = 0x800200e1,\n\tERROR_KERNEL_MEMBLOCK_CANNOT_JOINT = 0x800200e2,\n\tERROR_KERNEL_MEMBLOCK_CANNOT_SEPARATE = 0x800200e3,\n\tERROR_KERNEL_ILLEGAL_ALIGNMENT_SIZE = 0x800200e4,\n\tERROR_KERNEL_ILLEGAL_DEVKIT_VER = 0x800200e5,\n\n\tERROR_KERNEL_MODULE_LINK_ERROR = 0x8002012c,\n\tERROR_KERNEL_ILLEGAL_OBJECT_FORMAT = 0x8002012d,\n\tERROR_KERNEL_UNKNOWN_MODULE = 0x8002012e,\n\tERROR_KERNEL_UNKNOWN_MODULE_FILE = 0x8002012f,\n\tERROR_KERNEL_FILE_READ_ERROR = 0x80020130,\n\tERROR_KERNEL_MEMORY_IN_USE = 0x80020131,\n\tERROR_KERNEL_PARTITION_MISMATCH = 0x80020132,\n\tERROR_KERNEL_MODULE_ALREADY_STARTED = 0x80020133,\n\tERROR_KERNEL_MODULE_NOT_STARTED = 0x80020134,\n\tERROR_KERNEL_MODULE_ALREADY_STOPPED = 0x80020135,\n\tERROR_KERNEL_MODULE_CANNOT_STOP = 0x80020136,\n\tERROR_KERNEL_MODULE_NOT_STOPPED = 0x80020137,\n\tERROR_KERNEL_MODULE_CANNOT_REMOVE = 0x80020138,\n\tERROR_KERNEL_EXCLUSIVE_LOAD = 0x80020139,\n\tERROR_KERNEL_LIBRARY_IS_NOT_LINKED = 0x8002013a,\n\tERROR_KERNEL_LIBRARY_ALREADY_EXISTS = 0x8002013b,\n\tERROR_KERNEL_LIBRARY_NOT_FOUND = 0x8002013c,\n\tERROR_KERNEL_ILLEGAL_LIBRARY_HEADER = 0x8002013d,\n\tERROR_KERNEL_LIBRARY_IN_USE = 0x8002013e,\n\tERROR_KERNEL_MODULE_ALREADY_STOPPING = 0x8002013f,\n\tERROR_KERNEL_ILLEGAL_OFFSET_VALUE = 0x80020140,\n\tERROR_KERNEL_ILLEGAL_POSITION_CODE = 0x80020141,\n\tERROR_KERNEL_ILLEGAL_ACCESS_CODE = 0x80020142,\n\tERROR_KERNEL_MODULE_MANAGER_BUSY = 0x80020143,\n\tERROR_KERNEL_ILLEGAL_FLAG = 0x80020144,\n\tERROR_KERNEL_CANNOT_GET_MODULE_LIST = 0x80020145,\n\tERROR_KERNEL_PROHIBIT_LOADMODULE_DEVICE = 0x80020146,\n\tERROR_KERNEL_PROHIBIT_LOADEXEC_DEVICE = 0x80020147,\n\tERROR_KERNEL_UNSUPPORTED_PRX_TYPE = 0x80020148,\n\tERROR_KERNEL_ILLEGAL_PERMISSION_CALL = 0x80020149,\n\tERROR_KERNEL_CANNOT_GET_MODULE_INFO = 0x8002014a,\n\tERROR_KERNEL_ILLEGAL_LOADEXEC_BUFFER = 0x8002014b,\n\tERROR_KERNEL_ILLEGAL_LOADEXEC_FILENAME = 0x8002014c,\n\tERROR_KERNEL_NO_EXIT_CALLBACK = 0x8002014d,\n\tERROR_KERNEL_MEDIA_CHANGED = 0x8002014e,\n\tERROR_KERNEL_CANNOT_USE_BETA_VER_MODULE = 0x8002014f,\n\n\tERROR_KERNEL_NO_MEMORY = 0x80020190,\n\tERROR_KERNEL_ILLEGAL_ATTR = 0x80020191,\n\tERROR_KERNEL_ILLEGAL_THREAD_ENTRY_ADDR = 0x80020192,\n\tERROR_KERNEL_ILLEGAL_PRIORITY = 0x80020193,\n\tERROR_KERNEL_ILLEGAL_STACK_SIZE = 0x80020194,\n\tERROR_KERNEL_ILLEGAL_MODE = 0x80020195,\n\tERROR_KERNEL_ILLEGAL_MASK = 0x80020196,\n\tERROR_KERNEL_ILLEGAL_THREAD = 0x80020197,\n\tERROR_KERNEL_NOT_FOUND_THREAD = 0x80020198,\n\tERROR_KERNEL_NOT_FOUND_SEMAPHORE = 0x80020199,\n\n\tERROR_KERNEL_NOT_FOUND_EVENT_FLAG = 0x8002019a,\n\n\tERROR_KERNEL_NOT_FOUND_MESSAGE_BOX = 0x8002019b,\n\tERROR_KERNEL_NOT_FOUND_VPOOL = 0x8002019c,\n\tERROR_KERNEL_NOT_FOUND_FPOOL = 0x8002019d,\n\tERROR_KERNEL_NOT_FOUND_MESSAGE_PIPE = 0x8002019e,\n\tERROR_KERNEL_NOT_FOUND_ALARM = 0x8002019f,\n\tERROR_KERNEL_NOT_FOUND_THREAD_EVENT_HANDLER = 0x800201a0,\n\tERROR_KERNEL_NOT_FOUND_CALLBACK = 0x800201a1,\n\tERROR_KERNEL_THREAD_ALREADY_DORMANT = 0x800201a2,\n\tERROR_KERNEL_THREAD_ALREADY_SUSPEND = 0x800201a3,\n\tERROR_KERNEL_THREAD_IS_NOT_DORMANT = 0x800201a4,\n\tERROR_KERNEL_THREAD_IS_NOT_SUSPEND = 0x800201a5,\n\tERROR_KERNEL_THREAD_IS_NOT_WAIT = 0x800201a6,\n\tERROR_KERNEL_WAIT_CAN_NOT_WAIT = 0x800201a7,\n\tERROR_KERNEL_WAIT_TIMEOUT = 0x800201a8,\n\tERROR_KERNEL_WAIT_CANCELLED = 0x800201a9,\n\tERROR_KERNEL_WAIT_STATUS_RELEASED = 0x800201aa,\n\tERROR_KERNEL_WAIT_STATUS_RELEASED_CALLBACK = 0x800201ab,\n\tERROR_KERNEL_THREAD_IS_TERMINATED = 0x800201ac,\n\tERROR_KERNEL_SEMA_ZERO = 0x800201ad,\n\tERROR_KERNEL_SEMA_OVERFLOW = 0x800201ae,\n\n\tERROR_KERNEL_EVENT_FLAG_POLL_FAILED = 0x800201af,\n\tERROR_KERNEL_EVENT_FLAG_NO_MULTI_PERM = 0x800201b0,\n\tERROR_KERNEL_EVENT_FLAG_ILLEGAL_WAIT_PATTERN = 0x800201b1,\n\n\tERROR_KERNEL_MESSAGEBOX_NO_MESSAGE = 0x800201b2,\n\tERROR_KERNEL_MESSAGE_PIPE_FULL = 0x800201b3,\n\tERROR_KERNEL_MESSAGE_PIPE_EMPTY = 0x800201b4,\n\tERROR_KERNEL_WAIT_DELETE = 0x800201b5,\n\tERROR_KERNEL_ILLEGAL_MEMBLOCK = 0x800201b6,\n\tERROR_KERNEL_ILLEGAL_MEMSIZE = 0x800201b7,\n\tERROR_KERNEL_ILLEGAL_SCRATCHPAD_ADDR = 0x800201b8,\n\tERROR_KERNEL_SCRATCHPAD_IN_USE = 0x800201b9,\n\tERROR_KERNEL_SCRATCHPAD_NOT_IN_USE = 0x800201ba,\n\tERROR_KERNEL_ILLEGAL_TYPE = 0x800201bb,\n\tERROR_KERNEL_ILLEGAL_SIZE = 0x800201bc,\n\tERROR_KERNEL_ILLEGAL_COUNT = 0x800201bd,\n\tERROR_KERNEL_NOT_FOUND_VTIMER = 0x800201be,\n\tERROR_KERNEL_ILLEGAL_VTIMER = 0x800201bf,\n\tERROR_KERNEL_ILLEGAL_KTLS = 0x800201c0,\n\tERROR_KERNEL_KTLS_IS_FULL = 0x800201c1,\n\tERROR_KERNEL_KTLS_IS_BUSY = 0x800201c2,\n\tERROR_KERNEL_MUTEX_NOT_FOUND = 0x800201c3,\n\tERROR_KERNEL_MUTEX_LOCKED = 0x800201c4,\n\tERROR_KERNEL_MUTEX_UNLOCKED = 0x800201c5,\n\tERROR_KERNEL_MUTEX_LOCK_OVERFLOW = 0x800201c6,\n\tERROR_KERNEL_MUTEX_UNLOCK_UNDERFLOW = 0x800201c7,\n\tERROR_KERNEL_MUTEX_RECURSIVE_NOT_ALLOWED = 0x800201c8,\n\tERROR_KERNEL_MESSAGEBOX_DUPLICATE_MESSAGE = 0x800201c9,\n\n\t//PSP_LWMUTEX_ERROR_NO_SUCH_LWMUTEX 0x800201CA\n\t//PSP_LWMUTEX_ERROR_TRYLOCK_FAILED 0x800201CB\n\t//PSP_LWMUTEX_ERROR_NOT_LOCKED 0x800201CC\n\t//PSP_LWMUTEX_ERROR_LOCK_OVERFLOW 0x800201CD\n\t//PSP_LWMUTEX_ERROR_UNLOCK_UNDERFLOW 0x800201CE\n\t//PSP_LWMUTEX_ERROR_ALREADY_LOCKED 0x800201CF\n\n\n\tERROR_KERNEL_LWMUTEX_NOT_FOUND = 0x800201ca,\n\tERROR_KERNEL_LWMUTEX_LOCKED = 0x800201cb,\n\tERROR_KERNEL_LWMUTEX_UNLOCKED = 0x800201cc,\n\tERROR_KERNEL_LWMUTEX_LOCK_OVERFLOW = 0x800201cd,\n\tERROR_KERNEL_LWMUTEX_UNLOCK_UNDERFLOW = 0x800201ce,\n\tERROR_KERNEL_LWMUTEX_RECURSIVE_NOT_ALLOWED = 0x800201cf,\n\n\tERROR_KERNEL_POWER_CANNOT_CANCEL = 0x80020261,\n\n\tERROR_KERNEL_TOO_MANY_OPEN_FILES = 0x80020320,\n\tERROR_KERNEL_NO_SUCH_DEVICE = 0x80020321,\n\tERROR_KERNEL_BAD_FILE_DESCRIPTOR = 0x80020323,\n\tERROR_KERNEL_UNSUPPORTED_OPERATION = 0x80020325,\n\tERROR_KERNEL_NOCWD = 0x8002032c,\n\tERROR_KERNEL_FILENAME_TOO_LONG = 0x8002032d,\n\tERROR_KERNEL_ASYNC_BUSY = 0x80020329,\n\tERROR_KERNEL_NO_ASYNC_OP = 0x8002032a,\n\n\tERROR_KERNEL_NOT_CACHE_ALIGNED = 0x8002044c,\n\tERROR_KERNEL_MAX_ERROR = 0x8002044d,\n\n\tERROR_UTILITY_INVALID_STATUS = 0x80110001,\n\tERROR_UTILITY_INVALID_PARAM_ADDR = 0x80110002,\n\tERROR_UTILITY_IS_UNKNOWN = 0x80110003,\n\tERROR_UTILITY_INVALID_PARAM_SIZE = 0x80110004,\n\tERROR_UTILITY_WRONG_TYPE = 0x80110005,\n\tERROR_UTILITY_MODULE_NOT_FOUND = 0x80110006,\n\n\tERROR_SAVEDATA_LOAD_NO_MEMSTICK = 0x80110301,\n\tERROR_SAVEDATA_LOAD_MEMSTICK_REMOVED = 0x80110302,\n\tERROR_SAVEDATA_LOAD_ACCESS_ERROR = 0x80110305,\n\tERROR_SAVEDATA_LOAD_DATA_BROKEN = 0x80110306,\n\tERROR_SAVEDATA_LOAD_NO_DATA = 0x80110307,\n\tERROR_SAVEDATA_LOAD_BAD_PARAMS = 0x80110308,\n\tERROR_SAVEDATA_LOAD_NO_UMD = 0x80110309,\n\tERROR_SAVEDATA_LOAD_INTERNAL_ERROR = 0x80110309,\n\n\tERROR_SAVEDATA_RW_NO_MEMSTICK = 0x80110321,\n\tERROR_SAVEDATA_RW_MEMSTICK_REMOVED = 0x80110322,\n\tERROR_SAVEDATA_RW_MEMSTICK_FULL = 0x80110323,\n\tERROR_SAVEDATA_RW_MEMSTICK_PROTECTED = 0x80110324,\n\tERROR_SAVEDATA_RW_ACCESS_ERROR = 0x80110325,\n\tERROR_SAVEDATA_RW_DATA_BROKEN = 0x80110326,\n\tERROR_SAVEDATA_RW_NO_DATA = 0x80110327,\n\tERROR_SAVEDATA_RW_BAD_PARAMS = 0x80110328,\n\tERROR_SAVEDATA_RW_FILE_NOT_FOUND = 0x80110329,\n\tERROR_SAVEDATA_RW_CAN_NOT_SUSPEND = 0x8011032a,\n\tERROR_SAVEDATA_RW_INTERNAL_ERROR = 0x8011032b,\n\tERROR_SAVEDATA_RW_BAD_STATUS = 0x8011032c,\n\tERROR_SAVEDATA_RW_SECURE_FILE_FULL = 0x8011032d,\n\n\tERROR_SAVEDATA_DELETE_NO_MEMSTICK = 0x80110341,\n\tERROR_SAVEDATA_DELETE_MEMSTICK_REMOVED = 0x80110342,\n\tERROR_SAVEDATA_DELETE_MEMSTICK_PROTECTED = 0x80110344,\n\tERROR_SAVEDATA_DELETE_ACCESS_ERROR = 0x80110345,\n\tERROR_SAVEDATA_DELETE_DATA_BROKEN = 0x80110346,\n\tERROR_SAVEDATA_DELETE_NO_DATA = 0x80110347,\n\tERROR_SAVEDATA_DELETE_BAD_PARAMS = 0x80110348,\n\tERROR_SAVEDATA_DELETE_INTERNAL_ERROR = 0x8011034b,\n\n\tERROR_SAVEDATA_SAVE_NO_MEMSTICK = 0x80110381,\n\tERROR_SAVEDATA_SAVE_MEMSTICK_REMOVED = 0x80110382,\n\tERROR_SAVEDATA_SAVE_NO_SPACE = 0x80110383,\n\tERROR_SAVEDATA_SAVE_MEMSTICK_PROTECTED = 0x80110384,\n\tERROR_SAVEDATA_SAVE_ACCESS_ERROR = 0x80110385,\n\tERROR_SAVEDATA_SAVE_BAD_PARAMS = 0x80110388,\n\tERROR_SAVEDATA_SAVE_NO_UMD = 0x80110389,\n\tERROR_SAVEDATA_SAVE_WRONG_UMD = 0x8011038a,\n\tERROR_SAVEDATA_SAVE_INTERNAL_ERROR = 0x8011038b,\n\n\tERROR_SAVEDATA_SIZES_NO_MEMSTICK = 0x801103c1,\n\tERROR_SAVEDATA_SIZES_MEMSTICK_REMOVED = 0x801103c2,\n\tERROR_SAVEDATA_SIZES_ACCESS_ERROR = 0x801103c5,\n\tERROR_SAVEDATA_SIZES_DATA_BROKEN = 0x801103c6,\n\tERROR_SAVEDATA_SIZES_NO_DATA = 0x801103c7,\n\tERROR_SAVEDATA_SIZES_BAD_PARAMS = 0x801103c8,\n\tERROR_SAVEDATA_SIZES_INTERNAL_ERROR = 0x801103cb,\n\n\tERROR_NETPARAM_BAD_NETCONF = 0x80110601,\n\tERROR_NETPARAM_BAD_PARAM = 0x80110604,\n\n\tERROR_NET_MODULE_BAD_ID = 0x80110801,\n\tERROR_NET_MODULE_ALREADY_LOADED = 0x80110802,\n\tERROR_NET_MODULE_NOT_LOADED = 0x80110803,\n\n\tERROR_AV_MODULE_BAD_ID = 0x80110901,\n\tERROR_AV_MODULE_ALREADY_LOADED = 0x80110902,\n\tERROR_AV_MODULE_NOT_LOADED = 0x80110903,\n\n\tERROR_MODULE_BAD_ID = 0x80111101,\n\tERROR_MODULE_ALREADY_LOADED = 0x80111102,\n\tERROR_MODULE_NOT_LOADED = 0x80111103,\n\n\tERROR_SCREENSHOT_CONT_MODE_NOT_INIT = 0x80111229,\n\n\tERROR_UMD_NOT_READY = 0x80210001,\n\tERROR_UMD_LBA_OUT_OF_BOUNDS = 0x80210002,\n\tERROR_UMD_NO_DISC = 0x80210003,\n\n\tERROR_MEMSTICK_DEVCTL_BAD_PARAMS = 0x80220081,\n\tERROR_MEMSTICK_DEVCTL_TOO_MANY_CALLBACKS = 0x80220082,\n\n\tERROR_AUDIO_CHANNEL_NOT_INIT = 0x80260001,\n\tERROR_AUDIO_CHANNEL_BUSY = 0x80260002,\n\tERROR_AUDIO_INVALID_CHANNEL = 0x80260003,\n\tERROR_AUDIO_PRIV_REQUIRED = 0x80260004,\n\tERROR_AUDIO_NO_CHANNELS_AVAILABLE = 0x80260005,\n\tERROR_AUDIO_OUTPUT_SAMPLE_DATA_SIZE_NOT_ALIGNED = 0x80260006,\n\tERROR_AUDIO_INVALID_FORMAT = 0x80260007,\n\tERROR_AUDIO_CHANNEL_NOT_RESERVED = 0x80260008,\n\tERROR_AUDIO_NOT_OUTPUT = 0x80260009,\n\n\tERROR_POWER_VMEM_IN_USE = 0x802b0200,\n\n\tERROR_NET_RESOLVER_BAD_ID = 0x80410408,\n\tERROR_NET_RESOLVER_ALREADY_STOPPED = 0x8041040a,\n\tERROR_NET_RESOLVER_INVALID_HOST = 0x80410414,\n\n\tERROR_WLAN_BAD_PARAMS = 0x80410d13,\n\n\tERROR_HTTP_NOT_INIT = 0x80431001,\n\tERROR_HTTP_ALREADY_INIT = 0x80431020,\n\tERROR_HTTP_NO_MEMORY = 0x80431077,\n\tERROR_HTTP_SYSTEM_COOKIE_NOT_LOADED = 0x80431078,\n\tERROR_HTTP_INVALID_PARAMETER = 0x804311FE,\n\n\tERROR_SSL_NOT_INIT = 0x80435001,\n\tERROR_SSL_ALREADY_INIT = 0x80435020,\n\tERROR_SSL_OUT_OF_MEMORY = 0x80435022,\n\tERROR_HTTPS_CERT_ERROR = 0x80435060,\n\tERROR_HTTPS_HANDSHAKE_ERROR = 0x80435061,\n\tERROR_HTTPS_IO_ERROR = 0x80435062,\n\tERROR_HTTPS_INTERNAL_ERROR = 0x80435063,\n\tERROR_HTTPS_PROXY_ERROR = 0x80435064,\n\tERROR_SSL_INVALID_PARAMETER = 0x804351FE,\n\n\tERROR_WAVE_NOT_INIT = 0x80440001,\n\tERROR_WAVE_FAILED_EXIT = 0x80440002,\n\tERROR_WAVE_BAD_VOL = 0x8044000a,\n\tERROR_WAVE_INVALID_CHANNEL = 0x80440010,\n\tERROR_WAVE_INVALID_SAMPLE_COUNT = 0x80440011,\n\n\tERROR_FONT_INVALID_LIBID = 0x80460002,\n\tERROR_FONT_INVALID_PARAMETER = 0x80460003,\n\tERROR_FONT_TOO_MANY_OPEN_FONTS = 0x80460009,\n\n\tERROR_MPEG_BAD_VERSION = 0x80610002,\n\tERROR_MPEG_NO_MEMORY = 0x80610022,\n\tERROR_MPEG_INVALID_ADDR = 0x80610103,\n\tERROR_MPEG_INVALID_VALUE = 0x806101fe,\n\n\tERROR_PSMF_NOT_INITIALIZED = 0x80615001,\n\tERROR_PSMF_BAD_VERSION = 0x80615002,\n\tERROR_PSMF_NOT_FOUND = 0x80615025,\n\tERROR_PSMF_INVALID_ID = 0x80615100,\n\tERROR_PSMF_INVALID_VALUE = 0x806151fe,\n\tERROR_PSMF_INVALID_TIMESTAMP = 0x80615500,\n\tERROR_PSMF_INVALID_PSMF = 0x80615501,\n\n\tERROR_PSMFPLAYER_NOT_INITIALIZED = 0x80616001,\n\tERROR_PSMFPLAYER_NO_MORE_DATA = 0x8061600c,\n\n\tERROR_MPEG_NO_DATA = 0x80618001,\n\n\tERROR_AVC_VIDEO_FATAL = 0x80628002,\n\n\tERROR_ATRAC_NO_ID = 0x80630003,\n\tERROR_ATRAC_INVALID_CODEC = 0x80630004,\n\tERROR_ATRAC_BAD_ID = 0x80630005,\n\tERROR_ATRAC_ALL_DATA_LOADED = 0x80630009,\n\tERROR_ATRAC_NO_DATA = 0x80630010,\n\tERROR_ATRAC_SECOND_BUFFER_NEEDED = 0x80630012,\n\tERROR_ATRAC_SECOND_BUFFER_NOT_NEEDED = 0x80630022,\n\tERROR_ATRAC_BUFFER_IS_EMPTY = 0x80630023,\n\tERROR_ATRAC_ALL_DATA_DECODED = 0x80630024,\n\n\tERROR_CODEC_AUDIO_FATAL = 0x807f00fc,\n\n\tFATAL_UMD_UNKNOWN_MEDIUM = 0xC0210004,\n\tFATAL_UMD_HARDWARE_FAILURE = 0xC0210005,\n\n\t//ERROR_AUDIO_CHANNEL_NOT_INIT                        = unchecked((int)0x80260001,\n\t//ERROR_AUDIO_CHANNEL_BUSY                            = unchecked((int)0x80260002,\n\t//ERROR_AUDIO_INVALID_CHANNEL                         = unchecked((int)0x80260003,\n\t//ERROR_AUDIO_PRIV_REQUIRED                           = unchecked((int)0x80260004,\n\t//ERROR_AUDIO_NO_CHANNELS_AVAILABLE                   = unchecked((int)0x80260005,\n\t//ERROR_AUDIO_OUTPUT_SAMPLE_DATA_SIZE_NOT_ALIGNED     = unchecked((int)0x80260006,\n\t//ERROR_AUDIO_INVALID_FORMAT                          = unchecked((int)0x80260007,\n\t//ERROR_AUDIO_CHANNEL_NOT_RESERVED                    = unchecked((int)0x80260008,\n\t//ERROR_AUDIO_NOT_OUTPUT                              = unchecked((int)0x80260009,\n\tERROR_AUDIO_INVALID_FREQUENCY = 0x8026000A,\n\tERROR_AUDIO_INVALID_VOLUME = 0x8026000B,\n\tERROR_AUDIO_CHANNEL_ALREADY_RESERVED = 0x80268002,\n\tPSP_AUDIO_ERROR_SRC_FORMAT_4 = 0x80000003,\n\n\tATRAC_ERROR_API_FAIL = 0x80630002,\n\tATRAC_ERROR_NO_ATRACID = 0x80630003,\n\tATRAC_ERROR_INVALID_CODECTYPE = 0x80630004,\n\tATRAC_ERROR_BAD_ATRACID = 0x80630005,\n\tATRAC_ERROR_ALL_DATA_LOADED = 0x80630009,\n\tATRAC_ERROR_NO_DATA = 0x80630010,\n\tATRAC_ERROR_SECOND_BUFFER_NEEDED = 0x80630012,\n\tATRAC_ERROR_INCORRECT_READ_SIZE = 0x80630013,\n\tATRAC_ERROR_ADD_DATA_IS_TOO_BIG = 0x80630018,\n\tATRAC_ERROR_UNSET_PARAM = 0x80630021,\n\tATRAC_ERROR_SECOND_BUFFER_NOT_NEEDED = 0x80630022,\n\tATRAC_ERROR_BUFFER_IS_EMPTY = 0x80630023,\n\tATRAC_ERROR_ALL_DATA_DECODED = 0x80630024,\n\n\tPSP_SYSTEMPARAM_RETVAL = 0x80110103,\n\n\tERROR_SAS_INVALID_VOICE = 0x80420010,\n\tERROR_SAS_INVALID_ADSR_CURVE_MODE = 0x80420013,\n\tERROR_SAS_INVALID_PARAMETER = 0x80420014,\n\tERROR_SAS_INVALID_LOOP_POS = 0x80420015,\n\tERROR_SAS_VOICE_PAUSED = 0x80420016,\n\tERROR_SAS_BUSY = 0x80420030,\n\tERROR_SAS_NOT_INIT = 0x80420100,\n\n\tERROR_SAS_INVALID_GRAIN = 0x80420001,\n\tERROR_SAS_INVALID_MAX_VOICES = 0x80420002,\n\tERROR_SAS_INVALID_OUTPUT_MODE = 0x80420003,\n\tERROR_SAS_INVALID_SAMPLE_RATE = 0x80420004,\n\tERROR_SAS_INVALID_ADDRESS = 0x80420005,\n\tERROR_SAS_INVALID_VOICE_INDEX = 0x80420010,\n\tERROR_SAS_INVALID_NOISE_CLOCK = 0x80420011,\n\tERROR_SAS_INVALID_PITCH_VAL = 0x80420012,\n\t//ERROR_SAS_INVALID_ADSR_CURVE_MODE                   = unchecked((int)0x80420013,\n\tERROR_SAS_INVALID_ADPCM_SIZE = 0x80420014,\n\tERROR_SAS_INVALID_LOOP_MODE = 0x80420015,\n\t//ERROR_SAS_VOICE_PAUSED                              = unchecked((int)0x80420016,\n\tERROR_SAS_INVALID_VOLUME_VAL = 0x80420018,\n\tERROR_SAS_INVALID_ADSR_VAL = 0x80420019,\n\tERROR_SAS_INVALID_SIZE = 0x8042001A,\n\tERROR_SAS_INVALID_FX_TYPE = 0x80420020,\n\tERROR_SAS_INVALID_FX_FEEDBACK = 0x80420021,\n\tERROR_SAS_INVALID_FX_DELAY = 0x80420022,\n\tERROR_SAS_INVALID_FX_VOLUME_VAL = 0x80420023,\n\t//ERROR_SAS_BUSY                                      = unchecked((int)0x80420030,\n\t//ERROR_SAS_NOT_INIT                                  = unchecked((int)0x80420100,\n\tERROR_SAS_ALREADY_INIT = 0x80420101,\n\n\tPSP_POWER_ERROR_TAKEN_SLOT = 0x80000020,\n\tPSP_POWER_ERROR_SLOTS_FULL = 0x80000022,\n\tPSP_POWER_ERROR_PRIVATE_SLOT = 0x80000023,\n\tPSP_POWER_ERROR_EMPTY_SLOT = 0x80000025,\n\tPSP_POWER_ERROR_INVALID_CB = 0x80000100,\n\tPSP_POWER_ERROR_INVALID_SLOT = 0x80000102,\n}\n\nexport class SceKernelException extends Error {\n    constructor(public errorCode: SceKernelErrors) {\n        super(SceKernelErrors[errorCode]);\n    }\n}\n", "\nexport class Atrac3plusConstants {\n    static AT3P_ERROR = -1\n    static CH_UNIT_MONO = 0        ///< unit containing one coded channel\n    static CH_UNIT_STEREO = 1        ///< unit containing two jointly-coded channels\n    static CH_UNIT_EXTENSION = 2        ///< unit containing extension information\n    static CH_UNIT_TERMINATOR = 3        ///< unit sequence terminator\n    static ATRAC3P_POWER_COMP_OFF = 15   ///< disable power compensation\n    static ATRAC3P_SUBBANDS = 16         ///< number of PQF subbands\n    static ATRAC3P_SUBBAND_SAMPLES = 128 ///< number of samples per subband\n    static ATRAC3P_FRAME_SAMPLES = Atrac3plusConstants.ATRAC3P_SUBBANDS * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES\n    static ATRAC3P_PQF_FIR_LEN = 12      ///< length of the prototype FIR of the PQF\n\n    static AT3_MAGIC = 0x0270 // \"AT3\"\n    static AT3_PLUS_MAGIC = 0xFFFE // \"AT3PLUS\"\n    static RIFF_MAGIC = 0x46464952 // \"RIFF\"\n    static WAVE_MAGIC = 0x45564157 // \"WAVE\"\n    static FMT_CHUNK_MAGIC = 0x20746D66 // \"FMT \"\n    static FACT_CHUNK_MAGIC = 0x74636166 // \"FACT\"\n    static SMPL_CHUNK_MAGIC = 0x6C706D73 // \"SMPL\"\n    static DATA_CHUNK_MAGIC = 0x61746164 // \"DATA\"\n\n    static ATRAC3_CONTEXT_READ_SIZE_OFFSET = 160\n    static ATRAC3_CONTEXT_REQUIRED_SIZE_OFFSET = 164\n    static ATRAC3_CONTEXT_DECODE_RESULT_OFFSET = 188\n\n    static PSP_ATRAC_ALLDATA_IS_ON_MEMORY = -1\n    static PSP_ATRAC_NONLOOP_STREAM_DATA_IS_ON_MEMORY = -2\n    static PSP_ATRAC_LOOP_STREAM_DATA_IS_ON_MEMORY = -3\n\n    static PSP_ATRAC_STATUS_NONLOOP_STREAM_DATA = 0\n    static PSP_ATRAC_STATUS_LOOP_STREAM_DATA = 1\n\n    static ATRAC_HEADER_HASH_LENGTH = 512\n    static ERROR_ATRAC_UNKNOWN_FORMAT = -0x7f9cfffa\n    static ERROR_ATRAC_INVALID_SIZE = -0x7f9cffef\n\n    static PSP_CODEC_AT3PLUS = 0x00001000\n    static PSP_CODEC_AT3 = 0x00001001\n    static PSP_CODEC_MP3 = 0x00001002\n    static PSP_CODEC_AAC = 0x00001003\n}\n\nexport enum CodecType {\n    PSP_MODE_AT_3_PLUS = 0x00001000,\n    PSP_MODE_AT_3 = 0x00001001,\n}\n", "/**\n * From JPCSP\n */\nimport {logger, sprintf} from \"../../global/utils\";\nimport {ArrayUtils} from \"../../global/math\";\nimport {Stream} from \"../../global/stream\";\nimport {Atrac3plusConstants} from \"./Atrac3plusConstants\";\n\ntype Int = number\n\nconst log = logger.named(\"Atrac3PlusUtil\")\n\n// noinspection JSMethodCanBeStatic\nexport class Atrac3PlusUtil {\n\n    private static readUnaligned32(mem: Stream, addr: Int): Int {\n\t\tmem.position = addr\n\t\treturn mem.readInt32LE()\n\t}\n\n\tprivate static read8(mem: Stream, addr: Int): Int {\n\t\tmem.position = addr\n\t\treturn mem.readUInt8LE()\n\t}\n\n\tprivate static read16(mem: Stream, addr: Int): Int {\n\t\tmem.position = addr\n\t\treturn mem.readUInt16LE()\n\t}\n\n\t/**\n\t * From JPCSP\n\t */\n\tstatic analyzeRiffFile(mem: Stream, addr: Int, length: Int, info: AtracFileInfo): Int {\n        let result = Atrac3plusConstants.ERROR_ATRAC_UNKNOWN_FORMAT;\n\n        let currentAddr = addr;\n        let bufferSize = length;\n        info.atracEndSample = -1\n\t\tinfo.numLoops = 0\n\t\tinfo.inputFileDataOffset = 0\n\n\t\tif (bufferSize < 12) {\n\t\t\tlog.error(\"Atrac buffer too small %d\".format(bufferSize))\n\t\t\treturn Atrac3plusConstants.ERROR_ATRAC_INVALID_SIZE\n\t\t}\n\n\t\t// RIFF file format:\n\t\t// Offset 0: 'RIFF'\n\t\t// Offset 4: file length - 8\n\t\t// Offset 8: 'WAVE'\n\t\tconst magic = this.readUnaligned32(mem, currentAddr)\n\t\tconst WAVEMagic = this.readUnaligned32(mem, currentAddr + 8)\n\t\tif (magic != Atrac3plusConstants.RIFF_MAGIC || WAVEMagic != Atrac3plusConstants.WAVE_MAGIC) {\n\t\t\t//log.error(String_format(\"Not a RIFF/WAVE format! %s\", Utilities.getMemoryDump(currentAddr, 16)))\n            log.error(\"Not a RIFF/WAVE format!\")\n\t\t\treturn Atrac3plusConstants.ERROR_ATRAC_UNKNOWN_FORMAT\n\t\t}\n\n\t\tinfo.inputFileSize = this.readUnaligned32(mem, currentAddr + 4) + 8\n\t\tinfo.inputDataSize = info.inputFileSize\n\t\tif (log.isTraceEnabled) {\n            log.trace(\"FileSize 0x%X\".format(info.inputFileSize))\n\t\t}\n\t\tcurrentAddr += 12\n\t\tbufferSize -= 12\n\n        let foundData = false;\n        while (bufferSize >= 8 && !foundData) {\n\t\t\tconst chunkMagic = this.readUnaligned32(mem, currentAddr)\n\t\t\tconst chunkSize = this.readUnaligned32(mem, currentAddr + 4)\n\t\t\tcurrentAddr += 8\n\t\t\tbufferSize -= 8\n\n\t\t\tswitch (chunkMagic) {\n                case Atrac3plusConstants.DATA_CHUNK_MAGIC: {\n\t\t\t\t\tfoundData = true\n\t\t\t\t\t// Offset of the data chunk in the input file\n\t\t\t\t\tinfo.inputFileDataOffset = currentAddr - addr\n\t\t\t\t\tinfo.inputDataSize = chunkSize\n                    if (log.isTraceEnabled) {\n                        log.trace(\"DATA Chunk: data offset=0x%X, data size=0x%X\".format(info.inputFileDataOffset, info.inputDataSize))\n                    }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase Atrac3plusConstants.FMT_CHUNK_MAGIC: {\n\t\t\t\t\tif (chunkSize >= 16) {\n\t\t\t\t\t\tconst compressionCode = this.read16(mem, currentAddr)\n\t\t\t\t\t\tinfo.atracChannels = this.read16(mem, currentAddr + 2)\n\t\t\t\t\t\tinfo.atracSampleRate = this.readUnaligned32(mem, currentAddr + 4)\n\t\t\t\t\t\tinfo.atracBitrate = this.readUnaligned32(mem, currentAddr + 8)\n\t\t\t\t\t\tinfo.atracBytesPerFrame = this.read16(mem, currentAddr + 12)\n\t\t\t\t\t\tconst hiBytesPerSample = this.read16(mem, currentAddr + 14)\n\t\t\t\t\t\tconst extraDataSize = this.read16(mem, currentAddr + 16)\n\t\t\t\t\t\tif (extraDataSize == 14) {\n\t\t\t\t\t\t\tinfo.atracCodingMode = this.read16(mem, currentAddr + 18 + 6)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (log.isTraceEnabled) {\n\t\t\t\t\t\t\tlog.trace(\"WAVE format: magic=0x%08X('%s'), chunkSize=%d, compressionCode=0x%04X, channels=%d, sampleRate=%d, bitrate=%d, bytesPerFrame=0x%X, hiBytesPerSample=%d, codingMode=%d\".format(chunkMagic, this.getStringFromInt32(chunkMagic), chunkSize, compressionCode, info.atracChannels, info.atracSampleRate, info.atracBitrate, info.atracBytesPerFrame, hiBytesPerSample, info.atracCodingMode))\n\t\t\t\t\t\t\t// Display rest of chunk as debug information\n\t\t\t\t\t\t\tlet restChunk = ''\n\t\t\t\t\t\t\tfor (let i = 16; i < chunkSize; i++) {\n\t\t\t\t\t\t\t\tconst b = this.read8(mem, currentAddr + i)\n\t\t\t\t\t\t\t\trestChunk += \" %02X\".format(b)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (restChunk.length > 0) {\n\t\t\t\t\t\t\t    if (log.isTraceEnabled) {\n                                    log.trace(\"Additional chunk data:%s\".format(restChunk))\n                                }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (compressionCode == Atrac3plusConstants.AT3_MAGIC) {\n\t\t\t\t\t\t\tresult = Atrac3plusConstants.PSP_CODEC_AT3\n\t\t\t\t\t\t} else if (compressionCode == Atrac3plusConstants.AT3_PLUS_MAGIC) {\n\t\t\t\t\t\t\tresult = Atrac3plusConstants.PSP_CODEC_AT3PLUS\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn Atrac3plusConstants.ERROR_ATRAC_UNKNOWN_FORMAT\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase Atrac3plusConstants.FACT_CHUNK_MAGIC: {\n\t\t\t\t\tif (chunkSize >= 8) {\n\t\t\t\t\t\tinfo.atracEndSample = this.readUnaligned32(mem, currentAddr)\n\t\t\t\t\t\tif (info.atracEndSample > 0) {\n\t\t\t\t\t\t\tinfo.atracEndSample -= 1\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (chunkSize >= 12) {\n\t\t\t\t\t\t\t// Is the value at offset 4 ignored?\n\t\t\t\t\t\t\tinfo.atracSampleOffset = this.readUnaligned32(mem, currentAddr + 8) // The loop samples are offset by this value\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tinfo.atracSampleOffset = this.readUnaligned32(mem, currentAddr + 4) // The loop samples are offset by this value\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (log.isTraceEnabled) {\n                            log.trace(\"FACT Chunk: chunkSize=%d, endSample=0x%X, sampleOffset=0x%X\".format(chunkSize, info.atracEndSample, info.atracSampleOffset))\n                        }\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n                case Atrac3plusConstants.SMPL_CHUNK_MAGIC: {\n\t\t\t\t\tif (chunkSize >= 36) {\n\t\t\t\t\t\tconst checkNumLoops = this.readUnaligned32(mem, currentAddr + 28)\n\t\t\t\t\t\tif (chunkSize >= 36 + checkNumLoops * 24) {\n\t\t\t\t\t\t\tinfo.numLoops = checkNumLoops\n\t\t\t\t\t\t\tinfo.loops = ArrayUtils.create(info.numLoops, _ => new LoopInfo())\n                            let loopInfoAddr = currentAddr + 36;\n                            for (let i = 0; i < info.numLoops; i++) {\n\t\t\t\t\t\t\t\tconst loop = info.loops[i]\n\t\t\t\t\t\t\t\tinfo.loops[i] = loop\n\t\t\t\t\t\t\t\tloop.cuePointID = this.readUnaligned32(mem, loopInfoAddr)\n\t\t\t\t\t\t\t\tloop.type = this.readUnaligned32(mem, loopInfoAddr + 4)\n\t\t\t\t\t\t\t\tloop.startSample = this.readUnaligned32(mem, loopInfoAddr + 8) - info.atracSampleOffset\n\t\t\t\t\t\t\t\tloop.endSample = this.readUnaligned32(mem, loopInfoAddr + 12) - info.atracSampleOffset\n\t\t\t\t\t\t\t\tloop.fraction = this.readUnaligned32(mem, loopInfoAddr + 16)\n\t\t\t\t\t\t\t\tloop.playCount = this.readUnaligned32(mem, loopInfoAddr + 20)\n\n                                if (log.isTraceEnabled) {\n                                    log.trace(\"Loop #%d: %s\".format(i, loop.toString()))\n                                }\n\t\t\t\t\t\t\t\tloopInfoAddr += 24\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// TODO Second buffer processing disabled because still incomplete\n\t\t\t\t\t\t\t//isSecondBufferNeeded = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (chunkSize > bufferSize) {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcurrentAddr += chunkSize\n\t\t\tbufferSize -= chunkSize\n\t\t}\n\n\t\t// If a loop end is past the atrac end, assume the atrac end\n\t\tfor (const loop of info.loops) {\n\t\t\tif (loop.endSample > info.atracEndSample) {\n\t\t\t\tloop.endSample = info.atracEndSample\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\tprivate static getStringFromInt32(chunkMagic: Int): String {\n\t    return String.fromCharCode(chunkMagic.extract8(0), chunkMagic.extract8(8), chunkMagic.extract8(16), chunkMagic.extract8(24))\n    }\n}\n\nclass LoopInfo {\n    cuePointID: Int = 0\n    type: Int = 0\n    startSample: Int = 0\n    endSample: Int = 0\n    fraction: Int = 0\n    playCount: Int = 0\n\n    toString(): String {\n        return sprintf(\"LoopInfo[cuePointID %d, type %d, startSample 0x%X, endSample 0x%X, fraction %d, playCount %d]\", this.cuePointID, this.type, this.startSample, this.endSample, this.fraction, this.playCount)\n    }\n}\n\nexport class AtracFileInfo {\n    constructor(\n        public atracBitrate: Int = 64,\n        public atracChannels: Int = 2,\n        public atracSampleRate: Int = 0xAC44,\n        public atracBytesPerFrame: Int = 0x0230,\n        public atracEndSample: Int = 0,\n        public atracSampleOffset: Int = 0,\n        public atracCodingMode: Int = 0,\n        public inputFileDataOffset: Int = 0,\n        public inputFileSize: Int = 0,\n        public inputDataSize: Int = 0,\n        public loopNum: Int = 0,\n        public numLoops: Int = 0,\n        public loops: Array<LoopInfo> = []\n    ) {\n    }\n}\n", "import {ArrayUtils} from \"../../global/math\";\nimport {Atrac} from \"./Atrac\";\nimport {Atrac3plusDsp} from \"./Atrac3plusDsp\";\nimport {BitReader, FFT} from \"../MeUtils\";\nimport {ChannelUnit} from \"./ChannelUnit\";\nimport {Atrac3plusConstants} from \"./Atrac3plusConstants\";\n\ntype Int = number\nfunction BooleanArray(size: number) { return ArrayUtils.create(size, _ => false) }\nfunction FloatArray(size: number) { return new Float32Array(size) }\nfunction arrayOf<T>(...values: T[]) { return values }\n\nexport class WaveEnvelope {\n    hasStartPoint: Boolean = false ///< indicates start point within the GHA window\n    hasStopPoint: Boolean = false  ///< indicates stop point within the GHA window\n    startPos: Int = 0          ///< start position expressed in n*4 samples\n    stopPos: Int = 0           ///< stop  position expressed in n*4 samples\n\n    clear() {\n        this.hasStartPoint = false\n        this.hasStopPoint = false\n        this.startPos = 0\n        this.stopPos = 0\n    }\n\n    copy(from: WaveEnvelope) {\n        this.hasStartPoint = from.hasStartPoint\n        this.hasStopPoint = from.hasStopPoint\n        this.startPos = from.startPos\n        this.stopPos = from.stopPos\n    }\n}\n\n/**\n * Gain control parameters for one subband.\n */\nexport class AtracGainInfo {\n    numPoints: Int = 0             ///< number of gain control points\n    levCode = new Int32Array(7) ///< level at corresponding control point\n    locCode = new Int32Array(7) ///< location of gain control points\n\n    clear() {\n        this.numPoints = 0\n        for (let i = 0; i < 6; i++) {\n            this.levCode[i] = 0\n            this.locCode[i] = 0\n        }\n    }\n\n    copy(from: AtracGainInfo) {\n        this.numPoints = from.numPoints\n        this.levCode.set(from.levCode)\n        this.locCode.set(from.locCode)\n    }\n}\n\n/** Sound channel parameters  */\nexport class Channel {\n    constructor(public chNum: Int) {\n    }\n\n    numCodedVals: Int = 0               ///< number of transmitted quant unit values\n    fillMode: Int = 0\n    splitPoint: Int = 0\n    tableType: Int = 0                  ///< table type: 0 - tone?, 1- noise?\n    quWordlen = new Int32Array(32)  ///< array of word lengths for each quant unit\n    quSfIdx = new Int32Array(32)    ///< array of scale factor indexes for each quant unit\n    quTabIdx = new Int32Array(32)   ///< array of code table indexes for each quant unit\n    spectrum = new Int32Array(2048) ///< decoded IMDCT spectrum\n    powerLevs = new Int32Array(5)   ///< power compensation levels\n\n    // imdct window shape history (2 frames) for overlapping.\n    wndShapeHist = ArrayUtils.create(2, _ => ArrayUtils.create(Atrac3plusConstants.ATRAC3P_SUBBANDS, _ => false)) ///< IMDCT window shape, 0=sine/1=steep\n    wndShape = this.wndShapeHist[0]             ///< IMDCT window shape for current frame\n    wndShapePrev = this.wndShapeHist[1]         ///< IMDCT window shape for previous frame\n\n    // gain control data history (2 frames) for overlapping.\n    gainDataHist = ArrayUtils.create(2, _ => ArrayUtils.create(Atrac3plusConstants.ATRAC3P_SUBBANDS, _ => new AtracGainInfo()))      ///< gain control data for all subbands\n    gainData = this.gainDataHist[0]              ///< gain control data for next frame\n    gainDataPrev = this.gainDataHist[1]          ///< gain control data for previous frame\n    numGainSubbands: Int = 0            ///< number of subbands with gain control data\n\n    // tones data history (2 frames) for overlapping.\n    tonesInfoHist = ArrayUtils.create(2, _ => ArrayUtils.create(Atrac3plusConstants.ATRAC3P_SUBBANDS, _ => new WavesData()))\n    tonesInfo = this.tonesInfoHist[0]\n    tonesInfoPrev = this.tonesInfoHist[1]\n}\n\n/** Parameters of a single sine wave  */\nexport class WaveParam {\n    freqIndex: Int = 0  ///< wave frequency index\n    ampSf: Int = 0      ///< quantized amplitude scale factor\n    ampIndex: Int = 0   ///< quantized amplitude index\n    phaseIndex: Int = 0 ///< quantized phase index\n\n    clear() {\n        this.freqIndex = 0\n        this.ampSf = 0\n        this.ampIndex = 0\n        this.phaseIndex = 0\n    }\n}\n\n/** Parameters of a group of sine waves  */\nexport class WavesData {\n    pendEnv = new WaveEnvelope() ///< pending envelope from the previous frame\n    currEnv = new WaveEnvelope() ///< group envelope from the current frame\n    numWavs: Int = 0          ///< number of sine waves in the group\n    startIndex: Int = 0       ///< start index into global tones table for that subband\n\n    clear() {\n        this.pendEnv.clear()\n        this.currEnv.clear()\n        this.numWavs = 0\n        this.startIndex = 0\n    }\n\n    copy(from: WavesData) {\n        this.pendEnv.copy(from.pendEnv)\n        this.currEnv.copy(from.currEnv)\n        this.numWavs = from.numWavs\n        this.startIndex = from.startIndex\n    }\n}\n\nexport class WaveSynthParams {\n    tonesPresent: Boolean = false                                  ///< 1 - tones info present\n    amplitudeMode: Int = 0                                     ///< 1 - low range, 0 - high range\n    numToneBands: Int = 0                                      ///< number of PQF bands with tones\n    toneSharing = BooleanArray(Atrac3plusConstants.ATRAC3P_SUBBANDS) ///< 1 - subband-wise tone sharing flags\n    toneMaster = BooleanArray(Atrac3plusConstants.ATRAC3P_SUBBANDS)  ///< 1 - subband-wise tone channel swapping\n    phaseShift = BooleanArray(Atrac3plusConstants.ATRAC3P_SUBBANDS)  ///< 1 - subband-wise 180 degrees phase shifting\n    tonesIndex: Int = 0                                        ///< total sum of tones in this unit\n    waves = ArrayUtils.create(48, _ => new WaveParam())\n}\n\nexport class Context {\n    br?: BitReader = undefined\n    dsp?: Atrac3plusDsp = undefined\n\n    channelUnits = new Array<ChannelUnit>(16) ///< global channel units\n    numChannelBlocks = 2                         ///< number of channel blocks\n    outputChannels: Int = 0\n\n    gaincCtx?: Atrac = undefined ///< gain compensation context\n    mdctCtx?: FFT = undefined\n    ipqfDctCtx?: FFT = undefined ///< IDCT context used by IPQF\n\n    samples = ArrayUtils.create(2, _ => new Float32Array(Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES)) ///< quantized MDCT sprectrum\n    mdctBuf = ArrayUtils.create(2, _ => new Float32Array(Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES + Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)) ///< output of the IMDCT\n    timeBuf = ArrayUtils.create(2, _ => new Float32Array(Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES)) ///< output of the gain compensation\n    outpBuf = ArrayUtils.create(2, _ => new Float32Array(Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES))\n}\n\n/** Channel unit parameters  */\nexport class ChannelUnitContext {\n    // Channel unit variables\n    unitType: Int = 0                                     ///< unit type (mono/stereo)\n    numQuantUnits: Int = 0\n    numSubbands: Int = 0\n    usedQuantUnits: Int = 0                               ///< number of quant units with coded spectrum\n    numCodedSubbands: Int = 0                             ///< number of subbands with coded spectrum\n    muteFlag: Boolean = false                                 ///< mute flag\n    useFullTable: Boolean = false                             ///< 1 - full table list, 0 - restricted one\n    noisePresent: Boolean = false                             ///< 1 - global noise info present\n    noiseLevelIndex: Int = 0                              ///< global noise level index\n    noiseTableIndex: Int = 0                              ///< global noise RNG table index\n    swapChannels = BooleanArray(Atrac3plusConstants.ATRAC3P_SUBBANDS) ///< 1 - perform subband-wise channel swapping\n    negateCoeffs = BooleanArray(Atrac3plusConstants.ATRAC3P_SUBBANDS) ///< 1 - subband-wise IMDCT coefficients negation\n    channels = arrayOf(new Channel(0), new Channel(1))\n\n    // Variables related to GHA tones\n    waveSynthHist = arrayOf(new WaveSynthParams(), new WaveSynthParams()) ///< waves synth history for two frames\n    wavesInfo: WaveSynthParams = this.waveSynthHist[0]\n    wavesInfoPrev: WaveSynthParams = this.waveSynthHist[1]\n\n    ipqfCtx = arrayOf(new IPQFChannelContext(), new IPQFChannelContext())\n    prevBuf = ArrayUtils.create(2, _ => FloatArray(Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES)) ///< overlapping buffer\n}\n\nexport class IPQFChannelContext {\n    buf1 = ArrayUtils.create(Atrac3plusConstants.ATRAC3P_PQF_FIR_LEN * 2, _ => FloatArray(8))\n    buf2 = ArrayUtils.create(Atrac3plusConstants.ATRAC3P_PQF_FIR_LEN * 2, _ => FloatArray(8))\n    pos: Int = 0\n}\n\n\n", "import {logger, sprintf} from \"../global/utils\";\nimport {Stream} from \"../global/stream\";\nimport {ArrayUtils} from \"../global/math\";\n\nconst log = logger.named(\"MeUtils\")\n\ntype Int = number\ntype Float = number\ntype Double = number\n\nexport interface IMemory {\n    read8(addr: Int): Int\n}\n\nexport class MemoryUtils {\n    static arraycopyI(src: Int32Array, srcPos: Int, dst: Int32Array, dstPos: Int, length: Int) {\n        dst.set(src.subarray(srcPos, srcPos + length), dstPos)\n    }\n    static arraycopyF(src: Float32Array, srcPos: Int, dst: Float32Array, dstPos: Int, length: Int) {\n        dst.set(src.subarray(srcPos, srcPos + length), dstPos)\n    }\n    static arraycopyA<T>(src: T[], srcPos: Int, dst: T[], dstPos: Int, length: Int) {\n        const overlapping = (src === dst && dstPos > srcPos)\n        if (overlapping) {\n            let n = length;\n            while (--n >= 0) dst[dstPos + n] = src[srcPos + n];\n        } else {\n            for (let n = 0; n < length; n++) {\n                dst[dstPos + n] = src[srcPos + n]\n            }\n        }\n    }\n}\n\nexport class CodecUtils {\n    private static convertSampleFloatToInt16(sample: Float): Int {\n        return Math.min(Math.max(Math.floor(sample * 32768 + 0.5), -32768), 32767) & 0xFFFF\n    }\n\n    static writeOutput(\n        samples: Array<Float32Array>,\n        output: Stream,\n        numberOfSamples: Int,\n        decodedChannels: Int,\n        outputChannels: Int\n    ) {\n        const samples0 = samples[0]\n        switch (outputChannels) {\n            case 1: {\n                for (let i = 0; i < numberOfSamples; i++) {\n                    output.writeInt16LE(this.convertSampleFloatToInt16(samples0[i]))\n                }\n                break;\n            }\n            case 2: {\n                if (decodedChannels == 1) {\n                    // Convert decoded mono into output stereo\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        const sample = this.convertSampleFloatToInt16(samples0[i])\n                        output.writeInt16LE(sample)\n                        output.writeInt16LE(sample)\n                    }\n                } else {\n                    const samples1 = samples[1]\n                    for (let i = 0; i < numberOfSamples; i++) {\n                        output.writeInt16LE(this.convertSampleFloatToInt16(samples0[i]))\n                        output.writeInt16LE(this.convertSampleFloatToInt16(samples1[i]))\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    static avLog2(n: Int): Int {\n        return (n == 0) ? 0 : 31 - Math.clz32(n)\n    }\n}\n\nexport interface IBitReader {\n    read1(): Int\n    readBool(): Boolean\n    read(n: Int): Int\n    peek(n: Int): Int\n    skip(n: Int): void\n}\n\nexport class BitBuffer implements IBitReader {\n    constructor(private length: Int) {\n    }\n\n    // Store bits as ints for faster reading\n    private bits: Int32Array = new Int32Array(this.length)\n    private readIndex: Int = 0\n    private writeIndex: Int = 0\n    bitsRead: Int = 0\n    bitsWritten: Int = 0\n\n    get bytesRead() { return this.bitsRead >>> 3 }\n    get bytesWritten() { return this.bitsWritten >>> 3 }\n\n    read1(): Int {\n        this.bitsRead++\n        const bit = this.bits[this.readIndex]\n        this.readIndex++\n        if (this.readIndex >= this.bits.length) this.readIndex = 0\n        return bit\n    }\n\n    read(_n: Int): Int {\n        let n = _n;\n        let value = 0;\n        while (n > 0) {\n            value = (value << 1) + this.read1()\n            n--\n        }\n        return value\n    }\n\n    skip(n: Int) {\n        this.bitsRead += n\n        this.readIndex += n\n        while (this.readIndex < 0) this.readIndex += this.bits.length\n        while (this.readIndex >= this.bits.length) this.readIndex -= this.bits.length\n    }\n\n    writeBit(n: Int) {\n        this.bits[this.writeIndex] = n\n        this.writeIndex++\n        this.bitsWritten++\n        if (this.writeIndex >= this.bits.length) this.writeIndex = 0\n    }\n\n    writeByte(n: Int) {\n        for (let bit = 7; bit >= 0; bit--) {\n            this.writeBit((n >> bit) & 0x1)\n        }\n    }\n\n    readBool(): Boolean { return this.read1() != 0 }\n\n    peek(n: Int): Int {\n        const read = this.read(n)\n        this.skip(-n)\n        return read\n    }\n\n    toString(): string {\n        return sprintf(\"BitBuffer readIndex=%d, writeIndex=%d, readCount=%d\", this.readIndex, this.writeIndex, this.bitsRead)\n    }\n}\n\nexport class BitReader implements IBitReader {\n    constructor(\n        public mem: IMemory,\n        private addr: Int,\n        private size: Int\n    ) {\n    }\n\n    private initialAddr: Int = this.addr\n    private initialSize: Int = this.size\n    private bits: Int = 0\n    private value: Int = 0\n    private direction: Int = 1\n\n    get bitsLeft(): Int { return (this.size << 3) + this.bits }\n\n    get bytesRead(): Int {\n        let bytesRead = this.addr - this.initialAddr;\n        if (this.bits == 8) bytesRead--\n        return bytesRead\n    }\n\n    get bitsRead(): Int { return (this.addr - this.initialAddr) * 8 - this.bits }\n\n    readBool(): boolean { return this.read1() != 0 }\n\n    read1(): Int {\n        if (this.bits <= 0) {\n            this.value = this.mem.read8(this.addr)\n            this.addr += this.direction\n            this.size--\n            this.bits = 8\n        }\n        const bit = this.value >> 7\n        this.bits--\n        this.value = (this.value << 1) & 0xFF\n\n        return bit\n    }\n\n    read(n: Int): Int {\n        let read: Int;\n        if (n <= this.bits) {\n            read = this.value >> (8 - n)\n            this.bits -= n\n            this.value = (this.value << n) & 0xFF\n        } else {\n            read = 0\n            while (n > 0) {\n                read = (read << 1) + this.read1()\n                n--\n            }\n        }\n\n        return read\n    }\n\n    readByte(): Int {\n        if (this.bits == 8) {\n            this.bits = 0\n            return this.value\n        }\n        if (this.bits > 0) {\n            this.skip(this.bits)\n        }\n        const read = this.mem.read8(this.addr)\n        this.addr += this.direction\n        this.size--\n\n        return read\n    }\n\n    peek(n: Int): Int {\n        const read = this.read(n)\n        this.skip(-n)\n        return read\n    }\n\n    skip(n: Int) {\n        this.bits -= n\n        if (n >= 0) {\n            while (this.bits < 0) {\n                this.addr += this.direction\n                this.size--\n                this.bits += 8\n            }\n        } else {\n            while (this.bits > 8) {\n                this.addr -= this.direction\n                this.size++\n                this.bits -= 8\n            }\n        }\n\n        if (this.bits > 0) {\n            this.value = this.mem.read8(this.addr - this.direction)\n            this.value = (this.value << (8 - this.bits)) & 0xFF\n        }\n    }\n\n    seek(n: Int) {\n        this.addr = this.initialAddr + n\n        this.size = this.initialSize - n\n        this.bits = 0\n    }\n\n    setDirection(direction: Int) {\n        this.direction = direction\n        this.bits = 0\n    }\n\n    byteAlign() {\n        if (this.bits > 0 && this.bits < 8) {\n            this.skip(this.bits)\n        }\n    }\n\n    toString(): string {\n        return sprintf(\"BitReader addr=0x%08X, bits=%d, size=0x%X, bits read %d\", this.addr, this.bits, this.size, this.bitsRead)\n    }\n}\n\n// Template for the Discrete Cosine Transform for 32 samples\nexport class Dct32 {\n    /* tab[i][j] = 1.0 / (2.0 * cos(pi*(2*k+1) / 2^(6 - j))) */\n\n    /* cos(i*pi/64) */\n\n    static COS0_0 = (0.50060299823519630134 / 2)\n    static COS0_1 = (0.50547095989754365998 / 2)\n    static COS0_2 = (0.51544730992262454697 / 2)\n    static COS0_3 = (0.53104259108978417447 / 2)\n    static COS0_4 = (0.55310389603444452782 / 2)\n    static COS0_5 = (0.58293496820613387367 / 2)\n    static COS0_6 = (0.62250412303566481615 / 2)\n    static COS0_7 = (0.67480834145500574602 / 2)\n    static COS0_8 = (0.74453627100229844977 / 2)\n    static COS0_9 = (0.83934964541552703873 / 2)\n    static COS0_10 = (0.97256823786196069369 / 2)\n    static COS0_11 = (1.16943993343288495515 / 4)\n    static COS0_12 = (1.48416461631416627724 / 4)\n    static COS0_13 = (2.05778100995341155085 / 8)\n    static COS0_14 = (3.40760841846871878570 / 8)\n    static COS0_15 = (10.19000812354805681150 / 32)\n\n    static COS1_0 = (0.50241928618815570551 / 2)\n    static COS1_1 = (0.52249861493968888062 / 2)\n    static COS1_2 = (0.56694403481635770368 / 2)\n    static COS1_3 = (0.64682178335999012954 / 2)\n    static COS1_4 = (0.78815462345125022473 / 2)\n    static COS1_5 = (1.06067768599034747134 / 4)\n    static COS1_6 = (1.72244709823833392782 / 4)\n    static COS1_7 = (5.10114861868916385802 / 16)\n\n    static COS2_0 = (0.50979557910415916894 / 2)\n    static COS2_1 = (0.60134488693504528054 / 2)\n    static COS2_2 = (0.89997622313641570463 / 2)\n    static COS2_3 = (2.56291544774150617881 / 8)\n\n    static COS3_0 = (0.54119610014619698439 / 2)\n    static COS3_1 = (1.30656296487637652785 / 4)\n\n    static COS4_0 = (0.70710678118654752439 / 2)\n\n    // butterfly operator\n    private static BF(_val: Float32Array, a: Int, b: Int, c: Float, s: Int) {\n        const tmp0 = _val[a] + _val[b]\n        const tmp1 = _val[a] - _val[b]\n        _val[a] = tmp0\n        _val[b] = tmp1 * c * (1 << s)\n    }\n\n    private static BF0(tab: Float32Array, tabOffset: Int, _val: Float32Array, a: Int, b: Int, c: Float, s: Int) {\n        const tmp0 = tab[tabOffset + a] + tab[tabOffset + b]\n        const tmp1 = tab[tabOffset + a] - tab[tabOffset + b]\n        _val[a] = tmp0\n        _val[b] = tmp1 * c * (1 << s)\n    }\n\n    private static BF1(_val: Float32Array, a: Int, b: Int, c: Int, d: Int) {\n        this.BF(_val, a, b, this.COS4_0, 1)\n        this.BF(_val, c, d, -this.COS4_0, 1)\n            _val[c] += _val[d]\n    }\n\n    private static BF2(_val: Float32Array, a: Int, b: Int, c: Int, d: Int) {\n        this.BF(_val, a, b, this.COS4_0, 1)\n        this.BF(_val, c, d, -this.COS4_0, 1)\n        _val[c] += _val[d]\n        _val[a] += _val[c]\n        _val[c] += _val[b]\n        _val[b] += _val[d]\n    }\n\n    private static ADD(_val: Float32Array, a: Int, b: Int) {\n        _val[a] += _val[b]\n    }\n\n    // DCT32 without 1/sqrt(2) coef zero scaling.\n    static dct32(out: Float32Array, outOffset: Int, tab: Float32Array, tabOffset: Int) {\n        const _val = new Float32Array(32)\n\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 0, 31, this.COS0_0, 1)\n        this.BF0(tab, tabOffset, _val, 15, 16, this.COS0_15, 5)\n        /* pass 2 */\n        this.BF(_val, 0, 15, this.COS1_0, 1)\n        this.BF(_val, 16, 31, -this.COS1_0, 1)\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 7, 24, this.COS0_7, 1)\n        this.BF0(tab, tabOffset, _val, 8, 23, this.COS0_8, 1)\n        /* pass 2 */\n        this.BF(_val, 7, 8, this.COS1_7, 4)\n        this.BF(_val, 23, 24, -this.COS1_7, 4)\n        /* pass 3 */\n        this.BF(_val, 0, 7, this.COS2_0, 1)\n        this.BF(_val, 8, 15, -this.COS2_0, 1)\n        this.BF(_val, 16, 23, this.COS2_0, 1)\n        this.BF(_val, 24, 31, -this.COS2_0, 1)\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 3, 28, this.COS0_3, 1)\n        this.BF0(tab, tabOffset, _val, 12, 19, this.COS0_12, 2)\n        /* pass 2 */\n        this.BF(_val, 3, 12, this.COS1_3, 1)\n        this.BF(_val, 19, 28, -this.COS1_3, 1)\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 4, 27, this.COS0_4, 1)\n        this.BF0(tab, tabOffset, _val, 11, 20, this.COS0_11, 2)\n        /* pass 2 */\n        this.BF(_val, 4, 11, this.COS1_4, 1)\n        this.BF(_val, 20, 27, -this.COS1_4, 1)\n        /* pass 3 */\n        this.BF(_val, 3, 4, this.COS2_3, 3)\n        this.BF(_val, 11, 12, -this.COS2_3, 3)\n        this.BF(_val, 19, 20, this.COS2_3, 3)\n        this.BF(_val, 27, 28, -this.COS2_3, 3)\n        /* pass 4 */\n        this.BF(_val, 0, 3, this.COS3_0, 1)\n        this.BF(_val, 4, 7, -this.COS3_0, 1)\n        this.BF(_val, 8, 11, this.COS3_0, 1)\n        this.BF(_val, 12, 15, -this.COS3_0, 1)\n        this.BF(_val, 16, 19, this.COS3_0, 1)\n        this.BF(_val, 20, 23, -this.COS3_0, 1)\n        this.BF(_val, 24, 27, this.COS3_0, 1)\n        this.BF(_val, 28, 31, -this.COS3_0, 1)\n\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 1, 30, this.COS0_1, 1)\n        this.BF0(tab, tabOffset, _val, 14, 17, this.COS0_14, 3)\n        /* pass 2 */\n        this.BF(_val, 1, 14, this.COS1_1, 1)\n        this.BF(_val, 17, 30, -this.COS1_1, 1)\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 6, 25, this.COS0_6, 1)\n        this.BF0(tab, tabOffset, _val, 9, 22, this.COS0_9, 1)\n        /* pass 2 */\n        this.BF(_val, 6, 9, this.COS1_6, 2)\n        this.BF(_val, 22, 25, -this.COS1_6, 2)\n        /* pass 3 */\n        this.BF(_val, 1, 6, this.COS2_1, 1)\n        this.BF(_val, 9, 14, -this.COS2_1, 1)\n        this.BF(_val, 17, 22, this.COS2_1, 1)\n        this.BF(_val, 25, 30, -this.COS2_1, 1)\n\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 2, 29, this.COS0_2, 1)\n        this.BF0(tab, tabOffset, _val, 13, 18, this.COS0_13, 3)\n        /* pass 2 */\n        this.BF(_val, 2, 13, this.COS1_2, 1)\n        this.BF(_val, 18, 29, -this.COS1_2, 1)\n        /* pass 1 */\n        this.BF0(tab, tabOffset, _val, 5, 26, this.COS0_5, 1)\n        this.BF0(tab, tabOffset, _val, 10, 21, this.COS0_10, 1)\n        /* pass 2 */\n        this.BF(_val, 5, 10, this.COS1_5, 2)\n        this.BF(_val, 21, 26, -this.COS1_5, 2)\n        /* pass 3 */\n        this.BF(_val, 2, 5, this.COS2_2, 1)\n        this.BF(_val, 10, 13, -this.COS2_2, 1)\n        this.BF(_val, 18, 21, this.COS2_2, 1)\n        this.BF(_val, 26, 29, -this.COS2_2, 1)\n        /* pass 4 */\n        this.BF(_val, 1, 2, this.COS3_1, 2)\n        this.BF(_val, 5, 6, -this.COS3_1, 2)\n        this.BF(_val, 9, 10, this.COS3_1, 2)\n        this.BF(_val, 13, 14, -this.COS3_1, 2)\n        this.BF(_val, 17, 18, this.COS3_1, 2)\n        this.BF(_val, 21, 22, -this.COS3_1, 2)\n        this.BF(_val, 25, 26, this.COS3_1, 2)\n        this.BF(_val, 29, 30, -this.COS3_1, 2)\n\n        /* pass 5 */\n        this.BF1(_val, 0, 1, 2, 3)\n        this.BF2(_val, 4, 5, 6, 7)\n        this.BF1(_val, 8, 9, 10, 11)\n        this.BF2(_val, 12, 13, 14, 15)\n        this.BF1(_val, 16, 17, 18, 19)\n        this.BF2(_val, 20, 21, 22, 23)\n        this.BF1(_val, 24, 25, 26, 27)\n        this.BF2(_val, 28, 29, 30, 31)\n\n        /* pass 6 */\n\n        this.ADD(_val, 8, 12)\n        this.ADD(_val, 12, 10)\n        this.ADD(_val, 10, 14)\n        this.ADD(_val, 14, 9)\n        this.ADD(_val, 9, 13)\n        this.ADD(_val, 13, 11)\n        this.ADD(_val, 11, 15)\n\n        out[outOffset + 0] = _val[0]\n        out[outOffset + 16] = _val[1]\n        out[outOffset + 8] = _val[2]\n        out[outOffset + 24] = _val[3]\n        out[outOffset + 4] = _val[4]\n        out[outOffset + 20] = _val[5]\n        out[outOffset + 12] = _val[6]\n        out[outOffset + 28] = _val[7]\n        out[outOffset + 2] = _val[8]\n        out[outOffset + 18] = _val[9]\n        out[outOffset + 10] = _val[10]\n        out[outOffset + 26] = _val[11]\n        out[outOffset + 6] = _val[12]\n        out[outOffset + 22] = _val[13]\n        out[outOffset + 14] = _val[14]\n        out[outOffset + 30] = _val[15]\n\n        this.ADD(_val, 24, 28)\n        this.ADD(_val, 28, 26)\n        this.ADD(_val, 26, 30)\n        this.ADD(_val, 30, 25)\n        this.ADD(_val, 25, 29)\n        this.ADD(_val, 29, 27)\n        this.ADD(_val, 27, 31)\n\n        out[outOffset + 1] = _val[16] + _val[24]\n        out[outOffset + 17] = _val[17] + _val[25]\n        out[outOffset + 9] = _val[18] + _val[26]\n        out[outOffset + 25] = _val[19] + _val[27]\n        out[outOffset + 5] = _val[20] + _val[28]\n        out[outOffset + 21] = _val[21] + _val[29]\n        out[outOffset + 13] = _val[22] + _val[30]\n        out[outOffset + 29] = _val[23] + _val[31]\n        out[outOffset + 3] = _val[24] + _val[20]\n        out[outOffset + 19] = _val[25] + _val[21]\n        out[outOffset + 11] = _val[26] + _val[22]\n        out[outOffset + 27] = _val[27] + _val[23]\n        out[outOffset + 7] = _val[28] + _val[18]\n        out[outOffset + 23] = _val[29] + _val[19]\n        out[outOffset + 15] = _val[30] + _val[17]\n        out[outOffset + 31] = _val[31]\n    }\n}\n\n\nexport class SineWin {\n    static ff_sine_64 = new Float32Array(64)\n    static ff_sine_128 = new Float32Array(128)\n    static ff_sine_512 = new Float32Array(512)\n    static ff_sine_1024 = new Float32Array(1024)\n\n    private static sineWindowInit(window: Float32Array) {\n        const n = window.length\n        for (let i = 0; i < n; i++) {\n            window[i] = Math.sin((i + 0.5) * (Math.PI / (2.0 * n)))\n        }\n    }\n\n    static initFfSineWindows() {\n        this.sineWindowInit(this.ff_sine_64)\n        this.sineWindowInit(this.ff_sine_128)\n        this.sineWindowInit(this.ff_sine_512)\n        this.sineWindowInit(this.ff_sine_1024)\n    }\n}\n\nexport class FloatDSP {\n    static vectorFmul(dst: Float32Array, dstOffset: Int, src0: Float32Array, src0Offset: Int, src1: Float32Array, src1Offset: Int, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] = src0[src0Offset + i] * src1[src1Offset + i]\n        }\n    }\n\n    static vectorFmacScalar(dst: Float32Array, dstOffset: Int, src: Float32Array, srcOffset: Int, mul: Float, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] += src[srcOffset + i] * mul\n        }\n    }\n\n    static vectorFmulScalar(dst: Float32Array, dstOffset: Int, src: Float32Array, srcOffset: Int, mul: Float, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] = src[srcOffset + i] * mul\n        }\n    }\n\n    static vectorDmulScalar(dst: Float64Array, dstOffset: Int, src: Float64Array, srcOffset: Int, mul: Double, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] = src[srcOffset + i] * mul\n        }\n    }\n\n    static vectorFmulWindow(dst: Float32Array, dstOffset: Int, src0: Float32Array, src0Offset: Int, src1: Float32Array, src1Offset: Int, win: Float32Array, winOffset: Int, len: Int) {\n        dstOffset += len\n        winOffset += len\n        src0Offset += len\n        let i = -len;\n        let j = len - 1;\n        while (i < 0) {\n            const s0 = src0[src0Offset + i]\n            const s1 = src1[src1Offset + j]\n            const wi = win[winOffset + i]\n            const wj = win[winOffset + j]\n            dst[dstOffset + i] = s0 * wj - s1 * wi\n            dst[dstOffset + j] = s0 * wi + s1 * wj\n            i++\n            j--\n        }\n    }\n\n    static vectorFmulAdd(dst: Float32Array, dstOffset: Int, src0: Float32Array, src0Offset: Int, src1: Float32Array, src1Offset: Int, src2: Float32Array, src2Offset: Int, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] = src0[src0Offset + i] * src1[src1Offset + i] + src2[src2Offset + i]\n        }\n    }\n\n    static vectorFmulReverse(dst: Float32Array, dstOffset: Int, src0: Float32Array, src0Offset: Int, src1: Float32Array, src1Offset: Int, len: Int) {\n        for (let i = 0; i < len; i++) {\n            dst[dstOffset + i] = src0[src0Offset + i] * src1[src1Offset + len - 1 - i]\n        }\n    }\n\n    static butterflies(v1: Float32Array, v1Offset: Int, v2: Float32Array, v2Offset: Int, len: Int) {\n        for (let i = 0; i < len; i++) {\n            const t = v1[v1Offset + i] - v2[v2Offset + i]\n            v1[v1Offset + i] += v2[v2Offset + i]\n            v2[v2Offset + i] = t\n        }\n    }\n\n    static scalarproduct(v1: Float32Array, v1Offset: Int, v2: Float32Array, v2Offset: Int, len: Int): Float {\n        let p = 0;\n\n        for (let i = 0; i < len; i++) {\n            p += v1[v1Offset + i] * v2[v2Offset + i]\n        }\n\n        return p\n    }\n}\n\ninterface Comparable<T> {\n    compareTo(o: T): Int\n}\n\nclass VLCcode implements Comparable<VLCcode> {\n    bits: Int = 0\n    symbol: Int = 0\n    code: Int = 0\n\n    compareTo(o: VLCcode): Int { return (this.code >>> 1) - (o.code >>> 1) }\n}\n\nexport class VLC {\n    bits: Int = 0\n    table?: Int32Array[]\n    tableSize: Int = 0\n    tableAllocated: Int = 0\n\n    initVLCSparse3(bits: Int32Array, codes: Int32Array, symbols: Int32Array): Int {\n        return this.initVLCSparse(bits.length, codes.length, bits, codes, symbols)\n    }\n\n    initVLCSparse(nbBits: Int, nbCodes: Int, bits: Int32Array, codes: Int32Array, symbols: Int32Array|null): Int {\n        const buf = new Array<VLCcode>(nbCodes + 1)\n\n        this.bits = nbBits\n\n        let j = 0\n        for (let i = 0; i < nbCodes; i++) {\n            const vlCcode = new VLCcode()\n            buf[j] = vlCcode\n            vlCcode.bits = bits[i]\n            if (vlCcode.bits <= nbBits) {\n                continue\n            }\n            if (vlCcode.bits > 3 * nbBits || vlCcode.bits > 32) {\n                log.error(\"Too long VLC (%d) in initVLC\".format(vlCcode.bits))\n                return -1\n            }\n            vlCcode.code = codes[i]\n            if (vlCcode.code >= 1 << vlCcode.bits) {\n                log.error(\"Invalid code in initVLC\")\n                return -1\n            }\n            vlCcode.code = vlCcode.code << (32 - vlCcode.bits)\n            if (symbols != null) {\n                vlCcode.symbol = symbols[i]\n            } else {\n                vlCcode.symbol = i\n            }\n            j++\n        }\n\n        this.Arrays_sort(buf, 0, j)\n\n        for (let i = 0; i < nbCodes; i++) {\n            const vlCcode = new VLCcode()\n            buf[j] = vlCcode\n            vlCcode.bits = bits[i]\n            if (!(vlCcode.bits != 0 && vlCcode.bits <= nbBits)) {\n                continue\n            }\n            vlCcode.code = codes[i]\n            vlCcode.code = vlCcode.code << (32 - vlCcode.bits)\n            if (symbols != null) {\n                vlCcode.symbol = symbols[i]\n            } else {\n                vlCcode.symbol = i\n            }\n            j++\n        }\n\n        nbCodes = j\n\n        return this.buildTable(nbBits, nbCodes, buf as Array<VLCcode>, 0)\n    }\n\n    private Arrays_sort<T extends Comparable<T>>(buf: T[], fromIndex: Int, toIndex: Int) {\n        const sorted = buf.slice(fromIndex, toIndex).sort((a, b) => a.compareTo(b))\n        MemoryUtils.arraycopyA(sorted, 0, buf, fromIndex, toIndex - fromIndex)\n    }\n\n    private buildTable(tableNbBits: Int, nbCodes: Int, codes: Array<VLCcode>, codeOffset: Int): Int {\n        const tableSize = 1 << tableNbBits\n        if (tableNbBits > 30) {\n            return -1\n        }\n\n        const tableIndex = this.allocTable(tableSize)\n        if (tableIndex < 0) {\n            return tableIndex\n        }\n\n        // first pass: map codes and compute auxiliary table sizes\n        {\n            var i = 0\n            while (i < nbCodes) {\n                var n = codes[codeOffset + i].bits\n                var code = codes[codeOffset + i].code\n                const symbol = codes[codeOffset + i].symbol\n                if (n <= tableNbBits) {\n                    // no need to add another table\n                    var j = code >>> (32 - tableNbBits)\n                    const nb = 1 << (tableNbBits - n)\n                    const inc = 1\n                    for (let k = 0; k < nb; k++) {\n                        const bits = this.table!![tableIndex + j][1]\n                        if (bits != 0 && bits != n) {\n                            log.error(\"incorrect codes\")\n                            return -1\n                        }\n                        this.table!![tableIndex + j][1] = n //bits\n                        this.table!![tableIndex + j][0] = symbol\n                        j += inc\n                    }\n                } else {\n                    // fill auxiliary table recursively\n                    n -= tableNbBits\n                    const codePrefix = code >>> (32 - tableNbBits)\n                    let subtableBits = n;\n                    codes[codeOffset + i].bits = n\n                    codes[codeOffset + i].code = code << tableNbBits\n                    let k: Int;\n                    k = i + 1\n                    while (k < nbCodes) {\n                        n = codes[codeOffset + k].bits - tableNbBits\n                        if (n <= 0) {\n                            break\n                        }\n                        code = codes[codeOffset + k].code\n                        if ((code >>> (32 - tableNbBits)) != codePrefix) {\n                            break\n                        }\n                        codes[codeOffset + k].bits = n\n                        codes[codeOffset + k].code = code << tableNbBits\n                        subtableBits = Math.max(subtableBits, n)\n                        k++\n                    }\n                    subtableBits = Math.min(subtableBits, tableNbBits)\n                    this.table!![tableIndex + codePrefix][1] = -subtableBits\n                    const index = this.buildTable(subtableBits, k - i, codes, codeOffset + i)\n                    if (index < 0) {\n                        return index\n                    }\n                    this.table!![tableIndex + codePrefix][0] = index //code\n                    i = k - 1\n                }\n                i++\n            }\n        }\n\n        for (let i = 0; i < tableSize; i++) {\n            if (this.table!![tableIndex + i][1] == 0) { //bits\n                this.table!![tableIndex + i][0] = -1 //codes\n            }\n        }\n\n        return tableIndex\n    }\n\n    private allocTable(size: Int): Int {\n        const index = this.tableSize\n\n        this.tableSize += size\n        this.tableAllocated = this.tableSize\n        const newTable = ArrayUtils.create(this.tableAllocated, _ => new Int32Array(2))\n        if (this.table != null) {\n            for (let i = 0; i < index; i++) {\n                newTable[i][0] = this.table!![i][0]\n                newTable[i][1] = this.table!![i][1]\n            }\n        }\n        this.table = newTable\n\n        return index\n    }\n\n    /**\n     * Parse a vlc code.\n     * @param br is the number of bits which will be read at once, must be\n     * identical to nb_bits in init_vlc()\n     * @param maxDepth is the number of times bits bits must be read to completely\n     * read the longest vlc code\n     * = (max_vlc_length + bits - 1) / bits\n     */\n    getVLC2(br: IBitReader, maxDepth: Int = 1): Int {\n        let nbBits: Int;\n        let index = br.peek(this.bits);\n        if (index < 0) throw new Error(`Invalid index ${index}`)\n        let code = this.table!![index][0];\n        let n = this.table!![index][1];\n\n        if (maxDepth > 1 && n < 0) {\n            br.skip(this.bits)\n\n            nbBits = -n\n\n            index = br.peek(nbBits) + code\n            code = this.table!![index][0]\n            n = this.table!![index][1]\n            if (maxDepth > 2 && n < 0) {\n                br.skip(nbBits)\n\n                nbBits = -n\n\n                index = br.peek(nbBits) + code\n                code = this.table!![index][0]\n                n = this.table!![index][1]\n            }\n        }\n        br.skip(n)\n\n        return code\n    }\n}\n\nexport class FFT {\n\tnbits: Int = 0\n\tinverse: Boolean = false\n\trevtab = new Int32Array(0)\n\ttmpBuf = new Float32Array(0)\n\tmdctSize: Int = 0 // size of MDCT (i.e. number of input data * 2)\n\tmdctBits: Int = 0 // n = 2^nbits\n\t// pre/post rotation tables\n\ttcos = new Float32Array(0)\n\ttsin = new Float32Array(0)\n    private TEMP_FLOAT4 = new Float32Array(4)\n\n\tcopy(that: FFT) {\n\t\tthis.nbits = that.nbits\n\t\tthis.inverse = that.inverse\n\t\tthis.copyI(this.revtab, that.revtab)\n\t\tthis.copyF(this.tmpBuf, that.tmpBuf)\n\t\tthis.mdctSize = that.mdctSize\n\t\tthis.mdctBits = that.mdctBits\n\t\tthis.copyF(this.tcos, that.tcos)\n\t\tthis.copyF(this.tsin, that.tsin)\n\t}\n\n\tcopyI(dst: Int32Array, src: Int32Array) { dst.set(src) }\n\tcopyF(dst: Float32Array, src: Float32Array) { dst.set(src) }\n\n\tprivate fftInit(nbits: Int, inverse: Boolean): Int {\n\t\tif (nbits < 2 || nbits > 16) {\n            this.revtab = new Int32Array(0)\n\t\t\tthis.tmpBuf = new Float32Array(0)\n\t\t\treturn -1\n\t\t}\n\n\t\tthis.nbits = nbits\n\t\tthis.inverse = inverse\n\n\t\tconst n = 1 << nbits\n\t\tthis.revtab = new Int32Array(n)\n\t\tthis.tmpBuf = new Float32Array(n * 2)\n\n\t\tFFT.initFfCosTabs(FFT.ff_cos_16, 16)\n\t\tFFT.initFfCosTabs(FFT.ff_cos_32, 32)\n\t\tFFT.initFfCosTabs(FFT.ff_cos_64, 64)\n\t\tFFT.initFfCosTabs(FFT.ff_cos_128, 128)\n\t\tFFT.initFfCosTabs(FFT.ff_cos_256, 256)\n\t\tFFT.initFfCosTabs(FFT.ff_cos_512, 512)\n\n        for (let i = 0; i < n; i++) {\n            this.revtab[-FFT.splitRadixPermutation(i, n, inverse) & (n - 1)] = i\n\t\t}\n\n\t\treturn 0\n\t}\n\n\tmdctInit(nbits: Int, inverse: Boolean, scale: Double): Int {\n\t\tconst n = 1 << nbits\n        this.mdctBits = nbits\n        this.mdctSize = n\n        const n4 = n >> 2\n\n        const ret = this.fftInit(this.mdctBits - 2, inverse)\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n\t\tthis.tcos = new Float32Array(n4)\n\t\tthis.tsin = new Float32Array(n4)\n\n\t\tconst theta = 1.0 / 8.0 + ((scale < 0) ? n4 : 0)\n\t\tscale = Math.sqrt(Math.abs(scale))\n        for (let i = 0; i < n4; i++) {\n\t\t\tconst alpha = 2.0 * Math.PI * (i + theta) / n\n            this.tcos[i] = (-Math.cos(alpha) * scale)\n\t\t\tthis.tsin[i] = (-Math.sin(alpha) * scale)\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Compute inverse MDCT of size N = 2^nbits\n\t * @param output N samples\n     * @param outputOffset\n\t * @param input N/2 samples\n     * @param inputOffset\n\t */\n\timdctCalc(output: Float32Array, outputOffset: Int, input: Float32Array, inputOffset: Int) {\n\t\tconst n = 1 << this.mdctBits\n\t\tconst n2 = n >> 1\n\t\tconst n4 = n >> 2\n\n\t\tthis.imdctHalf(output, outputOffset + n4, input, inputOffset)\n\n        for (let k = 0; k < n4; k++) {\n\t\t\toutput[outputOffset + k] = -output[outputOffset + n2 - k - 1]\n\t\t\toutput[outputOffset + n - k - 1] = output[outputOffset + n2 + k]\n\t\t}\n\t}\n\n\t/**\n\t * Compute the middle half of the inverse MDCT of size N = 2^nbits,\n\t * thus excluding the parts that can be derived by symmetry\n\t * @param output N/2 samples\n     * @param outputOffset\n\t * @param input N/2 samples\n     * @param inputOffset\n\t */\n\timdctHalf(output: Float32Array, outputOffset: Int, input: Float32Array, inputOffset: Int) {\n\t\tconst n = 1 << this.mdctBits\n\t\tconst n2 = n >> 1\n\t\tconst n4 = n >> 2\n\t\tconst n8 = n >> 3\n\n\t\t// pre rotation\n        let in1 = 0;\n        let in2 = n2 - 1;\n        for (let k = 0; k < n4; k++) {\n\t\t\tconst j = this.revtab[k]\n            FFT.CMUL(output, outputOffset + j * 2, outputOffset + j * 2 + 1, input[inputOffset + in2], input[inputOffset + in1], this.tcos[k], this.tsin[k])\n\t\t\tin1 += 2\n\t\t\tin2 -= 2\n\t\t}\n        this.fftCalcFloat(output, outputOffset)\n\n\t\t// post rotation + reordering\n\t\tconst r = this.TEMP_FLOAT4\n        for (let i = 0; i < n8; i++) {\n            const offset0 = (outputOffset + (n8 - i - 1) * 2 + 0)|0\n            const offset1 = (outputOffset + (n8 - i - 1) * 2 + 1)|0\n            const offset2 = (outputOffset + (n8 + i) * 2 + 0)|0\n            const offset3 = (outputOffset + (n8 + i) * 2 + 1)|0\n            FFT.CMUL(r, 0, 3, output[offset1], output[offset0], this.tsin[n8 - i - 1], this.tcos[n8 - i - 1])\n            FFT.CMUL(r, 2, 1, output[offset3], output[offset2], this.tsin[n8 + i], this.tcos[n8 + i])\n\t\t\toutput[offset0] = r[0]\n\t\t\toutput[offset1] = r[1]\n\t\t\toutput[offset2] = r[2]\n\t\t\toutput[offset3] = r[3]\n\t\t}\n\t}\n\n\tprivate fft4(z: Float32Array, o: Int) {\n\t\t// BF(t3, t1, z[0].re, z[1].re);\n\t\t// BF(t8, t6, z[3].re, z[2].re);\n\t\t// BF(z[2].re, z[0].re, t1, t6);\n\t\t// BF(t4, t2, z[0].im, z[1].im);\n\t\t// BF(t7, t5, z[2].im, z[3].im);\n\t\t// BF(z[3].im, z[1].im, t4, t8);\n\t\t// BF(z[3].re, z[1].re, t3, t7);\n\t\t// BF(z[2].im, z[0].im, t2, t5);\n\t\tconst t3 = (z[o + 0] - z[o + 2])\n\t\tconst t1 = (z[o + 0] + z[o + 2])\n\t\tconst t8 = (z[o + 6] - z[o + 4])\n\t\tconst t6 = (z[o + 6] + z[o + 4])\n\t\tz[o + 4] = (t1 - t6)\n\t\tz[o + 0] = (t1 + t6)\n\t\tconst t4 = (z[o + 1] - z[o + 3])\n\t\tconst t2 = (z[o + 1] + z[o + 3])\n\t\tconst t7 = (z[o + 5] - z[o + 7])\n\t\tconst t5 = (z[o + 5] + z[o + 7])\n\t\tz[o + 7] = (t4 - t8)\n\t\tz[o + 3] = (t4 + t8)\n\t\tz[o + 6] = (t3 - t7)\n\t\tz[o + 2] = (t3 + t7)\n\t\tz[o + 5] = (t2 - t5)\n\t\tz[o + 1] = (t2 + t5)\n\t}\n\n\tprivate fft8(z: Float32Array, o: Int) {\n\t\tthis.fft4(z, o)\n\n\t\t// BF(t1, z[5].re, z[4].re, -z[5].re);\n\t\t// BF(t2, z[5].im, z[4].im, -z[5].im);\n\t\t// BF(t5, z[7].re, z[6].re, -z[7].re);\n\t\t// BF(t6, z[7].im, z[6].im, -z[7].im);\n        let t1 = (z[o + 8] + z[o + 10]);\n        z[o + 10] = z[o + 8] - z[o + 10]\n        let t2 = (z[o + 9] + z[o + 11]);\n        z[o + 11] = z[o + 9] - z[o + 11]\n        let t5 = (z[o + 12] + z[o + 14]);\n        z[o + 14] = z[o + 12] - z[o + 14]\n        let t6 = (z[o + 13] + z[o + 15]);\n        z[o + 15] = z[o + 13] - z[o + 15]\n\n\t\t// BUTTERFLIES(z[0],z[2],z[4],z[6]);\n        let t3 = t5 - t1;\n        t5 = t5 + t1\n\t\tz[o + 8] = (z[o + 0] - t5)\n\t\tz[o + 0] = (z[o + 0] + t5)\n\t\tz[o + 13] = (z[o + 5] - t3)\n\t\tz[o + 5] = (z[o + 5] + t3)\n\t\tvar t4 = t2 - t6\n\t\tt6 = t2 + t6\n\t\tz[o + 12] = (z[o + 4] - t4)\n\t\tz[o + 4] = (z[o + 4] + t4)\n\t\tz[o + 9] = (z[o + 1] - t6)\n\t\tz[o + 1] = (z[o + 1] + t6)\n\n\t\t// TRANSFORM(z[1],z[3],z[5],z[7],sqrthalf,sqrthalf);\n\t\t//   CMUL(t1, t2, a2.re, a2.im, wre, -wim);\n\t\tt1 = (z[o + 10] * FFT.sqrthalf + z[o + 11] * FFT.sqrthalf)\n\t\tt2 = (-z[o + 10] * FFT.sqrthalf + z[o + 11] * FFT.sqrthalf)\n\t\t//   CMUL(t5, t6, a3.re, a3.im, wre,  wim);\n\t\tt5 = (z[o + 14] * FFT.sqrthalf - z[o + 15] * FFT.sqrthalf)\n\t\tt6 = (z[o + 14] * FFT.sqrthalf + z[o + 15] * FFT.sqrthalf)\n\t\t//   BUTTERFLIES(a0,a1,a2,a3)\n\t\tt3 = t5 - t1\n\t\tt5 = t5 + t1\n\t\tz[o + 10] = (z[o + 2] - t5)\n\t\tz[o + 2] = (z[o + 2] + t5)\n\t\tz[o + 15] = (z[o + 7] - t3)\n\t\tz[o + 7] = (z[o + 7] + t3)\n\t\tt4 = t2 - t6\n\t\tt6 = t2 + t6\n\t\tz[o + 14] = (z[o + 6] - t4)\n\t\tz[o + 6] = (z[o + 6] + t4)\n\t\tz[o + 11] = (z[o + 3] - t6)\n\t\tz[o + 3] = (z[o + 3] + t6)\n\t}\n\n\tprivate pass(z: Float32Array, o: Int, cos: Float32Array, n: Int) {\n        let o0 = o;\n        let o1 = o + 2 * n * 2;\n        let o2 = o + 4 * n * 2;\n        let o3 = o + 6 * n * 2;\n        let wre = 0;\n        let wim = 2 * n;\n        n--\n\n\t\t// TRANSFORM_ZERO(z[0],z[o1],z[o2],z[o3]);\n        let t1 = z[o2 + 0];\n        let t2 = z[o2 + 1];\n        let t5 = z[o3 + 0];\n        let t6 = z[o3 + 1];\n        //   BUTTERFLIES(a0,a1,a2,a3)\n        let t3 = t5 - t1;\n        t5 = t5 + t1\n\t\tz[o2 + 0] = (z[o0 + 0] - t5)\n\t\tz[o0 + 0] = (z[o0 + 0] + t5)\n\t\tz[o3 + 1] = (z[o1 + 1] - t3)\n\t\tz[o1 + 1] = (z[o1 + 1] + t3)\n\t\tvar t4 = t2 - t6\n\t\tt6 = t2 + t6\n\t\tz[o3 + 0] = (z[o1 + 0] - t4)\n\t\tz[o1 + 0] = (z[o1 + 0] + t4)\n\t\tz[o2 + 1] = (z[o0 + 1] - t6)\n\t\tz[o0 + 1] = (z[o0 + 1] + t6)\n\t\t// TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);\n\t\t//   CMUL(t1, t2, a2.re, a2.im, wre, -wim);\n\t\tt1 = (z[o2 + 2] * cos[wre + 1] + z[o2 + 3] * cos[wim - 1])\n\t\tt2 = (-z[o2 + 2] * cos[wim - 1] + z[o2 + 3] * cos[wre + 1])\n\t\t//   CMUL(t5, t6, a3.re, a3.im, wre,  wim);\n\t\tt5 = (z[o3 + 2] * cos[wre + 1] - z[o3 + 3] * cos[wim - 1])\n\t\tt6 = (z[o3 + 2] * cos[wim - 1] + z[o3 + 3] * cos[wre + 1])\n\t\t//   BUTTERFLIES(a0,a1,a2,a3)\n\t\tt3 = t5 - t1\n\t\tt5 = t5 + t1\n\t\tz[o2 + 2] = (z[o0 + 2] - t5)\n\t\tz[o0 + 2] = (z[o0 + 2] + t5)\n\t\tz[o3 + 3] = (z[o1 + 3] - t3)\n\t\tz[o1 + 3] = (z[o1 + 3] + t3)\n\t\tt4 = t2 - t6\n\t\tt6 = t2 + t6\n\t\tz[o3 + 2] = (z[o1 + 2] - t4)\n\t\tz[o1 + 2] = (z[o1 + 2] + t4)\n\t\tz[o2 + 3] = (z[o0 + 3] - t6)\n\t\tz[o0 + 3] = (z[o0 + 3] + t6)\n\n\t\tdo {\n\t\t\to0 += 4\n\t\t\to1 += 4\n\t\t\to2 += 4\n\t\t\to3 += 4\n\t\t\twre += 2\n\t\t\twim -= 2\n\t\t\t// TRANSFORM(z[0],z[o1],z[o2],z[o3],wre[0],wim[0]);\n\t\t\t//   CMUL(t1, t2, a2.re, a2.im, wre, -wim);\n\t\t\tt1 = (z[o2 + 0] * cos[wre] + z[o2 + 1] * cos[wim])\n\t\t\tt2 = (-z[o2 + 0] * cos[wim] + z[o2 + 1] * cos[wre])\n\t\t\t//   CMUL(t5, t6, a3.re, a3.im, wre,  wim);\n\t\t\tt5 = (z[o3 + 0] * cos[wre] - z[o3 + 1] * cos[wim])\n\t\t\tt6 = (z[o3 + 0] * cos[wim] + z[o3 + 1] * cos[wre])\n\t\t\t//   BUTTERFLIES(a0,a1,a2,a3)\n\t\t\tt3 = t5 - t1\n\t\t\tt5 = t5 + t1\n\t\t\tz[o2 + 0] = (z[o0 + 0] - t5)\n\t\t\tz[o0 + 0] = (z[o0 + 0] + t5)\n\t\t\tz[o3 + 1] = (z[o1 + 1] - t3)\n\t\t\tz[o1 + 1] = (z[o1 + 1] + t3)\n\t\t\tt4 = t2 - t6\n\t\t\tt6 = t2 + t6\n\t\t\tz[o3 + 0] = (z[o1 + 0] - t4)\n\t\t\tz[o1 + 0] = (z[o1 + 0] + t4)\n\t\t\tz[o2 + 1] = (z[o0 + 1] - t6)\n\t\t\tz[o0 + 1] = (z[o0 + 1] + t6)\n\t\t\t// TRANSFORM(z[1],z[o1+1],z[o2+1],z[o3+1],wre[1],wim[-1]);\n\t\t\t//   CMUL(t1, t2, a2.re, a2.im, wre, -wim);\n\t\t\tt1 = (z[o2 + 2] * cos[wre + 1] + z[o2 + 3] * cos[wim - 1])\n\t\t\tt2 = (-z[o2 + 2] * cos[wim - 1] + z[o2 + 3] * cos[wre + 1])\n\t\t\t//   CMUL(t5, t6, a3.re, a3.im, wre,  wim);\n\t\t\tt5 = (z[o3 + 2] * cos[wre + 1] - z[o3 + 3] * cos[wim - 1])\n\t\t\tt6 = (z[o3 + 2] * cos[wim - 1] + z[o3 + 3] * cos[wre + 1])\n\t\t\t//   BUTTERFLIES(a0,a1,a2,a3)\n\t\t\tt3 = t5 - t1\n\t\t\tt5 = t5 + t1\n\t\t\tz[o2 + 2] = (z[o0 + 2] - t5)\n\t\t\tz[o0 + 2] = (z[o0 + 2] + t5)\n\t\t\tz[o3 + 3] = (z[o1 + 3] - t3)\n\t\t\tz[o1 + 3] = (z[o1 + 3] + t3)\n\t\t\tt4 = t2 - t6\n\t\t\tt6 = t2 + t6\n\t\t\tz[o3 + 2] = (z[o1 + 2] - t4)\n\t\t\tz[o1 + 2] = (z[o1 + 2] + t4)\n\t\t\tz[o2 + 3] = (z[o0 + 3] - t6)\n\t\t\tz[o0 + 3] = (z[o0 + 3] + t6)\n\t\t} while (--n != 0)\n\t}\n\n\tprivate fft16(z: Float32Array, o: Int) {\n\t\tthis.fft8(z, o)\n\t\tthis.fft4(z, o + 16)\n\t\tthis.fft4(z, o + 24)\n\t\tthis.pass(z, o, FFT.ff_cos_16, 2)\n\t}\n\n\tprivate fft32(z: Float32Array, o: Int) {\n\t\tthis.fft16(z, o)\n\t\tthis.fft8(z, o + 32)\n\t\tthis.fft8(z, o + 48)\n\t\tthis.pass(z, o, FFT.ff_cos_32, 4)\n\t}\n\n\tprivate fft64(z: Float32Array, o: Int) {\n\t\tthis.fft32(z, o)\n\t\tthis.fft16(z, o + 64)\n\t\tthis.fft16(z, o + 96)\n\t\tthis.pass(z, o, FFT.ff_cos_64, 8)\n\t}\n\n\tprivate fft128(z: Float32Array, o: Int) {\n\t\tthis.fft64(z, o)\n\t\tthis.fft32(z, o + 128)\n\t\tthis.fft32(z, o + 192)\n\t\tthis.pass(z, o, FFT.ff_cos_128, 16)\n\t}\n\n\tprivate fft256(z: Float32Array, o: Int) {\n\t\tthis.fft128(z, o)\n\t\tthis.fft64(z, o + 256)\n\t\tthis.fft64(z, o + 384)\n\t\tthis.pass(z, o, FFT.ff_cos_256, 32)\n\t}\n\n\tprivate fft512(z: Float32Array, o: Int) {\n\t\tthis.fft256(z, o)\n\t\tthis.fft128(z, o + 512)\n\t\tthis.fft128(z, o + 768)\n\t\tthis.pass(z, o, FFT.ff_cos_512, 64)\n\t}\n\n\tfftCalcFloat(z: Float32Array, o: Int) {\n\t\tswitch (this.nbits) {\n            case 2: return this.fft4(z, 0)\n            case 3: return this.fft8(z, o)\n            case 4: return this.fft16(z, 0)\n            case 5: return this.fft32(z, 0)\n            case 6: return this.fft64(z, o)\n            case 7: return this.fft128(z, o)\n            case 8: return this.fft256(z, 0)\n            case 9: return this.fft512(z, 0)\n            default: log.error(\"FFT nbits=%d not implemented\".format(this.nbits))\n\t\t}\n\t}\n\n\t/**\n\t * Compute MDCT of size N = 2^nbits\n\t */\n\tmdctCalc(output: Float32Array, outputOffset: Int, input: Float32Array, inputOffset: Int) {\n\t\tconst n = 1 << this.mdctBits\n\t\tconst n2 = n >> 1\n\t\tconst n4 = n >> 2\n\t\tconst n8 = n >> 3\n\t\tconst n3 = 3 * n4\n\n\t\t// pre rotation\n        for (let i = 0; i < n8; i++) {\n            {\n                const re = -input[inputOffset + 2 * i + n3] - input[inputOffset + n3 - 1 - 2 * i]\n                const im = -input[inputOffset + n4 + 2 * i] + input[inputOffset + n4 - 1 - 2 * i]\n                const j = this.revtab[i]\n                FFT.CMUL(output, outputOffset + 2 * j + 0, outputOffset + 2 * j + 1, re, im, -this.tcos[i], this.tsin[i])\n            }\n\n            {\n                const re = input[inputOffset + 2 * i] - input[inputOffset + n2 - 1 - 2 * i]\n                const im = -input[inputOffset + n2 + 2 * i] - input[inputOffset + n - 1 - 2 * i]\n                const j = this.revtab[n8 + i]\n                FFT.CMUL(output, outputOffset + 2 * j + 0, outputOffset + 2 * j + 1, re, im, -this.tcos[n8 + i], this.tsin[n8 + i])\n            }\n\t\t}\n\n        this.fftCalcFloat(output, outputOffset)\n\n\t\t// post rotation\n\t\tconst r = this.TEMP_FLOAT4\n        for (let i = 0; i < n8; i++) {\n            const offset0 = (outputOffset + (n8 - i - 1) * 2 + 0)|0\n            const offset1 = (outputOffset + (n8 - i - 1) * 2 + 1)|0\n            const offset2 = (outputOffset + (n8 + i) * 2 + 0)|0\n            const offset4 = (outputOffset + (n8 + i) * 2 + 1)|0\n            FFT.CMUL(r, 3, 0, output[offset0], output[offset1], -this.tsin[n8 - i - 1], -this.tcos[n8 - i - 1])\n            FFT.CMUL(r, 1, 2, output[offset2], output[offset4], -this.tsin[n8 + i], -this.tcos[n8 + i])\n\t\t\toutput[offset0] = r[0]\n\t\t\toutput[offset1] = r[1]\n\t\t\toutput[offset2] = r[2]\n\t\t\toutput[offset4] = r[3]\n\t\t}\n\t}\n\n\n    static M_SQRT1_2 = 0.70710678118654752440 // 1/sqrt(2)\n    private static sqrthalf = FFT.M_SQRT1_2\n    private static ff_cos_16 = new Float32Array(16 / 2)\n    private static ff_cos_32 = new Float32Array(32 / 2)\n    private static ff_cos_64 = new Float32Array(64 / 2)\n    private static ff_cos_128 = new Float32Array(128 / 2)\n    private static ff_cos_256 = new Float32Array(256 / 2)\n    private static ff_cos_512 = new Float32Array(512 / 2)\n\n    private static initFfCosTabs(tab: Float32Array, m: Int) {\n        const freq = 2 * Math.PI / m\n        for (let i = 0; i <= m / 4; i++) {\n            tab[i] = Math.cos(i * freq)\n        }\n        for (let i = 1; i < m / 4; i++) {\n            tab[m / 2 - i] = tab[i]\n        }\n    }\n\n    private static splitRadixPermutation(i: Int, n: Int, inverse: Boolean): Int {\n        if (n <= 2) {\n            return i & 1\n        }\n        let m = n >> 1;\n        if ((i & m) == 0) {\n            return this.splitRadixPermutation(i, m, inverse) * 2\n        }\n        m = m >> 1\n        return this.splitRadixPermutation(i, m, inverse) * 4 + ((inverse == ((i & m) == 0)) ? 1 : -1)\n    }\n\n    private static CMUL(d: Float32Array, dre: Int, dim: Int, are: Float, aim: Float, bre: Float, bim: Float) {\n        d[dre] = are * bre - aim * bim\n        d[dim] = are * bim + aim * bre\n    }\n}\n", "import {AtracGainInfo} from \"./Atrac3PlusDtos\";\nimport {MemoryUtils} from \"../MeUtils\";\n\ntype Int = number\n\n/*\n * Based on the FFmpeg version from Maxim Poliakovski.\n * All credits go to him.\n * C to Java conversion by gid15 for the jpcsp project.\n * Java to Kotlin for kpspemu\n */\nexport class Atrac {\n    private gainTab1 = new Float32Array(16) ///< gain compensation level table\n    private gainTab2 = new Float32Array(31) ///< gain compensation interpolation table\n    private id2expOffset: Int = 0               ///< offset for converting level index into level exponent\n    private locScale: Int = 0                   ///< scale of location code = 2^loc_scale samples\n    private locSize: Int = 0                    ///< size of location code in samples\n\n    initGainCompensation(id2expOffset: Int, locScale: Int) {\n        this.locScale = locScale\n        this.locSize = 1 << locScale\n        this.id2expOffset = id2expOffset\n\n        // Generate gain level table\n        for (let i = 0; i <= 15; i++) {\n            this.gainTab1[i] = 2.0 ** (id2expOffset - i)\n        }\n\n        // Generate gain interpolation table\n        for (let i = -15; i <= 15; i++) {\n            this.gainTab2[i + 15] = 2.0 ** (-1.0 / this.locSize * i)\n        }\n    }\n\n    gainCompensation(_in: Float32Array, inOffset: Int, prev: Float32Array, prevOffset: Int, gcNow: AtracGainInfo, gcNext: AtracGainInfo, numSamples: Int, out: Float32Array, outOffset: Int) {\n        const gcScale = (gcNext.numPoints != 0) ? this.gainTab1[gcNext.levCode[0]] : 1.0\n\n        if (gcNow.numPoints == 0) {\n            for (let pos = 0; pos < numSamples; pos++) {\n                out[outOffset + pos] = _in[inOffset + pos] * gcScale + prev[prevOffset + pos]\n            }\n        } else {\n            let pos = 0;\n\n            for (let i = 0; i < gcNow.numPoints; i++) {\n                const lastpos = gcNow.locCode[i] << this.locScale\n\n                let lev = this.gainTab1[gcNow.levCode[i]];\n                const gainInc = this.gainTab2[((i + 1 < gcNow.numPoints) ? gcNow.levCode[i + 1] : this.id2expOffset) - gcNow.levCode[i] + 15]\n\n                // apply constant gain level and overlap\n                while (pos < lastpos) {\n                    out[outOffset + pos] = (_in[inOffset + pos] * gcScale + prev[prevOffset + pos]) * lev\n                    pos++\n                }\n\n                // interpolate between two different gain levels\n                while (pos < lastpos + this.locSize) {\n                    out[outOffset + pos] = (_in[inOffset + pos] * gcScale + prev[prevOffset + pos]) * lev\n                    lev *= gainInc\n                    pos++\n                }\n            }\n\n            while (pos < numSamples) {\n                out[outOffset + pos] = _in[inOffset + pos] * gcScale + prev[prevOffset + pos]\n                pos++\n            }\n        }\n\n        // copy the overlapping part into the delay buffer\n        MemoryUtils.arraycopyF(_in, inOffset + numSamples, prev, prevOffset, numSamples)\n    }\n\n    static ff_atrac_sf_table = new Float32Array(64)\n    private static qmf_window = new Float32Array(48)\n    private static qmf_48tap_half = new Float32Array([-0.00001461907, -0.00009205479, -0.000056157569, 0.00030117269, 0.0002422519, -0.00085293897, -0.0005205574, 0.0020340169, 0.00078333891, -0.0042153862, -0.00075614988, 0.0078402944, -0.000061169922, -0.01344162, 0.0024626821, 0.021736089, -0.007801671, -0.034090221, 0.01880949, 0.054326009, -0.043596379, -0.099384367, 0.13207909, 0.46424159])\n\n    // noinspection JSUnusedGlobalSymbols\n    static generateTables() {\n        // Generate scale factors\n        if (this.ff_atrac_sf_table[63] == 0) {\n            for (let i = 0; i <= 63; i++) {\n                this.ff_atrac_sf_table[i] = 2.0 ** ((i - 15) / 3.0)\n            }\n        }\n\n        // Generate the QMF window\n        if (this.qmf_window[47] == 0) {\n            for (let i = 0; i <= 23; i++) {\n                const s = this.qmf_48tap_half[i] * 2.0\n                this.qmf_window[i] = s\n                this.qmf_window[47 - i] = s\n            }\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    static iqmf(inlo: Float32Array, inloOffset: Int, inhi: Float32Array, inhiOffset: Int, nIn: Int, out: Float32Array, outOffset: Int, delayBuf: Float32Array, temp: Float32Array) {\n        let i = 0\n        MemoryUtils.arraycopyF(delayBuf, 0, temp, 0, 46)\n\n        // loop1\n        {\n            while (i < nIn) {\n                temp[46 + 2 * i + 0] = inlo[inloOffset + i] + inhi[inhiOffset + i]\n                temp[46 + 2 * i + 1] = inlo[inloOffset + i] - inhi[inhiOffset + i]\n                temp[46 + 2 * i + 2] = inlo[inloOffset + i + 1] + inhi[inhiOffset + i + 1]\n                temp[46 + 2 * i + 3] = inlo[inloOffset + i + 1] - inhi[inhiOffset + i + 1]\n                i += 2\n            }\n        }\n\n        // loop2\n        let p1 = 0\n        for (let j = nIn; j >= 1; i--) {\n            let s1 = 0\n            let s2 = 0\n\n            let i = 0\n            while (i < 48) {\n                s1 += temp[p1 + i] * this.qmf_window[i]\n                s2 += temp[p1 + i + 1] * this.qmf_window[i + 1]\n                i += 2\n            }\n\n            out[outOffset + 0] = s2\n            out[outOffset + 1] = s1\n\n            p1 += 2\n            outOffset += 2\n        }\n\n        // Update the delay buffer.\n        MemoryUtils.arraycopyF(temp, nIn * 2, delayBuf, 0, 46)\n    }\n}\n", "import {ChannelUnitContext, IPQFChannelContext, WaveEnvelope, WavesData, WaveSynthParams} from \"./Atrac3PlusDtos\";\nimport {FFT, FloatDSP, SineWin} from \"../MeUtils\";\nimport {Atrac3plusConstants} from \"./Atrac3plusConstants\";\n\nfunction intArrayOf(...values: number[]) { return new Int32Array(values) }\nfunction floatArrayOf(...values: number[]) { return new Float32Array(values) }\nfunction arrayOf<T>(...values: T[]) { return values }\n\ntype Int = number\n\nconst TWOPI = 2 * Math.PI\n\nconst TEMP_idctIn = new Float32Array(Atrac3plusConstants.ATRAC3P_SUBBANDS)\nconst TEMP_idctOut = new Float32Array(Atrac3plusConstants.ATRAC3P_SUBBANDS)\nconst TEMP_pwcsp = new Float32Array(Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n\n/*\n * Based on the FFmpeg version from Maxim Poliakovski.\n * All credits go to him.\n * C to Java conversion by gid15 for the jpcsp project.\n * Java to Kotlin for kpspemu\n */\n// noinspection JSMethodCanBeStatic\nexport class Atrac3plusDsp {\n\tinitImdct(mdctCtx: FFT) {\n\t\tSineWin.initFfSineWindows()\n\n\t\t// Initialize the MDCT transform\n\t\tmdctCtx.mdctInit(8, true, -1.0)\n\t}\n\n\tpowerCompensation(ctx: ChannelUnitContext, chIndex: Int, sp: Float32Array, rngIndex: Int, sb: Int) {\n\t\tconst pwcsp = TEMP_pwcsp\n        let gcv = 0\n        const swapCh = (ctx.unitType == Atrac3plusConstants.CH_UNIT_STEREO && ctx.swapChannels[sb]) ? 1 : 0\n\n        const channel1 = ctx.channels[chIndex ^ swapCh]!!\n\t\tif (channel1!!.powerLevs[Atrac3plusDsp.subband_to_powgrp[sb]] == Atrac3plusConstants.ATRAC3P_POWER_COMP_OFF) {\n\t\t\treturn\n\t\t}\n\n\t\t// generate initial noise spectrum\n        for (let i = 0; i < Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES; i++) {\n            pwcsp[i] = Atrac3plusDsp.noise_tab[rngIndex++ & 0x3FF]\n        }\n\n\t\t// check gain control information\n\t\tconst g1 = channel1.gainData[sb]\n\t\tconst g2 = channel1.gainDataPrev[sb]\n\n\t\tconst gainLev = (g1.numPoints > 0) ? 6 - g1.levCode[0] : 0\n\n\t\tfor (let i = 0; i < g2.numPoints; i++) gcv = Math.max(gcv, gainLev - (g2.levCode[i] - 6))\n        for (let i = 0; i < g1.numPoints; i++) gcv = Math.max(gcv, 6 - g1.levCode[i])\n\n        const grpLev = Atrac3plusDsp.pwc_levs[channel1.powerLevs[Atrac3plusDsp.subband_to_powgrp[sb]]] / (1 << gcv)\n\n\t\t// skip the lowest two quant units (frequencies 0...351 Hz) for subband 0\n\n        const qu_from = Atrac3plusDsp.subband_to_qu[sb] + ((sb == 0) ? 2 : 0)\n        const qu_until = Atrac3plusDsp.subband_to_qu[sb + 1]\n\n\t\tfor (let qu = qu_from; qu < qu_until; qu++) {\n\t\t\tconst channel = ctx.channels[chIndex]\n\t\t\tif (channel.quWordlen[qu] <= 0) continue\n            const quLev = Atrac3plusDsp.ff_atrac3p_sf_tab[channel.quSfIdx[qu]] * Atrac3plusDsp.ff_atrac3p_mant_tab[channel.quWordlen[qu]] / (1 << channel.quWordlen[qu]) * grpLev\n\t\t\tconst dst = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\t\t\tconst nsp = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu + 1] - Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\n\t\t\tfor (let i = 0; i < nsp; i++) {\n\t\t\t\tsp[dst + i] += pwcsp[i] * quLev\n\t\t\t}\n\t\t}\n\t}\n\n\timdct(mdctCtx: FFT,_in: Float32Array, inOffset: Int, out: Float32Array, outOffset: Int, windId: Int, sb: Int) {\n\t\tif ((sb & 1) != 0) {\n\t\t\tfor (let i = 0; i < Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES / 2; i++) {\n\t\t\t\tconst tmp =_in[inOffset + i]\n\t\t\t\t_in[inOffset + i] =_in[inOffset + Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES - 1 - i]\n\t\t\t\t_in[inOffset + Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES - 1 - i] = tmp\n\t\t\t}\n\t\t}\n\n\t\tmdctCtx.imdctCalc(out, outOffset,_in, inOffset)\n\n\t\t/* Perform windowing on the output.\n\t     * ATRAC3+ uses two different MDCT windows:\n\t     * - The first one is just the plain sine window of size 256\n\t     * - The 2nd one is the plain sine window of size 128\n\t     *   wrapped into zero (at the start) and one (at the end) regions.\n\t     *   Both regions are 32 samples long. */\n\t\tif ((windId & 2) != 0) { // 1st half: steep window\n\t\t\tout.fill(0, outOffset, outOffset + 32)\n            FloatDSP.vectorFmul(out, outOffset + 32, out, outOffset + 32, SineWin.ff_sine_64, 0, 64)\n\t\t} else { // 1st halt: simple sine window\n            FloatDSP.vectorFmul(out, outOffset, out, outOffset, SineWin.ff_sine_128, 0, Atrac3plusDsp.ATRAC3P_MDCT_SIZE / 2)\n\t\t}\n\n\t\tif ((windId & 1) != 0) { // 2nd half: steep window\n            FloatDSP.vectorFmulReverse(out, outOffset + 160, out, outOffset + 160, SineWin.ff_sine_64, 0, 64)\n\t\t\tout.fill(0, outOffset + 224, outOffset + 224 + 32)\n\t\t} else { // 2nd half: simple sine window\n            FloatDSP.vectorFmulReverse(out, outOffset + 128, out, outOffset + 128, SineWin.ff_sine_128, 0, Atrac3plusDsp.ATRAC3P_MDCT_SIZE / 2)\n\t\t}\n\t}\n\n\t/**\n\t * Synthesize sine waves according to given parameters.\n\t *\n\t * @param  synthParams   common synthesis parameters\n\t * @param  wavesInfo    parameters for each sine wave\n\t * @param  envelope     envelope data for all waves in a group\n\t * @param  phaseShift   flag indicates 180 degrees phase shift\n\t * @param  regOffset    region offset for trimming envelope data\n\t * @param  out          receives synthesized data\n\t */\n\tprivate wavesSynth(synthParams: WaveSynthParams, wavesInfo: WavesData, envelope: WaveEnvelope, phaseShift: Boolean, regOffset: Int, out: Float32Array) {\n        let waveParam = wavesInfo.startIndex;\n\n        let wn = 0;\n        while (wn < wavesInfo.numWavs) {\n\t\t\t// amplitude dequantization\n\t\t\tconst waveParam1 = synthParams.waves[waveParam]!!\n\t\t\tconst amp = (Atrac3plusDsp.amp_sf_tab[waveParam1.ampSf] * ((synthParams.amplitudeMode == 0) ? ((waveParam1.ampIndex + 1) / 15.13) : 1.0))\n\n\t\t\tconst inc = waveParam1.freqIndex\n            let pos = Atrac3plusDsp.DEQUANT_PHASE(waveParam1.phaseIndex) - (regOffset ^ 128) * (inc & 2047);\n\n            // waveform generation\n\t\t\tfor (let i = 0; i < 128; i++) {\n\t\t\t\tout[i] += (Atrac3plusDsp.sine_table[pos] * amp)\n\t\t\t\tpos = pos + (inc & 2047)\n\t\t\t}\n\t\t\twn++\n\t\t\twaveParam++\n\t\t}\n\n\t\tif (phaseShift) {\n\t\t\t// 180 degrees phase shift\n            for (let i = 0; i < 128; i++) {\n\t\t\t\tout[i] = -out[i]\n\t\t\t}\n\t\t}\n\n\t\t// fade in with steep Hann window if requested\n\t\tif (envelope.hasStartPoint) {\n\t\t\tconst pos = (envelope.startPos << 2) - regOffset\n\t\t\tif (pos > 0 && pos <= 128) {\n\t\t\t\tout.fill(0, 0, pos)\n\t\t\t\tif (!envelope.hasStopPoint || envelope.startPos != envelope.stopPos) {\n\t\t\t\t\tout[pos + 0] *= Atrac3plusDsp.hann_window[0]\n\t\t\t\t\tout[pos + 1] *= Atrac3plusDsp.hann_window[32]\n\t\t\t\t\tout[pos + 2] *= Atrac3plusDsp.hann_window[64]\n\t\t\t\t\tout[pos + 3] *= Atrac3plusDsp.hann_window[96]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// fade out with steep Hann window if requested\n\t\tif (envelope.hasStopPoint) {\n            const pos = (envelope.stopPos + (1 << 2)) - regOffset\n\t\t\tif (pos > 0 && pos <= 128) {\n\t\t\t\tout[pos - 4] *= Atrac3plusDsp.hann_window[96]\n\t\t\t\tout[pos - 3] *= Atrac3plusDsp.hann_window[64]\n\t\t\t\tout[pos - 2] *= Atrac3plusDsp.hann_window[32]\n\t\t\t\tout[pos - 1] *= Atrac3plusDsp.hann_window[0]\n\t\t\t\tout.fill(0, pos, 128)\n\t\t\t}\n\t\t}\n\t}\n\n\tgenerateTones(ctx: ChannelUnitContext, chNum: Int, sb: Int, out: Float32Array, outOffset: Int) {\n\t\tconst wavreg1 = new Float32Array(128)\n\t\tconst wavreg2 = new Float32Array(128)\n\t\tconst channel = ctx.channels[chNum]!!\n\t\tconst tonesNow = channel.tonesInfoPrev[sb]\n\t\tconst tonesNext = channel.tonesInfo[sb]\n\n\t\t// reconstruct full envelopes for both overlapping regions\n\t\t// from truncated bitstream data\n\t\tif (tonesNext.pendEnv.hasStartPoint && tonesNext.pendEnv.startPos < tonesNext.pendEnv.stopPos) {\n\t\t\ttonesNext.currEnv.hasStartPoint = true\n\t\t\ttonesNext.currEnv.startPos = tonesNext.pendEnv.startPos + 32\n\t\t} else if (tonesNow.pendEnv.hasStartPoint) {\n\t\t\ttonesNext.currEnv.hasStartPoint = true\n\t\t\ttonesNext.currEnv.startPos = tonesNow.pendEnv.startPos\n\t\t} else {\n\t\t\ttonesNext.currEnv.hasStartPoint = false\n\t\t\ttonesNext.currEnv.startPos = 0\n\t\t}\n\n\t\tif (tonesNow.pendEnv.hasStopPoint && tonesNow.pendEnv.stopPos >= tonesNext.currEnv.startPos) {\n\t\t\ttonesNext.currEnv.hasStopPoint = true\n\t\t\ttonesNext.currEnv.stopPos = tonesNow.pendEnv.stopPos\n\t\t} else if (tonesNext.pendEnv.hasStopPoint) {\n\t\t\ttonesNext.currEnv.hasStopPoint = true\n\t\t\ttonesNext.currEnv.stopPos = tonesNext.pendEnv.stopPos + 32\n\t\t} else {\n\t\t\ttonesNext.currEnv.hasStopPoint = false\n\t\t\ttonesNext.currEnv.stopPos = 64\n\t\t}\n\n\t\t// is the visible part of the envelope non-zero?\n\t\tconst reg1EnvNonzero = (tonesNow.currEnv.stopPos >= 32)\n\t\tconst reg2EnvNonzero = (tonesNext.currEnv.startPos < 32)\n\n\t\t// synthesize waves for both overlapping regions\n\t\tif (tonesNow.numWavs > 0 && reg1EnvNonzero) {\n\t\t\tthis.wavesSynth(ctx.wavesInfoPrev, tonesNow, tonesNow.currEnv, ctx.wavesInfoPrev.phaseShift[sb] && chNum > 0, 128, wavreg1)\n\t\t}\n\n\t\tif (tonesNext.numWavs > 0 && reg2EnvNonzero) {\n            this.wavesSynth(ctx.wavesInfo, tonesNext, tonesNext.currEnv, ctx.wavesInfo.phaseShift[sb] && chNum > 0, 0, wavreg2)\n\t\t}\n\n\t\t// Hann windowing for non-faded wave signals\n\t\tif (tonesNow.numWavs > 0 && tonesNext.numWavs > 0 && reg1EnvNonzero && reg2EnvNonzero) {\n            FloatDSP.vectorFmul(wavreg1, 0, wavreg1, 0, Atrac3plusDsp.hann_window, 128, 128)\n            FloatDSP.vectorFmul(wavreg2, 0, wavreg2, 0, Atrac3plusDsp.hann_window, 0, 128)\n\t\t} else {\n\t\t\tif (tonesNow.numWavs > 0 && !tonesNow.currEnv.hasStopPoint) {\n                FloatDSP.vectorFmul(wavreg1, 0, wavreg1, 0, Atrac3plusDsp.hann_window, 128, 128)\n\t\t\t}\n\t\t\tif (tonesNext.numWavs > 0 && !tonesNext.currEnv.hasStartPoint) {\n                FloatDSP.vectorFmul(wavreg2, 0, wavreg2, 0, Atrac3plusDsp.hann_window, 0, 128)\n\t\t\t}\n\t\t}\n\n\t\t// Overlap and add to residual\n\t\tfor (let i = 0; i < 128; i++) {\n\t\t\tout[outOffset + i] += wavreg1[i] + wavreg2[i]\n\t\t}\n\t}\n\n\tipqf(dctCtx: FFT, hist: IPQFChannelContext, _in: Float32Array, out: Float32Array) {\n\t\tout.fill(0, 0, Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES)\n\n        const ATRAC3P_SUBBAND_SAMPLES = Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES;\n        const ATRAC3P_SUBBANDS = Atrac3plusConstants.ATRAC3P_SUBBANDS;\n        const ATRAC3P_PQF_FIR_LEN = Atrac3plusConstants.ATRAC3P_PQF_FIR_LEN;\n        const mod23_lut = Atrac3plusDsp.mod23_lut;\n        const ipqf_coeffs1 = Atrac3plusDsp.ipqf_coeffs1;\n        const ipqf_coeffs2 = Atrac3plusDsp.ipqf_coeffs2;\n        const hist_buf1 = hist.buf1;\n        const hist_buf2 = hist.buf2;\n\n        const idctIn = TEMP_idctIn\n        const idctOut = TEMP_idctOut\n\n        for (let s = 0; s < ATRAC3P_SUBBAND_SAMPLES; s++) {\n            // pack up one sample from each subband\n            for (let sb = 0; sb < ATRAC3P_SUBBANDS; sb++) {\n                idctIn[sb] = _in[sb * ATRAC3P_SUBBAND_SAMPLES + s]\n            }\n\n            // Calculate the sine and cosine part of the PQF using IDCT-IV\n            dctCtx.imdctHalf(idctOut, 0, idctIn, 0)\n\n            // append the result to the history\n            {\n                const buf1 = hist_buf1[hist.pos]\n                const buf2 = hist_buf2[hist.pos]\n                for (let i = 0; i < 8; i++) {\n                    buf1[i] = idctOut[i + 8]\n                    buf2[i] = idctOut[7 - i]\n                }\n            }\n\n            {\n                let posNow = hist.pos\n                const s16 = s * 16\n\n                for (let t = 0; t < ATRAC3P_PQF_FIR_LEN; t++) {\n                    const posNext = mod23_lut[posNow + 2] // posNext = (posNext + 2) % 23;\n                    const buf1 = hist_buf1[posNow]\n                    const buf2 = hist_buf2[posNext]\n                    const coefs1 = ipqf_coeffs1[t]\n                    const coefs2 = ipqf_coeffs2[t]\n                    for (let i = 0; i < 8; i++) {\n                        out[s16 + i + 0] += buf1[i] * coefs1[i] + buf2[i] * coefs2[i]\n                        out[s16 + i + 8] += buf1[7 - i] * coefs1[i + 8] + buf2[7 - i] * coefs2[i + 8]\n                    }\n\n                    posNow = mod23_lut[posNext + 2] // posNow = (posNow + 2) % 23;\n                }\n            }\n\n\t\t\thist.pos = mod23_lut[hist.pos] // hist.pos = (hist.pos - 1) % 23;\n\t\t}\n\t}\n\n    private static ATRAC3P_MDCT_SIZE = Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES * 2\n    private static sine_table = new Float32Array(2048) ///< wave table\n    private static hann_window = new Float32Array(256) ///< Hann windowing function\n    private static amp_sf_tab = new Float32Array(64)   ///< scalefactors for quantized amplitudes\n    \n\n    /**\n     * Map quant unit number to its position in the spectrum.\n     * To get the number of spectral lines in each quant unit do the following:\n     * num_specs = qu_to_spec_pos[i+1] - qu_to_spec_pos[i]\n     */\n    static ff_atrac3p_qu_to_spec_pos = intArrayOf(0, 16, 32, 48, 64, 80, 96, 112, 128, 160, 192, 224, 256, 288, 320, 352, 384, 448, 512, 576, 640, 704, 768, 896, 1024, 1152, 1280, 1408, 1536, 1664, 1792, 1920, 2048)\n\n    /* Scalefactors table. */\n    /* Approx. Equ: pow(2.0, (i - 16.0 + 0.501783948) / 3.0) */\n    static ff_atrac3p_sf_tab = floatArrayOf(0.027852058, 0.0350914, 0.044212341, 0.055704117, 0.0701828, 0.088424683, 0.11140823, 0.1403656, 0.17684937, 0.22281647, 0.2807312, 0.35369873, 0.44563293, 0.5614624, 0.70739746, 0.89126587, 1.1229248, 1.4147949, 1.7825317, 2.2458496, 2.8295898, 3.5650635, 4.4916992, 5.6591797, 7.130127, 8.9833984, 11.318359, 14.260254, 17.966797, 22.636719, 28.520508, 35.933594, 45.273438, 57.041016, 71.867188, 90.546875, 114.08203, 143.73438, 181.09375, 228.16406, 287.46875, 362.1875, 456.32812, 574.9375, 724.375, 912.65625, 1149.875, 1448.75, 1825.3125, 2299.75, 2897.5, 3650.625, 4599.5, 5795.0, 7301.25, 9199.0, 11590.0, 14602.5, 18398.0, 23180.0, 29205.0, 36796.0, 46360.0, 58410.0)\n\n    /* Mantissa table. */\n    /* pow(10, x * log10(2) + 0.05) / 2 / ([1,2,3,5,7,15,31] + 0.5) */\n    static ff_atrac3p_mant_tab = floatArrayOf(0.0, 0.74801636, 0.44882202, 0.32058716, 0.20400238, 0.1496048, 0.07239151, 0.035619736)\n\n    private static subband_to_powgrp = intArrayOf(0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4)\n\n    /* noise table for power compensation */\n    private static noise_tab = floatArrayOf(-0.01358032, -0.05593872, 0.01696777, -0.14871216, -0.26412964, -0.09893799, 0.25723267, 0.02008057, -0.72235107, -0.44351196, -0.22985840, 0.16833496, 0.46902466, 0.05917358, -0.15179443, 0.41299438, -0.01287842, 0.13360596, 0.43557739, -0.09530640, -0.58422852, 0.39266968, -0.08343506, -0.25604248, 0.22848511, 0.26013184, -0.65588379, 0.17288208, -0.08673096, -0.05203247, 0.07299805, -0.28665161, -0.35806274, 0.06552124, -0.09387207, 0.21099854, -0.28347778, -0.72402954, 0.05050659, -0.10635376, -0.18853760, 0.29724121, 0.20703125, -0.29791260, -0.37634277, 0.47970581, -0.09976196, 0.32641602, -0.29248047, -0.28237915, 0.26028442, -0.36157227, 0.22042847, -0.03222656, -0.37268066, -0.03759766, 0.09909058, 0.23284912, 0.19320679, 0.14453125, -0.02139282, -0.19702148, 0.31533813, -0.16741943, 0.35031128, -0.35656738, -0.66128540, -0.00701904, 0.20898438, 0.26837158, -0.33706665, -0.04568481, 0.12600708, 0.10284424, 0.07321167, -0.18280029, 0.38101196, 0.21301270, 0.04541016, 0.01156616, -0.26391602, -0.02346802, -0.22125244, 0.29760742, -0.36233521, -0.31314087, -0.13967896, -0.11276245, -0.19433594, 0.34490967, 0.02343750, 0.21963501, -0.02777100, -0.67678833, -0.08999634, 0.14233398, -0.27697754, 0.51422119, -0.05047607, 0.48327637, 0.37167358, -0.60806274, 0.18728638, -0.15191650, 0.00637817, 0.02832031, -0.15618896, 0.60644531, 0.21826172, 0.06384277, -0.31863403, 0.08816528, 0.15447998, -0.07015991, -0.08154297, -0.40966797, -0.39785767, -0.11709595, 0.22052002, 0.18466187, -0.17257690, 0.03759766, -0.06195068, 0.00433350, 0.12176514, 0.34011841, 0.25610352, -0.05294800, 0.41033936, 0.16854858, -0.76187134, 0.13845825, -0.19418335, -0.21524048, -0.44412231, -0.08160400, -0.28195190, -0.01873779, 0.15524292, -0.37438965, -0.44860840, 0.43096924, -0.24746704, 0.49856567, 0.14859009, 0.38159180, 0.20541382, -0.39175415, -0.65850830, -0.43716431, 0.13037109, -0.05111694, 0.39956665, 0.21447754, -0.04861450, 0.33654785, 0.10589600, -0.88085938, -0.30822754, 0.38577271, 0.30047607, 0.38836670, 0.09118652, -0.36477661, -0.01641846, -0.23031616, 0.26058960, 0.18859863, -0.21868896, -0.17861938, -0.29754639, 0.09777832, 0.10806274, -0.51605225, 0.00076294, 0.13259888, 0.11090088, -0.24084473, 0.24957275, 0.01379395, -0.04141235, -0.04937744, 0.57394409, 0.27410889, 0.27587891, 0.45013428, -0.32592773, 0.11160278, -0.00970459, 0.29092407, 0.03356934, -0.70925903, 0.04882812, 0.43499756, 0.07720947, -0.27554321, -0.01742554, -0.08413696, -0.04028320, -0.52850342, -0.07330322, 0.05181885, 0.21362305, -0.18765259, 0.07058716, -0.03009033, 0.32662964, 0.27023315, -0.28002930, 0.17568970, 0.03338623, 0.30242920, -0.03921509, 0.32174683, -0.23733521, 0.08575439, -0.38269043, 0.09194946, -0.07238770, 0.17941284, -0.51278687, -0.25146484, 0.19790649, -0.19195557, 0.16549683, 0.42456055, 0.39129639, -0.02868652, 0.17980957, 0.24902344, -0.76583862, -0.20959473, 0.61013794, 0.37011719, 0.36859131, -0.04486084, 0.10678101, -0.15994263, -0.05328369, 0.28463745, -0.06420898, -0.36987305, -0.28009033, -0.11764526, 0.04312134, -0.08038330, 0.04885864, -0.03067017, -0.00042725, 0.34289551, -0.00988770, 0.34838867, 0.32516479, -0.16271973, 0.38269043, 0.03240967, 0.12417603, -0.14331055, -0.34902954, -0.18325806, 0.29421997, 0.44284058, 0.75170898, -0.67245483, -0.12176514, 0.27914429, -0.29806519, 0.19863892, 0.30087280, 0.22680664, -0.36633301, -0.32534790, -0.57553101, -0.16641235, 0.43811035, 0.08331299, 0.15942383, 0.26516724, -0.24240112, -0.11761475, -0.16827393, -0.14260864, 0.46343994, 0.11804199, -0.55514526, -0.02520752, -0.14309692, 0.00448608, 0.02749634, -0.30545044, 0.70965576, 0.45108032, 0.66439819, -0.68255615, -0.12496948, 0.09146118, -0.21109009, -0.23791504, 0.79943848, -0.35205078, -0.24963379, 0.18719482, -0.19079590, 0.07458496, 0.07623291, -0.28781128, -0.37121582, -0.19580078, -0.01773071, -0.16717529, 0.13040161, 0.14672852, 0.42379761, 0.03582764, 0.11431885, 0.05145264, 0.44702148, 0.08963013, 0.01367188, -0.54519653, -0.12692261, 0.21176147, 0.04925537, 0.30670166, -0.11029053, 0.19555664, -0.27740479, 0.23043823, 0.15554810, -0.19299316, -0.25729370, 0.17800903, -0.03579712, -0.05065918, -0.06933594, -0.09500122, -0.07821655, 0.23889160, -0.31900024, 0.03073120, -0.00415039, 0.61315918, 0.37176514, -0.13442993, -0.15536499, -0.19216919, -0.37899780, 0.19992065, 0.02630615, -0.12573242, 0.25927734, -0.02447510, 0.29629517, -0.40731812, -0.17333984, 0.24310303, -0.10607910, 0.14828491, 0.08792114, -0.18743896, -0.05572510, -0.04833984, 0.10473633, -0.29028320, -0.67687988, -0.28170776, -0.41687012, 0.05413818, -0.23284912, 0.09555054, -0.08969116, -0.15112305, 0.12738037, 0.35986328, 0.28948975, 0.30691528, 0.23956299, 0.06973267, -0.31198120, -0.18450928, 0.22280884, -0.21600342, 0.23522949, -0.61840820, -0.13012695, 0.26412964, 0.47320557, -0.26440430, 0.38757324, 0.17352295, -0.26104736, -0.25866699, -0.12274170, -0.29733276, 0.07687378, 0.18588257, -0.08880615, 0.31185913, 0.05313110, -0.10885620, -0.14901733, -0.22323608, -0.08538818, 0.19812012, 0.19732666, -0.18927002, 0.29058838, 0.25555420, -0.48599243, 0.18768311, 0.01345825, 0.34887695, 0.21530151, 0.19857788, 0.18661499, -0.01394653, -0.09063721, -0.38781738, 0.27160645, -0.20379639, -0.32119751, -0.23889160, 0.27096558, 0.24951172, 0.07922363, 0.07479858, -0.50946045, 0.10220337, 0.58364868, -0.19503784, -0.18560791, -0.01165771, 0.47195435, 0.22430420, -0.38635254, -0.03732300, -0.09179688, 0.06991577, 0.15106201, 0.20605469, -0.05969238, -0.41821289, 0.12231445, -0.04672241, -0.05117798, -0.11523438, -0.51849365, -0.04077148, 0.44284058, -0.64086914, 0.17019653, 0.02236938, 0.22848511, -0.23214722, -0.32354736, -0.14068604, -0.29690552, -0.19891357, 0.02774048, -0.20965576, -0.52191162, -0.19299316, -0.07290649, 0.49053955, -0.22302246, 0.05642700, 0.13122559, -0.20819092, -0.83590698, -0.08181763, 0.26797485, -0.00091553, -0.09457397, 0.17089844, -0.27020264, 0.30270386, 0.05496216, 0.09564209, -0.08590698, 0.02130127, 0.35931396, 0.21728516, -0.15396118, -0.05053711, 0.02719116, 0.16302490, 0.43212891, 0.10229492, -0.40820312, 0.21646118, 0.08435059, -0.11145020, -0.39962769, -0.05618286, -0.10223389, -0.60839844, 0.33724976, -0.06341553, -0.47369385, -0.32852173, 0.05242920, 0.19635010, -0.19137573, -0.67901611, 0.16180420, 0.05133057, -0.22283936, 0.09646606, 0.24288940, -0.45007324, 0.08804321, 0.14053345, 0.22619629, -0.01000977, 0.36355591, -0.19863892, -0.30364990, -0.24118042, -0.57461548, 0.26498413, 0.04345703, -0.09796143, -0.47714233, -0.23739624, 0.18737793, 0.08926392, -0.02795410, 0.00305176, -0.08700562, -0.38711548, 0.03222656, 0.10940552, -0.41906738, -0.01620483, -0.47061157, 0.37985229, -0.21624756, 0.47976685, -0.20046997, -0.62533569, -0.26907349, -0.02877808, 0.00671387, -0.29071045, -0.24685669, -0.15722656, -0.26055908, 0.29968262, 0.28225708, -0.08990479, -0.16748047, -0.46759033, -0.25067139, -0.25183105, -0.45932007, 0.05828857, 0.29006958, 0.23840332, -0.17974854, 0.26931763, 0.10696411, -0.06848145, -0.17126465, -0.10522461, -0.55386353, -0.42306519, -0.07608032, 0.24380493, 0.38586426, 0.16882324, 0.26751709, 0.17303467, 0.35809326, -0.22094727, -0.30703735, -0.28497314, -0.04321289, 0.15219116, -0.17071533, -0.39334106, 0.03439331, -0.10809326, -0.30590820, 0.26449585, -0.07412720, 0.13638306, -0.01062012, 0.27996826, 0.04397583, -0.05557251, -0.56933594, 0.03363037, -0.00949097, 0.52642822, -0.44329834, 0.28308105, -0.05499268, -0.23312378, -0.29870605, -0.05123901, 0.26831055, -0.35238647, -0.30993652, 0.34646606, -0.19775391, 0.44595337, 0.13769531, 0.45358276, 0.19961548, 0.42681885, 0.15722656, 0.00128174, 0.23757935, 0.40988159, 0.25164795, -0.00732422, -0.12405396, -0.43420410, -0.00402832, 0.34243774, 0.36264038, 0.18807983, -0.09301758, -0.10296631, 0.05532837, -0.31652832, 0.14337158, 0.35040283, 0.32540894, 0.05728149, -0.12030029, -0.25942993, -0.20312500, -0.16491699, -0.46051025, -0.08004761, 0.50772095, 0.16168213, 0.28439331, 0.08105469, -0.19104004, 0.38589478, -0.16400146, -0.25454712, 0.20281982, -0.20730591, -0.06311035, 0.32937622, 0.15032959, -0.05340576, 0.30487061, -0.11648560, 0.38009644, -0.20062256, 0.43466187, 0.01150513, 0.35754395, -0.13146973, 0.67489624, 0.05212402, 0.27914429, -0.39431763, 0.75308228, -0.13366699, 0.24453735, 0.42248535, -0.65905762, -0.00546265, -0.03491211, -0.13659668, -0.08294678, -0.45666504, 0.27188110, 0.12731934, 0.61148071, 0.10449219, -0.28836060, 0.00091553, 0.24618530, 0.13119507, 0.05685425, 0.17355347, 0.42034912, 0.08514404, 0.24536133, 0.18951416, -0.19107056, -0.15036011, 0.02334595, 0.54986572, 0.32321167, -0.16104126, -0.03054810, 0.43594360, 0.17309570, 0.61053467, 0.24731445, 0.33334351, 0.15240479, 0.15588379, 0.36425781, -0.30407715, -0.13302612, 0.00427246, 0.04171753, -0.33178711, 0.34216309, -0.12463379, -0.02764893, 0.05905151, -0.31436157, 0.16531372, 0.34542847, -0.03292847, 0.12527466, -0.12313843, -0.13171387, 0.04757690, -0.45095825, -0.19085693, 0.35342407, -0.23239136, -0.34387207, 0.11264038, -0.15740967, 0.05273438, 0.74942017, 0.21505737, 0.08514404, -0.42391968, -0.19531250, 0.35293579, 0.25305176, 0.15731812, -0.70324707, -0.21591187, 0.35604858, 0.14132690, 0.11724854, 0.15853882, -0.24597168, 0.07019043, 0.02127075, 0.12658691, 0.06390381, -0.12292480, 0.15441895, -0.47640991, 0.06195068, 0.58981323, -0.15151978, -0.03604126, -0.45059204, -0.01672363, -0.46997070, 0.25750732, 0.18084717, 0.06661987, 0.13253784, 0.67828369, 0.11370850, 0.11325073, -0.04611206, -0.07791138, -0.36544800, -0.06747437, -0.31594849, 0.16131592, 0.41983032, 0.11071777, -0.36889648, 0.30963135, -0.37875366, 0.58508301, 0.00393677, 0.12338257, 0.03424072, -0.21728516, -0.12838745, -0.46981812, 0.05868530, -0.25015259, 0.27407837, 0.65240479, -0.34429932, -0.15179443, 0.14056396, 0.33505249, 0.28826904, 0.09921265, 0.34390259, 0.13656616, -0.23608398, 0.00863647, 0.02627563, -0.19119263, 0.19775391, -0.07214355, 0.07809448, 0.03454590, -0.03417969, 0.00033569, -0.23095703, 0.18673706, 0.05798340, 0.03814697, -0.04318237, 0.05487061, 0.08633423, 0.55950928, -0.06347656, 0.10333252, 0.25305176, 0.05853271, 0.12246704, -0.25543213, -0.34262085, -0.36437988, -0.21304321, -0.05093384, 0.02777100, 0.07620239, -0.21215820, -0.09326172, 0.19021606, -0.40579224, -0.01193237, 0.19845581, -0.35336304, -0.07397461, 0.20104980, 0.08615112, -0.44375610, 0.11419678, 0.24453735, -0.16555786, -0.05081177, -0.01406860, 0.27893066, -0.18692017, 0.07473755, 0.03451538, -0.39733887, 0.21548462, -0.22534180, -0.39651489, -0.04989624, -0.57662964, 0.06390381, 0.62020874, -0.13470459, 0.04345703, -0.21862793, -0.02789307, 0.51696777, -0.27587891, 0.39004517, 0.09857178, -0.00738525, 0.31317139, 0.00048828, -0.46572876, 0.29531860, -0.10009766, -0.27856445, 0.03594971, 0.25048828, -0.74584961, -0.25350952, -0.03302002, 0.31188965, 0.01571655, 0.46710205, 0.21591187, 0.07260132, -0.42132568, -0.53900146, -0.13674927, -0.16571045, -0.34454346, 0.12359619, -0.11184692, 0.00967407, 0.34576416, -0.05761719, 0.34848022, 0.17645264, -0.39395142, 0.10339355, 0.18215942, 0.20697021, 0.59109497, -0.11560059, -0.07385254, 0.10397339, 0.35437012, -0.22863770, 0.01794434, 0.17559814, -0.17495728, 0.12142944, 0.10928345, -1.00000000, -0.01379395, 0.21237183, -0.27035522, 0.27319336, -0.37066650, 0.41354370, -0.40054321, 0.00689697, 0.26321411, 0.39266968, 0.65298462, 0.41625977, -0.13909912, 0.78375244, -0.30941772, 0.20169067, -0.39367676, 0.94021606, -0.24066162, 0.05557251, -0.24533081, -0.05444336, -0.76754761, -0.19375610, -0.11041260, -0.17532349, 0.16006470, 0.02188110, 0.17465210, -0.04342651, -0.56777954, -0.40988159, 0.26687622, 0.11700439, -0.00344849, -0.05395508, 0.37426758, -0.40719604, -0.15032959, -0.01660156, 0.04196167, -0.04559326, -0.12969971, 0.12011719, 0.08419800, -0.11199951, 0.35174561, 0.10275269, -0.25686646, 0.48446655, 0.03225708, 0.28408813, -0.18701172, 0.36282349, -0.03280640, 0.32302856, 0.17233276, 0.48269653, 0.31112671, -0.04946899, 0.12774658, 0.52685547, 0.10211182, 0.05953979, 0.05999756, 0.20144653, 0.00744629, 0.27316284, 0.24377441, 0.39672852, 0.01702881, -0.35513306, 0.11364746, -0.13555908, 0.48880005, -0.15417480, -0.09149170, -0.02615356, 0.46246338, -0.72250366, 0.22332764, 0.23849487, -0.25686646, -0.08514404, -0.02062988, -0.34494019, -0.02297974, -0.80386353, -0.08074951, -0.12689209, -0.06896973, 0.24099731, -0.35650635, -0.09558105, 0.29254150, 0.23132324, -0.16726685, 0.00000000, -0.24237061, 0.30899048, 0.29504395, -0.20898438, 0.17059326, -0.07672119, -0.14395142, 0.05572510, 0.20602417, -0.51550293, -0.03167725, -0.48840332, -0.20425415, 0.14144897, 0.07275391, -0.76669312, -0.22488403, 0.20651245, 0.03259277, 0.00085449, 0.03039551, 0.47555542, 0.38351440)\n\n    /** Noise level table for power compensation.\n     * Equ: pow(2.0f, (double)(6 - i) / 3.0f) where i = 0...15  */\n    private static pwc_levs = floatArrayOf(3.96875, 3.15625, 2.5, 2.0, 1.59375, 1.25, 1.0, 0.78125, 0.625, 0.5, 0.40625, 0.3125, 0.25, 0.1875, 0.15625, 0.0)\n\n    /** Map subband number to quant unit number.  */\n    private static subband_to_qu = intArrayOf(0, 8, 12, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)\n\n    /* lookup table for fast modulo 23 op required for cyclic buffers of the IPQF */\n    static mod23_lut = intArrayOf(23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 0)\n\n    // First half of the 384-tap IPQF filtering coefficients.\n    static ipqf_coeffs1 = arrayOf(floatArrayOf(-5.8336207e-7, -8.0604229e-7, -4.2005411e-7, -4.4400572e-8, 3.226247e-8, 3.530856e-8, 1.2660377e-8, 0.000010516783, -0.000011838618, 6.005389e-7, 0.0000014333754, 0.0000023108685, 0.0000032569742, 0.0000046192422, 0.0000063894258, 0.0000070302972), floatArrayOf(-0.0000091622824, -0.000010502935, -0.0000079212787, -0.0000041712024, -0.0000026336629, -0.0000015432918, -5.7168614e-7, 0.0000018111954, 0.000023530851, 0.00002780562, 0.000032302323, 0.000036968919, 0.000041575615, 0.000045337845, 0.000046043948, 0.000048585582), floatArrayOf(-0.000064464548, -0.000068306952, -0.000073081472, -0.00007612785, -0.000074850752, -0.000070208509, -0.000062285151, -0.000058270442, -0.000056296329, -0.000049888811, -0.000035615325, -0.000018532943, 0.0000016657353, 0.00002610587, 0.000053397067, 0.00008079566), floatArrayOf(-0.00054488552, -0.00052537228, -0.00049731287, -0.00045778, -0.00040612387, -0.00034301577, -0.00026866337, -0.00018248901, -0.000084307925, 0.000025081157, 0.00014135583, 0.00026649953, 0.00039945057, 0.00053928449, 0.00068422867, 0.00083093712), floatArrayOf(-0.0014771431, -0.001283227, -0.0010566821, -0.00079780724, -0.00050782406, -0.00018855913, 0.00015771533, 0.00052769453, 0.00091862219, 0.001326357, 0.0017469483, 0.0021754825, 0.0026067684, 0.0030352892, 0.0034549395, 0.0038591374), floatArrayOf(-0.0022995141, -0.001443546, -0.00049266568, 0.00055068987, 0.001682895, 0.0028992873, 0.0041943151, 0.0055614738, 0.0069935122, 0.0084823566, 0.010018963, 0.011593862, 0.013196872, 0.014817309, 0.016444042, 0.018065533), floatArrayOf(-0.034426283, -0.034281436, -0.033992987, -0.033563249, -0.032995768, -0.032295227, -0.031467363, -0.030518902, -0.02945766, -0.028291954, -0.027031265, -0.025685543, -0.024265358, -0.022781773, -0.021246184, -0.019670162), floatArrayOf(-0.0030586775, -0.0037203205, -0.0042847847, -0.0047529764, -0.0051268316, -0.0054091476, -0.0056034233, -0.005714261, -0.0057445862, -0.0057025906, -0.0055920109, -0.0054194843, -0.0051914565, -0.0049146507, -0.0045959447, -0.0042418269), floatArrayOf(-0.0016376863, -0.0017651899, -0.0018608454, -0.0019252141, -0.0019593791, -0.0019653172, -0.0019450618, -0.0018990048, -0.00183808, -0.0017501717, -0.0016481078, -0.0015320742, -0.0014046903, -0.0012685474, -0.001125814, -0.00097943726), floatArrayOf(-0.00055432378, -0.00055472925, -0.00054783461, -0.00053276919, -0.00051135791, -0.00048466062, -0.00045358928, -0.00042499689, -0.00036942671, -0.0003392619, -0.00030001783, -0.00025986304, -0.0002197204, -0.00018116167, -0.00014691355, -0.00011279432), floatArrayOf(-0.000064147389, -0.00006174868, -0.000054267788, -0.000047133824, -0.000042927582, -0.000039477309, -0.000036340745, -0.000029687517, -0.000049787737, -0.000041577889, -0.000033864744, -0.000026534748, -0.000019841305, -0.000014789486, -0.000013131184, -0.0000099198869), floatArrayOf(-0.0000062990207, -0.0000072701259, -0.000011984052, -0.000017348082, -0.000019907106, -0.000021348773, -0.000021961965, -0.000012203576, -0.000010840992, 4.6299544e-7, 5.2588763e-7, 2.7792686e-7, -2.3649704e-7, -0.0000010897784, -9.171448e-7, -5.22682e-7))\n\n    // Second half of the 384-tap IPQF filtering coefficients.\n    static ipqf_coeffs2 = arrayOf(floatArrayOf(5.22682e-7, 9.171448e-7, 0.0000010897784, 2.3649704e-7, -2.7792686e-7, -5.2588763e-7, -4.6299544e-7, 0.000010840992, -0.000012203576, -0.000021961965, -0.000021348773, -0.000019907106, -0.000017348082, -0.000011984052, -0.0000072701259, -0.0000062990207), floatArrayOf(0.0000099198869, 0.000013131184, 0.000014789486, 0.000019841305, 0.000026534748, 0.000033864744, 0.000041577889, 0.000049787737, -0.000029687517, -0.000036340745, -0.000039477309, -0.000042927582, -0.000047133824, -0.000054267788, -0.00006174868, -0.000064147389), floatArrayOf(0.00011279432, 0.00014691355, 0.00018116167, 0.0002197204, 0.00025986304, 0.00030001783, 0.0003392619, 0.00036942671, -0.00042499689, -0.00045358928, -0.00048466062, -0.00051135791, -0.00053276919, -0.00054783461, -0.00055472925, -0.00055432378), floatArrayOf(0.00097943726, 0.001125814, 0.0012685474, 0.0014046903, 0.0015320742, 0.0016481078, 0.0017501717, 0.00183808, -0.0018990048, -0.0019450618, -0.0019653172, -0.0019593791, -0.0019252141, -0.0018608454, -0.0017651899, -0.0016376863), floatArrayOf(0.0042418269, 0.0045959447, 0.0049146507, 0.0051914565, 0.0054194843, 0.0055920109, 0.0057025906, 0.0057445862, -0.005714261, -0.0056034233, -0.0054091476, -0.0051268316, -0.0047529764, -0.0042847847, -0.0037203205, -0.0030586775), floatArrayOf(0.019670162, 0.021246184, 0.022781773, 0.024265358, 0.025685543, 0.027031265, 0.028291954, 0.02945766, -0.030518902, -0.031467363, -0.032295227, -0.032995768, -0.033563249, -0.033992987, -0.034281436, -0.034426283), floatArrayOf(-0.018065533, -0.016444042, -0.014817309, -0.013196872, -0.011593862, -0.010018963, -0.0084823566, -0.0069935122, 0.0055614738, 0.0041943151, 0.0028992873, 0.001682895, 0.00055068987, -0.00049266568, -0.001443546, -0.0022995141), floatArrayOf(-0.0038591374, -0.0034549395, -0.0030352892, -0.0026067684, -0.0021754825, -0.0017469483, -0.001326357, -0.00091862219, 0.00052769453, 0.00015771533, -0.00018855913, -0.00050782406, -0.00079780724, -0.0010566821, -0.001283227, -0.0014771431), floatArrayOf(-0.00083093712, -0.00068422867, -0.00053928449, -0.00039945057, -0.00026649953, -0.00014135583, -0.000025081157, 0.000084307925, -0.00018248901, -0.00026866337, -0.00034301577, -0.00040612387, -0.00045778, -0.00049731287, -0.00052537228, -0.00054488552), floatArrayOf(-0.00008079566, -0.000053397067, -0.00002610587, -0.0000016657353, 0.000018532943, 0.000035615325, 0.000049888811, 0.000056296329, -0.000058270442, -0.000062285151, -0.000070208509, -0.000074850752, -0.00007612785, -0.000073081472, -0.000068306952, -0.000064464548), floatArrayOf(-0.000048585582, -0.000046043948, -0.000045337845, -0.000041575615, -0.000036968919, -0.000032302323, -0.00002780562, -0.000023530851, 0.0000018111954, -5.7168614e-7, -0.0000015432918, -0.0000026336629, -0.0000041712024, -0.0000079212787, -0.000010502935, -0.0000091622824), floatArrayOf(-0.0000070302972, -0.0000063894258, -0.0000046192422, -0.0000032569742, -0.0000023108685, -0.0000014333754, -6.005389e-7, 0.000011838618, 0.000010516783, 1.2660377e-8, 3.530856e-8, 3.226247e-8, -4.4400572e-8, -4.2005411e-7, -8.0604229e-7, -5.8336207e-7))\n\n    private static DEQUANT_PHASE(ph: Int): Int {\n        return (ph & 0x1F) << 6\n    }\n\n    static initWaveSynth() {\n        // generate sine wave table\n        for (let i = 0; i < 2048; i++) {\n            this.sine_table[i] = Math.sin(TWOPI * i / 2048)\n        }\n\n        // generate Hann window\n        for (let i = 0; i < 256; i++) {\n            this.hann_window[i] = ((1.0 - Math.cos(TWOPI * i / 256)) * 0.5)\n        }\n\n        // generate amplitude scalefactors table\n        for (let i = 0; i < 64; i++) {\n            this.amp_sf_tab[i] = 2.0 ** ((i - 3) / 4.0)\n        }\n    }\n}\n", "function intArrayOf(...values: number[]) { return new Int32Array(values) }\nfunction arrayOf<T>(...values: T[]) { return values }\n\ntype Int = number\n\n/** Tables for spectrum coding.  */\nexport class Atrac3pSpecCodeTab {\n    get isSigned() { return this.is_signed != 0 }\n\n    constructor(public groupSize: Int, public numCoeffs: Int, public bits: Int, public is_signed: Int, public redirect: Int, public cb: Int32Array|null, public xlat: Int32Array|null) {\n    }\n}\n\n/** Tables for spectrum coding  */\nconst huff_a01_cb = intArrayOf(1, 12, 1, 0, 0, 1, 7, 0, 19, 5, 13, 21, 6, 8)\nconst huff_a01_xlat = intArrayOf(0x00, 0x03, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x50, 0xD0, 0x70, 0xF0, 0xC4, 0x14, 0x34, 0x4C, 0x1C, 0x3C, 0x41, 0xC1, 0x31, 0x05, 0x0D, 0xC3, 0x13, 0x07, 0x0F, 0x44, 0xCC, 0x11, 0x43, 0x33, 0x54, 0x74, 0xDC, 0xFC, 0x71, 0x15, 0x4D, 0xCD, 0x1D, 0xD3, 0xC7, 0x37, 0x3F, 0xD4, 0xF4, 0x5C, 0x7C, 0x51, 0xD1, 0xF1, 0x45, 0xC5, 0x35, 0xDD, 0x3D, 0x53, 0x73, 0xF3, 0x47, 0x17, 0x77, 0x4F, 0xCF, 0x1F, 0x55, 0xF5, 0x7D, 0xD7, 0x5F, 0xFF, 0xD5, 0x75, 0x5D, 0xFD, 0x57, 0xF7, 0xDF, 0x7F)\nconst huff_a02_cb = intArrayOf(2, 12, 1, 0, 4, 11, 0, 1, 29, 6, 20, 7, 2)\nconst huff_a02_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x50, 0x44, 0x14, 0x54, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x90, 0x80, 0x20, 0x60, 0x84, 0x94, 0x24, 0x64, 0x08, 0x48, 0x18, 0x58, 0x81, 0x91, 0x21, 0x85, 0x95, 0x65, 0x09, 0x49, 0x19, 0x59, 0x02, 0x42, 0x12, 0x52, 0x06, 0x46, 0x16, 0x56, 0x88, 0x61, 0x25, 0x29, 0x69, 0x5A, 0xA0, 0xA4, 0x98, 0x28, 0x68, 0xA1, 0xA5, 0x89, 0x99, 0xA9, 0x82, 0x92, 0x22, 0x62, 0x96, 0x26, 0x66, 0x0A, 0x4A, 0x1A, 0xA8, 0x86, 0xA6, 0x8A, 0x9A, 0x2A, 0x6A, 0xA2, 0xAA)\nconst huff_a03_cb = intArrayOf(3, 9, 1, 8, 0, 13, 18, 7, 2)\nconst huff_a03_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x09, 0x39, 0x07, 0x0F, 0x3F, 0x10, 0x30, 0x11, 0x31, 0x02, 0x0A, 0x3A, 0x05, 0x06, 0x0E, 0x3E, 0x17, 0x37, 0x18, 0x28, 0x19, 0x29, 0x2A, 0x32, 0x03, 0x0B, 0x33, 0x3B, 0x0D, 0x15, 0x3D, 0x16, 0x1E, 0x36, 0x1F, 0x2F, 0x12, 0x1A, 0x13, 0x2B, 0x1D, 0x35, 0x2E, 0x1B, 0x2D)\nconst huff_a04_cb = intArrayOf(2, 3, 2, 4)\nconst huff_a04_xlat = intArrayOf(1, 2, 0, 3, 4, 5)\nconst huff_a05_cb = intArrayOf(3, 12, 1, 3, 5, 8, 12, 23, 72, 68, 31, 2)\nconst huff_a05_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x11, 0xF1, 0x0F, 0x1F, 0xFF, 0x20, 0xE0, 0xE1, 0x02, 0xF2, 0x0E, 0x1E, 0x2F, 0x30, 0xD0, 0x21, 0x12, 0x22, 0xE2, 0x03, 0x0D, 0x2E, 0xEE, 0xFE, 0xEF, 0x40, 0xC0, 0x31, 0xC1, 0xD1, 0x32, 0xD2, 0x13, 0x23, 0xE3, 0xF3, 0x04, 0xF4, 0x0C, 0x1C, 0x1D, 0x2D, 0xED, 0xFD, 0x3E, 0xDE, 0x3F, 0xDF, 0x50, 0x60, 0x70, 0x90, 0xA0, 0xB0, 0x41, 0x51, 0x61, 0x71, 0x91, 0xA1, 0xB1, 0x42, 0x62, 0x92, 0xA2, 0xC2, 0x33, 0xC3, 0xD3, 0x14, 0x24, 0x34, 0xD4, 0xE4, 0x05, 0x15, 0xF5, 0x06, 0x16, 0x26, 0xE6, 0xF6, 0x07, 0x17, 0xE7, 0xF7, 0x09, 0x19, 0x29, 0xF9, 0x0A, 0x1A, 0x2A, 0xEA, 0xFA, 0x0B, 0x1B, 0xFB, 0x2C, 0x3C, 0xDC, 0xEC, 0xFC, 0x3D, 0x4D, 0xCD, 0xDD, 0x4E, 0x6E, 0x7E, 0xAE, 0xCE, 0x4F, 0x5F, 0x6F, 0x7F, 0x9F, 0xAF, 0xBF, 0xCF, 0x52, 0x72, 0xB2, 0x43, 0x53, 0x63, 0x73, 0x93, 0xA3, 0xB3, 0x44, 0x64, 0x74, 0x94, 0xA4, 0xB4, 0xC4, 0x25, 0x35, 0xA5, 0xC5, 0xD5, 0xE5, 0x36, 0x46, 0xB6, 0xC6, 0xD6, 0x27, 0x37, 0x47, 0xB7, 0xC7, 0xD7, 0x39, 0x49, 0x59, 0xC9, 0xD9, 0xE9, 0x3A, 0x4A, 0x5A, 0xCA, 0xDA, 0x2B, 0x3B, 0x4B, 0x6B, 0x7B, 0xDB, 0xEB, 0x4C, 0x5C, 0x6C, 0x7C, 0x9C, 0xAC, 0xCC, 0x5D, 0x6D, 0x7D, 0x9D, 0xAD, 0xBD, 0x5E, 0x9E, 0xBE, 0x54, 0x45, 0x55, 0x65, 0x75, 0x95, 0xB5, 0x56, 0x66, 0x76, 0x96, 0xA6, 0x57, 0x67, 0x97, 0xA7, 0x69, 0x79, 0xA9, 0xB9, 0x6A, 0x7A, 0x9A, 0xAA, 0xBA, 0x5B, 0x9B, 0xAB, 0xBB, 0xCB, 0xBC, 0x77, 0x99)\nconst huff_a06_cb = intArrayOf(2, 6, 1, 3, 2, 6, 4)\nconst huff_a06_xlat = intArrayOf(1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 10, 11, 12, 15)\nconst huff_a07_cb = intArrayOf(2, 10, 1, 2, 2, 2, 6, 14, 21, 13, 2)\nconst huff_a07_xlat = intArrayOf(0, 1, 63, 2, 62, 3, 61, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 26, 27, 28, 36, 37, 38, 54, 55, 56, 57, 11, 12, 13, 14, 15, 16, 25, 29, 30, 31, 33, 34, 35, 39, 47, 48, 49, 50, 51, 52, 53, 17, 18, 19, 20, 21, 22, 23, 41, 42, 43, 44, 45, 46, 24, 40)\nconst huff_a11_cb = intArrayOf(1, 11, 1, 0, 0, 0, 8, 1, 18, 9, 22, 10, 12)\nconst huff_a11_xlat = intArrayOf(0x00, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x03, 0xD0, 0x50, 0x70, 0xF0, 0xC4, 0x34, 0x4C, 0xCC, 0x1C, 0x41, 0xC1, 0x31, 0x05, 0x0D, 0x43, 0xC3, 0x13, 0x07, 0x0F, 0x44, 0x14, 0x74, 0xDC, 0x3C, 0x11, 0x1D, 0x33, 0x37, 0x54, 0xD4, 0xF4, 0x5C, 0x7C, 0xFC, 0xD1, 0x71, 0xF1, 0x15, 0x35, 0x4D, 0xCD, 0xDD, 0x3D, 0xD3, 0x73, 0x47, 0xC7, 0x17, 0x77, 0x3F, 0x51, 0x45, 0xC5, 0x55, 0x53, 0xF3, 0x4F, 0xCF, 0x1F, 0xFF, 0xD5, 0x75, 0xF5, 0x5D, 0x7D, 0xFD, 0x57, 0xD7, 0xF7, 0x5F, 0xDF, 0x7F)\nconst huff_a12_cb = intArrayOf(5, 10, 16, 11, 32, 19, 1, 2)\nconst huff_a12_xlat = intArrayOf(0x00, 0x40, 0x10, 0x50, 0x04, 0x44, 0x14, 0x54, 0x01, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x90, 0x94, 0x58, 0x91, 0x95, 0x19, 0x59, 0x06, 0x46, 0x16, 0x56, 0x80, 0x60, 0x84, 0x24, 0x64, 0xA4, 0x08, 0x48, 0x18, 0x68, 0x81, 0x21, 0x61, 0xA1, 0x85, 0x25, 0x65, 0xA5, 0x09, 0x49, 0x99, 0x69, 0xA9, 0x02, 0x42, 0x12, 0x52, 0x96, 0x26, 0x66, 0x1A, 0x5A, 0x20, 0xA0, 0x88, 0x98, 0x28, 0xA8, 0x89, 0x29, 0x82, 0x92, 0x22, 0x62, 0x86, 0xA6, 0x0A, 0x4A, 0x9A, 0x6A, 0xAA, 0xA2, 0x8A, 0x2A)\nconst huff_a13_cb = intArrayOf(1, 10, 1, 0, 0, 4, 2, 2, 9, 15, 12, 4)\nconst huff_a13_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x39, 0x0F, 0x09, 0x3F, 0x10, 0x30, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x3E, 0x17, 0x18, 0x28, 0x11, 0x29, 0x0A, 0x32, 0x03, 0x0B, 0x3B, 0x05, 0x0D, 0x3D, 0x16, 0x1F, 0x37, 0x19, 0x12, 0x1A, 0x2A, 0x13, 0x33, 0x15, 0x35, 0x1E, 0x2E, 0x36, 0x2F, 0x1B, 0x2B, 0x1D, 0x2D)\nconst huff_a14_cb = intArrayOf(2, 11, 1, 0, 4, 3, 5, 16, 28, 34, 26, 4)\nconst huff_a14_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x11, 0x02, 0x0E, 0x30, 0x50, 0xB0, 0xD0, 0x21, 0xE1, 0x12, 0xF2, 0x03, 0x05, 0x0B, 0x0D, 0x1E, 0xFE, 0x2F, 0xEF, 0x40, 0xC0, 0x31, 0x51, 0xB1, 0xC1, 0xD1, 0x22, 0x52, 0xE2, 0x13, 0xF3, 0x04, 0x15, 0xF5, 0x1B, 0xEB, 0xFB, 0x0C, 0x1D, 0xFD, 0x2E, 0x5E, 0xEE, 0x3F, 0x5F, 0xBF, 0xDF, 0x41, 0x32, 0x42, 0xB2, 0xD2, 0x23, 0x53, 0xB3, 0xE3, 0x14, 0x24, 0xE4, 0xF4, 0x25, 0x35, 0xD5, 0xE5, 0x2B, 0x3B, 0xDB, 0x1C, 0x2C, 0xBC, 0xEC, 0xFC, 0x2D, 0xBD, 0xED, 0x3E, 0x4E, 0xBE, 0xDE, 0x4F, 0xCF, 0xC2, 0x33, 0x43, 0xC3, 0xD3, 0x34, 0x44, 0x54, 0xB4, 0xD4, 0x45, 0x55, 0xC5, 0x4B, 0xCB, 0x3C, 0x4C, 0x5C, 0xCC, 0xDC, 0x3D, 0x4D, 0x5D, 0xCD, 0xDD, 0xCE, 0xC4, 0xB5, 0x5B, 0xBB)\nconst huff_a15_cb = intArrayOf(5, 11, 9, 12, 16, 44, 98, 42, 4)\nconst huff_a15_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x11, 0xF1, 0x0F, 0x1F, 0xFF, 0x20, 0xE0, 0x21, 0xE1, 0x02, 0x12, 0xF2, 0x0E, 0x1E, 0xFE, 0x2F, 0xEF, 0x30, 0xD0, 0x31, 0xD1, 0x22, 0xE2, 0x03, 0x13, 0xF3, 0x0D, 0x1D, 0xFD, 0x2E, 0xEE, 0x3F, 0xDF, 0x40, 0x60, 0x70, 0x90, 0xA0, 0xC0, 0x41, 0xC1, 0x32, 0x42, 0xC2, 0xD2, 0x23, 0x33, 0xD3, 0xE3, 0x04, 0x14, 0x24, 0xE4, 0xF4, 0x06, 0x16, 0xF6, 0x07, 0x09, 0x0A, 0x1A, 0xFA, 0x0C, 0x1C, 0x2C, 0xEC, 0xFC, 0x2D, 0x3D, 0xDD, 0xED, 0x3E, 0x4E, 0xCE, 0xDE, 0x4F, 0xCF, 0x50, 0xB0, 0x51, 0x61, 0x71, 0x91, 0xA1, 0xB1, 0x52, 0x62, 0x72, 0x92, 0xA2, 0xB2, 0x43, 0x53, 0x63, 0x73, 0x93, 0xA3, 0xC3, 0x34, 0x44, 0x64, 0xA4, 0xC4, 0xD4, 0x05, 0x15, 0x25, 0x35, 0xD5, 0xE5, 0xF5, 0x26, 0x36, 0x46, 0xC6, 0xD6, 0xE6, 0x17, 0x27, 0x37, 0xC7, 0xD7, 0xE7, 0xF7, 0x19, 0x29, 0x39, 0xC9, 0xD9, 0xE9, 0xF9, 0x2A, 0x3A, 0x4A, 0x5A, 0xCA, 0xDA, 0xEA, 0x0B, 0x1B, 0x2B, 0x3B, 0xCB, 0xDB, 0xEB, 0xFB, 0x3C, 0x4C, 0x6C, 0x7C, 0x9C, 0xAC, 0xBC, 0xCC, 0xDC, 0x4D, 0x5D, 0x6D, 0x7D, 0x9D, 0xAD, 0xBD, 0xCD, 0x5E, 0x6E, 0x7E, 0x9E, 0xAE, 0xBE, 0x5F, 0x6F, 0x7F, 0x9F, 0xAF, 0xBF, 0xB3, 0x54, 0x74, 0x94, 0xB4, 0x45, 0x55, 0x65, 0x75, 0x95, 0xA5, 0xB5, 0xC5, 0x56, 0x66, 0x76, 0x96, 0xA6, 0xB6, 0x47, 0x57, 0x67, 0xA7, 0xB7, 0x49, 0x59, 0x69, 0xA9, 0xB9, 0x6A, 0x7A, 0x9A, 0xAA, 0xBA, 0x4B, 0x5B, 0x6B, 0x7B, 0x9B, 0xAB, 0xBB, 0x5C, 0x77, 0x97, 0x79, 0x99)\nconst huff_a16_cb = intArrayOf(2, 12, 1, 1, 2, 2, 5, 7, 21, 54, 85, 62, 16)\nconst huff_a16_xlat = intArrayOf(0x00, 0x01, 0x10, 0x11, 0x21, 0x12, 0x20, 0x31, 0x02, 0x22, 0x13, 0x30, 0x41, 0x32, 0x03, 0x23, 0x14, 0x24, 0x40, 0x51, 0x61, 0xD1, 0xE1, 0x42, 0x52, 0xD2, 0x33, 0x43, 0xD3, 0x04, 0x34, 0x05, 0x15, 0x25, 0x16, 0x1D, 0x2D, 0x1E, 0x2E, 0x50, 0x60, 0xD0, 0xE0, 0xF0, 0x71, 0x81, 0xF1, 0x62, 0x72, 0xE2, 0xF2, 0x53, 0x63, 0xE3, 0xF3, 0x44, 0x54, 0xD4, 0xE4, 0xF4, 0x35, 0x45, 0x55, 0xD5, 0xE5, 0xF5, 0x06, 0x26, 0x36, 0xD6, 0x07, 0x17, 0x27, 0x37, 0xD7, 0x18, 0x28, 0x1C, 0x0D, 0x3D, 0x4D, 0x5D, 0x6D, 0x8D, 0x0E, 0x3E, 0x4E, 0x5E, 0x0F, 0x1F, 0x2F, 0x3F, 0x5F, 0x70, 0x80, 0x90, 0xC0, 0x91, 0xA1, 0xB1, 0xC1, 0x82, 0x92, 0xA2, 0xC2, 0x73, 0x83, 0x93, 0xA3, 0xC3, 0x64, 0x74, 0x84, 0x94, 0xA4, 0xC4, 0x65, 0x75, 0x85, 0x46, 0x56, 0x66, 0xC6, 0xE6, 0xF6, 0x47, 0x57, 0xE7, 0xF7, 0x08, 0x38, 0x48, 0x58, 0x68, 0xD8, 0xE8, 0xF8, 0x09, 0x19, 0x29, 0x39, 0x59, 0xD9, 0xE9, 0xF9, 0x1A, 0x2A, 0x3A, 0xDA, 0xEA, 0xFA, 0x1B, 0x2B, 0xDB, 0xEB, 0xFB, 0x0C, 0x2C, 0x3C, 0xDC, 0xEC, 0x7D, 0x9D, 0xAD, 0xBD, 0xCD, 0x6E, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0x4F, 0x6F, 0x7F, 0x8F, 0xAF, 0xA0, 0xB2, 0xB3, 0xB4, 0x95, 0xA5, 0xB5, 0xC5, 0x76, 0x86, 0x96, 0xA6, 0xB6, 0x67, 0x77, 0x87, 0x97, 0xC7, 0x78, 0x88, 0x98, 0xC8, 0x49, 0x69, 0x79, 0x89, 0x99, 0xC9, 0x0A, 0x4A, 0x5A, 0x6A, 0x7A, 0xCA, 0x0B, 0x3B, 0x4B, 0x5B, 0x6B, 0xCB, 0x4C, 0x5C, 0x6C, 0x7C, 0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xFC, 0xDD, 0xED, 0xFD, 0xDE, 0xEE, 0xFE, 0x9F, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF, 0xB0, 0xA7, 0xB7, 0xA8, 0xB8, 0xA9, 0xB9, 0x8A, 0x9A, 0xAA, 0xBA, 0x7B, 0x8B, 0x9B, 0xAB, 0xBB)\nconst huff_a17_cb = intArrayOf(3, 9, 3, 2, 5, 7, 17, 23, 6)\nconst huff_a17_xlat = intArrayOf(0, 1, 63, 2, 62, 3, 4, 59, 60, 61, 5, 6, 7, 8, 56, 57, 58, 9, 10, 11, 12, 13, 14, 26, 27, 36, 37, 38, 50, 51, 52, 53, 54, 55, 15, 16, 17, 18, 19, 20, 21, 25, 28, 29, 30, 31, 33, 34, 35, 39, 43, 44, 45, 46, 47, 48, 49, 22, 23, 24, 40, 41, 42)\nconst huff_a21_cb = intArrayOf(1, 12, 1, 0, 0, 2, 6, 0, 7, 21, 15, 17, 8, 4)\nconst huff_a21_xlat = intArrayOf(0x00, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x03, 0xD0, 0x70, 0x34, 0x1C, 0x0D, 0x13, 0x07, 0x50, 0xF0, 0x44, 0xC4, 0x14, 0x74, 0x4C, 0xCC, 0xDC, 0x3C, 0x41, 0xC1, 0x11, 0x31, 0x05, 0x1D, 0x43, 0xC3, 0x33, 0x37, 0x0F, 0x54, 0xF4, 0xFC, 0xD1, 0x71, 0x15, 0x4D, 0xCD, 0xDD, 0xD3, 0x73, 0x47, 0xC7, 0x77, 0x3F, 0xD4, 0x5C, 0x7C, 0x51, 0xF1, 0x45, 0xC5, 0x55, 0x35, 0x3D, 0x53, 0xF3, 0x17, 0x4F, 0xCF, 0x1F, 0xFF, 0x75, 0xF5, 0x5D, 0x7D, 0xD7, 0xF7, 0x5F, 0xDF, 0xD5, 0xFD, 0x57, 0x7F)\nconst huff_a22_cb = intArrayOf(2, 9, 1, 4, 0, 4, 3, 8, 3, 2)\nconst huff_a22_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x09, 0x39, 0x0F, 0x3F, 0x10, 0x02, 0x06, 0x30, 0x11, 0x31, 0x0A, 0x3A, 0x0E, 0x17, 0x37, 0x32, 0x16, 0x3E, 0x12, 0x36)\nconst huff_a23_cb = intArrayOf(3, 9, 5, 0, 4, 6, 10, 16, 8)\nconst huff_a23_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x09, 0x39, 0x0F, 0x3F, 0x10, 0x30, 0x02, 0x3A, 0x06, 0x0E, 0x18, 0x28, 0x11, 0x31, 0x0A, 0x03, 0x05, 0x3E, 0x17, 0x37, 0x19, 0x29, 0x12, 0x2A, 0x32, 0x0B, 0x33, 0x3B, 0x0D, 0x15, 0x3D, 0x16, 0x1E, 0x36, 0x1F, 0x2F, 0x1A, 0x13, 0x1B, 0x2B, 0x1D, 0x2D, 0x35, 0x2E)\nconst huff_a24_cb = intArrayOf(2, 4, 3, 1, 2)\nconst huff_a25_cb = intArrayOf(2, 4, 1, 5, 2)\nconst huff_a25_xlat = intArrayOf(1, 0, 2, 3, 4, 5, 6, 7)\nconst huff_a26_cb = intArrayOf(4, 11, 3, 4, 12, 15, 34, 83, 75, 30)\nconst huff_a26_xlat = intArrayOf(0x00, 0x01, 0x11, 0x10, 0x21, 0x12, 0x22, 0x20, 0x30, 0x31, 0x41, 0x02, 0x32, 0x03, 0x13, 0x23, 0x33, 0x14, 0x24, 0x40, 0x51, 0x61, 0x42, 0x52, 0x43, 0x53, 0x04, 0x34, 0x44, 0x15, 0x25, 0x35, 0x16, 0x26, 0x50, 0x60, 0x71, 0x81, 0xD1, 0x62, 0x72, 0x82, 0xD2, 0x63, 0x73, 0xD3, 0x54, 0x64, 0x05, 0x45, 0x55, 0x65, 0x06, 0x36, 0x46, 0x56, 0x17, 0x27, 0x37, 0x47, 0x18, 0x28, 0x38, 0x19, 0x1D, 0x2D, 0x3D, 0x1E, 0x70, 0x80, 0x90, 0xD0, 0xE0, 0x91, 0xA1, 0xB1, 0xC1, 0xE1, 0xF1, 0x92, 0xA2, 0xC2, 0xE2, 0xF2, 0x83, 0x93, 0xA3, 0xC3, 0xE3, 0xF3, 0x74, 0x84, 0x94, 0xA4, 0xC4, 0xD4, 0xE4, 0xF4, 0x75, 0x85, 0x95, 0xD5, 0xE5, 0x66, 0x76, 0x86, 0xD6, 0xE6, 0x07, 0x57, 0x67, 0x77, 0xD7, 0x08, 0x48, 0x58, 0x68, 0xD8, 0x09, 0x29, 0x39, 0x49, 0x59, 0x69, 0x1A, 0x2A, 0x3A, 0x4A, 0x1B, 0x2B, 0x1C, 0x2C, 0x3C, 0x4C, 0x0D, 0x4D, 0x5D, 0x6D, 0x7D, 0x8D, 0x0E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0xA0, 0xB0, 0xC0, 0xF0, 0xB2, 0xB3, 0xB4, 0xA5, 0xB5, 0xC5, 0xF5, 0x96, 0xA6, 0xB6, 0xC6, 0xF6, 0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xE7, 0xF7, 0x78, 0x88, 0x98, 0xA8, 0xC8, 0xE8, 0xF8, 0x79, 0x89, 0x99, 0xC9, 0xD9, 0xE9, 0xF9, 0x0A, 0x5A, 0x6A, 0x7A, 0x8A, 0xDA, 0xEA, 0xFA, 0x0B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B, 0x8B, 0xDB, 0x0C, 0x5C, 0x6C, 0x7C, 0x8C, 0x9C, 0xDC, 0x9D, 0xAD, 0xBD, 0xCD, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0x0F, 0x6F, 0x7F, 0x8F, 0x9F, 0xAF, 0xB8, 0xA9, 0xB9, 0x9A, 0xAA, 0xBA, 0xCA, 0x9B, 0xAB, 0xBB, 0xCB, 0xEB, 0xFB, 0xAC, 0xBC, 0xCC, 0xEC, 0xFC, 0xDD, 0xED, 0xFD, 0xCE, 0xDE, 0xEE, 0xFE, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF)\nconst huff_a27_cb = intArrayOf(4, 8, 3, 14, 10, 20, 16)\nconst huff_a27_xlat = intArrayOf(0, 2, 3, 1, 5, 6, 7, 9, 54, 55, 56, 58, 59, 60, 61, 62, 63, 4, 8, 10, 11, 12, 14, 49, 52, 53, 57, 13, 15, 16, 17, 18, 19, 22, 23, 25, 26, 30, 39, 43, 44, 45, 46, 47, 48, 50, 51, 20, 21, 24, 27, 28, 29, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42)\nconst huff_a31_cb = intArrayOf(1, 6, 1, 0, 3, 1, 0, 4)\nconst huff_a31_xlat = intArrayOf(0x00, 0x04, 0x0C, 0x01, 0x03, 0x05, 0x0D, 0x07, 0x0F)\nconst huff_a32_cb = intArrayOf(1, 11, 1, 0, 0, 2, 2, 6, 12, 18, 19, 15, 6)\nconst huff_a32_xlat = intArrayOf(0x00, 0x40, 0x01, 0x10, 0x04, 0x80, 0x50, 0x20, 0x14, 0x05, 0x02, 0x90, 0x60, 0x44, 0x54, 0x24, 0x08, 0x18, 0x41, 0x11, 0x15, 0x09, 0x06, 0xA0, 0x84, 0x94, 0x64, 0xA4, 0x48, 0x58, 0x28, 0x51, 0x21, 0x45, 0x55, 0x25, 0x19, 0x12, 0x16, 0x0A, 0x1A, 0x68, 0xA8, 0x81, 0x91, 0x61, 0xA1, 0x85, 0x95, 0x65, 0xA5, 0x49, 0x59, 0x29, 0x69, 0x42, 0x52, 0x46, 0x56, 0x2A, 0x88, 0x98, 0x89, 0x99, 0xA9, 0x82, 0x92, 0x22, 0x62, 0x86, 0x26, 0x66, 0x4A, 0x5A, 0x6A, 0xA2, 0x96, 0xA6, 0x8A, 0x9A, 0xAA)\nconst huff_a33_cb = intArrayOf(3, 12, 1, 1, 13, 1, 14, 28, 33, 81, 32, 52)\nconst huff_a33_xlat = intArrayOf(0x00, 0x10, 0x40, 0x50, 0x04, 0x44, 0x14, 0x54, 0x01, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x90, 0x20, 0x94, 0x64, 0x18, 0x21, 0x95, 0x19, 0x69, 0x02, 0x52, 0x06, 0x46, 0x16, 0x80, 0x60, 0x84, 0xD4, 0x24, 0x08, 0x48, 0x58, 0x68, 0x81, 0x91, 0x61, 0x85, 0x25, 0x65, 0xA5, 0x09, 0x49, 0x59, 0x29, 0x42, 0x12, 0x56, 0x96, 0xA6, 0x0A, 0x17, 0x1B, 0xD0, 0xC4, 0x74, 0xF4, 0x88, 0xC8, 0x28, 0xA1, 0x71, 0xC5, 0xD5, 0x75, 0x99, 0xB9, 0x4D, 0x1D, 0x2D, 0x6D, 0x22, 0x62, 0x66, 0x4A, 0x1A, 0x9A, 0x6A, 0x8E, 0x5E, 0x43, 0x23, 0x07, 0x47, 0x57, 0x6B, 0xC0, 0xA0, 0xE0, 0x70, 0xB0, 0xA4, 0xE4, 0x34, 0xB4, 0x98, 0xD8, 0xA8, 0x38, 0x78, 0x0C, 0x4C, 0x1C, 0x5C, 0x9C, 0x6C, 0x7C, 0xC1, 0xD1, 0xE1, 0x31, 0xE5, 0x35, 0xB5, 0xF5, 0x89, 0xA9, 0x79, 0xF9, 0x0D, 0xCD, 0x9D, 0xDD, 0xAD, 0x3D, 0x7D, 0x82, 0xC2, 0x92, 0xD2, 0xE2, 0x72, 0xF2, 0x86, 0xD6, 0xE6, 0x76, 0xB6, 0x8A, 0x5A, 0xDA, 0xEA, 0xFA, 0x4E, 0x1E, 0x9E, 0xEE, 0x03, 0x13, 0x53, 0x97, 0xB7, 0x0B, 0x4B, 0x8B, 0x5B, 0x9B, 0xEB, 0x7B, 0x0F, 0x4F, 0x1F, 0x5F, 0x9F, 0x2F, 0x3F, 0xBF, 0xE8, 0xB8, 0xF8, 0x8C, 0x2C, 0x3C, 0xFC, 0xB1, 0xC9, 0xD9, 0xE9, 0x39, 0x5D, 0xED, 0xBD, 0xA2, 0x32, 0x26, 0x36, 0x2A, 0xAA, 0xBA, 0x0E, 0x2E, 0x6E, 0x83, 0xC3, 0x93, 0x63, 0xB3, 0xA7, 0x37, 0x30, 0xF0, 0xCC, 0xDC, 0xAC, 0xEC, 0xBC, 0xF1, 0x8D, 0xFD, 0xB2, 0xC6, 0xF6, 0xCA, 0x3A, 0x7A, 0xCE, 0xDE, 0xAE, 0x3E, 0x7E, 0xBE, 0xFE, 0xD3, 0xA3, 0xE3, 0x33, 0x73, 0xF3, 0x87, 0xC7, 0xD7, 0x27, 0x67, 0xE7, 0x77, 0xF7, 0xCB, 0xDB, 0x2B, 0xAB, 0x3B, 0xBB, 0xFB, 0x8F, 0xCF, 0xDF, 0x6F, 0xAF, 0xEF, 0x7F, 0xFF)\nconst huff_a34_cb = intArrayOf(1, 5, 1, 1, 1, 1, 2)\nconst huff_a34_xlat = intArrayOf(1, 0, 2, 3, 4, 5)\nconst huff_a35_cb = intArrayOf(2, 10, 1, 0, 2, 3, 6, 19, 9, 75, 110)\nconst huff_a35_xlat = intArrayOf(0x00, 0xF0, 0x0F, 0x10, 0x01, 0xFF, 0x20, 0xE0, 0x11, 0xF1, 0x0E, 0x1F, 0x30, 0x40, 0xD0, 0x21, 0xE1, 0x02, 0x12, 0x22, 0xE2, 0xF2, 0x03, 0x13, 0x1E, 0x2E, 0x3E, 0xEE, 0xFE, 0x2F, 0xEF, 0xD2, 0x43, 0xF3, 0x04, 0x0D, 0x2D, 0x3D, 0x3F, 0xDF, 0x50, 0x60, 0x70, 0x90, 0xB0, 0x31, 0x41, 0x91, 0xA1, 0xC1, 0xD1, 0x42, 0xA2, 0xC2, 0x23, 0x33, 0xE3, 0x24, 0x34, 0xB4, 0xD4, 0xF4, 0x05, 0x15, 0x45, 0xE5, 0x16, 0x36, 0x56, 0xA6, 0xC6, 0xD6, 0xF6, 0x57, 0xC7, 0xF7, 0x09, 0x29, 0x49, 0x59, 0x69, 0xF9, 0x0A, 0x2A, 0x3A, 0x4A, 0xDA, 0xEA, 0xFA, 0x0B, 0x2B, 0xAB, 0xEB, 0xFB, 0x0C, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C, 0xCC, 0xDC, 0xFC, 0x1D, 0x4D, 0x6D, 0xBD, 0xCD, 0xED, 0xFD, 0x4E, 0x6E, 0xCE, 0xDE, 0x7F, 0xA0, 0xC0, 0x51, 0x61, 0x71, 0xB1, 0x32, 0x52, 0x62, 0x72, 0x92, 0xB2, 0x53, 0x63, 0x73, 0x93, 0xA3, 0xB3, 0xC3, 0xD3, 0x14, 0x44, 0x54, 0x64, 0x74, 0x94, 0xA4, 0xC4, 0xE4, 0x25, 0x35, 0x55, 0x65, 0x75, 0x95, 0xA5, 0xB5, 0xC5, 0xD5, 0xF5, 0x06, 0x26, 0x46, 0x66, 0x76, 0x96, 0xB6, 0xE6, 0x07, 0x17, 0x27, 0x37, 0x47, 0x67, 0x77, 0x97, 0xA7, 0xB7, 0xD7, 0xE7, 0x19, 0x39, 0x79, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9, 0x1A, 0x5A, 0x6A, 0x7A, 0x9A, 0xAA, 0xBA, 0xCA, 0x1B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B, 0x9B, 0xBB, 0xCB, 0xDB, 0x6C, 0x7C, 0x9C, 0xAC, 0xBC, 0xEC, 0x5D, 0x7D, 0x9D, 0xAD, 0xDD, 0x5E, 0x7E, 0x9E, 0xAE, 0xBE, 0x4F, 0x5F, 0x6F, 0x9F, 0xAF, 0xBF, 0xCF)\nconst huff_a36_cb = intArrayOf(3, 12, 1, 3, 5, 5, 13, 27, 69, 96, 35, 2)\nconst huff_a36_xlat = intArrayOf(0x00, 0x10, 0x01, 0x11, 0x20, 0x21, 0x02, 0x12, 0x22, 0x31, 0x41, 0x32, 0x13, 0x23, 0x30, 0x40, 0x51, 0x42, 0x03, 0x33, 0x43, 0x04, 0x14, 0x24, 0x34, 0x15, 0x25, 0x50, 0x61, 0x71, 0xD1, 0x52, 0x62, 0x72, 0xD2, 0x53, 0x63, 0xD3, 0x44, 0x54, 0x64, 0x05, 0x35, 0x45, 0x55, 0x16, 0x26, 0x36, 0x46, 0x17, 0x27, 0x1D, 0x2D, 0x3D, 0x60, 0x70, 0xD0, 0x81, 0x91, 0xA1, 0xC1, 0xE1, 0xF1, 0x82, 0x92, 0xC2, 0xE2, 0xF2, 0x73, 0x83, 0xE3, 0xF3, 0x74, 0x84, 0xC4, 0xD4, 0xE4, 0xF4, 0x65, 0x75, 0x85, 0xD5, 0xE5, 0x06, 0x56, 0x66, 0xD6, 0xE6, 0x07, 0x37, 0x47, 0x57, 0x67, 0xD7, 0xE7, 0x18, 0x28, 0x38, 0x48, 0x58, 0xD8, 0x19, 0x29, 0x2A, 0x1C, 0x2C, 0x0D, 0x4D, 0x5D, 0x6D, 0x7D, 0x8D, 0x9D, 0x1E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x7E, 0x1F, 0x2F, 0x3F, 0x80, 0x90, 0xA0, 0xC0, 0xE0, 0xF0, 0xB1, 0xA2, 0xB2, 0x93, 0xA3, 0xB3, 0xC3, 0x94, 0xA4, 0xB4, 0x95, 0xA5, 0xB5, 0xC5, 0xF5, 0x76, 0x86, 0x96, 0xA6, 0xC6, 0xF6, 0x77, 0x87, 0x97, 0xA7, 0xC7, 0xF7, 0x08, 0x68, 0x78, 0x88, 0x98, 0xC8, 0xE8, 0xF8, 0x09, 0x39, 0x49, 0x59, 0x69, 0x79, 0x89, 0xD9, 0xE9, 0xF9, 0x0A, 0x1A, 0x3A, 0x4A, 0x5A, 0x6A, 0xDA, 0xEA, 0xFA, 0x1B, 0x2B, 0x3B, 0x4B, 0x5B, 0xDB, 0xEB, 0xFB, 0x0C, 0x3C, 0x4C, 0x5C, 0x6C, 0x7C, 0x8C, 0x9C, 0xDC, 0xEC, 0xAD, 0xBD, 0xCD, 0xDD, 0xED, 0x0E, 0x8E, 0x9E, 0xAE, 0xBE, 0x0F, 0x4F, 0x5F, 0x6F, 0x7F, 0x8F, 0x9F, 0xAF, 0xB0, 0xB6, 0xB7, 0xA8, 0xB8, 0x99, 0xA9, 0xB9, 0xC9, 0x7A, 0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0x0B, 0x6B, 0x7B, 0x8B, 0x9B, 0xCB, 0xAC, 0xBC, 0xCC, 0xFC, 0xFD, 0xCE, 0xDE, 0xEE, 0xFE, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF, 0xAB, 0xBB)\nconst huff_a37_cb = intArrayOf(4, 8, 7, 6, 8, 22, 20)\nconst huff_a37_xlat = intArrayOf(0, 1, 2, 3, 61, 62, 63, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 54, 55, 56, 57, 11, 12, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 35, 36, 37, 38, 48, 49, 50, 51, 52, 53, 17, 18, 19, 20, 21, 22, 23, 24, 31, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47)\nconst huff_a41_cb = intArrayOf(1, 12, 1, 0, 0, 6, 2, 0, 0, 0, 19, 9, 24, 20)\nconst huff_a41_xlat = intArrayOf(0x00, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x03, 0x50, 0xD0, 0x70, 0xF0, 0xC4, 0x34, 0x4C, 0xCC, 0x1C, 0x41, 0xC1, 0x31, 0x05, 0x0D, 0x43, 0xC3, 0x13, 0x07, 0x0F, 0x44, 0x14, 0x74, 0xDC, 0x3C, 0x11, 0x1D, 0x33, 0x37, 0x54, 0xD4, 0xF4, 0x5C, 0x7C, 0xFC, 0xD1, 0x71, 0xF1, 0xC5, 0x15, 0x35, 0x4D, 0xCD, 0xDD, 0x3D, 0xD3, 0x73, 0x47, 0xC7, 0x17, 0x77, 0x1F, 0x3F, 0x51, 0x45, 0x55, 0xD5, 0x75, 0xF5, 0x5D, 0x7D, 0xFD, 0x53, 0xF3, 0x57, 0xD7, 0xF7, 0x4F, 0xCF, 0x5F, 0xDF, 0x7F, 0xFF)\nconst huff_a42_cb = intArrayOf(3, 10, 1, 2, 13, 1, 31, 13, 16, 4)\nconst huff_a42_xlat = intArrayOf(0x00, 0x40, 0x01, 0x10, 0x50, 0x04, 0x44, 0x14, 0x54, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x59, 0x80, 0x90, 0x20, 0x60, 0x84, 0x94, 0x24, 0x64, 0x08, 0x48, 0x18, 0x58, 0x81, 0x91, 0x21, 0x61, 0x85, 0x95, 0x25, 0x65, 0x09, 0x49, 0x19, 0x02, 0x42, 0x12, 0x52, 0x06, 0x46, 0x16, 0x56, 0xA0, 0xA4, 0x68, 0xA1, 0xA5, 0x99, 0x29, 0x69, 0x96, 0x66, 0x4A, 0x1A, 0x5A, 0x88, 0x98, 0x28, 0x89, 0xA9, 0x82, 0x92, 0x22, 0x62, 0x86, 0x26, 0xA6, 0x0A, 0x9A, 0x2A, 0x6A, 0xA8, 0xA2, 0x8A, 0xAA)\nconst huff_a43_cb = intArrayOf(2, 4, 2, 3, 2)\nconst huff_a43_xlat = intArrayOf(0, 7, 1, 2, 6, 3, 5)\nconst huff_a44_cb = intArrayOf(4, 10, 5, 4, 12, 17, 47, 24, 12)\nconst huff_a44_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x11, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x21, 0xE1, 0x02, 0x12, 0xF2, 0x0E, 0x1E, 0xFE, 0x2F, 0xEF, 0x30, 0x50, 0xD0, 0xD1, 0x22, 0xE2, 0x03, 0x13, 0xF3, 0x0D, 0x1D, 0x2D, 0xFD, 0x2E, 0xEE, 0x3F, 0xDF, 0x40, 0xB0, 0xC0, 0x31, 0x41, 0x51, 0xB1, 0xC1, 0x32, 0xB2, 0xC2, 0xD2, 0x23, 0xB3, 0xD3, 0xE3, 0x04, 0x14, 0xE4, 0xF4, 0x05, 0x15, 0xD5, 0xE5, 0xF5, 0x0B, 0x1B, 0x2B, 0x3B, 0xEB, 0xFB, 0x0C, 0x1C, 0x2C, 0xFC, 0x3D, 0x5D, 0xED, 0x3E, 0x4E, 0x5E, 0xBE, 0xDE, 0x4F, 0x5F, 0xBF, 0xCF, 0x42, 0x52, 0x33, 0x53, 0xC3, 0x24, 0xB4, 0xD4, 0x25, 0x35, 0xC5, 0x4B, 0xCB, 0xDB, 0x3C, 0x4C, 0x5C, 0xDC, 0xEC, 0x4D, 0xBD, 0xCD, 0xDD, 0xCE, 0x43, 0x34, 0x44, 0x54, 0xC4, 0x45, 0x55, 0xB5, 0x5B, 0xBB, 0xBC, 0xCC)\nconst huff_a45_cb = intArrayOf(2, 4, 2, 2, 4)\nconst huff_a45_xlat = intArrayOf(1, 2, 0, 3, 4, 5, 6, 7)\nconst huff_a46_cb = intArrayOf(5, 9, 1, 16, 31, 36, 172)\nconst huff_a46_xlat = intArrayOf(0x02, 0x00, 0x30, 0x21, 0x31, 0x41, 0x61, 0x12, 0x22, 0x42, 0x62, 0x43, 0x53, 0x24, 0x45, 0x26, 0x27, 0x10, 0x40, 0xB0, 0x01, 0x11, 0x81, 0x32, 0x52, 0x72, 0x92, 0x03, 0x13, 0x33, 0x63, 0x14, 0x34, 0x54, 0x64, 0x74, 0x05, 0x15, 0x25, 0x35, 0x55, 0x65, 0x06, 0x46, 0x56, 0x57, 0x67, 0x88, 0x20, 0x51, 0x91, 0xD1, 0xF2, 0x23, 0x83, 0x93, 0x04, 0x44, 0x84, 0x94, 0x75, 0x85, 0xC5, 0x36, 0x66, 0x96, 0xB6, 0x07, 0x37, 0x97, 0x08, 0x28, 0x38, 0x48, 0x68, 0x09, 0x69, 0x79, 0x0A, 0x2A, 0x1B, 0x9B, 0x2C, 0x4D, 0x50, 0x60, 0x70, 0x80, 0x90, 0xA0, 0xC0, 0xD0, 0xE0, 0xF0, 0x71, 0xA1, 0xB1, 0xC1, 0xE1, 0xF1, 0x82, 0xA2, 0xB2, 0xC2, 0xD2, 0xE2, 0x73, 0xA3, 0xB3, 0xC3, 0xD3, 0xE3, 0xF3, 0xA4, 0xB4, 0xC4, 0xD4, 0xE4, 0xF4, 0x95, 0xA5, 0xB5, 0xD5, 0xE5, 0xF5, 0x16, 0x76, 0x86, 0xA6, 0xC6, 0xD6, 0xE6, 0xF6, 0x17, 0x47, 0x77, 0x87, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7, 0x18, 0x58, 0x78, 0x98, 0xA8, 0xB8, 0xC8, 0xD8, 0xE8, 0xF8, 0x19, 0x29, 0x39, 0x49, 0x59, 0x89, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9, 0xF9, 0x1A, 0x3A, 0x4A, 0x5A, 0x6A, 0x7A, 0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA, 0xFA, 0x0B, 0x2B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B, 0x8B, 0xAB, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB, 0x0C, 0x1C, 0x3C, 0x4C, 0x5C, 0x6C, 0x7C, 0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xDC, 0xEC, 0xFC, 0x0D, 0x1D, 0x2D, 0x3D, 0x5D, 0x6D, 0x7D, 0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0xDD, 0xED, 0xFD, 0x0E, 0x1E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0xDE, 0xEE, 0xFE, 0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0x6F, 0x7F, 0x8F, 0x9F, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF)\nconst huff_a47_cb = intArrayOf(4, 9, 5, 12, 9, 12, 15, 10)\nconst huff_a47_xlat = intArrayOf(0, 1, 2, 62, 63, 3, 4, 5, 6, 8, 54, 56, 57, 58, 59, 60, 61, 7, 9, 10, 11, 12, 13, 14, 53, 55, 15, 16, 17, 18, 19, 20, 21, 36, 37, 39, 42, 52, 22, 25, 28, 35, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 23, 24, 26, 27, 29, 30, 31, 33, 34, 44)\nconst huff_a51_cb = intArrayOf(2, 11, 1, 0, 6, 2, 6, 18, 4, 26, 6, 12)\nconst huff_a51_xlat = intArrayOf(0x00, 0x40, 0xC0, 0x30, 0x04, 0x01, 0x03, 0x10, 0x0C, 0xD0, 0x70, 0x34, 0x1C, 0x0D, 0x07, 0x50, 0xF0, 0x44, 0xC4, 0x14, 0x4C, 0xCC, 0x3C, 0x41, 0xC1, 0x11, 0x31, 0x05, 0x43, 0xC3, 0x13, 0x33, 0x0F, 0x74, 0xDC, 0x1D, 0x37, 0x54, 0xD4, 0xF4, 0x5C, 0x7C, 0xFC, 0xD1, 0x71, 0xF1, 0xC5, 0x15, 0x35, 0x4D, 0xCD, 0xDD, 0x3D, 0x53, 0xD3, 0x73, 0x47, 0xC7, 0x17, 0x77, 0x4F, 0x1F, 0x3F, 0x51, 0x45, 0x55, 0xF3, 0xCF, 0xFF, 0xD5, 0x75, 0xF5, 0x5D, 0x7D, 0xFD, 0x57, 0xD7, 0xF7, 0x5F, 0xDF, 0x7F)\nconst huff_a52_cb = intArrayOf(1, 10, 1, 0, 2, 2, 0, 4, 3, 8, 3, 2)\nconst huff_a52_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x09, 0x39, 0x0F, 0x3F, 0x10, 0x02, 0x06, 0x30, 0x11, 0x31, 0x0A, 0x3A, 0x0E, 0x17, 0x37, 0x32, 0x16, 0x3E, 0x12, 0x36)\nconst huff_a53_xlat = intArrayOf(0, 1, 2, 6, 7, 3, 5)\nconst huff_a54_cb = intArrayOf(4, 9, 4, 7, 12, 19, 21, 58)\nconst huff_a54_xlat = intArrayOf(0x00, 0x01, 0x0F, 0x1F, 0x10, 0xE0, 0xF0, 0x11, 0xF1, 0x2F, 0xFF, 0x20, 0x21, 0xE1, 0x02, 0x12, 0xF2, 0x03, 0xF3, 0x0E, 0x2E, 0xFE, 0x3F, 0x30, 0x40, 0xD0, 0xC1, 0xD1, 0x22, 0xC2, 0x33, 0xE3, 0x0C, 0xCC, 0x0D, 0x1D, 0x2D, 0xFD, 0x1E, 0x3E, 0x5E, 0xEF, 0xC0, 0x52, 0xB2, 0xD2, 0x43, 0xC3, 0xD3, 0x24, 0x45, 0xF5, 0x4B, 0x5B, 0xFB, 0x1C, 0x3D, 0xBD, 0xDD, 0xEE, 0xBF, 0xCF, 0xDF, 0x50, 0xB0, 0x31, 0x41, 0x51, 0xB1, 0x32, 0x42, 0xE2, 0x13, 0x23, 0x53, 0xB3, 0x04, 0x14, 0x34, 0x44, 0x54, 0xB4, 0xC4, 0xD4, 0xE4, 0xF4, 0x05, 0x15, 0x25, 0x35, 0x55, 0xB5, 0xC5, 0xD5, 0xE5, 0x0B, 0x1B, 0x2B, 0x3B, 0xBB, 0xCB, 0xDB, 0xEB, 0x2C, 0x3C, 0x4C, 0x5C, 0xBC, 0xDC, 0xEC, 0xFC, 0x4D, 0x5D, 0xCD, 0xED, 0x4E, 0xBE, 0xCE, 0xDE, 0x4F, 0x5F)\nconst huff_a55_cb = intArrayOf(1, 6, 1, 1, 1, 0, 3, 2)\nconst huff_a55_xlat = intArrayOf(0, 1, 2, 3, 6, 7, 4, 5)\nconst huff_a56_cb = intArrayOf(3, 7, 1, 8, 6, 8, 8)\nconst huff_a56_xlat = intArrayOf(4, 0, 1, 2, 3, 28, 29, 30, 31, 5, 6, 7, 24, 25, 27, 8, 9, 14, 19, 21, 22, 23, 26, 10, 11, 12, 13, 15, 17, 18, 20)\nconst huff_a57_cb = intArrayOf(3, 9, 1, 5, 7, 8, 16, 22, 4)\nconst huff_a57_xlat = intArrayOf(0, 1, 2, 61, 62, 63, 3, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 54, 55, 56, 57, 11, 12, 13, 14, 15, 26, 27, 28, 36, 37, 38, 49, 50, 51, 52, 53, 16, 17, 18, 19, 20, 21, 23, 24, 25, 29, 30, 31, 33, 34, 35, 39, 43, 44, 45, 46, 47, 48, 22, 40, 41, 42)\nconst huff_a61_cb = intArrayOf(2, 11, 1, 0, 8, 0, 1, 16, 10, 29, 12, 4)\nconst huff_a61_xlat = intArrayOf(0x00, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x03, 0x70, 0x50, 0xD0, 0xF0, 0x44, 0xC4, 0x14, 0x34, 0x4C, 0x1C, 0x3C, 0x31, 0x05, 0x0D, 0x13, 0x07, 0x0F, 0x74, 0xCC, 0xDC, 0xFC, 0x41, 0xC1, 0x11, 0x43, 0xC3, 0x33, 0x54, 0xD4, 0xF4, 0x5C, 0x7C, 0x51, 0xD1, 0x71, 0xF1, 0x45, 0xC5, 0x15, 0x35, 0x4D, 0xCD, 0x1D, 0x3D, 0x53, 0xD3, 0x73, 0xF3, 0x47, 0xC7, 0x17, 0x37, 0x4F, 0xCF, 0x1F, 0x3F, 0x55, 0xD5, 0x75, 0xF5, 0x5D, 0xDD, 0xFD, 0x57, 0xD7, 0x77, 0xF7, 0xFF, 0x7D, 0x5F, 0xDF, 0x7F)\nconst huff_a62_cb = intArrayOf(3, 8, 5, 2, 2, 9, 5, 2)\nconst huff_a62_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x39, 0x0F, 0x09, 0x3F, 0x10, 0x30, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x17, 0x37, 0x11, 0x0A, 0x32, 0x16, 0x3E, 0x12, 0x36)\nconst huff_a63_cb = intArrayOf(3, 11, 1, 1, 10, 4, 16, 29, 46, 75, 74)\nconst huff_a63_xlat = intArrayOf(0x00, 0x40, 0x10, 0x50, 0x04, 0x44, 0x14, 0x01, 0x41, 0x05, 0x45, 0x55, 0x54, 0x11, 0x51, 0x15, 0x80, 0x90, 0x60, 0x24, 0x64, 0xA4, 0x48, 0x61, 0x95, 0x25, 0xA5, 0x02, 0x42, 0x52, 0x16, 0x56, 0x20, 0x84, 0x94, 0x18, 0x58, 0x81, 0x91, 0x85, 0x65, 0x09, 0x49, 0x19, 0x59, 0x99, 0x29, 0x69, 0x79, 0x5D, 0x12, 0x62, 0x06, 0x46, 0x86, 0x66, 0x1A, 0x5A, 0x6A, 0x47, 0x17, 0xC0, 0xA0, 0xE0, 0xC4, 0xD4, 0x74, 0x08, 0x78, 0x0C, 0x4C, 0x1C, 0x5C, 0xD1, 0x21, 0xE1, 0x71, 0xC5, 0xE5, 0x75, 0xB5, 0x89, 0xBD, 0x92, 0x22, 0x96, 0xA6, 0x36, 0x0A, 0x4A, 0x8A, 0x9A, 0x2A, 0x7A, 0xDE, 0x6E, 0x43, 0x13, 0x53, 0x23, 0x07, 0x77, 0x4B, 0x1B, 0x9B, 0x6B, 0x2F, 0xD0, 0x30, 0x70, 0xE4, 0x34, 0xF4, 0xC8, 0x98, 0x28, 0x68, 0xA8, 0xE8, 0x38, 0xB8, 0xF8, 0x9C, 0x2C, 0x6C, 0x7C, 0xA1, 0xB1, 0xD5, 0x35, 0xC9, 0xD9, 0xA9, 0xE9, 0x39, 0xB9, 0xF9, 0xCD, 0x1D, 0x2D, 0xAD, 0x7D, 0xC2, 0xD2, 0xA2, 0xB2, 0xF2, 0xC6, 0x26, 0x76, 0xB6, 0xDA, 0xAA, 0xEA, 0x3A, 0xFA, 0x0E, 0x4E, 0x2E, 0x7E, 0xBE, 0xFE, 0x03, 0x83, 0x63, 0xA3, 0xB3, 0x87, 0x57, 0x97, 0xD7, 0x27, 0x0B, 0x8B, 0x5B, 0x2B, 0xAB, 0xCF, 0x1F, 0x9F, 0x7F, 0xBF, 0xB0, 0xF0, 0xB4, 0x88, 0xD8, 0x8C, 0xCC, 0xDC, 0xAC, 0xEC, 0x3C, 0xBC, 0xFC, 0xC1, 0x31, 0xF1, 0xF5, 0x0D, 0x4D, 0x8D, 0x9D, 0xDD, 0x6D, 0xED, 0x3D, 0xFD, 0x82, 0xE2, 0x32, 0x72, 0xD6, 0xE6, 0xF6, 0xCA, 0xBA, 0x8E, 0xCE, 0x1E, 0x5E, 0x9E, 0xAE, 0xEE, 0x3E, 0xC3, 0x93, 0xD3, 0xE3, 0x33, 0x73, 0xF3, 0xC7, 0x67, 0xA7, 0xE7, 0x37, 0xB7, 0xF7, 0xCB, 0xDB, 0xEB, 0x3B, 0x7B, 0xBB, 0xFB, 0x0F, 0x4F, 0x8F, 0x5F, 0xDF, 0x6F, 0xAF, 0xEF, 0x3F, 0xFF)\nconst huff_a64_cb = intArrayOf(4, 9, 1, 7, 12, 36, 63, 2)\nconst huff_a64_xlat = intArrayOf(0x00, 0x10, 0x20, 0xE0, 0xF0, 0x02, 0x0E, 0xEF, 0x30, 0x01, 0x11, 0x21, 0x31, 0xF1, 0x12, 0xF2, 0x1E, 0xEE, 0xDF, 0xFF, 0x40, 0xC0, 0xD0, 0xD1, 0xE1, 0x22, 0x32, 0x42, 0xD2, 0xE2, 0x03, 0x13, 0x23, 0xB3, 0xC3, 0xE3, 0xF3, 0xE4, 0x05, 0xF5, 0x2B, 0x0C, 0xFC, 0x1D, 0x2D, 0xBD, 0xDD, 0xFD, 0x2E, 0x4E, 0xDE, 0xFE, 0x0F, 0x1F, 0x2F, 0x3F, 0x50, 0xB0, 0x41, 0x51, 0xB1, 0xC1, 0x52, 0xB2, 0xC2, 0x33, 0x43, 0x53, 0xD3, 0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0xB4, 0xC4, 0xD4, 0xF4, 0x15, 0x25, 0x35, 0x45, 0x55, 0xB5, 0xC5, 0xD5, 0xE5, 0x0B, 0x1B, 0x3B, 0x4B, 0x5B, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C, 0xBC, 0xCC, 0xDC, 0xEC, 0x0D, 0x3D, 0x4D, 0x5D, 0xCD, 0xED, 0x3E, 0x5E, 0xBE, 0xCE, 0x4F, 0xCF, 0x5F, 0xBF)\nconst huff_a65_cb = intArrayOf(2, 7, 3, 0, 1, 3, 4, 4)\nconst huff_a65_xlat = intArrayOf(0, 1, 15, 14, 2, 3, 13, 4, 6, 10, 12, 5, 7, 9, 11)\nconst huff_a66_cb = intArrayOf(2, 10, 1, 2, 2, 6, 8, 6, 3, 1, 2)\nconst huff_a66_xlat = intArrayOf(0, 1, 31, 2, 30, 3, 4, 15, 17, 28, 29, 5, 6, 7, 8, 24, 25, 26, 27, 9, 10, 11, 21, 22, 23, 12, 19, 20, 13, 14, 18)\nconst huff_a67_cb = intArrayOf(2, 9, 1, 1, 3, 4, 6, 13, 25, 10)\nconst huff_a67_xlat = intArrayOf(0, 1, 2, 62, 63, 3, 4, 60, 61, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 13, 26, 38, 52, 53, 54, 55, 56, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 45, 46, 47, 48, 49, 50, 51, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44)\nconst huff_a71_cb = intArrayOf(1, 3, 1, 1, 2)\nconst huff_a72_cb = intArrayOf(2, 11, 1, 0, 4, 8, 3, 8, 24, 17, 12, 4)\nconst huff_a72_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x50, 0x44, 0x14, 0x54, 0x41, 0x11, 0x05, 0x15, 0x51, 0x45, 0x55, 0x80, 0x90, 0x20, 0x64, 0x08, 0x19, 0x02, 0x06, 0x60, 0x84, 0x94, 0x24, 0x48, 0x18, 0x58, 0x81, 0x91, 0x21, 0x61, 0x85, 0x95, 0x25, 0x65, 0x09, 0x49, 0x59, 0x42, 0x12, 0x52, 0x46, 0x16, 0x56, 0xA0, 0xA4, 0x98, 0x28, 0x68, 0xA1, 0xA5, 0x99, 0x29, 0x69, 0x96, 0x26, 0x66, 0x0A, 0x4A, 0x1A, 0x5A, 0x88, 0xA8, 0x89, 0xA9, 0x82, 0x92, 0x22, 0x62, 0x86, 0xA6, 0x2A, 0x6A, 0xA2, 0x8A, 0x9A, 0xAA)\nconst huff_a73_cb = intArrayOf(2, 10, 1, 1, 5, 2, 8, 7, 13, 8, 4)\nconst huff_a73_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x39, 0x07, 0x0F, 0x09, 0x3F, 0x10, 0x30, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x17, 0x11, 0x0A, 0x32, 0x0D, 0x16, 0x3E, 0x37, 0x18, 0x28, 0x19, 0x29, 0x12, 0x2A, 0x03, 0x3B, 0x05, 0x15, 0x1E, 0x1F, 0x2F, 0x1A, 0x0B, 0x2B, 0x33, 0x35, 0x3D, 0x2E, 0x36, 0x13, 0x1B, 0x1D, 0x2D)\nconst huff_a74_cb = intArrayOf(1, 12, 1, 0, 0, 4, 0, 4, 5, 9, 30, 45, 21, 2)\nconst huff_a74_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x11, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x02, 0xF2, 0x0E, 0x21, 0xE1, 0x12, 0xE2, 0x1E, 0x2E, 0xFE, 0x2F, 0xEF, 0x30, 0x50, 0xB0, 0xC0, 0xD0, 0x31, 0xB1, 0xD1, 0x22, 0xD2, 0x03, 0x13, 0xE3, 0xF3, 0xF4, 0x05, 0xE5, 0xF5, 0x0B, 0x1B, 0x0C, 0x0D, 0x1D, 0x2D, 0xFD, 0x3E, 0xEE, 0x3F, 0x5F, 0xDF, 0x40, 0x41, 0x51, 0xC1, 0x32, 0x42, 0x52, 0xB2, 0xC2, 0x23, 0x33, 0xB3, 0xC3, 0xD3, 0x04, 0x14, 0x24, 0xD4, 0xE4, 0x15, 0x25, 0xC5, 0xD5, 0x2B, 0x3B, 0xEB, 0xFB, 0x1C, 0x2C, 0x3C, 0x5C, 0xEC, 0xFC, 0x3D, 0x5D, 0xDD, 0xED, 0x4E, 0x5E, 0xBE, 0xCE, 0xDE, 0x4F, 0xBF, 0xCF, 0x43, 0x53, 0x34, 0x54, 0xB4, 0xC4, 0x35, 0x45, 0x55, 0xB5, 0x4B, 0x5B, 0xCB, 0xDB, 0x4C, 0xBC, 0xCC, 0xDC, 0x4D, 0xBD, 0xCD, 0x44, 0xBB)\nconst huff_a75_cb = intArrayOf(2, 6, 1, 3, 3, 4, 4)\nconst huff_a75_xlat = intArrayOf(0, 1, 14, 15, 2, 3, 13, 4, 6, 10, 12, 5, 7, 9, 11)\nconst huff_a76_cb = intArrayOf(3, 12, 1, 3, 4, 8, 10, 36, 60, 78, 48, 8)\nconst huff_a76_xlat = intArrayOf(0x00, 0x10, 0x01, 0x11, 0x20, 0x21, 0x02, 0x12, 0x30, 0x31, 0x41, 0x22, 0x03, 0x13, 0x23, 0x14, 0x40, 0x51, 0x61, 0x32, 0x42, 0x33, 0x04, 0x24, 0x15, 0x16, 0x50, 0x60, 0xD0, 0x71, 0x81, 0xD1, 0xE1, 0xF1, 0x52, 0x62, 0x72, 0xD2, 0x43, 0x53, 0x63, 0xD3, 0x34, 0x44, 0x54, 0x05, 0x25, 0x35, 0x45, 0x06, 0x26, 0x36, 0x17, 0x27, 0x18, 0x0D, 0x1D, 0x2D, 0x3D, 0x1E, 0x2E, 0x1F, 0x70, 0x80, 0xE0, 0xF0, 0x91, 0xA1, 0xC1, 0x82, 0x92, 0xC2, 0xE2, 0xF2, 0x73, 0x83, 0x93, 0xE3, 0xF3, 0x64, 0x74, 0x84, 0xD4, 0xE4, 0xF4, 0x55, 0x65, 0xD5, 0xE5, 0xF5, 0x46, 0x56, 0x66, 0xD6, 0x07, 0x37, 0x47, 0x57, 0x08, 0x28, 0x38, 0x48, 0x19, 0x29, 0x39, 0x1A, 0x2A, 0x1B, 0x1C, 0x2C, 0x3C, 0x4D, 0x5D, 0x6D, 0x0E, 0x3E, 0x4E, 0x5E, 0x0F, 0x2F, 0x3F, 0x4F, 0x90, 0xA0, 0xB0, 0xC0, 0xB1, 0xA2, 0xB2, 0xA3, 0xB3, 0xC3, 0x94, 0xA4, 0xB4, 0xC4, 0x75, 0x85, 0x95, 0xA5, 0xC5, 0x76, 0x86, 0x96, 0xE6, 0xF6, 0x67, 0x77, 0x87, 0xD7, 0xE7, 0xF7, 0x58, 0x68, 0x78, 0x88, 0xD8, 0xE8, 0xF8, 0x09, 0x49, 0x59, 0x69, 0xD9, 0xE9, 0xF9, 0x0A, 0x3A, 0x4A, 0x5A, 0xDA, 0xEA, 0x0B, 0x2B, 0x3B, 0x4B, 0xDB, 0x0C, 0x4C, 0x5C, 0x6C, 0xDC, 0x7D, 0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0x6E, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0x5F, 0x6F, 0x7F, 0x8F, 0x9F, 0xAF, 0xB5, 0xA6, 0xB6, 0xC6, 0x97, 0xA7, 0xC7, 0x98, 0xA8, 0xB8, 0xC8, 0x79, 0x89, 0x99, 0xA9, 0xB9, 0xC9, 0x6A, 0x7A, 0x8A, 0x9A, 0xAA, 0xCA, 0xFA, 0x5B, 0x6B, 0x7B, 0x8B, 0xCB, 0xEB, 0xFB, 0x7C, 0x8C, 0x9C, 0xAC, 0xBC, 0xEC, 0xFC, 0xDD, 0xED, 0xFD, 0xCE, 0xDE, 0xEE, 0xFE, 0xBF, 0xCF, 0xDF, 0xB7, 0xBA, 0x9B, 0xAB, 0xBB, 0xCC, 0xEF, 0xFF)\nconst huff_b01_cb = intArrayOf(1, 12, 1, 0, 0, 2, 6, 0, 11, 13, 12, 24, 4, 8)\nconst huff_b01_xlat = intArrayOf(0x00, 0x01, 0x03, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x50, 0xD0, 0x70, 0xF0, 0x34, 0x1C, 0x05, 0x0D, 0x13, 0x07, 0x0F, 0x44, 0xC4, 0x14, 0x4C, 0xCC, 0x3C, 0x41, 0xC1, 0x11, 0x31, 0x43, 0xC3, 0x33, 0x54, 0x74, 0xDC, 0xFC, 0x71, 0x15, 0x4D, 0x1D, 0xD3, 0xC7, 0x37, 0x3F, 0xD4, 0xF4, 0x5C, 0x7C, 0x51, 0xD1, 0xF1, 0x45, 0xC5, 0x55, 0x35, 0xCD, 0xDD, 0x3D, 0x53, 0x73, 0xF3, 0x47, 0x17, 0x77, 0x4F, 0xCF, 0x1F, 0xFF, 0xF5, 0x7D, 0xD7, 0x5F, 0xD5, 0x75, 0x5D, 0xFD, 0x57, 0xF7, 0xDF, 0x7F)\nconst huff_b02_cb = intArrayOf(1, 12, 1, 0, 0, 4, 0, 8, 4, 9, 19, 13, 13, 10)\nconst huff_b02_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x50, 0x44, 0x14, 0x54, 0x41, 0x11, 0x05, 0x15, 0x80, 0x51, 0x45, 0x55, 0x90, 0x20, 0x60, 0x24, 0x08, 0x18, 0x09, 0x02, 0x06, 0x84, 0x94, 0x64, 0x48, 0x58, 0x81, 0x91, 0x21, 0x61, 0x95, 0x25, 0x65, 0x19, 0x59, 0x42, 0x12, 0x46, 0x16, 0x56, 0xA0, 0xA4, 0x28, 0x68, 0x85, 0xA5, 0x49, 0x29, 0x69, 0x52, 0x0A, 0x1A, 0x5A, 0x88, 0x98, 0xA1, 0x89, 0x99, 0xA9, 0x22, 0x62, 0x96, 0x26, 0x66, 0x4A, 0x6A, 0xA8, 0x82, 0x92, 0xA2, 0x86, 0xA6, 0x8A, 0x9A, 0x2A, 0xAA)\nconst huff_b03_cb = intArrayOf(1, 9, 1, 0, 0, 4, 0, 5, 12, 13, 14)\nconst huff_b03_xlat = intArrayOf(0x00, 0x08, 0x38, 0x01, 0x07, 0x30, 0x09, 0x39, 0x0F, 0x3F, 0x10, 0x18, 0x28, 0x31, 0x02, 0x3A, 0x03, 0x05, 0x06, 0x0E, 0x17, 0x37, 0x11, 0x19, 0x29, 0x0A, 0x32, 0x0B, 0x3B, 0x0D, 0x15, 0x3D, 0x3E, 0x1F, 0x2F, 0x12, 0x1A, 0x2A, 0x13, 0x1B, 0x2B, 0x33, 0x1D, 0x2D, 0x35, 0x16, 0x1E, 0x2E, 0x36)\nconst huff_b04_cb = intArrayOf(2, 11, 1, 0, 4, 4, 5, 9, 30, 45, 21, 2)\nconst huff_b04_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x11, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x02, 0xF2, 0x0E, 0x21, 0xE1, 0x12, 0xE2, 0x1E, 0x2E, 0xFE, 0x2F, 0xEF, 0x30, 0x50, 0xB0, 0xC0, 0xD0, 0x31, 0xB1, 0xD1, 0x22, 0xD2, 0x03, 0x13, 0xE3, 0xF3, 0xF4, 0x05, 0xE5, 0xF5, 0x0B, 0x1B, 0x0C, 0x0D, 0x1D, 0x2D, 0xFD, 0x3E, 0xEE, 0x3F, 0x5F, 0xDF, 0x40, 0x41, 0x51, 0xC1, 0x32, 0x42, 0x52, 0xB2, 0xC2, 0x23, 0x33, 0xB3, 0xC3, 0xD3, 0x04, 0x14, 0x24, 0xD4, 0xE4, 0x15, 0x25, 0xC5, 0xD5, 0x2B, 0x3B, 0xEB, 0xFB, 0x1C, 0x2C, 0x3C, 0x5C, 0xEC, 0xFC, 0x3D, 0x5D, 0xDD, 0xED, 0x4E, 0x5E, 0xBE, 0xCE, 0xDE, 0x4F, 0xBF, 0xCF, 0x43, 0x53, 0x34, 0x54, 0xB4, 0xC4, 0x35, 0x45, 0x55, 0xB5, 0x4B, 0x5B, 0xCB, 0xDB, 0x4C, 0xBC, 0xCC, 0xDC, 0x4D, 0xBD, 0xCD, 0x44, 0xBB)\nconst huff_b05_cb = intArrayOf(3, 11, 1, 4, 4, 4, 12, 30, 73, 75, 22)\nconst huff_b05_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x11, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x02, 0x0E, 0x30, 0xD0, 0x21, 0xE1, 0x12, 0xF2, 0x03, 0x0D, 0x1E, 0xFE, 0x2F, 0xEF, 0x40, 0x60, 0x70, 0x90, 0xA0, 0xC0, 0x31, 0xD1, 0x22, 0x32, 0xD2, 0xE2, 0x13, 0x23, 0xE3, 0xF3, 0x04, 0x06, 0x07, 0x09, 0x0A, 0x0C, 0x1D, 0x2D, 0xFD, 0x2E, 0x3E, 0xEE, 0x3F, 0xDF, 0x50, 0xB0, 0x41, 0x51, 0x61, 0x71, 0x91, 0xA1, 0xB1, 0xC1, 0x42, 0x62, 0x72, 0x92, 0xA2, 0xC2, 0x33, 0x93, 0xA3, 0xD3, 0x14, 0x24, 0xE4, 0xF4, 0x05, 0x15, 0xF5, 0x16, 0x26, 0xD6, 0xE6, 0xF6, 0x17, 0x27, 0xD7, 0xE7, 0xF7, 0x19, 0x29, 0x39, 0xE9, 0xF9, 0x1A, 0x2A, 0xEA, 0xFA, 0x0B, 0x1B, 0xFB, 0x1C, 0x2C, 0xEC, 0xFC, 0x3D, 0x7D, 0x9D, 0xDD, 0xED, 0x4E, 0x6E, 0x7E, 0x9E, 0xAE, 0xCE, 0xDE, 0x4F, 0x5F, 0x6F, 0x7F, 0x9F, 0xAF, 0xBF, 0xCF, 0x52, 0xB2, 0x43, 0x53, 0x63, 0x73, 0xB3, 0xC3, 0x34, 0x44, 0x64, 0x74, 0x94, 0xA4, 0xB4, 0xC4, 0xD4, 0x25, 0x35, 0x65, 0x75, 0x95, 0xA5, 0xD5, 0xE5, 0x36, 0x46, 0x56, 0x66, 0xA6, 0xB6, 0xC6, 0x37, 0x47, 0x57, 0xB7, 0xC7, 0x49, 0x59, 0x69, 0xB9, 0xC9, 0xD9, 0x3A, 0x4A, 0x5A, 0x6A, 0xAA, 0xBA, 0xCA, 0xDA, 0x2B, 0x3B, 0x6B, 0x7B, 0x9B, 0xAB, 0xDB, 0xEB, 0x3C, 0x4C, 0x6C, 0x7C, 0x9C, 0xAC, 0xCC, 0xDC, 0x4D, 0x5D, 0x6D, 0xAD, 0xBD, 0xCD, 0x5E, 0xBE, 0x54, 0x45, 0x55, 0xB5, 0xC5, 0x76, 0x96, 0x67, 0x77, 0x97, 0xA7, 0x79, 0x99, 0xA9, 0x7A, 0x9A, 0x4B, 0x5B, 0xBB, 0xCB, 0x5C, 0xBC)\nconst huff_b07_cb = intArrayOf(3, 9, 3, 2, 4, 8, 23, 13, 10)\nconst huff_b07_xlat = intArrayOf(0, 1, 63, 2, 62, 3, 4, 60, 61, 5, 6, 7, 8, 56, 57, 58, 59, 9, 10, 11, 12, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 51, 52, 53, 54, 55, 13, 14, 15, 16, 17, 18, 19, 45, 46, 47, 48, 49, 50, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44)\nconst huff_b12_cb = intArrayOf(3, 10, 1, 3, 12, 0, 30, 9, 18, 8)\nconst huff_b12_xlat = intArrayOf(0x00, 0x40, 0x04, 0x01, 0x10, 0x50, 0x44, 0x14, 0x54, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x80, 0x90, 0x20, 0x60, 0x84, 0x94, 0x24, 0x64, 0x08, 0x48, 0x18, 0x81, 0x91, 0x61, 0x85, 0x95, 0x25, 0x65, 0x09, 0x49, 0x19, 0x59, 0x02, 0x42, 0x12, 0x52, 0x06, 0x46, 0x16, 0x56, 0xA4, 0x58, 0x68, 0x21, 0xA5, 0x29, 0x69, 0x1A, 0x5A, 0xA0, 0x88, 0x98, 0x28, 0xA1, 0x89, 0x99, 0xA9, 0x92, 0x22, 0x62, 0x86, 0x96, 0x26, 0x66, 0x0A, 0x4A, 0x6A, 0xA8, 0x82, 0xA2, 0xA6, 0x8A, 0x9A, 0x2A, 0xAA)\nconst huff_b14_cb = intArrayOf(1, 12, 1, 0, 0, 4, 0, 3, 5, 16, 28, 34, 26, 4)\nconst huff_b14_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0xF1, 0x1F, 0xFF, 0x20, 0xE0, 0x11, 0x02, 0x0E, 0x30, 0x50, 0xB0, 0xD0, 0x21, 0xE1, 0x12, 0xF2, 0x03, 0x05, 0x0B, 0x0D, 0x1E, 0xFE, 0x2F, 0xEF, 0x40, 0xC0, 0x31, 0x51, 0xB1, 0xC1, 0xD1, 0x22, 0x52, 0xE2, 0x13, 0xF3, 0x04, 0x15, 0xF5, 0x1B, 0xEB, 0xFB, 0x0C, 0x1D, 0xFD, 0x2E, 0x5E, 0xEE, 0x3F, 0x5F, 0xBF, 0xDF, 0x41, 0x32, 0x42, 0xB2, 0xD2, 0x23, 0x53, 0xB3, 0xE3, 0x14, 0x24, 0xE4, 0xF4, 0x25, 0x35, 0xD5, 0xE5, 0x2B, 0x3B, 0xDB, 0x1C, 0x2C, 0xBC, 0xEC, 0xFC, 0x2D, 0xBD, 0xED, 0x3E, 0x4E, 0xBE, 0xDE, 0x4F, 0xCF, 0xC2, 0x33, 0x43, 0xC3, 0xD3, 0x34, 0x44, 0x54, 0xB4, 0xD4, 0x45, 0x55, 0xC5, 0x4B, 0xCB, 0x3C, 0x4C, 0x5C, 0xCC, 0xDC, 0x3D, 0x4D, 0x5D, 0xCD, 0xDD, 0xCE, 0xC4, 0xB5, 0x5B, 0xBB)\nconst huff_b16_cb = intArrayOf(4, 12, 4, 4, 9, 13, 37, 76, 72, 39, 2)\nconst huff_b16_xlat = intArrayOf(0x00, 0x10, 0x01, 0x11, 0x20, 0x21, 0x02, 0x12, 0x30, 0x31, 0x41, 0x22, 0x32, 0x03, 0x13, 0x23, 0x14, 0x40, 0x51, 0x61, 0x42, 0x52, 0x33, 0x43, 0x04, 0x24, 0x34, 0x15, 0x25, 0x16, 0x50, 0x60, 0x70, 0x71, 0x81, 0xD1, 0xE1, 0x62, 0x72, 0x82, 0xD2, 0x53, 0x63, 0x73, 0xD3, 0x44, 0x54, 0x05, 0x35, 0x45, 0x55, 0x06, 0x26, 0x36, 0x07, 0x17, 0x27, 0x37, 0x18, 0x28, 0x19, 0x1D, 0x2D, 0x3D, 0x1E, 0x2E, 0x1F, 0x80, 0x90, 0xD0, 0xE0, 0xF0, 0x91, 0xA1, 0xB1, 0xC1, 0xF1, 0x92, 0xA2, 0xB2, 0xC2, 0xE2, 0xF2, 0x83, 0x93, 0xA3, 0xC3, 0xE3, 0xF3, 0x64, 0x74, 0x84, 0x94, 0xD4, 0xE4, 0xF4, 0x65, 0x75, 0x85, 0xD5, 0xE5, 0x46, 0x56, 0x66, 0x76, 0xD6, 0xE6, 0x47, 0x57, 0x67, 0xD7, 0x08, 0x38, 0x48, 0x58, 0x09, 0x29, 0x39, 0x49, 0x0A, 0x1A, 0x2A, 0x3A, 0x1B, 0x2B, 0x0C, 0x1C, 0x2C, 0x3C, 0x0D, 0x4D, 0x5D, 0x6D, 0x7D, 0x0E, 0x3E, 0x4E, 0x5E, 0x6E, 0x0F, 0x2F, 0x3F, 0x4F, 0xA0, 0xB0, 0xC0, 0xB3, 0xA4, 0xB4, 0xC4, 0x95, 0xA5, 0xB5, 0xC5, 0xF5, 0x86, 0x96, 0xA6, 0xB6, 0xC6, 0xF6, 0x77, 0x87, 0x97, 0xA7, 0xC7, 0xE7, 0xF7, 0x68, 0x78, 0x88, 0x98, 0xD8, 0xE8, 0xF8, 0x59, 0x69, 0x79, 0x89, 0xD9, 0xE9, 0xF9, 0x4A, 0x5A, 0x6A, 0x7A, 0xDA, 0xEA, 0x0B, 0x3B, 0x4B, 0x5B, 0xDB, 0xEB, 0x4C, 0x5C, 0x6C, 0x7C, 0x8C, 0xDC, 0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0x5F, 0x6F, 0x7F, 0x8F, 0x9F, 0xB7, 0xA8, 0xB8, 0xC8, 0x99, 0xA9, 0xB9, 0xC9, 0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xFA, 0x6B, 0x7B, 0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0xFB, 0x9C, 0xAC, 0xBC, 0xCC, 0xEC, 0xFC, 0xDD, 0xED, 0xFD, 0xCE, 0xDE, 0xEE, 0xFE, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF)\nconst huff_b26_cb = intArrayOf(3, 12, 2, 2, 4, 5, 11, 26, 67, 78, 51, 10)\nconst huff_b26_xlat = intArrayOf(0x00, 0x01, 0x10, 0x11, 0x20, 0x21, 0x02, 0x12, 0x30, 0x31, 0x22, 0x03, 0x13, 0x40, 0x41, 0x51, 0x32, 0x42, 0x23, 0x33, 0x04, 0x14, 0x24, 0x15, 0x50, 0x61, 0x71, 0xD1, 0xE1, 0x52, 0x62, 0xD2, 0x43, 0x53, 0xD3, 0x34, 0x44, 0x05, 0x25, 0x35, 0x06, 0x16, 0x26, 0x17, 0x18, 0x1D, 0x2D, 0x3D, 0x1E, 0x2E, 0x60, 0x70, 0x80, 0xD0, 0xE0, 0xF0, 0x81, 0x91, 0xA1, 0xC1, 0xF1, 0x72, 0x82, 0x92, 0xC2, 0xE2, 0xF2, 0x63, 0x73, 0xE3, 0xF3, 0x54, 0x64, 0x74, 0xD4, 0xE4, 0xF4, 0x45, 0x55, 0x65, 0xD5, 0xE5, 0xF5, 0x36, 0x46, 0x56, 0xD6, 0xE6, 0x07, 0x27, 0x37, 0x47, 0xD7, 0x08, 0x28, 0x38, 0x19, 0x29, 0x1A, 0x1B, 0x1C, 0x2C, 0x0D, 0x4D, 0x5D, 0x6D, 0x7D, 0x0E, 0x3E, 0x4E, 0x5E, 0x6E, 0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x90, 0xA0, 0xC0, 0xB1, 0xA2, 0xB2, 0x83, 0x93, 0xA3, 0xB3, 0xC3, 0x84, 0x94, 0xA4, 0xC4, 0x75, 0x85, 0x95, 0xC5, 0x66, 0x76, 0x86, 0x96, 0xC6, 0xF6, 0x57, 0x67, 0x77, 0xE7, 0xF7, 0x48, 0x58, 0x68, 0x78, 0xD8, 0xE8, 0xF8, 0x09, 0x39, 0x49, 0x59, 0xD9, 0xE9, 0xF9, 0x0A, 0x2A, 0x3A, 0x4A, 0xDA, 0xEA, 0x0B, 0x2B, 0x3B, 0xDB, 0xEB, 0x0C, 0x3C, 0x4C, 0x5C, 0x6C, 0xDC, 0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0x7E, 0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0x5F, 0x6F, 0x7F, 0x8F, 0x9F, 0xAF, 0xB0, 0xB4, 0xA5, 0xB5, 0xA6, 0xB6, 0x87, 0x97, 0xA7, 0xB7, 0xC7, 0x88, 0x98, 0xA8, 0xC8, 0x69, 0x79, 0x89, 0x99, 0xA9, 0xC9, 0x5A, 0x6A, 0x7A, 0x9A, 0xCA, 0xFA, 0x4B, 0x5B, 0x6B, 0x7B, 0xCB, 0xFB, 0x7C, 0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xEC, 0xFC, 0xDD, 0xED, 0xFD, 0xDE, 0xEE, 0xFE, 0xBF, 0xCF, 0xDF, 0xEF, 0xB8, 0xB9, 0x8A, 0xAA, 0xBA, 0x8B, 0x9B, 0xAB, 0xBB, 0xFF)\nconst huff_b32_cb = intArrayOf(2, 11, 1, 0, 4, 6, 7, 10, 22, 11, 16, 4)\nconst huff_b32_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x50, 0x44, 0x14, 0x41, 0x11, 0x05, 0x80, 0x54, 0x51, 0x45, 0x15, 0x55, 0x02, 0x90, 0x20, 0x60, 0x84, 0x24, 0x08, 0x18, 0x09, 0x12, 0x06, 0xA0, 0x94, 0x64, 0x48, 0x58, 0x81, 0x91, 0x21, 0x61, 0x85, 0x95, 0x25, 0x65, 0x49, 0x19, 0x59, 0x42, 0x52, 0x46, 0x16, 0x56, 0x0A, 0xA4, 0x28, 0x68, 0xA1, 0xA5, 0x29, 0x69, 0x26, 0x4A, 0x1A, 0x5A, 0x88, 0x98, 0xA8, 0x89, 0x99, 0xA9, 0x82, 0x92, 0x22, 0x62, 0x86, 0x96, 0x66, 0x9A, 0x2A, 0x6A, 0xA2, 0xA6, 0x8A, 0xAA)\nconst huff_b33_cb = intArrayOf(2, 12, 1, 0, 0, 4, 11, 8, 28, 92, 97, 13, 2)\nconst huff_b33_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x50, 0x44, 0x14, 0x54, 0x41, 0x11, 0x51, 0x05, 0x45, 0x15, 0x55, 0x20, 0x95, 0x65, 0x49, 0x59, 0x52, 0x46, 0x16, 0x80, 0x90, 0x60, 0x84, 0x94, 0x24, 0x64, 0xA4, 0x08, 0x48, 0x18, 0x58, 0x81, 0x91, 0x21, 0x61, 0x85, 0x25, 0x09, 0x19, 0x69, 0x02, 0x42, 0x12, 0x06, 0x56, 0x5A, 0x57, 0xD0, 0x74, 0x68, 0x5C, 0xC1, 0xD5, 0xA5, 0xE5, 0x75, 0xB5, 0xF5, 0x99, 0xD9, 0xA9, 0xE9, 0x79, 0xB9, 0xF9, 0x1D, 0x5D, 0x9D, 0xDD, 0x6D, 0xAD, 0xED, 0x7D, 0xBD, 0xFD, 0x82, 0x92, 0xD2, 0x62, 0x96, 0xD6, 0x26, 0x66, 0xA6, 0xE6, 0x76, 0xB6, 0xF6, 0x0A, 0x4A, 0x1A, 0x9A, 0xDA, 0x2A, 0x6A, 0xAA, 0xEA, 0x7A, 0xBA, 0xFA, 0x5E, 0x9E, 0xDE, 0x6E, 0xAE, 0xEE, 0x7E, 0xBE, 0xFE, 0x03, 0x13, 0x53, 0x17, 0x97, 0xD7, 0x67, 0xA7, 0xE7, 0x77, 0xB7, 0xF7, 0x5B, 0x9B, 0xDB, 0x6B, 0xAB, 0xEB, 0x7B, 0xBB, 0xFB, 0x5F, 0x9F, 0xDF, 0x6F, 0xAF, 0xEF, 0x7F, 0xBF, 0xFF, 0xC0, 0xA0, 0xE0, 0x30, 0xC4, 0xD4, 0xE4, 0x34, 0xB4, 0xF4, 0x88, 0xC8, 0x98, 0xD8, 0x28, 0xA8, 0xE8, 0x38, 0x78, 0xB8, 0xF8, 0x0C, 0x4C, 0x1C, 0x9C, 0xDC, 0x6C, 0xAC, 0xEC, 0x7C, 0xBC, 0xFC, 0xD1, 0xA1, 0xE1, 0x31, 0x71, 0xB1, 0xF1, 0xC5, 0x35, 0x89, 0xC9, 0x29, 0x39, 0x0D, 0x4D, 0x8D, 0xCD, 0x2D, 0x3D, 0x22, 0xA2, 0xE2, 0x72, 0xB2, 0xF2, 0x86, 0xC6, 0x36, 0x8A, 0xCA, 0x3A, 0x0E, 0x4E, 0x8E, 0xCE, 0x1E, 0x2E, 0x3E, 0x43, 0x83, 0x93, 0xD3, 0x23, 0x63, 0xA3, 0xE3, 0x73, 0xB3, 0xF3, 0x07, 0x47, 0x87, 0xC7, 0x27, 0x37, 0x4B, 0x8B, 0xCB, 0x1B, 0x2B, 0x3B, 0x4F, 0x8F, 0xCF, 0x1F, 0x70, 0xB0, 0xF0, 0x8C, 0xCC, 0x2C, 0x3C, 0xC2, 0x32, 0xC3, 0x0F, 0x2F, 0x3F, 0x33, 0x0B)\nconst huff_b35_cb = intArrayOf(1, 12, 1, 0, 0, 0, 4, 6, 6, 14, 42, 63, 59, 30)\nconst huff_b35_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x11, 0xF1, 0x02, 0x0E, 0x1F, 0xFF, 0x20, 0xE0, 0x21, 0xF2, 0xFE, 0xEF, 0x30, 0xD0, 0xE1, 0x12, 0x22, 0xE2, 0x03, 0x0D, 0x1D, 0x1E, 0x2E, 0xEE, 0x2F, 0xDF, 0x40, 0x60, 0x70, 0x90, 0xA0, 0xB0, 0xC0, 0x31, 0x71, 0x91, 0xC1, 0xD1, 0x32, 0xD2, 0x13, 0xE3, 0xF3, 0x04, 0x05, 0x06, 0x07, 0x17, 0xF7, 0x09, 0x19, 0x0A, 0x1A, 0xFA, 0x0C, 0x1C, 0x2D, 0xED, 0xFD, 0x3E, 0x7E, 0xDE, 0x3F, 0x6F, 0x7F, 0x9F, 0xAF, 0xCF, 0x50, 0x41, 0x51, 0x61, 0xA1, 0xB1, 0x62, 0x72, 0x92, 0xA2, 0xC2, 0x23, 0x33, 0x63, 0x73, 0x93, 0xA3, 0xD3, 0x14, 0x24, 0x34, 0xD4, 0xE4, 0xF4, 0x15, 0xF5, 0x16, 0x26, 0xD6, 0xE6, 0xF6, 0x27, 0x37, 0x47, 0xE7, 0x29, 0x39, 0xC9, 0xD9, 0xE9, 0xF9, 0x2A, 0xEA, 0x0B, 0x1B, 0xFB, 0x2C, 0x7C, 0xEC, 0xFC, 0x3D, 0x4D, 0x6D, 0x7D, 0xDD, 0x4E, 0x5E, 0x6E, 0x9E, 0xAE, 0xCE, 0x4F, 0x5F, 0x42, 0x52, 0xB2, 0x43, 0xB3, 0xC3, 0x44, 0x64, 0x74, 0x94, 0xA4, 0x25, 0x35, 0x65, 0x75, 0x95, 0xA5, 0xE5, 0x36, 0x46, 0x66, 0x76, 0x96, 0xA6, 0xB6, 0xC6, 0x57, 0xA7, 0xB7, 0xC7, 0xD7, 0x59, 0xA9, 0xB9, 0x3A, 0x4A, 0x6A, 0xCA, 0xDA, 0x2B, 0x3B, 0x6B, 0x9B, 0xAB, 0xDB, 0xEB, 0x3C, 0x6C, 0x9C, 0xAC, 0xCC, 0xDC, 0x5D, 0x9D, 0xAD, 0xBD, 0xCD, 0xBE, 0xBF, 0x53, 0x54, 0xB4, 0xC4, 0x45, 0x55, 0xB5, 0xC5, 0xD5, 0x56, 0x67, 0x77, 0x97, 0x49, 0x69, 0x79, 0x99, 0x5A, 0x7A, 0x9A, 0xAA, 0xBA, 0x4B, 0x5B, 0x7B, 0xBB, 0xCB, 0x4C, 0x5C, 0xBC)\nconst huff_b37_cb = intArrayOf(1, 11, 1, 0, 2, 0, 2, 2, 6, 17, 14, 13, 6)\nconst huff_b37_xlat = intArrayOf(0, 1, 63, 2, 62, 3, 61, 4, 5, 6, 58, 59, 60, 7, 8, 9, 10, 25, 26, 27, 28, 29, 34, 35, 37, 38, 39, 55, 56, 57, 11, 13, 14, 15, 30, 31, 33, 36, 49, 50, 51, 52, 53, 54, 12, 16, 17, 18, 19, 21, 41, 43, 44, 45, 46, 47, 48, 20, 22, 23, 24, 40, 42)\nconst huff_b41_cb = intArrayOf(1, 12, 1, 0, 0, 1, 7, 0, 20, 4, 10, 24, 2, 12)\nconst huff_b41_xlat = intArrayOf(0x00, 0x01, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x03, 0x50, 0xD0, 0x70, 0xF0, 0xC4, 0x14, 0x34, 0x4C, 0x1C, 0x3C, 0xC1, 0x11, 0x31, 0x05, 0x0D, 0xC3, 0x13, 0x33, 0x07, 0x0F, 0x44, 0xCC, 0x41, 0x43, 0x54, 0x74, 0xDC, 0xFC, 0x71, 0x15, 0x4D, 0x1D, 0x37, 0x3F, 0xD4, 0xF4, 0x5C, 0x7C, 0x51, 0xD1, 0xF1, 0x45, 0xC5, 0x35, 0xCD, 0xDD, 0x3D, 0x53, 0xD3, 0x73, 0xF3, 0x47, 0xC7, 0x17, 0x77, 0x4F, 0xCF, 0x1F, 0x55, 0xFF, 0xD5, 0x75, 0xF5, 0x5D, 0x7D, 0xFD, 0x57, 0xD7, 0xF7, 0x5F, 0xDF, 0x7F)\nconst huff_b42_cb = intArrayOf(1, 9, 1, 0, 1, 3, 2, 3, 7, 4, 4)\nconst huff_b42_xlat = intArrayOf(0x00, 0x07, 0x08, 0x38, 0x01, 0x39, 0x0F, 0x10, 0x09, 0x3F, 0x30, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x17, 0x11, 0x0A, 0x3E, 0x37, 0x12, 0x32, 0x16, 0x36)\nconst huff_b43_cb = intArrayOf(2, 9, 1, 1, 3, 4, 9, 15, 12, 4)\nconst huff_b43_xlat = intArrayOf(0x00, 0x07, 0x08, 0x38, 0x01, 0x09, 0x39, 0x0F, 0x3F, 0x10, 0x30, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x17, 0x37, 0x18, 0x28, 0x11, 0x19, 0x29, 0x0A, 0x03, 0x0B, 0x3B, 0x05, 0x0D, 0x3D, 0x3E, 0x1F, 0x2F, 0x12, 0x1A, 0x2A, 0x32, 0x13, 0x33, 0x15, 0x35, 0x16, 0x1E, 0x2E, 0x36, 0x1B, 0x2B, 0x1D, 0x2D)\nconst huff_b47_cb = intArrayOf(2, 9, 1, 1, 3, 4, 6, 14, 22, 12)\nconst huff_b47_xlat = intArrayOf(0, 1, 2, 62, 63, 3, 4, 60, 61, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 26, 27, 37, 38, 52, 53, 54, 55, 56, 13, 14, 15, 16, 17, 18, 25, 28, 29, 30, 31, 33, 34, 35, 36, 39, 46, 47, 48, 49, 50, 51, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45)\nconst huff_b52_cb = intArrayOf(1, 9, 1, 0, 1, 3, 2, 3, 7, 4, 4)\nconst huff_b52_xlat = intArrayOf(0x00, 0x01, 0x08, 0x38, 0x07, 0x39, 0x0F, 0x30, 0x09, 0x3F, 0x10, 0x31, 0x02, 0x3A, 0x06, 0x0E, 0x17, 0x11, 0x0A, 0x3E, 0x37, 0x12, 0x32, 0x16, 0x36)\nconst huff_b53_cb = intArrayOf(1, 5, 1, 1, 1, 0, 4) // same as b63!!!\nconst huff_b53_xlat = intArrayOf(0, 7, 1, 2, 3, 5, 6)\nconst huff_b56_cb = intArrayOf(1, 9, 1, 0, 2, 0, 2, 4, 11, 9, 2)\nconst huff_b56_xlat = intArrayOf(0, 1, 31, 2, 30, 3, 4, 13, 29, 5, 6, 7, 14, 15, 17, 18, 19, 26, 27, 28, 8, 9, 12, 20, 21, 22, 23, 24, 25, 10, 11)\nconst huff_b62_cb = intArrayOf(1, 12, 1, 0, 0, 2, 3, 5, 12, 14, 18, 15, 9, 2)\nconst huff_b62_xlat = intArrayOf(0x00, 0x40, 0x01, 0x10, 0x04, 0x02, 0x80, 0x50, 0x90, 0x05, 0x06, 0x20, 0x60, 0x44, 0x14, 0x54, 0x24, 0x08, 0x18, 0x41, 0x11, 0x15, 0x09, 0xA0, 0x84, 0x94, 0x64, 0xA4, 0x28, 0x51, 0x45, 0x55, 0x19, 0x12, 0x16, 0x0A, 0x1A, 0x48, 0x58, 0x68, 0x81, 0x91, 0x21, 0x61, 0x85, 0x95, 0x25, 0x65, 0x49, 0x59, 0x29, 0x69, 0x42, 0x46, 0x56, 0x88, 0x98, 0xA8, 0xA1, 0xA5, 0x99, 0xA9, 0x52, 0x22, 0x26, 0x66, 0x4A, 0x5A, 0x2A, 0x6A, 0x89, 0x82, 0x92, 0x62, 0x86, 0x96, 0xA6, 0x8A, 0xAA, 0xA2, 0x9A)\nconst huff_b63_cb = intArrayOf(1, 5, 1, 1, 1, 0, 4)\nconst huff_b63_xlat = intArrayOf(0, 1, 7, 2, 3, 5, 6)\nconst huff_b64_cb = intArrayOf(1, 5, 1, 1, 1, 1, 2)\nconst huff_b64_xlat = intArrayOf(1, 0, 2, 5, 3, 4)\nconst huff_b65_cb = intArrayOf(1, 12, 1, 0, 0, 2, 2, 2, 6, 12, 34, 92, 54, 20)\nconst huff_b65_xlat = intArrayOf(0x00, 0xF0, 0x01, 0x10, 0x0F, 0x11, 0xF1, 0x20, 0xE0, 0x02, 0x0E, 0x1F, 0xFF, 0xD0, 0x21, 0xE1, 0x12, 0xF2, 0x07, 0x0A, 0x0D, 0x1E, 0xFE, 0x2F, 0xEF, 0x30, 0x70, 0x90, 0xA0, 0xC0, 0x71, 0x91, 0xC1, 0xD1, 0x32, 0x92, 0xE2, 0x03, 0x13, 0x63, 0x04, 0x06, 0xE6, 0xE7, 0xF7, 0x09, 0x19, 0x39, 0xFA, 0x0C, 0x1C, 0xDD, 0xED, 0xFD, 0x2E, 0x7E, 0x9E, 0x3F, 0x9F, 0x40, 0x50, 0x60, 0xB0, 0x31, 0x41, 0x61, 0xA1, 0xB1, 0x22, 0x42, 0x72, 0xA2, 0xB2, 0xC2, 0xD2, 0x23, 0x33, 0x73, 0xA3, 0xC3, 0xD3, 0xE3, 0xF3, 0x14, 0x24, 0x34, 0x44, 0x74, 0xD4, 0xE4, 0x05, 0x25, 0x45, 0x65, 0x95, 0xA5, 0x16, 0x26, 0x46, 0x76, 0xA6, 0xB6, 0xC6, 0xD6, 0xF6, 0x17, 0x27, 0x37, 0x47, 0x67, 0xA7, 0xD7, 0x29, 0x69, 0xB9, 0xD9, 0xE9, 0xF9, 0x1A, 0x2A, 0x3A, 0x9A, 0xCA, 0xDA, 0xEA, 0x0B, 0x1B, 0x3B, 0x6B, 0xEB, 0xFB, 0x2C, 0x6C, 0xEC, 0xFC, 0x1D, 0x2D, 0x4D, 0x6D, 0x9D, 0xAD, 0x3E, 0x4E, 0x6E, 0xAE, 0xCE, 0xEE, 0x4F, 0x5F, 0x6F, 0xDF, 0x51, 0x52, 0x62, 0x43, 0x93, 0xB3, 0x54, 0x94, 0xA4, 0xF4, 0x15, 0x75, 0xB5, 0xE5, 0xF5, 0x36, 0x56, 0x66, 0x96, 0x57, 0x77, 0x49, 0x59, 0xA9, 0xC9, 0x4A, 0x5A, 0x6A, 0x7A, 0xAA, 0xBA, 0x2B, 0x4B, 0x7B, 0x9B, 0xAB, 0xDB, 0x3C, 0x4C, 0x7C, 0x9C, 0xAC, 0xBC, 0xCC, 0x3D, 0x5D, 0x7D, 0xBD, 0xCD, 0x5E, 0xBE, 0xDE, 0xBF, 0xCF, 0x53, 0x64, 0xB4, 0xC4, 0x35, 0x55, 0xC5, 0xD5, 0x97, 0xB7, 0xC7, 0x79, 0x99, 0x5B, 0xBB, 0xCB, 0x5C, 0xDC, 0x7F, 0xAF)\nconst huff_b66_cb = intArrayOf(1, 12, 1, 0, 0, 3, 0, 3, 3, 10, 40, 85, 61, 50)\nconst huff_b66_xlat = intArrayOf(0x00, 0x10, 0x01, 0x11, 0x21, 0x02, 0x12, 0x20, 0x22, 0x13, 0x30, 0x31, 0x41, 0xD1, 0xE1, 0x32, 0x52, 0x03, 0x23, 0x2D, 0x40, 0x50, 0x60, 0x80, 0xD0, 0xE0, 0x51, 0x61, 0xF1, 0x42, 0x62, 0xD2, 0xE2, 0xF2, 0x33, 0x43, 0xC3, 0xD3, 0xE3, 0x04, 0x14, 0xD4, 0xF4, 0x25, 0x35, 0x16, 0x17, 0xF7, 0xD8, 0x1C, 0x3C, 0x0D, 0x1D, 0x3D, 0x5D, 0x0E, 0x1E, 0x2E, 0x7E, 0x2F, 0xC0, 0xF0, 0x71, 0x81, 0x91, 0xC1, 0x72, 0x82, 0x92, 0xB2, 0xC2, 0x53, 0x63, 0x73, 0x93, 0xA3, 0xF3, 0x24, 0x44, 0x64, 0x84, 0xA4, 0xB4, 0x05, 0x15, 0x95, 0xD5, 0x06, 0x26, 0x36, 0x46, 0x96, 0xD6, 0xE6, 0xF6, 0x07, 0x27, 0x37, 0xD7, 0xE7, 0x08, 0x18, 0x28, 0x38, 0xE8, 0xF8, 0x09, 0x19, 0x29, 0xE9, 0xF9, 0x0A, 0x1A, 0xCA, 0xDA, 0xEA, 0x0B, 0x1B, 0xDB, 0xEB, 0xFB, 0x2C, 0x4C, 0x5C, 0x7C, 0x8C, 0x4D, 0x6D, 0x8D, 0x9D, 0xFD, 0x3E, 0x5E, 0x6E, 0x8E, 0x9E, 0xEE, 0x0F, 0x1F, 0x3F, 0x4F, 0x5F, 0x6F, 0x7F, 0xCF, 0x70, 0xA1, 0xA2, 0x83, 0xB3, 0x34, 0x74, 0xC4, 0xE4, 0x55, 0x65, 0x85, 0xA5, 0xC5, 0xE5, 0xF5, 0x56, 0x66, 0x76, 0x86, 0xA6, 0xC6, 0x57, 0x67, 0x77, 0x97, 0xA7, 0x48, 0x88, 0x98, 0x49, 0x59, 0x79, 0x99, 0x3A, 0x4A, 0x8A, 0xBA, 0xFA, 0x2B, 0x7B, 0x0C, 0xAC, 0xBC, 0xCC, 0xEC, 0x7D, 0xAD, 0xBD, 0xDD, 0x4E, 0xBE, 0xCE, 0xFE, 0x8F, 0x9F, 0xAF, 0xBF, 0xDF, 0xEF, 0xFF, 0x90, 0xA0, 0xB0, 0xB1, 0x54, 0x94, 0x45, 0x75, 0xB5, 0xB6, 0x47, 0x87, 0xB7, 0xC7, 0x58, 0x68, 0x78, 0xA8, 0xB8, 0xC8, 0x39, 0x69, 0x89, 0xA9, 0xB9, 0xC9, 0xD9, 0x2A, 0x5A, 0x6A, 0x7A, 0x9A, 0xAA, 0x3B, 0x4B, 0x5B, 0x6B, 0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0x6C, 0x9C, 0xDC, 0xFC, 0xCD, 0xED, 0xAE, 0xDE)\nconst huff_b67_cb = intArrayOf(2, 9, 1, 2, 1, 4, 7, 10, 26, 12)\nconst huff_b67_xlat = intArrayOf(0, 1, 63, 62, 2, 3, 60, 61, 4, 5, 6, 7, 57, 58, 59, 8, 9, 10, 11, 12, 52, 53, 54, 55, 56, 13, 14, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 19, 20, 21, 22, 23, 24, 40, 41, 42, 43, 44, 45)\nconst huff_b71_cb = intArrayOf(1, 12, 1, 0, 0, 1, 7, 0, 19, 5, 13, 23, 0, 12)\nconst huff_b71_xlat = intArrayOf(0x00, 0x03, 0x40, 0xC0, 0x10, 0x30, 0x04, 0x0C, 0x01, 0x50, 0xD0, 0x70, 0xF0, 0xC4, 0x14, 0x34, 0x4C, 0x1C, 0x3C, 0xC1, 0x11, 0x31, 0x05, 0x0D, 0x13, 0x33, 0x07, 0x0F, 0x44, 0xCC, 0x41, 0x43, 0xC3, 0x54, 0x74, 0xDC, 0xFC, 0xF1, 0xC5, 0x15, 0x1D, 0x53, 0xC7, 0x37, 0x4F, 0x3F, 0xD4, 0xF4, 0x5C, 0x7C, 0x51, 0xD1, 0x71, 0x45, 0x55, 0x35, 0x4D, 0xCD, 0xDD, 0x3D, 0xD3, 0x73, 0xF3, 0x47, 0x17, 0x77, 0xCF, 0x1F, 0xFF, 0xD5, 0x75, 0xF5, 0x5D, 0x7D, 0xFD, 0x57, 0xD7, 0xF7, 0x5F, 0xDF, 0x7F)\nconst huff_b73_cb = intArrayOf(1, 11, 1, 0, 0, 0, 1, 4, 9, 4, 103, 110, 24)\nconst huff_b73_xlat = intArrayOf(0x00, 0x40, 0x10, 0x04, 0x01, 0x05, 0x50, 0x14, 0x54, 0x41, 0x11, 0x51, 0x45, 0x15, 0x55, 0x44, 0x95, 0x6A, 0x03, 0x80, 0xC0, 0x90, 0xD0, 0x94, 0xD4, 0x24, 0x64, 0x58, 0x91, 0xA1, 0x85, 0xD5, 0x25, 0x65, 0xA5, 0xE5, 0x75, 0xB5, 0xF5, 0x19, 0x59, 0x99, 0xD9, 0x69, 0xA9, 0xE9, 0x79, 0xB9, 0xF9, 0x4D, 0x5D, 0x9D, 0xDD, 0x6D, 0xAD, 0xED, 0x7D, 0xBD, 0xFD, 0x02, 0x42, 0x52, 0x06, 0x46, 0x16, 0x56, 0x96, 0xD6, 0x26, 0x66, 0xA6, 0xE6, 0x76, 0xB6, 0xF6, 0x1A, 0x5A, 0x9A, 0xDA, 0xAA, 0xEA, 0x7A, 0xBA, 0xFA, 0x5E, 0x9E, 0xDE, 0x6E, 0xAE, 0xEE, 0x7E, 0xBE, 0xFE, 0x07, 0x47, 0x57, 0x97, 0xD7, 0x67, 0xA7, 0xE7, 0x77, 0xB7, 0xF7, 0x5B, 0x9B, 0xDB, 0x6B, 0xAB, 0xEB, 0x7B, 0xBB, 0xFB, 0x5F, 0x9F, 0xDF, 0x6F, 0xAF, 0xEF, 0x7F, 0xBF, 0xFF, 0x20, 0x60, 0x70, 0xB0, 0xF0, 0x84, 0xC4, 0xA4, 0xE4, 0x74, 0xB4, 0xF4, 0x08, 0x88, 0x18, 0x98, 0xD8, 0x68, 0xA8, 0xE8, 0x78, 0xB8, 0xF8, 0x1C, 0x5C, 0x9C, 0xDC, 0x6C, 0xAC, 0xEC, 0x3C, 0x7C, 0xBC, 0xFC, 0x81, 0xD1, 0x21, 0x61, 0xE1, 0x71, 0xB1, 0xF1, 0xC5, 0x35, 0x09, 0x49, 0x89, 0xC9, 0x29, 0x39, 0x0D, 0x8D, 0xCD, 0x1D, 0x2D, 0x3D, 0x92, 0xD2, 0x22, 0x62, 0xA2, 0xE2, 0x72, 0xB2, 0xF2, 0x86, 0xC6, 0x36, 0x0A, 0x4A, 0x8A, 0xCA, 0x2A, 0x3A, 0x0E, 0x4E, 0x8E, 0xCE, 0x1E, 0x2E, 0x3E, 0x13, 0x53, 0x93, 0xD3, 0x63, 0xA3, 0xE3, 0x73, 0xB3, 0xF3, 0x87, 0xC7, 0x17, 0x27, 0x37, 0x0B, 0x4B, 0x8B, 0xCB, 0x1B, 0x2B, 0x3B, 0x0F, 0x4F, 0x8F, 0xCF, 0x1F, 0x2F, 0x3F, 0xA0, 0xE0, 0x30, 0x34, 0x48, 0xC8, 0x28, 0x38, 0x0C, 0x4C, 0x8C, 0xCC, 0x2C, 0xC1, 0x31, 0x82, 0xC2, 0x12, 0x32, 0x43, 0x83, 0xC3, 0x23, 0x33)\nconst huff_b74_cb = intArrayOf(1, 6, 1, 0, 2, 2, 2, 4)\nconst huff_b74_xlat = intArrayOf(0, 1, 15, 2, 14, 5, 13, 3, 4, 11, 12)\nconst huff_b75_cb = intArrayOf(2, 12, 1, 4, 0, 0, 0, 8, 11, 24, 53, 64, 60)\nconst huff_b75_xlat = intArrayOf(0x00, 0x10, 0xF0, 0x01, 0x0F, 0x20, 0xE0, 0x11, 0xF1, 0x02, 0x0E, 0x1F, 0xFF, 0xD0, 0x21, 0xE1, 0x12, 0xF2, 0x03, 0x0D, 0x1E, 0xFE, 0x2F, 0xEF, 0x30, 0x40, 0x60, 0x70, 0x90, 0xA0, 0xC0, 0x31, 0xD1, 0x22, 0xE2, 0x13, 0xF3, 0x04, 0x06, 0x07, 0x09, 0x0C, 0x1D, 0xFD, 0x2E, 0xEE, 0x3F, 0xDF, 0x50, 0xB0, 0x41, 0x61, 0x71, 0x91, 0xA1, 0xC1, 0x32, 0x62, 0x72, 0x92, 0xA2, 0xD2, 0x23, 0xD3, 0xE3, 0x14, 0xF4, 0x05, 0x16, 0x26, 0xE6, 0xF6, 0x17, 0x27, 0xE7, 0xF7, 0x19, 0x29, 0xF9, 0x0A, 0x1A, 0x2A, 0xFA, 0x0B, 0x1C, 0x2C, 0xFC, 0x2D, 0x3D, 0xED, 0x3E, 0x4E, 0x7E, 0x9E, 0xDE, 0x4F, 0x6F, 0x7F, 0x9F, 0xAF, 0xCF, 0x51, 0xB1, 0x42, 0x52, 0xB2, 0xC2, 0x33, 0x63, 0x73, 0x93, 0xA3, 0xB3, 0xC3, 0x24, 0x34, 0x74, 0xA4, 0xD4, 0xE4, 0x15, 0x25, 0x65, 0x95, 0xE5, 0xF5, 0x36, 0xD6, 0x37, 0x47, 0xC7, 0xD7, 0x39, 0x59, 0xB9, 0xC9, 0xD9, 0xE9, 0x3A, 0x6A, 0xDA, 0xEA, 0x1B, 0x2B, 0x9B, 0xAB, 0xEB, 0xFB, 0x6C, 0x7C, 0x9C, 0xAC, 0xEC, 0x4D, 0x6D, 0x7D, 0x9D, 0xAD, 0xBD, 0xDD, 0x5E, 0x6E, 0xAE, 0xCE, 0x5F, 0x43, 0x53, 0x44, 0x54, 0x64, 0x94, 0xB4, 0xC4, 0x35, 0x45, 0x55, 0x75, 0xA5, 0xB5, 0xC5, 0xD5, 0x46, 0x56, 0x66, 0x76, 0x96, 0xA6, 0xB6, 0xC6, 0x57, 0x67, 0x77, 0x97, 0xA7, 0xB7, 0x49, 0x69, 0x79, 0x99, 0xA9, 0x4A, 0x5A, 0x7A, 0x9A, 0xAA, 0xBA, 0xCA, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B, 0xBB, 0xCB, 0xDB, 0x3C, 0x4C, 0x5C, 0xBC, 0xCC, 0xDC, 0x5D, 0xCD, 0xBE, 0xBF)\nconst huff_b77_cb = intArrayOf(2, 11, 1, 0, 4, 6, 10, 12, 7, 15, 4, 4)\nconst huff_b77_xlat = intArrayOf(0, 1, 2, 62, 63, 3, 4, 5, 59, 60, 61, 6, 7, 8, 9, 10, 54, 55, 56, 57, 58, 11, 12, 13, 14, 15, 16, 47, 49, 50, 51, 52, 53, 17, 18, 19, 20, 45, 46, 48, 21, 22, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 44, 28, 29, 30, 35, 31, 33, 34, 36)\nconst atrac3p_spectra_tabs = arrayOf(\n    /* table set = A */\n    /* code table = 0 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_a01_cb, huff_a01_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a02_cb, huff_a02_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a03_cb, huff_a03_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a04_cb, huff_a04_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a05_cb, huff_a05_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 4, 0, -1, huff_a06_cb, huff_a06_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a07_cb, huff_a07_xlat), // wordlen = 7\n\n    /* code table = 1 */\n    new Atrac3pSpecCodeTab(4, 4, 2, 1, -1, huff_a11_cb, huff_a11_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a12_cb, huff_a12_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a13_cb, huff_a13_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a14_cb, huff_a14_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a15_cb, huff_a15_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_a16_cb, huff_a16_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a17_cb, huff_a17_xlat), // wordlen = 7\n\n    /* code table = 2 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_a21_cb, huff_a21_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a22_cb, huff_a22_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a23_cb, huff_a23_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a24_cb, null), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a25_cb, huff_a25_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_a26_cb, huff_a26_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a27_cb, huff_a27_xlat), // wordlen = 7\n\n    /* code table = 3 */\n    new Atrac3pSpecCodeTab(1, 2, 2, 1, -1, huff_a31_cb, huff_a31_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a32_cb, huff_a32_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a33_cb, huff_a33_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a34_cb, huff_a34_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a35_cb, huff_a35_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_a36_cb, huff_a36_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a37_cb, huff_a37_xlat), // wordlen = 7\n\n    /* code table = 4 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_a41_cb, huff_a41_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a42_cb, huff_a42_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 1, 3, 1, -1, huff_a43_cb, huff_a43_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a44_cb, huff_a44_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a45_cb, huff_a45_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_a46_cb, huff_a46_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a47_cb, huff_a47_xlat), // wordlen = 7\n\n    /* code table = 5 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_a51_cb, huff_a51_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a52_cb, huff_a52_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 1, 3, 1, -1, huff_a43_cb, huff_a53_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a54_cb, huff_a54_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_a55_cb, huff_a55_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 5, 1, -1, huff_a56_cb, huff_a56_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a57_cb, huff_a57_xlat), // wordlen = 7\n\n    /* code table = 6 */\n    new Atrac3pSpecCodeTab(2, 4, 2, 1, -1, huff_a61_cb, huff_a61_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a62_cb, huff_a62_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_a63_cb, huff_a63_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a64_cb, huff_a64_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 4, 1, -1, huff_a65_cb, huff_a65_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 5, 1, -1, huff_a66_cb, huff_a66_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_a67_cb, huff_a67_xlat), // wordlen = 7\n\n    /* code table = 7 */\n    new Atrac3pSpecCodeTab(1, 2, 1, 0, -1, huff_a71_cb, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(2, 4, 2, 0, -1, huff_a72_cb, huff_a72_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_a73_cb, huff_a73_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_a74_cb, huff_a74_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 4, 1, -1, huff_a75_cb, huff_a75_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(2, 2, 4, 0, -1, huff_a76_cb, huff_a76_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(4, 1, 6, 1, 6, null, null), // wordlen = 7\n\n    /* table set = B */\n    /* code table = 0 */\n    new Atrac3pSpecCodeTab(4, 4, 2, 1, -1, huff_b01_cb, huff_b01_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_b02_cb, huff_b02_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(4, 2, 3, 1, -1, huff_b03_cb, huff_b03_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_b04_cb, huff_b04_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_b05_cb, huff_b05_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 4, 0, 5, null, null), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_b07_cb, huff_b07_xlat), // wordlen = 7\n\n    /* code table = 1 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, 14, null, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_b12_cb, huff_b12_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, 9, null, null), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_b14_cb, huff_b14_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, 11, null, null), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_b16_cb, huff_b16_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, 6, null, null), // wordlen = 7\n\n    /* code table = 2 */\n    new Atrac3pSpecCodeTab(4, 4, 2, 1, 28, null, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(4, 4, 2, 0, 22, null, null), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, 2, null, null), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, 31, null, null), // wordlen = 4\n    new Atrac3pSpecCodeTab(2, 2, 4, 1, 60, null, null), // wordlen = 5\n    new Atrac3pSpecCodeTab(2, 2, 4, 0, -1, huff_b26_cb, huff_b26_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(4, 1, 6, 1, 6, null, null), // wordlen = 7\n\n    /* code table = 3 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, 35, null, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_b32_cb, huff_b32_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_b33_cb, huff_b33_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(2, 2, 4, 1, 59, null, null), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_b35_cb, huff_b35_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, 75, null, null), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_b37_cb, huff_b37_xlat), // wordlen = 7\n\n    /* code table = 4 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_b41_cb, huff_b41_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(4, 2, 3, 1, -1, huff_b42_cb, huff_b42_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_b43_cb, huff_b43_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(4, 2, 4, 1, 66, null, null), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, 32, null, null), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, 12, null, null), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_b47_cb, huff_b47_xlat), // wordlen = 7\n\n    /* code table = 5 */\n    new Atrac3pSpecCodeTab(2, 4, 2, 1, 42, null, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 2, 3, 1, -1, huff_b52_cb, huff_b52_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(4, 1, 3, 1, -1, huff_b53_cb, huff_b53_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, 17, null, null), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, 39, null, null), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 5, 1, -1, huff_b56_cb, huff_b56_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(2, 1, 6, 1, 62, null, null), // wordlen = 7\n\n    /* code table = 6 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, 28, null, null), // wordlen = 1\n    new Atrac3pSpecCodeTab(1, 4, 2, 0, -1, huff_b62_cb, huff_b62_xlat), // wordlen = 2\n    new Atrac3pSpecCodeTab(1, 1, 3, 1, -1, huff_b63_cb, huff_b63_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 3, 0, -1, huff_b64_cb, huff_b64_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(4, 2, 4, 1, -1, huff_b65_cb, huff_b65_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 2, 4, 0, -1, huff_b66_cb, huff_b66_xlat), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_b67_cb, huff_b67_xlat), // wordlen = 7\n\n    /* code table = 7 */\n    new Atrac3pSpecCodeTab(1, 4, 2, 1, -1, huff_b71_cb, huff_b71_xlat), // wordlen = 1\n    new Atrac3pSpecCodeTab(4, 4, 2, 0, 78, null, null), // wordlen = 2\n    new Atrac3pSpecCodeTab(4, 4, 2, 0, -1, huff_b73_cb, huff_b73_xlat), // wordlen = 3\n    new Atrac3pSpecCodeTab(1, 1, 4, 1, -1, huff_b74_cb, huff_b74_xlat), // wordlen = 4\n    new Atrac3pSpecCodeTab(1, 2, 4, 1, -1, huff_b75_cb, huff_b75_xlat), // wordlen = 5\n    new Atrac3pSpecCodeTab(1, 1, 5, 1, 47, null, null), // wordlen = 6\n    new Atrac3pSpecCodeTab(1, 1, 6, 1, -1, huff_b77_cb, huff_b77_xlat)// wordlen = 7\n)\n\n/*\n * Based on the FFmpeg version from Maxim Poliakovski.\n * All credits go to him.\n * C to Java conversion by gid15 for the jpcsp project.\n * Java to Kotlin for kpspemu\n */\nexport class Atrac3plusData1 {\n    static atrac3p_spectra_tabs = atrac3p_spectra_tabs\n}\n", "function intArrayOf(...values: number[]) { return new Int32Array(values) }\nfunction arrayOf<T>(...values: T[]) { return values }\n\n/*\n * Based on the FFmpeg version from Maxim Poliakovski.\n * All credits go to him.\n * C to Java conversion by gid15 for the jpcsp project.\n * Java to Kotlin for kpspemu\n */\nexport class Atrac3plusData2 {\n    /** VLC tables for wordlen  */\n    static atrac3p_wl_huff_code1 = intArrayOf(0, 2, 3)\n    static atrac3p_wl_huff_bits1 = intArrayOf(1, 2, 2)\n    static atrac3p_wl_huff_xlat1 = intArrayOf(0, 1, 7)\n    static atrac3p_wl_huff_code2 = intArrayOf(0, 4, 5, 6, 7)\n    static atrac3p_wl_huff_bits2 = intArrayOf(1, 3, 3, 3, 3)\n    static atrac3p_wl_huff_xlat2 = intArrayOf(0, 1, 2, 6, 7)\n    static atrac3p_wl_huff_code3 = intArrayOf(0, 4, 0xC, 0x1E, 0x1F, 0xD, 0xE, 5)\n    static atrac3p_wl_huff_bits3 = intArrayOf(1, 3, 4, 5, 5, 4, 4, 3)\n    static atrac3p_wl_huff_code4 = intArrayOf(0, 4, 0xC, 0xD, 0x1E, 0x1F, 0xE, 5)\n    static atrac3p_wl_huff_bits4 = intArrayOf(1, 3, 4, 4, 5, 5, 4, 3)\n    /** VLC tables for scale factor indexes  */\n    static atrac3p_sf_huff_code1 = intArrayOf(0, 2, 3, 4, 5, 0xC, 0xD, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0x1CE, 0x1CF, 0x1D0, 0x1D1, 0x1D2, 0x1D3, 0x1D4, 0x1D5, 0x1D6, 0x1D7, 0x1D8, 0x1D9, 0x1DA, 0x1DB, 0x1DC, 0x1DD, 0x1DE, 0x1DF, 0x1E0, 0x1E1, 0x1E2, 0x1E3, 0x1E4, 0x1E5, 0x1E6, 0x1E7, 0x1E8, 0x1E9, 0x1EA, 0x1EB, 0x1EC, 0x1ED, 0x1EE, 0x1EF, 0x1F0, 0x1F1, 0x1F2, 0x1F3, 0x1F4, 0x1F5, 0x1F6, 0x1F7, 0x1F8, 0x1F9, 0x1FA, 0x1FB, 0x1FC, 0x1FD, 0x1FE, 0x1FF)\n    static atrac3p_sf_huff_bits1 = intArrayOf(2, 3, 3, 3, 3, 4, 4, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9)\n    static atrac3p_sf_huff_xlat1 = intArrayOf(0, 1, 61, 62, 63, 2, 60, 3, 4, 5, 6, 57, 58, 59, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56)\n    static atrac3p_sf_huff_xlat2 = intArrayOf(0, 1, 2, 62, 63, 3, 61, 4, 5, 6, 57, 58, 59, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56)\n    static atrac3p_sf_huff_code2 = intArrayOf(0, 4, 0x18, 0x19, 0x70, 0x1CA, 0x1CB, 0x1CC, 0x1CD, 0x1CE, 0x1CF, 0x1D0, 0x1D1, 0x1D2, 0x1D3, 0x1D4, 0x1D5, 0x1D6, 0x1D7, 0x1D8, 0x1D9, 0x1DA, 0x1DB, 0x1DC, 0x1DD, 0x1DE, 0x1DF, 0x1E0, 0x1E1, 0x1E2, 0x1E3, 0x1E4, 0x1E5, 0x1E6, 0x1E7, 0x1E8, 0x1E9, 0x1EA, 0x1EB, 0x1EC, 0x1ED, 0x1EE, 0x1EF, 0x1F0, 0x1F1, 0x1F2, 0x1F3, 0x1F4, 0x1F5, 0x1F6, 0x1F7, 0x1F8, 0x1F9, 0x1FA, 0x1FB, 0x1FC, 0x1FD, 0x1FE, 0x1FF, 0xE4, 0x71, 0x1A, 0x1B, 5)\n    static atrac3p_sf_huff_bits2 = intArrayOf(1, 3, 5, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 5, 5, 3)\n    static atrac3p_sf_huff_code3 = intArrayOf(0, 2, 3, 0x18, 0x19, 0x70, 0x1CC, 0x1CD, 0x1CE, 0x1CF, 0x1D0, 0x1D1, 0x1D2, 0x1D3, 0x1D4, 0x1D5, 0x1D6, 0x1D7, 0x1D8, 0x1D9, 0x1DA, 0x1DB, 0x1DC, 0x1DD, 0x1DE, 0x1DF, 0x1E0, 0x1E1, 0x1E2, 0x1E3, 0x1E4, 0x1E5, 0x1E6, 0x1E7, 0x1E8, 0x1E9, 0x1EA, 0x1EB, 0x1EC, 0x1ED, 0x1EE, 0x1EF, 0x1F0, 0x1F1, 0x1F2, 0x1F3, 0x1F4, 0x1F5, 0x1F6, 0x1F7, 0x1F8, 0x1F9, 0x1FA, 0x1FB, 0x1FC, 0x1FD, 0x1FE, 0x1FF, 0x71, 0x72, 0x1A, 0x1B, 4, 5)\n    static atrac3p_sf_huff_bits3 = intArrayOf(2, 3, 3, 5, 5, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 5, 5, 3, 3)\n    static atrac3p_sf_huff_code4 = intArrayOf(0, 2, 3, 4, 5, 0xC, 0xD, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0, 0x3D, 0x3E, 0x3F)\n    static atrac3p_sf_huff_bits4 = intArrayOf(2, 3, 3, 3, 3, 4, 4, 6, 6, 6, 6, 6, 0, 6, 6, 6)\n    static atrac3p_sf_huff_xlat4 = intArrayOf(0, 1, 13, 14, 15, 2, 12, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    static atrac3p_sf_huff_xlat5 = intArrayOf(0, 1, 2, 14, 15, 3, 13, 4, 5, 6, 7, 9, 8, 10, 11, 12)\n    static atrac3p_sf_huff_code5 = intArrayOf(0, 4, 0xC, 0x1C, 0x78, 0x79, 0x7A, 0x7B, 0, 0x7C, 0x7D, 0x7E, 0x7F, 0x1D, 0xD, 5)\n    static atrac3p_sf_huff_bits5 = intArrayOf(1, 3, 4, 5, 7, 7, 7, 7, 0, 7, 7, 7, 7, 5, 4, 3)\n    static atrac3p_sf_huff_code6 = intArrayOf(0, 2, 3, 0xC, 0x1C, 0x3C, 0x7C, 0x7D, 0, 0x7E, 0x7F, 0x3D, 0x1D, 0xD, 4, 5)\n    static atrac3p_sf_huff_bits6 = intArrayOf(2, 3, 3, 4, 5, 6, 7, 7, 0, 7, 7, 6, 5, 4, 3, 3)\n    /** VLC tables for code table indexes  */\n    static atrac3p_ct_huff_code1 = intArrayOf(0, 2, 6, 7)\n    static atrac3p_ct_huff_bits1 = intArrayOf(1, 2, 3, 3)\n    static atrac3p_ct_huff_code2 = intArrayOf(0, 2, 3, 4, 5, 6, 0xE, 0xF)\n    static atrac3p_ct_huff_bits2 = intArrayOf(2, 3, 3, 3, 3, 3, 4, 4)\n    static atrac3p_ct_huff_xlat1 = intArrayOf(0, 1, 2, 3, 6, 7, 4, 5)\n    static atrac3p_ct_huff_code3 = intArrayOf(0, 4, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF)\n    static atrac3p_ct_huff_bits3 = intArrayOf(1, 3, 4, 4, 4, 4, 4, 4)\n    /* weights for quantized word lengths */\n    static atrac3p_wl_weights = arrayOf(intArrayOf(5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), intArrayOf(5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), intArrayOf(6, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0), intArrayOf(5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), intArrayOf(5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), intArrayOf(6, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n    /* weights for quantized scale factors\n     * sf_weights[i] = i / (tab_idx + 1)\n     * where tab_idx = [1,2] */\n    static atrac3p_sf_weights = arrayOf(intArrayOf(0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15), intArrayOf(0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10))\n    /** Ungroup table for word length segments.\n     * Numbers in this table tell which coeff belongs to which segment.  */\n    static atrac3p_qu_num_to_seg = intArrayOf(0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9)\n    /** Map quant unit number to subband number  */\n    static atrac3p_qu_to_subband = intArrayOf(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n    /** Map subband number to number of power compensation groups  */\n    static atrac3p_subband_to_num_powgrps = intArrayOf(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5)\n    /** 3D base shape tables. The values are grouped together as follows:\n     * [num_start_values = 8][num_shape_tables = 16][num_seg_coeffs = 9]\n     * For each of the 8 start values there are 16 different shapes each\n     * 9 coefficients long.  */\n    static atrac3p_wl_shapes = arrayOf(arrayOf(intArrayOf(0, 0, 0, 0, 0, 0, 0, -2, -1), intArrayOf(0, 0, 0, 0, 0, 0, 0, -5, -1), intArrayOf(0, 0, 0, -7, 0, 0, 0, 0, 0), intArrayOf(0, 0, 0, 0, 0, -7, 0, 0, 0), intArrayOf(0, 0, 0, 0, 0, 0, -5, 0, 0), intArrayOf(0, 0, 0, 0, -5, 0, 0, 0, 0), intArrayOf(-7, -7, 0, 0, 0, 0, 0, 0, 0), intArrayOf(0, -7, 0, 0, 0, 0, 0, 0, 0), intArrayOf(-2, -2, -5, 0, 0, 0, 0, 0, 0), intArrayOf(0, 0, 0, -2, -5, 0, 0, 0, 0), intArrayOf(0, 0, 0, 0, 0, -2, -5, 0, 0), intArrayOf(0, 0, 0, -5, 0, 0, 0, 0, 0), intArrayOf(0, -2, -7, -2, 0, 0, 0, 0, 0), intArrayOf(0, 0, 0, 0, -2, -5, 0, 0, 0), intArrayOf(0, 0, 0, -5, -5, 0, 0, 0, 0), intArrayOf(0, 0, 0, -5, -2, 0, 0, 0, 0)), arrayOf(intArrayOf(-1, -5, -3, -2, -1, -1, 0, 0, 0), intArrayOf(-2, -5, -3, -3, -2, -1, -1, 0, 0), intArrayOf(0, -1, -1, -1, 0, 0, 0, 0, 0), intArrayOf(-1, -3, 0, 0, 0, 0, 0, 0, 0), intArrayOf(-1, -2, 0, 0, 0, 0, 0, 0, 0), intArrayOf(-1, -3, -1, 0, 0, 0, 0, 1, 1), intArrayOf(-1, -5, -3, -3, -2, -1, 0, 0, 0), intArrayOf(-1, -1, -4, -2, -2, -1, -1, 0, 0), intArrayOf(-1, -1, -3, -2, -3, -1, -1, -1, 0), intArrayOf(-1, -4, -2, -3, -1, 0, 0, 0, 0), intArrayOf(0, -1, -2, -2, -1, -1, 0, 0, 0), intArrayOf(0, -2, -1, 0, 0, 0, 0, 0, 0), intArrayOf(-1, -1, 0, 0, 0, 0, 0, 0, 0), intArrayOf(-1, -1, -3, -2, -2, -1, -1, -1, 0), intArrayOf(0, 0, 0, 0, 0, 0, 0, 0, 0), intArrayOf(0, -1, -3, -2, -2, -1, -1, -1, 0)), arrayOf(intArrayOf(-1, -2, 0, 1, 1, 1, 1, 1, 1), intArrayOf(0, -1, 1, 1, 1, 1, 1, 1, 1), intArrayOf(0, -2, 1, 1, 1, 1, 1, 1, 1), intArrayOf(0, -2, 0, 1, 1, 1, 1, 1, 1), intArrayOf(-1, -1, 0, 1, 1, 1, 1, 1, 1), intArrayOf(0, 0, -1, 0, 1, 1, 1, 1, 1), intArrayOf(-1, -1, 1, 1, 1, 1, 1, 1, 1), intArrayOf(0, 0, -1, 1, 1, 1, 1, 1, 1), intArrayOf(0, -1, 0, 1, 1, 1, 1, 1, 1), intArrayOf(-1, -1, -1, 1, 1, 1, 1, 1, 1), intArrayOf(0, 0, 0, 0, 1, 1, 1, 1, 1), intArrayOf(0, 0, 0, 1, 1, 1, 1, 1, 1), intArrayOf(0, -1, -1, 1, 1, 1, 1, 1, 1), intArrayOf(0, 1, 0, 1, 1, 1, 1, 1, 1), intArrayOf(0, -3, -2, 1, 1, 1, 1, 2, 2), intArrayOf(-3, -5, -3, 2, 2, 2, 2, 2, 2)), arrayOf(intArrayOf(-1, -2, 0, 2, 2, 2, 2, 2, 2), intArrayOf(-1, -2, 0, 1, 2, 2, 2, 2, 2), intArrayOf(0, -2, 0, 2, 2, 2, 2, 2, 2), intArrayOf(-1, 0, 1, 2, 2, 2, 2, 2, 2), intArrayOf(0, 0, 1, 2, 2, 2, 2, 2, 2), intArrayOf(0, -2, 0, 1, 2, 2, 2, 2, 2), intArrayOf(0, -1, 1, 2, 2, 2, 2, 2, 2), intArrayOf(-1, -1, 0, 2, 2, 2, 2, 2, 2), intArrayOf(-1, -1, 0, 1, 2, 2, 2, 2, 2), intArrayOf(-1, -2, -1, 2, 2, 2, 2, 2, 2), intArrayOf(0, -1, 0, 2, 2, 2, 2, 2, 2), intArrayOf(1, 1, 0, 1, 2, 2, 2, 2, 2), intArrayOf(0, 1, 2, 2, 2, 2, 2, 2, 2), intArrayOf(1, 0, 0, 1, 2, 2, 2, 2, 2), intArrayOf(0, 0, 0, 1, 2, 2, 2, 2, 2), intArrayOf(-1, -1, -1, 1, 2, 2, 2, 2, 2)), arrayOf(intArrayOf(0, 1, 2, 3, 3, 3, 3, 3, 3), intArrayOf(1, 1, 2, 3, 3, 3, 3, 3, 3), intArrayOf(-1, 0, 1, 2, 3, 3, 3, 3, 3), intArrayOf(0, 0, 2, 3, 3, 3, 3, 3, 3), intArrayOf(-1, 0, 1, 3, 3, 3, 3, 3, 3), intArrayOf(0, 0, 1, 3, 3, 3, 3, 3, 3), intArrayOf(1, 2, 3, 3, 3, 3, 3, 3, 3), intArrayOf(1, 2, 2, 3, 3, 3, 3, 3, 3), intArrayOf(0, 1, 1, 3, 3, 3, 3, 3, 3), intArrayOf(0, 0, 1, 2, 3, 3, 3, 3, 3), intArrayOf(-1, 1, 2, 3, 3, 3, 3, 3, 3), intArrayOf(-1, 0, 2, 3, 3, 3, 3, 3, 3), intArrayOf(2, 2, 3, 3, 3, 3, 3, 3, 3), intArrayOf(1, 1, 3, 3, 3, 3, 3, 3, 3), intArrayOf(0, 2, 3, 3, 3, 3, 3, 3, 3), intArrayOf(0, 1, 1, 2, 3, 3, 3, 3, 3)), arrayOf(intArrayOf(0, 1, 2, 3, 4, 4, 4, 4, 4), intArrayOf(1, 2, 3, 4, 4, 4, 4, 4, 4), intArrayOf(0, 0, 2, 3, 4, 4, 4, 4, 4), intArrayOf(1, 1, 2, 4, 4, 4, 4, 4, 4), intArrayOf(0, 1, 2, 4, 4, 4, 4, 4, 4), intArrayOf(-1, 0, 1, 3, 4, 4, 4, 4, 4), intArrayOf(0, 0, 1, 3, 4, 4, 4, 4, 4), intArrayOf(1, 1, 2, 3, 4, 4, 4, 4, 4), intArrayOf(0, 1, 1, 3, 4, 4, 4, 4, 4), intArrayOf(2, 2, 3, 4, 4, 4, 4, 4, 4), intArrayOf(1, 1, 3, 4, 4, 4, 4, 4, 4), intArrayOf(1, 2, 2, 4, 4, 4, 4, 4, 4), intArrayOf(-1, 0, 2, 3, 4, 4, 4, 4, 4), intArrayOf(0, 1, 3, 4, 4, 4, 4, 4, 4), intArrayOf(1, 2, 2, 3, 4, 4, 4, 4, 4), intArrayOf(0, 2, 3, 4, 4, 4, 4, 4, 4)), arrayOf(intArrayOf(1, 2, 3, 4, 5, 5, 5, 5, 5), intArrayOf(0, 1, 2, 3, 4, 5, 5, 5, 5), intArrayOf(0, 1, 2, 3, 5, 5, 5, 5, 5), intArrayOf(1, 1, 3, 4, 5, 5, 5, 5, 5), intArrayOf(1, 1, 2, 4, 5, 5, 5, 5, 5), intArrayOf(1, 2, 2, 4, 5, 5, 5, 5, 5), intArrayOf(1, 1, 2, 3, 5, 5, 5, 5, 5), intArrayOf(2, 2, 3, 4, 5, 5, 5, 5, 5), intArrayOf(0, 1, 2, 4, 5, 5, 5, 5, 5), intArrayOf(2, 2, 3, 5, 5, 5, 5, 5, 5), intArrayOf(1, 2, 3, 5, 5, 5, 5, 5, 5), intArrayOf(0, 1, 3, 4, 5, 5, 5, 5, 5), intArrayOf(1, 2, 2, 3, 5, 5, 5, 5, 5), intArrayOf(2, 3, 4, 5, 5, 5, 5, 5, 5), intArrayOf(0, 2, 3, 4, 5, 5, 5, 5, 5), intArrayOf(1, 1, 1, 3, 4, 5, 5, 5, 5)), arrayOf(intArrayOf(1, 2, 3, 4, 5, 5, 5, 6, 6), intArrayOf(1, 2, 3, 4, 5, 6, 6, 6, 6), intArrayOf(2, 3, 4, 5, 6, 6, 6, 6, 6), intArrayOf(1, 2, 3, 4, 6, 6, 6, 6, 6), intArrayOf(2, 2, 3, 4, 5, 5, 5, 6, 6), intArrayOf(1, 2, 3, 4, 5, 5, 6, 6, 6), intArrayOf(2, 2, 3, 4, 6, 6, 6, 6, 6), intArrayOf(2, 2, 3, 4, 5, 6, 6, 6, 6), intArrayOf(2, 2, 4, 5, 6, 6, 6, 6, 6), intArrayOf(2, 2, 3, 5, 6, 6, 6, 6, 6), intArrayOf(1, 2, 3, 5, 6, 6, 6, 6, 6), intArrayOf(2, 3, 3, 5, 6, 6, 6, 6, 6), intArrayOf(1, 2, 4, 5, 6, 6, 6, 6, 6), intArrayOf(2, 2, 3, 4, 5, 5, 6, 6, 6), intArrayOf(2, 3, 3, 4, 6, 6, 6, 6, 6), intArrayOf(1, 3, 4, 5, 6, 6, 6, 6, 6)))\n    /** 2D base shape tables for scale factor coding.\n     * The values are grouped together as follows:\n     * [num_shape_tables = 64][num_seg_coeffs = 9]  */\n    static atrac3p_sf_shapes = arrayOf(intArrayOf(-3, -2, -1, 0, 3, 5, 6, 8, 40), intArrayOf(-3, -2, 0, 1, 7, 9, 11, 13, 20), intArrayOf(-1, 0, 0, 1, 6, 8, 10, 13, 41), intArrayOf(0, 0, 0, 2, 5, 5, 6, 8, 14), intArrayOf(0, 0, 0, 2, 6, 7, 8, 11, 47), intArrayOf(0, 0, 1, 2, 5, 7, 8, 10, 32), intArrayOf(0, 0, 1, 3, 8, 10, 12, 14, 47), intArrayOf(0, 0, 2, 4, 9, 10, 12, 14, 40), intArrayOf(0, 0, 3, 5, 9, 10, 12, 14, 22), intArrayOf(0, 1, 3, 5, 10, 14, 18, 22, 31), intArrayOf(0, 2, 5, 6, 10, 10, 10, 12, 46), intArrayOf(0, 2, 5, 7, 12, 14, 15, 18, 44), intArrayOf(1, 1, 4, 5, 7, 7, 8, 9, 15), intArrayOf(1, 2, 2, 2, 4, 5, 7, 9, 26), intArrayOf(1, 2, 2, 3, 6, 7, 7, 8, 47), intArrayOf(1, 2, 2, 3, 6, 8, 10, 13, 22), intArrayOf(1, 3, 4, 7, 13, 17, 21, 24, 41), intArrayOf(1, 4, 0, 4, 10, 12, 13, 14, 17), intArrayOf(2, 3, 3, 3, 6, 8, 10, 13, 48), intArrayOf(2, 3, 3, 4, 9, 12, 14, 17, 47), intArrayOf(2, 3, 3, 5, 10, 12, 14, 17, 25), intArrayOf(2, 3, 5, 7, 8, 9, 9, 9, 13), intArrayOf(2, 3, 5, 9, 16, 21, 25, 28, 33), intArrayOf(2, 4, 5, 8, 12, 14, 17, 19, 26), intArrayOf(2, 4, 6, 8, 12, 13, 13, 15, 20), intArrayOf(2, 4, 7, 12, 20, 26, 30, 32, 35), intArrayOf(3, 3, 5, 6, 12, 14, 16, 19, 34), intArrayOf(3, 4, 4, 5, 7, 9, 10, 11, 48), intArrayOf(3, 4, 5, 6, 8, 9, 10, 11, 16), intArrayOf(3, 5, 5, 5, 7, 9, 10, 13, 35), intArrayOf(3, 5, 5, 7, 10, 12, 13, 15, 49), intArrayOf(3, 5, 7, 7, 8, 7, 9, 12, 21), intArrayOf(3, 5, 7, 8, 12, 14, 15, 15, 24), intArrayOf(3, 5, 7, 10, 16, 21, 24, 27, 44), intArrayOf(3, 5, 8, 14, 21, 26, 28, 29, 42), intArrayOf(3, 6, 10, 13, 18, 19, 20, 22, 27), intArrayOf(3, 6, 11, 16, 24, 27, 28, 29, 31), intArrayOf(4, 5, 4, 3, 4, 6, 8, 11, 18), intArrayOf(4, 6, 5, 6, 9, 10, 12, 14, 20), intArrayOf(4, 6, 7, 6, 6, 6, 7, 8, 46), intArrayOf(4, 6, 7, 9, 13, 16, 18, 20, 48), intArrayOf(4, 6, 7, 9, 14, 17, 20, 23, 31), intArrayOf(4, 6, 9, 11, 14, 15, 15, 17, 21), intArrayOf(4, 8, 13, 20, 27, 32, 35, 36, 38), intArrayOf(5, 6, 6, 4, 5, 6, 7, 6, 6), intArrayOf(5, 7, 7, 8, 9, 9, 10, 12, 49), intArrayOf(5, 8, 9, 9, 10, 11, 12, 13, 42), intArrayOf(5, 8, 10, 12, 15, 16, 17, 19, 42), intArrayOf(5, 8, 12, 17, 26, 31, 32, 33, 44), intArrayOf(5, 9, 13, 16, 20, 22, 23, 23, 35), intArrayOf(6, 8, 8, 7, 6, 5, 6, 8, 15), intArrayOf(6, 8, 8, 8, 9, 10, 12, 16, 24), intArrayOf(6, 8, 8, 9, 10, 10, 11, 11, 13), intArrayOf(6, 8, 10, 13, 19, 21, 24, 26, 32), intArrayOf(6, 9, 10, 11, 13, 13, 14, 16, 49), intArrayOf(7, 9, 9, 10, 13, 14, 16, 19, 27), intArrayOf(7, 10, 12, 13, 16, 16, 17, 17, 27), intArrayOf(7, 10, 12, 14, 17, 19, 20, 22, 48), intArrayOf(8, 9, 10, 9, 10, 11, 11, 11, 19), intArrayOf(8, 11, 12, 12, 13, 13, 13, 13, 17), intArrayOf(8, 11, 13, 14, 16, 17, 19, 20, 27), intArrayOf(8, 12, 17, 22, 26, 28, 29, 30, 33), intArrayOf(10, 14, 16, 19, 21, 22, 22, 24, 28), intArrayOf(10, 15, 17, 18, 21, 22, 23, 25, 43))\n    static atrac3p_ct_restricted_to_full = arrayOf(arrayOf(intArrayOf(0, 5, 4, 1), intArrayOf(0, 1, 2, 3), intArrayOf(3, 0, 4, 2), intArrayOf(4, 0, 1, 2), intArrayOf(1, 0, 4, 3), intArrayOf(3, 0, 2, 1), intArrayOf(0, 3, 1, 2)), arrayOf(intArrayOf(4, 0, 1, 2), intArrayOf(0, 3, 2, 1), intArrayOf(0, 1, 2, 3), intArrayOf(0, 1, 2, 4), intArrayOf(0, 1, 2, 3), intArrayOf(1, 4, 2, 0), intArrayOf(0, 1, 2, 3)))\n    /* Huffman tables for gain control data. */\n    static atrac3p_huff_gain_npoints1_cb = intArrayOf(1, 7, 1, 1, 1, 1, 1, 1, 2)\n    static atrac3p_huff_gain_npoints2_xlat = intArrayOf(0, 1, 7, 2, 6, 3, 4, 5)\n    static atrac3p_huff_gain_lev1_cb = intArrayOf(1, 7, 1, 0, 2, 2, 1, 2, 8)\n    static atrac3p_huff_gain_lev1_xlat = intArrayOf(7, 5, 8, 6, 9, 4, 10, 11, 0, 1, 2, 3, 12, 13, 14, 15)\n    static atrac3p_huff_gain_lev2_cb = intArrayOf(1, 9, 1, 1, 1, 1, 1, 0, 2, 0, 8)\n    static atrac3p_huff_gain_lev2_xlat = intArrayOf(15, 14, 1, 13, 2, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11)\n    static atrac3p_huff_gain_lev3_cb = intArrayOf(1, 9, 1, 0, 3, 1, 1, 0, 2, 0, 8)\n    static atrac3p_huff_gain_lev3_xlat = intArrayOf(0, 1, 14, 15, 2, 13, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11)\n    static atrac3p_huff_gain_lev4_cb = intArrayOf(1, 9, 1, 1, 1, 1, 1, 0, 1, 2, 8)\n    static atrac3p_huff_gain_lev4_xlat = intArrayOf(0, 1, 15, 14, 2, 13, 3, 12, 4, 5, 6, 7, 8, 9, 10, 11)\n    static atrac3p_huff_gain_loc1_cb = intArrayOf(2, 8, 1, 2, 4, 4, 4, 0, 16)\n    static atrac3p_huff_gain_loc1_xlat = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)\n    static atrac3p_huff_gain_loc2_cb = intArrayOf(3, 8, 5, 3, 2, 3, 2, 16)\n    static atrac3p_huff_gain_loc2_xlat = intArrayOf(2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)\n    static atrac3p_huff_gain_loc3_cb = intArrayOf(2, 6, 1, 0, 2, 11, 18)\n    static atrac3p_huff_gain_loc3_xlat = intArrayOf(0, 1, 31, 2, 3, 4, 5, 6, 7, 26, 27, 28, 29, 30, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\n    static atrac3p_huff_gain_loc4_cb = intArrayOf(4, 6, 3, 23, 6)\n    static atrac3p_huff_gain_loc4_xlat = intArrayOf(0, 28, 29, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 5, 6, 7, 8, 9, 10)\n    static atrac3p_huff_gain_loc5_cb = intArrayOf(1, 7, 1, 0, 0, 3, 2, 6, 20)\n    static atrac3p_huff_gain_loc5_xlat = intArrayOf(0, 1, 2, 31, 3, 4, 5, 6, 7, 8, 29, 30, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28)\n\n    /* Huffman tables for GHA waves data. */\n    static atrac3p_huff_tonebands_cb = intArrayOf(1, 6, 1, 0, 1, 2, 4, 8)\n    static atrac3p_huff_numwavs1_cb = intArrayOf(1, 7, 1, 1, 1, 1, 1, 1, 2)\n    static atrac3p_huff_numwavs2_cb = intArrayOf(1, 6, 1, 1, 1, 1, 0, 4)\n    static atrac3p_huff_numwavs2_xlat = intArrayOf(0, 1, 7, 2, 3, 4, 5, 6)\n    static atrac3p_huff_wav_ampsf1_cb = intArrayOf(4, 8, 10, 8, 6, 0, 8)\n    static atrac3p_huff_wav_ampsf1_xlat = intArrayOf(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 5, 6, 7, 18, 19, 20, 21, 22, 4, 23, 24, 25, 26, 27, 0, 1, 2, 3, 28, 29, 30, 31)\n    static atrac3p_huff_wav_ampsf2_cb = intArrayOf(4, 8, 11, 5, 6, 6, 4)\n    static atrac3p_huff_wav_ampsf2_xlat = intArrayOf(18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 14, 15, 16, 17, 29, 9, 10, 11, 12, 13, 30, 4, 5, 6, 7, 8, 31, 0, 1, 2, 3)\n    static atrac3p_huff_wav_ampsf3_cb = intArrayOf(2, 8, 1, 3, 3, 1, 4, 4, 16)\n    static atrac3p_huff_wav_ampsf3_xlat = intArrayOf(0, 1, 2, 31, 3, 29, 30, 4, 5, 6, 27, 28, 7, 24, 25, 26, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n    static atrac3p_huff_freq_cb = intArrayOf(1, 11, 1, 0, 0, 2, 2, 0, 9, 9, 29, 104, 100)\n    static atrac3p_huff_freq_xlat = intArrayOf(0, 1, 255, 2, 254, 3, 4, 5, 6, 7, 8, 251, 252, 253, 9, 10, 11, 12, 246, 247, 248, 249, 250, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 243, 244, 245, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193)\n}\n", "import {BitReader, CodecUtils, MemoryUtils, VLC} from \"../MeUtils\";\nimport {Atrac3plusDsp} from \"./Atrac3plusDsp\";\nimport {AtracGainInfo, Channel, ChannelUnitContext, Context, WavesData} from \"./Atrac3PlusDtos\";\nimport {logger} from \"../../global/utils\";\nimport {Atrac3plusData1, Atrac3pSpecCodeTab} from \"./Atrac3plusData1\";\nimport {ArrayUtils, BitUtils} from \"../../global/math\";\nimport {Atrac3plusData2} from \"./Atrac3plusData2\";\nimport {Atrac3plusConstants} from \"./Atrac3plusConstants\";\n\nfunction intArrayOf(...values: number[]) { return new Int32Array(values) }\nfunction arrayOf<T>(...values: T[]) { return values }\n\ntype Int = number\n\nconst log = logger.named(\"Atrac3plus.ChannelUnit\")\n\n/*\n* Based on the FFmpeg version from Maxim Poliakovski.\n* All credits go to him.\n* C to Java conversion by gid15 for the jpcsp project.\n* Java to Kotlin for kpspemu\n*/\n// noinspection JSMethodCanBeStatic\nexport class ChannelUnit {\n\tctx = new ChannelUnitContext()\n\t// @ts-ignore\n    private br: BitReader\n\tprivate dsp?: Atrac3plusDsp = undefined\n\tprivate numChannels: Int = 0\n\n\t/**\n\t * Decode number of code table values.\n\t *\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tget numCtValues(): Int {\n        if (!this.br.readBool()) {\n            return this.ctx.usedQuantUnits\n        }\n\n        const numCodedVals = this.br.read(5)\n        if (numCodedVals > this.ctx.usedQuantUnits) {\n            log.error(\"Invalid number of code table indexes: %d\".format(numCodedVals))\n            return Atrac3plusConstants.AT3P_ERROR\n        }\n        return numCodedVals\n    }\n\n\tsetBitReader(br: BitReader) {\n\t\tthis.br = br\n\t}\n\n\tsetDsp(dsp: Atrac3plusDsp) {\n\t\tthis.dsp = dsp\n\t}\n\n\tsetNumChannels(numChannels: Int) {\n\t\tthis.numChannels = numChannels\n\t}\n\n\tdecode(): Int {\n        let ret: Int;\n\n        this.ctx.numQuantUnits = this.br.read(5) + 1\n\t\tif (this.ctx.numQuantUnits > 28 && this.ctx.numQuantUnits < 32) {\n\t\t\tlog.error(\"Invalid number of quantization units: %d\".format(this.ctx.numQuantUnits))\n\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t}\n\n        this.ctx.muteFlag = this.br.readBool()\n\n\t\tret = this.decodeQuantWordlen()\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n        this.ctx.numSubbands = Atrac3plusData2.atrac3p_qu_to_subband[this.ctx.numQuantUnits - 1] + 1\n        this.ctx.numCodedSubbands = (this.ctx.usedQuantUnits > 0) ? Atrac3plusData2.atrac3p_qu_to_subband[this.ctx.usedQuantUnits - 1] + 1 : 0\n\n\t\tret = this.decodeScaleFactors()\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n\t\tret = this.decodeCodeTableIndexes()\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n        this.decodeSpectrum()\n\n\t\tif (this.numChannels == 2) {\n            this.getSubbandFlags(this.ctx.swapChannels, this.ctx.numCodedSubbands)\n            this.getSubbandFlags(this.ctx.negateCoeffs, this.ctx.numCodedSubbands)\n\t\t}\n\n        this.decodeWindowShape()\n\n\t\tret = this.decodeGaincData()\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n\t\tret = this.decodeTonesInfo()\n\t\tif (ret < 0) {\n\t\t\treturn ret\n\t\t}\n\n        this.ctx.noisePresent = this.br.readBool()\n\t\tif (this.ctx.noisePresent) {\n            this.ctx.noiseLevelIndex = this.br.read(4)\n            this.ctx.noiseTableIndex = this.br.read(4)\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode number of coded quantization units.\n\t */\n\tprivate numCodedUnits(chan: Channel): Int {\n\t\tchan.fillMode = this.br.read(2)\n\t\tif (chan.fillMode == 0) {\n\t\t\tchan.numCodedVals = this.ctx.numQuantUnits\n\t\t} else {\n\t\t\tchan.numCodedVals = this.br.read(5)\n\t\t\tif (chan.numCodedVals > this.ctx.numQuantUnits) {\n\t\t\t\tlog.error(\"Invalid number of transmitted units\")\n\t\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t\t}\n\n\t\t\tif (chan.fillMode == 3) {\n\t\t\t\tchan.splitPoint = this.br.read(2) + (chan.chNum << 1) + 1\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\tprivate getDelta(deltaBits: Int): Int {\n\t\treturn (deltaBits <= 0) ? 0 : this.br.read(deltaBits)\n\t}\n\n\t/**\n\t * Unpack vector quantization tables.\n\t *\n\t * @param startVal    start value for the unpacked table\n\t * @param shapeVec    ptr to table to unpack\n\t * @param dst          ptr to output array\n\t * @param numValues   number of values to unpack\n\t */\n\tprivate unpackVqShape(startVal: Int, shapeVec: Int32Array, dst: Int32Array, numValues: Int) {\n\t\tif (numValues > 0) {\n\t\t\tdst[0] = startVal\n\t\t\tdst[1] = startVal\n\t\t\tdst[2] = startVal\n            for (let i = 3; i < numValues; i++) {\n\t\t\t\tdst[i] = startVal - shapeVec[Atrac3plusData2.atrac3p_qu_num_to_seg[i] - 1]\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate unpackSfVqShape(dst: Int32Array, numValues: Int) {\n\t\tconst startVal = this.br.read(6)\n        this.unpackVqShape(startVal, Atrac3plusData2.atrac3p_sf_shapes[this.br.read(6)], dst, numValues)\n\t}\n\n\t/**\n\t * Add weighting coefficients to the decoded word-length information.\n\t *\n\t * @param chan          ptr to the channel parameters\n\t * @param weightIdx     index of the table of weights\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate addWordlenWeights(chan: Channel, weightIdx: Int): Int {\n\t\tconst weigthsTab = Atrac3plusData2.atrac3p_wl_weights[chan.chNum * 3 + weightIdx - 1]\n\n        for (let i = 0; i < this.ctx.numQuantUnits; i++) {\n\t\t\tchan.quWordlen[i] += weigthsTab[i]\n\t\t\tif (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) {\n\t\t\t\tlog.error(\"WL index out of range pos=%d, val=%d\".format(i, chan.quWordlen[i]))\n\t\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode word length for each quantization unit of a channel.\n\t *\n\t * @param     chNum        channel to process\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeChannelWordlen(chNum: Int): Int {\n\t\tlet ret: Int\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n        let weightIdx = 0;\n\n        chan.fillMode = 0\n\n\t\tswitch (this.br.read(2)) {\n\t\t// switch according to coding mode\n            case 0: {// coded using constant number of bits\n                for (let i = 0; i < this.ctx.numQuantUnits; i++) {\n                    chan.quWordlen[i] = this.br.read(3)\n                }\n                break\n            }\n            case 1: {\n                if (chNum > 0) {\n                    ret = this.numCodedUnits(chan)\n                    if (ret < 0) {\n                        return ret\n                    }\n\n                    if (chan.numCodedVals > 0) {\n                        const vlcTab = ChannelUnit.wl_vlc_tabs[this.br.read(2)]\n\n                        for (let i = 0; i < chan.numCodedVals; i++) {\n                            const delta = vlcTab.getVLC2(this.br)\n                            chan.quWordlen[i] = (refChan.quWordlen[i] + delta) & 7\n                        }\n                    }\n                } else {\n                    weightIdx = this.br.read(2)\n                    ret = this.numCodedUnits(chan)\n                    if (ret < 0) {\n                        return ret\n                    }\n\n                    if (chan.numCodedVals > 0) {\n                        const pos = this.br.read(5)\n                        if (pos > chan.numCodedVals) {\n                            log.error(\"WL mode 1: invalid position %d\".format(pos))\n                            return Atrac3plusConstants.AT3P_ERROR\n                        }\n\n                        const deltaBits = this.br.read(2)\n                        const minVal = this.br.read(3)\n\n                        for (let i = 0; i < pos; i++) {\n                            chan.quWordlen[i] = this.br.read(3)\n                        }\n\n                        for (let i = pos; i < chan.numCodedVals; i++) {\n                            chan.quWordlen[i] = (minVal + this.getDelta(deltaBits)) & 7\n                        }\n                    }\n                }\n                break;\n\t\t\t}\n            case 2: {\n\t\t\t\tret = this.numCodedUnits(chan)\n\t\t\t\tif (ret < 0) {\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\n\t\t\t\tif (chNum > 0 && chan.numCodedVals > 0) {\n\t\t\t\t\tconst vlcTab = ChannelUnit.wl_vlc_tabs[this.br.read(2)]!!\n                    let delta = vlcTab.getVLC2(this.br);\n                    chan.quWordlen[0] = (refChan.quWordlen[0] + delta) & 7\n\n\t\t\t\t\tfor (let i = 1; i < chan.numCodedVals; i++) {\n\t\t\t\t\t\tconst diff = refChan.quWordlen[i] - refChan.quWordlen[i - 1]\n\t\t\t\t\t\tdelta = vlcTab.getVLC2(this.br)\n\t\t\t\t\t\tchan.quWordlen[i] = (chan.quWordlen[i - 1] + diff + delta) & 7\n\t\t\t\t\t}\n\t\t\t\t} else if (chan.numCodedVals > 0) {\n\t\t\t\t\tconst flag = this.br.readBool()\n\t\t\t\t\tconst vlcTab = ChannelUnit.wl_vlc_tabs[this.br.read(1)]!!\n\n\t\t\t\t\tconst startVal = this.br.read(3)\n\t\t\t\t\tthis.unpackVqShape(startVal, Atrac3plusData2.atrac3p_wl_shapes[startVal][this.br.read(4)], chan.quWordlen, chan.numCodedVals)\n\n\t\t\t\t\tif (!flag) {\n\t\t\t\t\t\tfor (let i = 0; i < chan.numCodedVals; i++) {\n\t\t\t\t\t\t\tconst delta = vlcTab.getVLC2(this.br)\n\t\t\t\t\t\t\tchan.quWordlen[i] = (chan.quWordlen[i] + delta) & 7\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n                        let i: Int;\n                        i = 0\n\t\t\t\t\t\twhile (i < (chan.numCodedVals & (-2))) {\n\t\t\t\t\t\t\tif (!this.br.readBool()) {\n\t\t\t\t\t\t\t\tchan.quWordlen[i] = (chan.quWordlen[i] + vlcTab.getVLC2(this.br)) & 7\n\t\t\t\t\t\t\t\tchan.quWordlen[i + 1] = (chan.quWordlen[i + 1] + vlcTab.getVLC2(this.br)) & 7\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti += 2\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((chan.numCodedVals & 1) != 0) {\n\t\t\t\t\t\t\tchan.quWordlen[i] = (chan.quWordlen[i] + vlcTab.getVLC2(this.br)) & 7\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n            case 3: {\n\t\t\t\tweightIdx = this.br.read(2)\n\t\t\t\tret = this.numCodedUnits(chan)\n\t\t\t\tif (ret < 0) {\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\n\t\t\t\tif (chan.numCodedVals > 0) {\n\t\t\t\t\tconst vlcTab = ChannelUnit.wl_vlc_tabs[this.br.read(2)]!!\n\n\t\t\t\t\t// first coefficient is coded directly\n\t\t\t\t\tchan.quWordlen[0] = this.br.read(3)\n\n\t\t\t\t\tfor (let i = 1; i < chan.numCodedVals; i++) {\n\t\t\t\t\t\tconst delta = vlcTab.getVLC2(this.br)\n\t\t\t\t\t\tchan.quWordlen[i] = (chan.quWordlen[i - 1] + delta) & 7\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (chan.fillMode == 2) {\n\t\t\tfor (let i = chan.numCodedVals; i < this.ctx.numQuantUnits; i++) {\n\t\t\t\tchan.quWordlen[i] = (chNum > 0) ? this.br.read1() : 1\n\t\t\t}\n\t\t} else if (chan.fillMode == 3) {\n\t\t\tconst pos = (chNum > 0) ? chan.numCodedVals + chan.splitPoint : this.ctx.numQuantUnits - chan.splitPoint\n\t\t\tfor (let i = chan.numCodedVals; i < pos; i++) {\n\t\t\t\tchan.quWordlen[i] = 1\n\t\t\t}\n\t\t}\n\n\t\treturn (weightIdx != 0) ? this.addWordlenWeights(chan, weightIdx) : 0\n\n\t}\n\n\t/**\n\t * Subtract weighting coefficients from decoded scalefactors.\n\t *\n\t * @param chan          ptr to the channel parameters\n\t * @param wtabIdx      index of table of weights\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate substractSfWeights(chan: Channel, wtabIdx: Int): Int {\n\t\tconst weigthsTab = Atrac3plusData2.atrac3p_sf_weights[wtabIdx - 1]\n\n\t\tfor (let i = 0; i < this.ctx.usedQuantUnits; i++) {\n\t\t\tchan.quSfIdx[i] -= weigthsTab[i]\n\t\t\tif (chan.quSfIdx[i] < 0 || chan.quSfIdx[i] > 63) {\n\t\t\t\tlog.error(\"SF index out of range pos=%d, val=%d\".format(i, chan.quSfIdx[i]))\n\t\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode scale factor indexes for each quant unit of a channel.\n\t *\n\t * @param     chNum        channel to process\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeChannelSfIdx(chNum: Int): Int {\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n        let weightIdx = 0;\n\n        chan.fillMode = 0\n\n\t\tswitch (this.br.read(2)) {\n\t\t// switch according to coding mode\n            case 0: { // coded using constant number of bits\n                for (let i = 0; i < this.ctx.usedQuantUnits; i++) {\n                    chan.quSfIdx[i] = this.br.read(6)\n                }\n                break;\n            }\n            case 1: {\n                if (chNum > 0) {\n                    const vlcTab = ChannelUnit.sf_vlc_tabs[this.br.read(2)]!!\n    \n                    for (let i = 0; i < this.ctx.usedQuantUnits; i++) {\n                        const delta = vlcTab.getVLC2(this.br)\n                        chan.quSfIdx[i] = (refChan.quSfIdx[i] + delta) & 0x3F\n                    }\n                } else {\n                    weightIdx = this.br.read(2)\n                    if (weightIdx == 3) {\n                        this.unpackSfVqShape(chan.quSfIdx, this.ctx.usedQuantUnits)\n    \n                        const numLongVals = this.br.read(5)\n                        const deltaBits = this.br.read(2)\n                        const minVal = this.br.read(4) - 7\n    \n                        for (let i = 0; i < numLongVals; i++) {\n                            chan.quSfIdx[i] = (chan.quSfIdx[i] + this.br.read(4) - 7) & 0x3F\n                        }\n    \n                        // All others are: minVal + delta\n                        for (let i = numLongVals; i < this.ctx.usedQuantUnits; i++) {\n                            chan.quSfIdx[i] = (chan.quSfIdx[i] + minVal + this.getDelta(deltaBits)) & 0x3F\n                        }\n                    } else {\n                        const numLongVals = this.br.read(5)\n                        const deltaBits = this.br.read(3)\n                        const minVal = this.br.read(6)\n                        if (numLongVals > this.ctx.usedQuantUnits || deltaBits == 7) {\n                            log.error(\"SF mode 1: invalid parameters\".format())\n                            return Atrac3plusConstants.AT3P_ERROR\n                        }\n    \n                        // Read full-precision SF indexes\n                        for (let i = 0; i < numLongVals; i++) {\n                            chan.quSfIdx[i] = this.br.read(6)\n                        }\n    \n                        // All others are: minVal + delta\n                        for (let i = numLongVals; i < this.ctx.usedQuantUnits; i++) {\n                            chan.quSfIdx[i] = (minVal + this.getDelta(deltaBits)) & 0x3F\n                        }\n                    }\n                }\n                break;\n\t\t\t}\n            case 2: {\n                if (chNum > 0) {\n                    const vlcTab = ChannelUnit.sf_vlc_tabs[this.br.read(2)]!!\n\n                    let delta = vlcTab.getVLC2(this.br);\n                    chan.quSfIdx[0] = (refChan.quSfIdx[0] + delta) & 0x3F\n    \n                    for (let i = 1; i < this.ctx.usedQuantUnits; i++) {\n                        const diff = refChan.quSfIdx[i] - refChan.quSfIdx[i - 1]\n                        delta = vlcTab.getVLC2(this.br)\n                        chan.quSfIdx[i] = (chan.quSfIdx[i - 1] + diff + delta) & 0x3F\n                    }\n                } else if (chan.numCodedVals > 0) {\n                    const vlcTab = ChannelUnit.sf_vlc_tabs[this.br.read(2) + 4]\n\n                    this.unpackSfVqShape(chan.quSfIdx, this.ctx.usedQuantUnits)\n    \n                    for (let i = 0; i < this.ctx.usedQuantUnits; i++) {\n                        const delta = vlcTab!!.getVLC2(this.br)\n                        chan.quSfIdx[i] = (chan.quSfIdx[i] + BitUtils.signExtend(delta, 4)) & 0x3F\n                    }\n                }\n                break;\n\t\t\t}\n            case 3: {\n                if (chNum > 0) {\n                    // Copy coefficients from reference channel\n                    for (let i = 0; i < this.ctx.usedQuantUnits; i++) {\n                        chan.quSfIdx[i] = refChan.quSfIdx[i]\n                    }\n                } else {\n                    weightIdx = this.br.read(2)\n                    const vlcSel = this.br.read(2)\n                    let vlcTab = ChannelUnit.sf_vlc_tabs[vlcSel]!!;\n\n                    if (weightIdx == 3) {\n                        vlcTab = ChannelUnit.sf_vlc_tabs[vlcSel + 4]!!\n\n                        this.unpackSfVqShape(chan.quSfIdx, this.ctx.usedQuantUnits)\n\n                        let diff = (this.br.read(4) + 56) & 0x3F;\n                        chan.quSfIdx[0] = (chan.quSfIdx[0] + diff) & 0x3F\n    \n                        for (let i = 1; i < this.ctx.usedQuantUnits; i++) {\n                            const delta = vlcTab.getVLC2(this.br)\n                            diff = diff + BitUtils.signExtend(delta, 4) & 0x3F\n                            chan.quSfIdx[i] = (diff + chan.quSfIdx[i]) & 0x3F\n                        }\n                    } else {\n                        // 1st coefficient is coded directly\n                        chan.quSfIdx[0] = this.br.read(6)\n    \n                        for (let i = 1; i < this.ctx.usedQuantUnits; i++) {\n                            const delta = vlcTab.getVLC2(this.br)\n                            chan.quSfIdx[i] = (chan.quSfIdx[i - 1] + delta) & 0x3F\n                        }\n                    }\n                }\n                break;\n\t\t\t}\n\t\t}\n\n\t\treturn (weightIdx != 0 && weightIdx < 3) ? this.substractSfWeights(chan, weightIdx) : 0\n\n\t}\n\n\t/**\n\t * Decode word length information for each channel.\n\t *\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeQuantWordlen(): Int {\n        for (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tthis.ctx.channels[chNum].quWordlen.fill(0)\n\n\t\t\tconst ret = this.decodeChannelWordlen(chNum)\n\t\t\tif (ret < 0) {\n\t\t\t\treturn ret\n\t\t\t}\n\t\t}\n\n\t\t/* scan for last non-zero coeff in both channels and\n\t     * set number of quant units having coded spectrum */\n        let i: Int;\n        i = this.ctx.numQuantUnits - 1\n\t\twhile (i >= 0) {\n\t\t\tif (this.ctx.channels[0].quWordlen[i] != 0 || this.numChannels == 2 && this.ctx.channels[1].quWordlen[i] != 0) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\ti--\n\t\t}\n        this.ctx.usedQuantUnits = i + 1\n\n\t\treturn 0\n\t}\n\n\tprivate decodeScaleFactors(): Int {\n\t\tif (this.ctx.usedQuantUnits == 0) {\n\t\t\treturn 0\n\t\t}\n\n        for (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tthis.ctx.channels[chNum].quSfIdx.fill(0)\n\n\t\t\tconst ret = this.decodeChannelSfIdx(chNum)\n\t\t\tif (ret < 0) {\n\t\t\t\treturn ret\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode code table indexes for each quant unit of a channel.\n\t *\n\t * @param     chNum        channel to process\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeChannelCodeTab(chNum: Int): Int {\n\t\tlet vlcTab: VLC\n\t\tlet numVals: Int\n\t\tconst mask = (this.ctx.useFullTable) ? 7 : 3 // mask for modular arithmetic\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n\n\t\tchan.tableType = this.br.read(1)\n\n\t\tswitch (this.br.read(2)) {\n\t\t// switch according to coding mode\n            case 0: { // directly coded\n\t\t\t\tconst numBits = (this.ctx.useFullTable) ? 3 : 2\n\t\t\t\tnumVals = this.numCtValues\n\t\t\t\tif (numVals < 0) {\n\t\t\t\t\treturn numVals\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < numVals; i++) {\n\t\t\t\t\tif (chan.quWordlen[i] != 0) {\n\t\t\t\t\t\tchan.quTabIdx[i] = this.br.read(numBits)\n\t\t\t\t\t} else if (chNum > 0 && refChan.quWordlen[i] != 0) {\n\t\t\t\t\t\t// get clone master flag\n\t\t\t\t\t\tchan.quTabIdx[i] = this.br.read1()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n            case 1: { // entropy-coded\n\t\t\t\tvlcTab = (this.ctx.useFullTable) ? ChannelUnit.ct_vlc_tabs[1]!! : ChannelUnit.ct_vlc_tabs[0]!!\n\t\t\t\tnumVals = this.numCtValues\n\t\t\t\tif (numVals < 0) {\n\t\t\t\t\treturn numVals\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < numVals; i++) {\n\t\t\t\t\tif (chan.quWordlen[i] != 0) {\n\t\t\t\t\t\tchan.quTabIdx[i] = vlcTab.getVLC2(this.br)\n\t\t\t\t\t} else if (chNum > 0 && refChan.quWordlen[i] != 0) {\n\t\t\t\t\t\t// get clone master flag\n\t\t\t\t\t\tchan.quTabIdx[i] = this.br.read1()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n            case 2: { // entropy-coded delta\n\t\t\t\tlet deltaVlc: VLC\n\t\t\t\tif (this.ctx.useFullTable) {\n\t\t\t\t\tvlcTab = ChannelUnit.ct_vlc_tabs[1]!!\n\t\t\t\t\tdeltaVlc = ChannelUnit.ct_vlc_tabs[2]!!\n\t\t\t\t} else {\n\t\t\t\t\tvlcTab = ChannelUnit.ct_vlc_tabs[0]!!\n\t\t\t\t\tdeltaVlc = ChannelUnit.ct_vlc_tabs[0]!!\n\t\t\t\t}\n                let pred = 0;\n                numVals = this.numCtValues\n\t\t\t\tif (numVals < 0) {\n\t\t\t\t\treturn numVals\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < numVals; i++) {\n\t\t\t\t\tif (chan.quWordlen[i] != 0) {\n\t\t\t\t\t\tchan.quTabIdx[i] = (i == 0) ? vlcTab.getVLC2(this.br) : ((pred + deltaVlc.getVLC2(this.br)) & mask)\n\t\t\t\t\t\tpred = chan.quTabIdx[i]\n\t\t\t\t\t} else if (chNum > 0 && refChan.quWordlen[i] != 0) {\n\t\t\t\t\t\t// get clone master flag\n\t\t\t\t\t\tchan.quTabIdx[i] = this.br.read1()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n            case 3: { // entropy-coded difference to master\n                if (chNum > 0) {\n                    vlcTab = (this.ctx.useFullTable) ? ChannelUnit.ct_vlc_tabs[3] : ChannelUnit.ct_vlc_tabs[0]\n                    numVals = this.numCtValues\n                    if (numVals < 0) {\n                        return numVals\n                    }\n                    for (let i = 0; i < numVals; i++) {\n                        if (chan.quWordlen[i] != 0) {\n                            chan.quTabIdx[i] = refChan.quTabIdx[i] + vlcTab.getVLC2(this.br) & mask\n                        } else if (chNum > 0 && refChan.quWordlen[i] != 0) {\n                            // get clone master flag\n                            chan.quTabIdx[i] = this.br.read1()\n                        }\n                    }\n                }\n                break;\n            }\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode code table indexes for each channel.\n\t *\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeCodeTableIndexes(): Int {\n\t\tif (this.ctx.usedQuantUnits == 0) {\n\t\t\treturn 0\n\t\t}\n\n        this.ctx.useFullTable = this.br.readBool()\n\n        for (let chNum = 0; chNum < this.numChannels; chNum++) {\n            this.ctx.channels[chNum].quTabIdx.fill(0)\n\n\t\t\tconst ret = this.decodeChannelCodeTab(chNum)\n\t\t\tif (ret < 0) {\n\t\t\t\treturn ret\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\tprivate decodeQuSpectra(tab: Atrac3pSpecCodeTab, vlcTab: VLC, out: Int32Array, outOffset: Int, numSpecs: Int) {\n\t\tconst groupSize = tab.groupSize\n\t\tconst numCoeffs = tab.numCoeffs\n\t\tconst bits = tab.bits\n\t\tconst isSigned = tab.isSigned\n\t\tconst mask = (1 << bits) - 1\n\n        let pos = 0;\n        while (pos < numSpecs) {\n\t\t\tif (groupSize == 1 || this.br.readBool()) {\n                for (let j = 0; j < groupSize; j++) {\n                    let _val = vlcTab.getVLC2(this.br);\n\n                    for (let i = 0; i < numCoeffs; i++) {\n                        let cf = _val & mask;\n                        if (isSigned) {\n\t\t\t\t\t\t\tcf = BitUtils.signExtend(cf, bits)\n\t\t\t\t\t\t} else if (cf != 0 && this.br.readBool()) {\n\t\t\t\t\t\t\tcf = -cf\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tout[outOffset + pos] = cf\n\t\t\t\t\t\tpos++\n\t\t\t\t\t\t_val = _val >> bits\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Group skipped\n\t\t\t\tpos += groupSize * numCoeffs\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate decodeSpectrum() {\n\t\tfor (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tconst chan = this.ctx.channels[chNum]\n\n\t\t\tchan.spectrum.fill(0)\n\n\t\t\tchan.powerLevs.fill(Atrac3plusConstants.ATRAC3P_POWER_COMP_OFF)\n\n            for (let qu = 0; qu < this.ctx.usedQuantUnits; qu++) {\n\t\t\t\tconst numSpecs = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu + 1] - Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\t\t\t\tconst wordlen = chan.quWordlen[qu]\n                let codetab = chan.quTabIdx[qu];\n                if (wordlen > 0) {\n\t\t\t\t\tif (!this.ctx.useFullTable) {\n\t\t\t\t\t\tcodetab = Atrac3plusData2.atrac3p_ct_restricted_to_full[chan.tableType][wordlen - 1][codetab]\n\t\t\t\t\t}\n\n                    let tabIndex = (chan.tableType * 8 + codetab) * 7 + wordlen - 1;\n                    const tab = Atrac3plusData1.atrac3p_spectra_tabs[tabIndex]\n\n\t\t\t\t\tif (tab.redirect >= 0) {\n\t\t\t\t\t\ttabIndex = tab.redirect\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.decodeQuSpectra(tab, ChannelUnit.spec_vlc_tabs[tabIndex]!!, chan.spectrum, Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu], numSpecs)\n\t\t\t\t} else if (chNum > 0 && this.ctx.channels[0].quWordlen[qu] != 0 && codetab == 0) {\n\t\t\t\t\t// Copy coefficients from master\n\t\t\t\t\tMemoryUtils.arraycopyI(this.ctx.channels[0].spectrum, Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu], chan.spectrum, Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu], numSpecs)\n\t\t\t\t\tchan.quWordlen[qu] = this.ctx.channels[0].quWordlen[qu]\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Power compensation levels only present in the bitstream\n\t         * if there are more than 2 quant units. The lowest two units\n\t         * correspond to the frequencies 0...351 Hz, whose shouldn't\n\t         * be affected by the power compensation. */\n\t\t\tif (this.ctx.usedQuantUnits > 2) {\n\t\t\t\tconst numSpecs = Atrac3plusData2.atrac3p_subband_to_num_powgrps[this.ctx.numCodedSubbands - 1]\n\t\t\t\tfor (let i = 0; i < numSpecs; i++) {\n\t\t\t\t\tchan.powerLevs[i] = this.br.read(4)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getSubbandFlags(out: boolean[], numFlags: Int): Boolean {\n\t\tconst result = this.br.readBool()\n\t\tif (result) {\n\t\t\tif (this.br.readBool()) {\n\t\t\t\tfor (let i = 0; i < numFlags; i++) {\n\t\t\t\t\tout[i] = this.br.readBool()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (let i = 0; i < numFlags; i++) {\n\t\t\t\t\tout[i] = true\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < numFlags; i++) {\n\t\t\t\tout[i] = false\n\t\t\t}\n\t\t}\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Decode mdct window shape flags for all channels.\n\t *\n\t */\n\tprivate decodeWindowShape() {\n\t\tfor (let i = 0; i < this.numChannels; i++) {\n            this.getSubbandFlags(this.ctx.channels[i].wndShape, this.ctx.numSubbands)\n\t\t}\n\t}\n\n\tprivate decodeGaincNPoints(chNum: Int, codedSubbands: Int): Int {\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n\n\t\tswitch (this.br.read(2)) {\n\t\t// switch according to coding mode\n            case 0: { // fixed-length coding\n                for (let i = 0; i < codedSubbands; i++) {\n                    chan.gainData[i].numPoints = this.br.read(3)\n                }\n                break;\n            }\n            case 1: { // variable-length coding\n                for (let i = 0; i < codedSubbands; i++) {\n                    chan.gainData[i].numPoints = ChannelUnit.gain_vlc_tabs[0].getVLC2(this.br)\n                }\n                break;\n            }\n            case 2: {\n                if (chNum > 0) { // VLC modulo delta to master channel\n                    for (let i = 0; i < codedSubbands; i++) {\n                        const delta = ChannelUnit.gain_vlc_tabs[1].getVLC2(this.br)\n                        chan.gainData[i].numPoints = refChan.gainData[i].numPoints + delta & 7\n                    }\n                } else { // VLC modulo delta to previous\n                    chan.gainData[0].numPoints = ChannelUnit.gain_vlc_tabs[0].getVLC2(this.br)\n\n                    for (let i = 1; i < codedSubbands; i++) {\n                        const delta = ChannelUnit.gain_vlc_tabs[1].getVLC2(this.br)\n                        chan.gainData[i].numPoints = chan.gainData[i - 1].numPoints + delta & 7\n                    }\n                }\n                break;\n            }\n            case 3: {\n                if (chNum > 0) { // copy data from master channel\n                    for (let i = 0; i < codedSubbands; i++) {\n                        chan.gainData[i].numPoints = refChan.gainData[i].numPoints\n                    }\n                } else { // shorter delta to min\n                    const deltaBits = this.br.read(2)\n                    const minVal = this.br.read(3)\n\n                    for (let i = 0; i < codedSubbands; i++) {\n                        chan.gainData[i].numPoints = minVal + this.getDelta(deltaBits)\n                        if (chan.gainData[i].numPoints > 7) {\n                            return Atrac3plusConstants.AT3P_ERROR\n                        }\n                    }\n                }\n                break;\n            }\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Implements coding mode 1 (master) for gain compensation levels.\n\t *\n\t * @param    dst    ptr to the output array\n\t */\n\tprivate gaincLevelMode1m(dst: AtracGainInfo) {\n\t\tif (dst.numPoints > 0) {\n\t\t\tdst.levCode[0] = ChannelUnit.gain_vlc_tabs[2].getVLC2(this.br)\n\t\t}\n\n\t\tfor (let i = 1; i < dst.numPoints; i++) {\n\t\t\tconst delta = ChannelUnit.gain_vlc_tabs[3].getVLC2(this.br)\n\t\t\tdst.levCode[i] = dst.levCode[i - 1] + delta & 0xF\n\t\t}\n\t}\n\n\t/**\n\t * Implements coding mode 3 (slave) for gain compensation levels.\n\t *\n\t * @param   dst   ptr to the output array\n\t * @param    ref   ptr to the reference channel\n\t */\n\tprivate gaincLevelMode3s(dst: AtracGainInfo, ref: AtracGainInfo) {\n\t\tfor (let i = 0; i < dst.numPoints; i++) {\n\t\t\tdst.levCode[i] = (i >= ref.numPoints) ? 7 : ref.levCode[i]\n\t\t}\n\t}\n\n\t/**\n\t * Decode level code for each gain control point.\n\t *\n\t * @param     chNum          channel to process\n\t * @param     codedSubbands  number of subbands to process\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeGaincLevels(chNum: Int, codedSubbands: Int): Int {\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n\n\t\tswitch (this.br.read(2)) {\n\t\t// switch according to coding mode\n            case 0: { // fixed-length coding\n                for (let sb = 0; sb < codedSubbands; sb++) {\n                    for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                        chan.gainData[sb].levCode[i] = this.br.read(4)\n                    }\n                }\n                break\n            }\n            case 1: {\n                if (chNum > 0) { // VLC module delta to master channel\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                            const delta = ChannelUnit.gain_vlc_tabs[5].getVLC2(this.br)\n                            const pred = (i >= refChan.gainData[sb].numPoints) ? 7 : refChan.gainData[sb].levCode[i]\n                            chan.gainData[sb].levCode[i] = pred + delta & 0xF\n                        }\n                    }\n                } else { // VLC module delta to previous\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        this.gaincLevelMode1m(chan.gainData[sb])\n                    }\n                }\n                break\n\t\t\t}\n            case 2: {\n                if (chNum > 0) { // VLC modulo delta to previous or clone master\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        if (chan.gainData[sb].numPoints > 0) {\n                            if (this.br.readBool()) {\n                                this.gaincLevelMode1m(chan.gainData[sb])\n                            } else {\n                                this.gaincLevelMode3s(chan.gainData[sb], refChan.gainData[sb])\n                            }\n                        }\n                    }\n                } else { // VLC modulo delta to lev_codes of previous subband\n                    if (chan.gainData[0].numPoints > 0) {\n                        this.gaincLevelMode1m(chan.gainData[0])\n                    }\n\n                    for (let sb = 1; sb < codedSubbands; sb++) {\n                        for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                            const delta = ChannelUnit.gain_vlc_tabs[4].getVLC2(this.br)\n                            const pred = (i >= chan.gainData[sb - 1].numPoints) ? 7 : chan.gainData[sb - 1].levCode[i]\n                            chan.gainData[sb].levCode[i] = pred + delta & 0xF\n                        }\n                    }\n                }\n                break\n\t\t\t}\n            case 3: {\n                if (chNum > 0) { // clone master\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        this.gaincLevelMode3s(chan.gainData[sb], refChan.gainData[sb])\n                    }\n                } else { // shorter delta to min\n                    const deltaBits = this.br.read(2)\n                    const minVal = this.br.read(4)\n\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                            chan.gainData[sb].levCode[i] = minVal + this.getDelta(deltaBits)\n                            if (chan.gainData[sb].levCode[i] > 15) {\n                                return Atrac3plusConstants.AT3P_ERROR\n                            }\n                        }\n                    }\n                }\n                break\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Implements coding mode 0 for gain compensation locations.\n\t *\n\t * @param    dst    ptr to the output array\n\t * @param     pos    position of the value to be processed\n\t */\n\tprivate gaincLocMode0(dst: AtracGainInfo, pos: Int) {\n\t\tif (pos == 0 || dst.locCode[pos - 1] < 15) {\n\t\t\tdst.locCode[pos] = this.br.read(5)\n\t\t} else if (dst.locCode[pos - 1] >= 30) {\n\t\t\tdst.locCode[pos] = 31\n\t\t} else {\n\t\t\tconst deltaBits = CodecUtils.avLog2(30 - dst.locCode[pos - 1]) + 1\n\t\t\tdst.locCode[pos] = dst.locCode[pos - 1] + this.br.read(deltaBits) + 1\n\t\t}\n\t}\n\n\t/**\n\t * Implements coding mode 1 for gain compensation locations.\n\t *\n\t * @param    dst    ptr to the output array\n\t */\n\tprivate gaincLocMode1(dst: AtracGainInfo) {\n\t\tif (dst.numPoints > 0) {\n\t\t\t// 1st coefficient is stored directly\n\t\t\tdst.locCode[0] = this.br.read(5)\n\n\t\t\tfor (let i = 1; i < dst.numPoints; i++) {\n\t\t\t\t// Switch VLC according to the curve direction\n\t\t\t\t// (ascending/descending)\n\t\t\t\tconst tab = (dst.levCode[i] <= dst.levCode[i - 1]) ? ChannelUnit.gain_vlc_tabs[7] : ChannelUnit.gain_vlc_tabs[9]\n\t\t\t\tdst.locCode[i] = dst.locCode[i - 1] + tab.getVLC2(this.br)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Decode location code for each gain control point.\n\t *\n\t * @param     chNum          channel to process\n\t * @param     codedSubbands  number of subbands to process\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeGaincLocCodes(chNum: Int, codedSubbands: Int): Int {\n\t\tconst chan = this.ctx.channels[chNum]\n\t\tconst refChan = this.ctx.channels[0]\n\n\t\tconst codingMode = this.br.read(2)\n\t\tswitch (codingMode) {\n\t\t// switch according to coding mode\n            case 0: { // sequence of numbers in ascending order\n                for (let sb = 0; sb < codedSubbands; sb++) {\n                    for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                        this.gaincLocMode0(chan.gainData[sb], i)\n                    }\n                }\n                break;\n            }\n            case 1: {\n                if (chNum > 0) {\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        if (chan.gainData[sb].numPoints <= 0) {\n                            continue\n                        }\n                        const dst = chan.gainData[sb]\n                        const ref = refChan.gainData[sb]\n    \n                        // 1st value is vlc-coded modulo delta to master\n                        let delta = ChannelUnit.gain_vlc_tabs[10].getVLC2(this.br)\n                        const pred = (ref.numPoints > 0) ? ref.locCode[0] : 0\n                        dst.locCode[0] = pred + delta & 0x1F\n    \n                        for (let i = 1; i < dst.numPoints; i++) {\n                            const moreThanRef = i >= ref.numPoints\n                            if (dst.levCode[i] > dst.levCode[i - 1]) {\n                                // ascending curve\n                                if (moreThanRef) {\n                                    delta = ChannelUnit.gain_vlc_tabs[9].getVLC2(this.br)\n                                    dst.locCode[i] = dst.locCode[i - 1] + delta\n                                } else {\n                                    if (this.br.readBool()) {\n                                        this.gaincLocMode0(dst, i) // direct coding\n                                    } else {\n                                        dst.locCode[i] = ref.locCode[i] // clone master\n                                    }\n                                }\n                            } else { // descending curve\n                                const tab = (moreThanRef) ? ChannelUnit.gain_vlc_tabs[7]!! : ChannelUnit.gain_vlc_tabs[10]!!\n                                delta = tab.getVLC2(this.br)\n                                if (moreThanRef) {\n                                    dst.locCode[i] = dst.locCode[i - 1] + delta\n                                } else {\n                                    dst.locCode[i] = ref.locCode[i] + delta & 0x1F\n                                }\n                            }\n                        }\n                    }\n                } else { // VLC delta to previous\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        this.gaincLocMode1(chan.gainData[sb])\n                    }\n                }\n                break;\n\t\t\t}\n            case 2: {\n                if (chNum > 0) {\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        if (chan.gainData[sb].numPoints <= 0) {\n                            continue\n                        }\n                        const dst = chan.gainData[sb]\n                        const ref = refChan.gainData[sb]\n                        if (dst.numPoints > ref.numPoints || this.br.readBool()) {\n                            this.gaincLocMode1(dst)\n                        } else { // clone master for the whole subband\n                            for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                                dst.locCode[i] = ref.locCode[i]\n                            }\n                        }\n                    }\n                } else {\n                    // data for the first subband is coded directly\n                    for (let i = 0; i < chan.gainData[0].numPoints; i++) {\n                        this.gaincLocMode0(chan.gainData[0], i)\n                    }\n\n                    for (let sb = 1; sb < codedSubbands; sb++) {\n                        if (chan.gainData[sb].numPoints <= 0) {\n                            continue\n                        }\n                        const dst = chan.gainData[sb]\n    \n                        // 1st value is vlc-coded modulo delta to the corresponding\n                        // value of the previous subband if any or zero\n                        let delta = ChannelUnit.gain_vlc_tabs[6].getVLC2(this.br)\n                        const pred = (chan.gainData[sb - 1].numPoints > 0) ? chan.gainData[sb - 1].locCode[0] : 0\n                        dst.locCode[0] = pred + delta & 0x1F\n    \n                        for (let i = 1; i < dst.numPoints; i++) {\n                            const moreThanRef = i >= chan.gainData[sb - 1].numPoints\n                            // Select VLC table according to curve direction and\n                            // presence of prediction\n                            const tab = ChannelUnit.gain_vlc_tabs[((dst.levCode[i] > dst.levCode[i - 1]) ? 2 : 0) + ((moreThanRef) ? 1 : 0) + 6]!!\n                            delta = tab.getVLC2(this.br)\n                            if (moreThanRef) {\n                                dst.locCode[i] = dst.locCode[i - 1] + delta\n                            } else {\n                                dst.locCode[i] = chan.gainData[sb - 1].locCode[i] + delta & 0x1F\n                            }\n                        }\n                    }\n\t\t\t    }\n                break;\n\t\t\t}\n            case 3: {\n                if (chNum > 0) { // clone master or direct or direct coding\n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                            if (i >= refChan.gainData[sb].numPoints) {\n                                this.gaincLocMode0(chan.gainData[sb], i)\n                            } else {\n                                chan.gainData[sb].locCode[i] = refChan.gainData[sb].locCode[i]\n                            }\n                        }\n                    }\n                } else { // shorter delta to min\n                    const deltaBits = this.br.read(2) + 1\n                    const minVal = this.br.read(5)\n    \n                    for (let sb = 0; sb < codedSubbands; sb++) {\n                        for (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n                            chan.gainData[sb].locCode[i] = minVal + i + this.br.read(deltaBits)\n                        }\n                    }\n                }\n                break\n\t\t\t}\n\t\t}\n\n\t\t// Validate decoded information\n\t\tfor (let sb = 0; sb < codedSubbands; sb++) {\n\t\t\tconst dst = chan.gainData[sb]\n\t\t\tfor (let i = 0; i < chan.gainData[sb].numPoints; i++) {\n\t\t\t\tif (dst.locCode[i] < 0 || dst.locCode[i] > 31 || i > 0 && dst.locCode[i] <= dst.locCode[i - 1]) {\n\t\t\t\t\tlog.error(\"Invalid gain location: ch=%d, sb=%d, pos=%d, val=%d\".format(chNum, sb, i, dst.locCode[i]))\n\t\t\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode gain control data for all channels.\n\t *\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeGaincData(): Int {\n\t\tlet ret: Int\n\n\t\tfor (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tfor (let i = 0; i < Atrac3plusConstants.ATRAC3P_SUBBANDS; i++) {\n                this.ctx.channels[chNum].gainData[i].clear()\n\t\t\t}\n\n\t\t\tif (this.br.readBool()) { // gain control data present?\n\t\t\t\tconst codedSubbands = this.br.read(4) + 1\n\t\t\t\tif (this.br.readBool()) { // is high band gain data replication on?\n                    this.ctx.channels[chNum].numGainSubbands = this.br.read(4) + 1\n\t\t\t\t} else {\n                    this.ctx.channels[chNum].numGainSubbands = codedSubbands\n\t\t\t\t}\n\n\t\t\t\tret = this.decodeGaincNPoints(chNum, codedSubbands)\n\t\t\t\tif (ret < 0) {\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\t\t\t\tret = this.decodeGaincLevels(chNum, codedSubbands)\n\t\t\t\tif (ret < 0) {\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\t\t\t\tret = this.decodeGaincLocCodes(chNum, codedSubbands)\n\t\t\t\tif (ret < 0) {\n\t\t\t\t\treturn ret\n\t\t\t\t}\n\n\t\t\t\tif (codedSubbands > 0) { // propagate gain data if requested\n\t\t\t\t    const max = this.ctx.channels[chNum].numGainSubbands\n                    for (let sb = codedSubbands; sb < max; sb++) {\n                        this.ctx.channels[chNum].gainData[sb].copy(this.ctx.channels[chNum].gainData[sb - 1])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n                this.ctx.channels[chNum].numGainSubbands = 0\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode envelope for all tones of a channel.\n\t *\n\t * @param     chNum           channel to process\n\t * @param     bandHasTones    ptr to an array of per-band-flags:\n\t * 1 - tone data present\n\t */\n\tprivate decodeTonesEnvelope(chNum: Int, bandHasTones: boolean[]) {\n\t\tconst dst = this.ctx.channels[chNum].tonesInfo\n\t\tconst ref = this.ctx.channels[0].tonesInfo\n\n\t\tif (chNum == 0 || !this.br.readBool()) { // mode 0: fixed-length coding\n            for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\t\tif (!bandHasTones[sb]) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tdst[sb].pendEnv.hasStartPoint = this.br.readBool()\n\t\t\t\tdst[sb].pendEnv.startPos = (dst[sb].pendEnv.hasStartPoint) ? this.br.read(5) : -1\n\t\t\t\tdst[sb].pendEnv.hasStopPoint = this.br.readBool()\n\t\t\t\tdst[sb].pendEnv.stopPos = (dst[sb].pendEnv.hasStopPoint) ? this.br.read(5) : 32\n\t\t\t}\n\t\t} else { // mode 1(slave only): copy master\n            for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\t\tif (!bandHasTones[sb]) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tdst[sb].pendEnv.copy(ref[sb].pendEnv)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Decode number of tones for each subband of a channel.\n\t *\n\t * @param     chNum           channel to process\n\t * @param     bandHasTones    ptr to an array of per-band-flags:\n\t * 1 - tone data present\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeBandNumwavs(chNum: Int, bandHasTones: boolean[]): Int {\n\t\tconst dst = this.ctx.channels[chNum].tonesInfo\n\t\tconst ref = this.ctx.channels[0].tonesInfo\n\n\t\tconst mode = this.br.read(chNum + 1)\n\t\tswitch (mode) {\n            case 0: { // fixed-length coding\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (bandHasTones[sb]) {\n                        dst[sb].numWavs = this.br.read(4)\n                    }\n                }\n                break\n            }\n            case 1: { // variable-length coding\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (bandHasTones[sb]) {\n                        dst[sb].numWavs = ChannelUnit.tone_vlc_tabs[1].getVLC2(this.br)\n                    }\n                }\n                break\n            }\n            case 2: { // VLC modulo delta to master (slave only)\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (bandHasTones[sb]) {\n                        let delta = ChannelUnit.tone_vlc_tabs[2].getVLC2(this.br);\n                        delta = BitUtils.signExtend(delta, 3)\n                        dst[sb].numWavs = ref[sb].numWavs + delta & 0xF\n                    }\n                }\n                break\n            }\n            case 3: { // copy master (slave only)\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (bandHasTones[sb]) {\n                        dst[sb].numWavs = ref[sb].numWavs\n                    }\n                }\n                break\n            }\n\t\t}\n\n\t\t// initialize start tone index for each subband\n        for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\tif (bandHasTones[sb]) {\n\t\t\t\tif (this.ctx.wavesInfo.tonesIndex + dst[sb].numWavs > 48) {\n\t\t\t\t\tlog.error(\"Too many tones: %d (max. 48)\".format(this.ctx.wavesInfo.tonesIndex + dst[sb].numWavs))\n\t\t\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t\t\t}\n\t\t\t\tdst[sb].startIndex = this.ctx.wavesInfo.tonesIndex\n                this.ctx.wavesInfo.tonesIndex += dst[sb].numWavs\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\t/**\n\t * Decode frequency information for each subband of a channel.\n\t *\n\t * @param     chNum           channel to process\n\t * @param     bandHasTones    ptr to an array of per-band-flags:\n\t * 1 - tone data present\n\t */\n\tprivate decodeTonesFrequency(chNum: Int, bandHasTones: boolean[]) {\n\t\tconst dst = this.ctx.channels[chNum].tonesInfo\n\t\tconst ref = this.ctx.channels[0].tonesInfo\n\n\t\tif (chNum == 0 || !this.br.readBool()) { // mode 0: fixed-length coding\n            for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\t\tif (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst iwav = dst[sb].startIndex\n\t\t\t\tconst direction = (dst[sb].numWavs > 1) ? this.br.readBool() : false\n\t\t\t\tif (direction) { // packed numbers in descending order\n\t\t\t\t\tif (dst[sb].numWavs > 0) {\n                        this.ctx.wavesInfo.waves[iwav + dst[sb].numWavs - 1]!!.freqIndex = this.br.read(10)\n\t\t\t\t\t}\n                    for (let i = dst[sb].numWavs - 2; i >= 0; i--) {\n\t\t\t\t\t\tconst nbits = CodecUtils.avLog2(this.ctx.wavesInfo.waves[iwav + i + 1]!!.freqIndex) + 1\n\t\t\t\t\t\tthis.ctx.wavesInfo.waves[iwav + i]!!.freqIndex = this.br.read(nbits)\n\t\t\t\t\t}\n\t\t\t\t} else { // packed numbers in ascending order\n\t\t\t\t\tfor (let i = 0; i < dst[sb].numWavs; i++) {\n\t\t\t\t\t\tif (i == 0 || this.ctx.wavesInfo.waves[iwav + i - 1]!!.freqIndex < 512) {\n                            this.ctx.wavesInfo.waves[iwav + i]!!.freqIndex = this.br.read(10)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst nbits = CodecUtils.avLog2(1023 - this.ctx.wavesInfo.waves[iwav + i - 1]!!.freqIndex) + 1\n                            this.ctx.wavesInfo.waves[iwav + i]!!.freqIndex = this.br.read(nbits) + 1024 - (1 << nbits)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else { // mode 1: VLC module delta to master (slave only)\n            for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\t\tif (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst iwav = ref[sb].startIndex\n\t\t\t\tconst owav = dst[sb].startIndex\n\t\t\t\tfor (let i = 0; i < dst[sb].numWavs; i++) {\n                    let delta = ChannelUnit.tone_vlc_tabs[6]!!.getVLC2(this.br);\n                    delta = BitUtils.signExtend(delta, 8)\n\t\t\t\t\tconst pred = (i < ref[sb].numWavs) ? this.ctx.wavesInfo.waves[iwav + i]!!.freqIndex : ((ref[sb].numWavs > 0) ? this.ctx.wavesInfo.waves[iwav + ref[sb].numWavs - 1]!!.freqIndex : 0)\n                    this.ctx.wavesInfo.waves[owav + i]!!.freqIndex = pred + delta & 0x3FF\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Decode amplitude information for each subband of a channel.\n\t *\n\t * @param     chNum           channel to process\n\t * @param     bandHasTones    ptr to an array of per-band-flags:\n\t * 1 - tone data present\n\t */\n\tprivate decodeTonesAmplitude(chNum: Int, bandHasTones: boolean[]) {\n\t\tconst dst = this.ctx.channels[chNum].tonesInfo\n\t\tconst ref = this.ctx.channels[0].tonesInfo\n\t\tconst refwaves = new Int32Array(48)\n\n\t\tif (chNum > 0) {\n            for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\t\tif (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst wsrc = dst[sb].startIndex\n\t\t\t\tconst wref = ref[sb].startIndex\n                for (let j = 0; j < dst[sb].numWavs; j++) {\n                    let fi = 0;\n                    let maxdiff = 1024;\n                    for (let i = 0; i < ref[sb].numWavs; i++) {\n\t\t\t\t\t\tconst diff = Math.abs(this.ctx.wavesInfo.waves[wsrc + j]!!.freqIndex - this.ctx.wavesInfo.waves[wref + i]!!.freqIndex)\n\t\t\t\t\t\tif (diff < maxdiff) {\n\t\t\t\t\t\t\tmaxdiff = diff\n\t\t\t\t\t\t\tfi = i\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (maxdiff < 8) {\n\t\t\t\t\t\trefwaves[dst[sb].startIndex + j] = fi + ref[sb].startIndex\n\t\t\t\t\t} else if (j < ref[sb].numWavs) {\n\t\t\t\t\t\trefwaves[dst[sb].startIndex + j] = j + ref[sb].startIndex\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefwaves[dst[sb].startIndex + j] = -1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst mode = this.br.read(chNum + 1)\n\n\t\tswitch (mode) {\n            case 0: { // fixed-length coding\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n                        continue\n                    }\n                    if (this.ctx.wavesInfo.amplitudeMode != 0) {\n                        for (let i = 0; i < dst[sb].numWavs; i++) {\n                            this.ctx.wavesInfo.waves[dst[sb].startIndex + i]!!.ampSf = this.br.read(6)\n                        }\n                    } else {\n                        this.ctx.wavesInfo.waves[dst[sb].startIndex]!!.ampSf = this.br.read(6)\n                    }\n                }\n                break;\n            }\n            case 1: { // min + VLC delta\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n                        continue\n                    }\n                    if (this.ctx.wavesInfo.amplitudeMode != 0) {\n                        for (let i = 0; i < dst[sb].numWavs; i++) {\n                            this.ctx.wavesInfo.waves[dst[sb].startIndex + i]!!.ampSf = ChannelUnit.tone_vlc_tabs[3]!!.getVLC2(this.br) + 20\n                        }\n                    } else {\n                        this.ctx.wavesInfo.waves[dst[sb].startIndex]!!.ampSf = ChannelUnit.tone_vlc_tabs[4]!!.getVLC2(this.br) + 24\n                    }\n                }\n                break\n            }\n            case 2: { // VLC module delta to master (slave only)\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (!bandHasTones[sb] || dst[sb].numWavs == 0) {\n                        continue\n                    }\n                    for (let i = 0; i < dst[sb].numWavs; i++) {\n                        let delta = ChannelUnit.tone_vlc_tabs[5]!!.getVLC2(this.br);\n                        delta = BitUtils.signExtend(delta, 5)\n                        const pred = (refwaves[dst[sb].startIndex + i] >= 0) ? this.ctx.wavesInfo.waves[refwaves[dst[sb].startIndex + i]]!!.ampSf : 34\n                        this.ctx.wavesInfo.waves[dst[sb].startIndex + i]!!.ampSf = pred + delta & 0x3F\n                    }\n                }\n                break\n            }\n            case 3: { // clone master (slave only)\n                for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n                    if (!bandHasTones[sb]) {\n                        continue\n                    }\n                    for (let i = 0; i < dst[sb].numWavs; i++) {\n                        this.ctx.wavesInfo.waves[dst[sb].startIndex + i]!!.ampSf = (refwaves[dst[sb].startIndex + i] >= 0) ? this.ctx.wavesInfo.waves[refwaves[dst[sb].startIndex + i]]!!.ampSf : 32\n                    }\n                }\n                break\n            }\n\t\t}\n\t}\n\n\t/**\n\t * Decode phase information for each subband of a channel.\n\t *\n\t * @param     chNum          channel to process\n\t * @param     bandHasTones    ptr to an array of per-band-flags:\n\t * 1 - tone data present\n\t */\n\tprivate decodeTonesPhase(chNum: Int, bandHasTones: boolean[]) {\n\t\tconst dst = this.ctx.channels[chNum].tonesInfo\n\n        for (let sb = 0; sb < this.ctx.wavesInfo.numToneBands; sb++) {\n\t\t\tif (!bandHasTones[sb]) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tconst wparam = dst[sb].startIndex\n\t\t\tfor (let i = 0; i < dst[sb].numWavs; i++) {\n\t\t\t\tthis.ctx.wavesInfo.waves[wparam + i]!!.phaseIndex = this.br.read(5)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Decode tones info for all channels.\n\t *\n\t * @return result code: 0 = OK, otherwise - error code\n\t */\n\tprivate decodeTonesInfo(): Int {\n\t\tfor (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tfor (let i = 0; i < Atrac3plusConstants.ATRAC3P_SUBBANDS; i++) {\n                this.ctx.channels[chNum].tonesInfo[i].clear()\n\t\t\t}\n\t\t}\n\n        this.ctx.wavesInfo.tonesPresent = this.br.readBool()\n\t\tif (!this.ctx.wavesInfo.tonesPresent) {\n\t\t\treturn 0\n\t\t}\n\n        for (let i = 0; i < this.ctx.wavesInfo.waves.length; i++) {\n            this.ctx.wavesInfo.waves[i]!!.clear()\n\t\t}\n\n        this.ctx.wavesInfo.amplitudeMode = this.br.read1()\n\t\tif (this.ctx.wavesInfo.amplitudeMode == 0) {\n\t\t\tlog.error(\"GHA amplitude mode 0\")\n\t\t\treturn Atrac3plusConstants.AT3P_ERROR\n\t\t}\n\n        this.ctx.wavesInfo.numToneBands = ChannelUnit.tone_vlc_tabs[0].getVLC2(this.br) + 1\n\n\t\tif (this.numChannels == 2) {\n            this.getSubbandFlags(this.ctx.wavesInfo.toneSharing, this.ctx.wavesInfo.numToneBands)\n            this.getSubbandFlags(this.ctx.wavesInfo.toneMaster, this.ctx.wavesInfo.numToneBands)\n\t\t\tif (this.getSubbandFlags(this.ctx.wavesInfo.phaseShift, this.ctx.wavesInfo.numToneBands)) {\n\t\t\t\tlog.warn(\"GHA Phase shifting\")\n\t\t\t}\n\t\t}\n\n        this.ctx.wavesInfo.tonesIndex = 0\n\n\t\tfor (let chNum = 0; chNum < this.numChannels; chNum++) {\n\t\t\tconst bandHasTones = ArrayUtils.create(16, _ => false)\n\t\t\tfor (let i = 0; i < this.ctx.wavesInfo.numToneBands; i++) {\n\t\t\t\tbandHasTones[i] = (chNum == 0) ? true : !this.ctx.wavesInfo.toneSharing[i]\n\t\t\t}\n\n            this.decodeTonesEnvelope(chNum, bandHasTones)\n\t\t\tconst ret = this.decodeBandNumwavs(chNum, bandHasTones)\n\t\t\tif (ret < 0) {\n\t\t\t\treturn ret\n\t\t\t}\n\n            this.decodeTonesFrequency(chNum, bandHasTones)\n            this.decodeTonesAmplitude(chNum, bandHasTones)\n            this.decodeTonesPhase(chNum, bandHasTones)\n\t\t}\n\n\t\tif (this.numChannels == 2) {\n\t\t\tfor (let i = 0; i < this.ctx.wavesInfo.numToneBands; i++) {\n\t\t\t\tif (this.ctx.wavesInfo.toneSharing[i]) {\n                    this.ctx.channels[1].tonesInfo[i].copy(this.ctx.channels[0].tonesInfo[i])\n\t\t\t\t}\n\n\t\t\t\tif (this.ctx.wavesInfo.toneMaster[i]) {\n\t\t\t\t\t// Swap channels 0 and 1\n\t\t\t\t\tconst tmp = new WavesData()\n\t\t\t\t\ttmp.copy(this.ctx.channels[0].tonesInfo[i])\n                    this.ctx.channels[0].tonesInfo[i].copy(this.ctx.channels[1].tonesInfo[i])\n                    this.ctx.channels[1].tonesInfo[i].copy(tmp)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn 0\n\t}\n\n\tdecodeResidualSpectrum(out: Float32Array[]) {\n\t\tconst sbRNGindex = new Int32Array(Atrac3plusConstants.ATRAC3P_SUBBANDS)\n\n\t\tif (this.ctx.muteFlag) {\n            for (let ch = 0; ch < this.numChannels; ch++) {\n\t\t\t\tout[ch].fill(0)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n        let RNGindex = 0;\n        for (let qu = 0; qu < this.ctx.usedQuantUnits; qu++) {\n\t\t\tRNGindex += this.ctx.channels[0].quSfIdx[qu] + this.ctx.channels[1].quSfIdx[qu]\n\t\t}\n\n\t\t{\n            let sb = 0;\n            while (sb < this.ctx.numCodedSubbands) {\n\t\t\t\tsbRNGindex[sb] = RNGindex & 0x3FC\n\t\t\t\tsb++\n\t\t\t\tRNGindex += 128\n\t\t\t}\n\t\t}\n\n\t\t// inverse quant and power compensation\n        for (let ch = 0; ch < this.numChannels; ch++) {\n\t\t\t// clear channel's residual spectrum\n\t\t\tout[ch].fill(0, 0, Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES)\n\n            for (let qu = 0; qu < this.ctx.usedQuantUnits; qu++) {\n\t\t\t\tconst src = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\t\t\t\tconst dst = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\t\t\t\tconst nspeclines = Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu + 1] - Atrac3plusDsp.ff_atrac3p_qu_to_spec_pos[qu]\n\n\t\t\t\tif (this.ctx.channels[ch].quWordlen[qu] > 0) {\n\t\t\t\t\tconst q = Atrac3plusDsp.ff_atrac3p_sf_tab[this.ctx.channels[ch].quSfIdx[qu]] * Atrac3plusDsp.ff_atrac3p_mant_tab[this.ctx.channels[ch].quWordlen[qu]]\n\t\t\t\t\tfor (let i = 0; i < nspeclines; i++) {\n\t\t\t\t\t\tout[ch][dst + i] = this.ctx.channels[ch].spectrum[src + i] * q\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n            for (let sb = 0; sb < this.ctx.numCodedSubbands; sb++) {\n                this.dsp!!.powerCompensation(this.ctx, ch, out[ch], sbRNGindex[sb], sb)\n\t\t\t}\n\t\t}\n\n\t\tif (this.ctx.unitType == Atrac3plusConstants.CH_UNIT_STEREO) {\n\t\t\tconst tmp = new Float32Array(Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n            for (let sb = 0; sb < this.ctx.numCodedSubbands; sb++) {\n\t\t\t\tif (this.ctx.swapChannels[sb]) {\n\t\t\t\t\t// Swap both channels\n\t\t\t\t\tMemoryUtils.arraycopyF(out[0], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, tmp, 0, Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n\t\t\t\t\tMemoryUtils.arraycopyF(out[1], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, out[0], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n\t\t\t\t\tMemoryUtils.arraycopyF(tmp, 0, out[1], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n\t\t\t\t}\n\n\t\t\t\t// flip coefficients' sign if requested\n\t\t\t\tif (this.ctx.negateCoeffs[sb]) {\n\t\t\t\t\tfor (let i = 0; i < Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES; i++) {\n\t\t\t\t\t\tout[1][sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES + i] = -out[1][sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES + i]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treconstructFrame(at3pContext: Context) {\n        for (let ch = 0; ch < this.numChannels; ch++) {\n            for (let sb = 0; sb < this.ctx.numSubbands; sb++) {\n\t\t\t\t// inverse transform and windowing\n\t\t\t\tthis.dsp!!.imdct(at3pContext.mdctCtx!!, at3pContext.samples[ch], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, at3pContext.mdctBuf[ch], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, ((this.ctx.channels[ch].wndShapePrev[sb]) ? 2 : 0) + ((this.ctx.channels[ch].wndShape[sb]) ? 1 : 0), sb)\n\n\t\t\t\t// gain compensation and overlapping\n\t\t\t\tat3pContext.gaincCtx!!.gainCompensation(at3pContext.mdctBuf[ch], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, this.ctx.prevBuf[ch], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, this.ctx.channels[ch].gainDataPrev[sb], this.ctx.channels[ch].gainData[sb], Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, at3pContext.timeBuf[ch], sb * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES)\n\t\t\t}\n\n\t\t\t// zero unused subbands in both output and overlapping buffers\n            this.ctx.prevBuf[ch].fill(0, this.ctx.numSubbands * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, this.ctx.prevBuf[ch].length)\n\t\t\tat3pContext.timeBuf[ch].fill(0, this.ctx.numSubbands * Atrac3plusConstants.ATRAC3P_SUBBAND_SAMPLES, at3pContext.timeBuf[ch].length)\n\n\t\t\t// resynthesize and add tonal signal\n\t\t\tif (this.ctx.wavesInfo.tonesPresent || this.ctx.wavesInfoPrev.tonesPresent) {\n                for (let sb = 0; sb < this.ctx.numSubbands; sb++) {\n\t\t\t\t\tif (this.ctx.channels[ch].tonesInfo[sb].numWavs > 0 || this.ctx.channels[ch].tonesInfoPrev[sb].numWavs > 0) {\n                        this.dsp!!.generateTones(this.ctx, ch, sb, at3pContext.timeBuf[ch], sb * 128)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// subband synthesis and acoustic signal output\n            this.dsp!!.ipqf(at3pContext.ipqfDctCtx!!, this.ctx.ipqfCtx[ch], at3pContext.timeBuf[ch], at3pContext.outpBuf[ch])\n\t\t}\n\n\t\t// swap window shape and gain control buffers\n        for (let ch = 0; ch < this.numChannels; ch++) {\n\t\t\tconst tmp1 = this.ctx.channels[ch].wndShape\n            this.ctx.channels[ch].wndShape = this.ctx.channels[ch].wndShapePrev\n            this.ctx.channels[ch].wndShapePrev = tmp1\n\n\t\t\tconst tmp2 = this.ctx.channels[ch].gainData\n            this.ctx.channels[ch].gainData = this.ctx.channels[ch].gainDataPrev\n            this.ctx.channels[ch].gainDataPrev = tmp2\n\n\t\t\tconst tmp3 = this.ctx.channels[ch].tonesInfo\n            this.ctx.channels[ch].tonesInfo = this.ctx.channels[ch].tonesInfoPrev\n            this.ctx.channels[ch].tonesInfoPrev = tmp3\n\t\t}\n\n\t\tconst tmp = this.ctx.wavesInfo\n        this.ctx.wavesInfo = this.ctx.wavesInfoPrev\n        this.ctx.wavesInfoPrev = tmp\n\t}\n\n    /* build huffman tables for gain data decoding */\n    private static gain_cbs = arrayOf(Atrac3plusData2.atrac3p_huff_gain_npoints1_cb, Atrac3plusData2.atrac3p_huff_gain_npoints1_cb, Atrac3plusData2.atrac3p_huff_gain_lev1_cb, Atrac3plusData2.atrac3p_huff_gain_lev2_cb, Atrac3plusData2.atrac3p_huff_gain_lev3_cb, Atrac3plusData2.atrac3p_huff_gain_lev4_cb, Atrac3plusData2.atrac3p_huff_gain_loc3_cb, Atrac3plusData2.atrac3p_huff_gain_loc1_cb, Atrac3plusData2.atrac3p_huff_gain_loc4_cb, Atrac3plusData2.atrac3p_huff_gain_loc2_cb, Atrac3plusData2.atrac3p_huff_gain_loc5_cb)\n    private static gain_xlats = arrayOf(null, Atrac3plusData2.atrac3p_huff_gain_npoints2_xlat, Atrac3plusData2.atrac3p_huff_gain_lev1_xlat, Atrac3plusData2.atrac3p_huff_gain_lev2_xlat, Atrac3plusData2.atrac3p_huff_gain_lev3_xlat, Atrac3plusData2.atrac3p_huff_gain_lev4_xlat, Atrac3plusData2.atrac3p_huff_gain_loc3_xlat, Atrac3plusData2.atrac3p_huff_gain_loc1_xlat, Atrac3plusData2.atrac3p_huff_gain_loc4_xlat, Atrac3plusData2.atrac3p_huff_gain_loc2_xlat, Atrac3plusData2.atrac3p_huff_gain_loc5_xlat)\n    private static gain_vlc_tabs = ArrayUtils.create(11, i => {\n        const vlc = new VLC()\n        ChannelUnit.buildCanonicalHuff(ChannelUnit.gain_cbs[i], ChannelUnit.gain_xlats[i], vlc)\n        return vlc\n    })\n\n    /* build huffman tables for tone decoding */\n    private static tone_cbs = arrayOf(Atrac3plusData2.atrac3p_huff_tonebands_cb, Atrac3plusData2.atrac3p_huff_numwavs1_cb, Atrac3plusData2.atrac3p_huff_numwavs2_cb, Atrac3plusData2.atrac3p_huff_wav_ampsf1_cb, Atrac3plusData2.atrac3p_huff_wav_ampsf2_cb, Atrac3plusData2.atrac3p_huff_wav_ampsf3_cb, Atrac3plusData2.atrac3p_huff_freq_cb)\n    private static tone_xlats = arrayOf(null, null, Atrac3plusData2.atrac3p_huff_numwavs2_xlat, Atrac3plusData2.atrac3p_huff_wav_ampsf1_xlat, Atrac3plusData2.atrac3p_huff_wav_ampsf2_xlat, Atrac3plusData2.atrac3p_huff_wav_ampsf3_xlat, Atrac3plusData2.atrac3p_huff_freq_xlat)\n    private static tone_vlc_tabs = ArrayUtils.create(7, i => {\n        const vlc = new VLC()\n        ChannelUnit.buildCanonicalHuff(ChannelUnit.tone_cbs[i], ChannelUnit.tone_xlats[i], vlc)\n        return vlc\n    })\n\n    private static wl_nb_bits = intArrayOf(2, 3, 5, 5)\n    private static wl_nb_codes = intArrayOf(3, 5, 8, 8)\n    private static wl_bits = arrayOf(Atrac3plusData2.atrac3p_wl_huff_bits1, Atrac3plusData2.atrac3p_wl_huff_bits2, Atrac3plusData2.atrac3p_wl_huff_bits3, Atrac3plusData2.atrac3p_wl_huff_bits4)\n    private static wl_codes = arrayOf(Atrac3plusData2.atrac3p_wl_huff_code1, Atrac3plusData2.atrac3p_wl_huff_code2, Atrac3plusData2.atrac3p_wl_huff_code3, Atrac3plusData2.atrac3p_wl_huff_code4)\n    private static wl_xlats = arrayOf(Atrac3plusData2.atrac3p_wl_huff_xlat1, Atrac3plusData2.atrac3p_wl_huff_xlat2, null, null)\n\n    private static ct_nb_bits = intArrayOf(3, 4, 4, 4)\n    private static ct_nb_codes = intArrayOf(4, 8, 8, 8)\n    private static ct_bits = arrayOf(Atrac3plusData2.atrac3p_ct_huff_bits1, Atrac3plusData2.atrac3p_ct_huff_bits2, Atrac3plusData2.atrac3p_ct_huff_bits2, Atrac3plusData2.atrac3p_ct_huff_bits3)\n    private static ct_codes = arrayOf(Atrac3plusData2.atrac3p_ct_huff_code1, Atrac3plusData2.atrac3p_ct_huff_code2, Atrac3plusData2.atrac3p_ct_huff_code2, Atrac3plusData2.atrac3p_ct_huff_code3)\n    private static ct_xlats = arrayOf(null, null, Atrac3plusData2.atrac3p_ct_huff_xlat1, null)\n\n    private static sf_nb_bits = intArrayOf(9, 9, 9, 9, 6, 6, 7, 7)\n    private static sf_nb_codes = intArrayOf(64, 64, 64, 64, 16, 16, 16, 16)\n    private static sf_bits = arrayOf(Atrac3plusData2.atrac3p_sf_huff_bits1, Atrac3plusData2.atrac3p_sf_huff_bits1, Atrac3plusData2.atrac3p_sf_huff_bits2, Atrac3plusData2.atrac3p_sf_huff_bits3, Atrac3plusData2.atrac3p_sf_huff_bits4, Atrac3plusData2.atrac3p_sf_huff_bits4, Atrac3plusData2.atrac3p_sf_huff_bits5, Atrac3plusData2.atrac3p_sf_huff_bits6)\n    private static sf_codes = arrayOf(Atrac3plusData2.atrac3p_sf_huff_code1, Atrac3plusData2.atrac3p_sf_huff_code1, Atrac3plusData2.atrac3p_sf_huff_code2, Atrac3plusData2.atrac3p_sf_huff_code3, Atrac3plusData2.atrac3p_sf_huff_code4, Atrac3plusData2.atrac3p_sf_huff_code4, Atrac3plusData2.atrac3p_sf_huff_code5, Atrac3plusData2.atrac3p_sf_huff_code6)\n    private static sf_xlats = arrayOf(Atrac3plusData2.atrac3p_sf_huff_xlat1, Atrac3plusData2.atrac3p_sf_huff_xlat2, null, null, Atrac3plusData2.atrac3p_sf_huff_xlat4, Atrac3plusData2.atrac3p_sf_huff_xlat5, null, null)\n\n    private static wl_vlc_tabs = ArrayUtils.create<VLC>(4, i => {\n        const vlc = new VLC()\n        vlc.initVLCSparse(ChannelUnit.wl_nb_bits[i], ChannelUnit.wl_nb_codes[i], ChannelUnit.wl_bits[i], ChannelUnit.wl_codes[i], ChannelUnit.wl_xlats[i])\n        return vlc\n    });\n    private static sf_vlc_tabs = ArrayUtils.create<VLC>(8, i => {\n        const vlc = new VLC()\n        vlc.initVLCSparse(ChannelUnit.sf_nb_bits[i], ChannelUnit.sf_nb_codes[i], ChannelUnit.sf_bits[i], ChannelUnit.sf_codes[i], ChannelUnit.sf_xlats[i])\n        return vlc\n    });\n    private static ct_vlc_tabs = ArrayUtils.create<VLC>(4, i => {\n        const vlc = new VLC()\n        vlc.initVLCSparse(ChannelUnit.ct_nb_bits[i], ChannelUnit.ct_nb_codes[i], ChannelUnit.ct_bits[i], ChannelUnit.ct_codes[i], ChannelUnit.ct_xlats[i])\n        return vlc\n    })\n\n    /* build huffman tables for spectrum decoding */\n    private static spec_vlc_tabs = ArrayUtils.create(112, i => {\n        const atrac3pSpecCodeTab = Atrac3plusData1.atrac3p_spectra_tabs[i]\n        if (atrac3pSpecCodeTab.cb != null) {\n            const vlc = new VLC()\n            ChannelUnit.buildCanonicalHuff(atrac3pSpecCodeTab.cb!!, atrac3pSpecCodeTab.xlat, vlc)\n            return vlc\n        } else {\n            return null\n        }\n    });\n\n    private static buildCanonicalHuff(cb: Int32Array, xlat: Int32Array|null, vlc: VLC): Int {\n        const codes = new Int32Array(256)\n        const bits = new Int32Array(256)\n        let cbIndex = 0;\n        let index = 0;\n        let code = 0;\n        const minLen = cb[cbIndex++] // get shortest codeword length\n        const maxLen = cb[cbIndex++] // get longest  codeword length\n\n        for (let b = minLen; b <= maxLen; b++) {\n            for (let i = cb[cbIndex++]; i >= 1; i--) {\n                bits[index] = b\n                codes[index] = code++\n                index++\n            }\n            code = code << 1\n        }\n\n        return vlc.initVLCSparse(maxLen, index, bits, codes, xlat)\n    }\n}\n", "import {logger} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {Context} from \"./Atrac3PlusDtos\";\nimport {Atrac} from \"./Atrac\";\nimport {BitReader, CodecUtils, FFT, IMemory} from \"../MeUtils\";\nimport {ChannelUnit} from \"./ChannelUnit\";\nimport {Atrac3plusDsp} from \"./Atrac3plusDsp\";\nimport {Atrac3plusConstants} from \"./Atrac3plusConstants\";\n\ntype Int = number\n\nconst log = logger.named(\"atrac3plus\")\n\n/*\n * Based on the FFmpeg version from Maxim Poliakovski.\n * All credits go to him.\n * C to Java conversion by gid15 for the jpcsp project.\n * Java to Kotlin for kpspemu\n */\nexport class Atrac3plusDecoder {\n\n    private ctx?: Context = undefined\n\n    get numberOfSamples(): Int { return Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES }\n\n    // noinspection JSUnusedLocalSymbols\n    init(bytesPerFrame: Int, channels: Int, outputChannels: Int, codingMode: Int): Int {\n        const ctx = new Context()\n        this.ctx = ctx\n        ctx.outputChannels = outputChannels\n        ctx.dsp = new Atrac3plusDsp()\n        for (let i = 0; i < ctx.numChannelBlocks; i++) {\n            ctx.channelUnits[i] = new ChannelUnit()\n            ctx.channelUnits[i].setDsp(ctx!!.dsp!!)\n        }\n\n        // initialize IPQF\n        ctx.ipqfDctCtx = new FFT()\n        ctx.ipqfDctCtx.mdctInit(5, true, 31.0 / 32768.9)\n\n        ctx.mdctCtx = new FFT()\n        ctx.dsp.initImdct(ctx!!.mdctCtx!!)\n\n        Atrac3plusDsp.initWaveSynth()\n\n        ctx.gaincCtx = new Atrac()\n        ctx.gaincCtx.initGainCompensation(6, 2)\n\n        return 0\n    }\n\n    decode(mem: IMemory, inputAddr: Int, inputLength: Int, output: Stream): Int {\n        let ret: Int;\n\n        if (!this.ctx) {\n            return Atrac3plusConstants.AT3P_ERROR\n        }\n\n        if (inputLength < 0) {\n            return Atrac3plusConstants.AT3P_ERROR\n        }\n        if (inputLength == 0) {\n            return 0\n        }\n\n        this.ctx!!.br = new BitReader(mem, inputAddr, inputLength)\n        if (this.ctx!!.br!!.readBool()) {\n            log.error(\"Invalid start bit\")\n            return Atrac3plusConstants.AT3P_ERROR\n        }\n\n        let chBlock = 0;\n        let channelsToProcess = 0;\n        while (this.ctx!!.br!!.bitsLeft >= 2) {\n            const chUnitId = this.ctx!!.br!!.read(2)\n            if (chUnitId == Atrac3plusConstants.CH_UNIT_TERMINATOR) {\n                break\n            }\n            if (chUnitId == Atrac3plusConstants.CH_UNIT_EXTENSION) {\n                log.warn(`Non implemented channel unit extension`)\n                return Atrac3plusConstants.AT3P_ERROR\n            }\n\n            if (chBlock >= this.ctx!!.channelUnits.length) {\n                log.error(`Too many channel blocks`)\n                return Atrac3plusConstants.AT3P_ERROR\n            }\n\n            if (this.ctx!!.channelUnits[chBlock] == null) {\n                log.warn(`Null channelUnits block: ${chBlock}`)\n                break\n            }\n\n            const channelUnit = this.ctx!!.channelUnits[chBlock]!!\n            channelUnit.setBitReader(this.ctx!!.br!!)\n\n            channelUnit.ctx.unitType = chUnitId\n            channelsToProcess = chUnitId + 1\n            channelUnit.setNumChannels(channelsToProcess)\n\n            ret = channelUnit.decode()\n            if (ret < 0) {\n                return ret\n            }\n\n            channelUnit.decodeResidualSpectrum(this.ctx!!.samples)\n            channelUnit.reconstructFrame(this.ctx!!)\n\n            CodecUtils.writeOutput(this.ctx!!.outpBuf, output, Atrac3plusConstants.ATRAC3P_FRAME_SAMPLES, channelsToProcess, this.ctx!!.outputChannels)\n\n            chBlock++\n        }\n\n        if (log.isTraceEnabled) {\n            log.trace(\"Bytes read 0x%X\".format(this.ctx.br.bytesRead))\n        }\n\n        return this.ctx!!.br!!.bytesRead\n    }\n}\n", "\uFEFFimport {SceKernelErrors} from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {waitAsync} from \"../../global/async\";\nimport {AcceptCallbacks, PromiseFast, WaitingThreadInfo} from \"../../global/utils\";\nimport {MathUtils} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, U32} from \"../utils\";\nimport {PspAudioChannel} from \"../../core/audio\";\n\nexport class sceAudio {\n\tprivate channels: Channel[] = [];\n\n\tconstructor(private context: EmulatorContext) {\n\t\tfor (let n = 0; n < 8; n++) this.channels.push(new Channel(n));\n\t}\n\n\tprivate isValidChannel(channelId: number) {\n\t\treturn (channelId >= 0 && channelId < this.channels.length);\n\t}\n\n\t@nativeFunction(0x01562BA3, 150)\n\t@U32 sceAudioOutput2Reserve(@I32 sampleCount: number) {\n\t\tconsole.warn('sceAudioOutput2Reserve not implemented!');\n\t\tdebugger;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x2D53F36E, 150)\n    @U32 async sceAudioOutput2OutputBlocking(@I32 volume: number, @PTR buffer: Stream) {\n        await waitAsync(10)\n\t\treturn 0\n\t}\n\n    @nativeFunction(0xB011922F, 150, {disableInsideInterrupt: true})\n    @U32 sceAudioGetChannelRestLength(@I32 channelId: number) {\n        if (!this.isValidChannel(channelId)) return SceKernelErrors.ERROR_AUDIO_INVALID_CHANNEL;\n        const channel = this.getChannelById(channelId);\n        return channel.restLength\n    }\n\n\n    @nativeFunction(0x5EC81C55, 150)\n    @U32 sceAudioChReserve(@I32 channelId: number, @I32 sampleCount: number, @I32 format: AudioFormat) {\n\t\tif (channelId >= this.channels.length) return -1;\n\t\tif (channelId < 0) {\n\t\t\tchannelId = this.channels.first(channel => !channel.allocated)!.id;\n\t\t\tif (channelId === undefined) {\n\t\t\t\tconsole.warn('Not implemented sceAudio.sceAudioChReserve');\n\t\t\t\treturn -2;\n\t\t\t}\n\t\t}\n        const channel = this.channels[channelId];\n        channel.allocated = true;\n\t\tchannel.sampleCount = sampleCount;\n\t\tchannel.format = format;\n\t\t//console.log(this.context);\n\t\tchannel.channel = this.context.audio.createChannel();\n\t\tchannel.channel.start();\n        return channelId;\n\t}\n\t\n\tprivate getChannelById(id: number) {\n\t\treturn this.channels[id];\n\t}\n\n\t@nativeFunction(0x6FC46853, 150)\n    @U32 sceAudioChRelease(@I32 channelId: number) {\n\t\tif (!this.isValidChannel(channelId)) return SceKernelErrors.ERROR_AUDIO_INVALID_CHANNEL;\n        const channel = this.getChannelById(channelId);\n        channel.allocated = false;\n\t\tchannel.channel?.stop();\n\t\tchannel.channel = null;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x95FD0C2D, 150)\n    @U32 sceAudioChangeChannelConfig(@I32 channelId: number, @I32 format: AudioFormat) {\n\t\tif (!this.isValidChannel(channelId)) return SceKernelErrors.ERROR_AUDIO_INVALID_CHANNEL;\n        const channel = this.getChannelById(channelId);\n        channel.format = format;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xCB2E439E, 150)\n    @U32 sceAudioSetChannelDataLen(@I32 channelId: number, @I32 sampleCount: number) {\n\t\t//ERROR_AUDIO_CHANNEL_NOT_INIT\n\t\tif (!this.isValidChannel(channelId)) return SceKernelErrors.ERROR_AUDIO_INVALID_CHANNEL;\n\t\tif ((sampleCount % 64) != 0) return SceKernelErrors.ERROR_AUDIO_OUTPUT_SAMPLE_DATA_SIZE_NOT_ALIGNED;\n        const channel = this.getChannelById(channelId);\n        channel.sampleCount = sampleCount;\n\t\treturn 0;\n\t}\n\t\n\t_sceAudioOutput(channelId: number, leftVolume: number, rightVolume: number, buffer: Stream): any {\n\t\tif (!buffer) return -1;\n\t\tif (!this.isValidChannel(channelId)) return SceKernelErrors.ERROR_AUDIO_INVALID_CHANNEL;\n\t\t//console.log(leftVolume, rightVolume);\n        const channel = this.getChannelById(channelId)!\n        return channel.channel!.playAsync(\n\t\t\tchannel.numberOfChannels,\n\t\t\tbuffer.readInt16Array(channel.totalSampleCount),\n\t\t\tMathUtils.clamp01(leftVolume / 32768),\n\t\t\tMathUtils.clamp01(rightVolume / 32768)\n\t\t);\n\t}\n\n\t@nativeFunction(0x13F592BC, 150)\n    @U32 sceAudioOutputPannedBlocking(@I32 channelId: number, @I32 leftVolume: number, @I32 rightVolume: number, @PTR buffer: Stream): any {\n        const result = this._sceAudioOutput(channelId, leftVolume, rightVolume, buffer);\n        if (!PromiseFast.isPromise(result)) return result;\n\t\treturn new WaitingThreadInfo('sceAudioOutputPannedBlocking', channelId, result, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x136CAF51, 150)\n    @U32 sceAudioOutputBlocking(@I32 channelId: number, @I32 volume: number, @PTR buffer: Stream): any {\n        return this._sceAudioOutput(channelId, volume, volume, buffer);\n\t\t//debugger;\n\t\t//return new WaitingThreadInfo('sceAudioOutputBlocking', channel, , AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x8C1009B2, 150)\n    @U32 sceAudioOutput(@I32 channelId: number, @I32 volume: number, @PTR buffer: Stream): any {\n        const result = this._sceAudioOutput(channelId, volume, volume, buffer);\n        return 0;\n\t}\n\n\t@nativeFunction(0xE2D56B2D, 150)\n    @U32 sceAudioOutputPanned(@I32 channelId: number, @I32 leftVolume: number, @I32 rightVolume: number, @PTR buffer: Stream): any {\n        const result = this._sceAudioOutput(channelId, leftVolume, rightVolume, buffer);\n        return 0;\n\t}\n\n\t@nativeFunction(0xB7E1D8E7, 150)\n    @U32 sceAudioChangeChannelVolume(@I32 channelId: number, @I32 volumeLeft: number, @I32 volumeRight: number) {\n\t\tconsole.warn(\"Not implemented sceAudioChangeChannelVolume\");\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xB7E1D8E7, 150)\n    @U32 sceAudioGetChannelRestLen(@I32 channelId: number) {\n\t\tconsole.warn(\"Not implemented sceAudioGetChannelRestLen\");\n\t\treturn 0;\n\t}\n}\n\nenum AudioFormat {\n\tStereo = 0x00,\n\tMono = 0x10,\n}\n\nclass Channel {\n\tallocated: boolean = false;\n\tsampleCount: number = 44100;\n\tformat: AudioFormat = AudioFormat.Stereo;\n\tchannel: PspAudioChannel|null = null;\n    restLength: number = 1024\n\n\tget totalSampleCount() {\n\t\treturn this.sampleCount * this.numberOfChannels;\n\t\t//return this.sampleCount;\n\t}\n\n\tget numberOfChannels() {\n\t\treturn (this.format == AudioFormat.Stereo) ? 2 : 1;\n\t}\n\n\tconstructor(public id: number) {\n\t}\n}\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {AcceptCallbacks, WaitingThreadInfo} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, THREAD, U32} from \"../utils\";\nimport {SceCtrlData} from \"../../core/controller\";\nimport {Thread} from \"../manager/thread\";\n\nexport class sceCtrl {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x3A622550, 150)\n    @U32 sceCtrlPeekBufferPositive(@PTR sceCtrlDataPtr: Stream, @I32 count: number) {\n\t\t//console.log('sceCtrlPeekBufferPositive');\n\t\tfor (let n = 0; n < count; n++) SceCtrlData.struct.write(sceCtrlDataPtr, this.context.controller.data);\n        return count;\n    }\n\n\t@nativeFunction(0x1F803938, 150)\n    @U32 sceCtrlReadBufferPositive(@THREAD thread: Thread, @PTR sceCtrlDataPtr: Stream, @I32 count: number) {\n\t\t//console.log('sceCtrlReadBufferPositive');\n\n\t\tfor (let n = 0; n < count; n++) SceCtrlData.struct.write(sceCtrlDataPtr, this.context.controller.data);\n\t\t//return PromiseFast.resolve(0);\n        const promise = (async () => {\n            await this.context.display.waitVblankStartAsync(thread)\n            return count\n        })()\n\t\treturn new WaitingThreadInfo('sceCtrlReadBufferPositive', this.context.display, promise, AcceptCallbacks.NO);\n\t\t//return 0;\n    }\n\n\t@nativeFunction(0x6A2774F3, 150)\n    @U32 sceCtrlSetSamplingCycle(@I32 samplingCycle: number) {\n        //console.warn('Not implemented sceCtrl.sceCtrlSetSamplingCycle');\n        return 0;\n    }\n\n\t@nativeFunction(0x1F4011E6, 150)\n    @U32 sceCtrlSetSamplingMode(@I32 samplingMode: number) {\n        //console.warn('Not implemented sceCtrl.sceCtrlSetSamplingMode');\n        return 0;\n\t}\n\n\tprivate lastLatchData = new SceCtrlData();\n\n\t_peekLatch(currentLatchPtr: Stream) {\n        const ButtonsNew = this.context.controller.data.buttons;\n        const ButtonsOld = this.lastLatchData.buttons;\n        const ButtonsChanged = ButtonsOld ^ ButtonsNew;\n\n        currentLatchPtr.writeInt32(ButtonsNew & ButtonsChanged); // uiMake\n\t\tcurrentLatchPtr.writeInt32(ButtonsOld & ButtonsChanged); // uiBreak\n\t\tcurrentLatchPtr.writeInt32(ButtonsNew); // uiPress\n\t\tcurrentLatchPtr.writeInt32((ButtonsOld & ~ButtonsNew) & ButtonsChanged); // uiRelease\n\n\t\treturn this.context.controller.latchSamplingCount;\n\t}\n\n\t@nativeFunction(0x0B588501, 150)\n\t@U32 sceCtrlReadLatch(@PTR currentLatchPtr: Stream) {\n\t\ttry {\n\t\t\treturn this._peekLatch(currentLatchPtr);\n\t\t} finally {\n\t\t\tthis.lastLatchData = this.context.controller.data;\n\t\t\tthis.context.controller.latchSamplingCount = 0;\n\t\t}\n\t}\n\n\t@nativeFunction(0xA7144800, 150)\n    @U32 sceCtrlSetIdleCancelThreshold(@I32 idlereset: number, @I32 idleback: number) {\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {AcceptCallbacks, logger, sprintf, WaitingThreadInfo} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, U32, PTR, THREAD, F32, nativeFunction} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\nimport {PspDisplay} from \"../../core/display\";\nimport {PixelFormat} from \"../../core/pixelformat\";\n\ntype uint = number;\ntype int = number;\n\nconst console = logger.named(\"sceDisplay\")\n\nexport class sceDisplay {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate mode = 0;\n\tprivate width = 512;\n\tprivate height = 272;\n\n\t@nativeFunction(0x0E20F177, 150)\n    @U32 sceDisplaySetMode(@U32 mode: number, @U32 width: number, @U32 height: number) {\n\t\tconsole.info(sprintf(\"sceDisplay.sceDisplaySetMode(mode: %d, width: %d, height: %d)\", mode, width, height));\n\t\tthis.mode = mode;\n\t\tthis.width = width;\n\t\tthis.height = height;\n        return 0;\n\t}\n\n\t@nativeFunction(0xDEA197D4, 150)\n    @U32 sceDisplayGetMode(@PTR modePtr: Stream, @PTR widthPtr: Stream, @PTR heightPtr: Stream) {\n\t\tif (modePtr) modePtr.writeInt32(this.mode);\n\t\tif (widthPtr) widthPtr.writeInt32(this.width);\n\t\tif (heightPtr) heightPtr.writeInt32(this.height);\n\t\treturn 0;\n\t}\n\n\t_waitVblankAsync(thread: Thread, acceptCallbacks: AcceptCallbacks) {\n\t\tthis.context.display.updateTime();\n\t\treturn new WaitingThreadInfo('_waitVblankAsync', this.context.display, this.context.display.waitVblankAsync(thread), acceptCallbacks);\n\t}\n\n\t_waitVblankStartAsync(thread: Thread, acceptCallbacks: AcceptCallbacks) {\n\t\tthis.context.display.updateTime();\n\t\treturn new WaitingThreadInfo('_waitVblankStartAsync', this.context.display, this.context.display.waitVblankStartAsync(thread), acceptCallbacks);\n\t}\n\n\t@nativeFunction(0x36CDFADE, 150, {disableInsideInterrupt: true})\n    @U32 sceDisplayWaitVblank(@THREAD thread: Thread, @I32 cycleNum: number) {\n\t\treturn this._waitVblankAsync(thread, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x8EB9EC49, 150, {disableInsideInterrupt: true})\n    @U32 sceDisplayWaitVblankCB(@THREAD thread: Thread, @I32 cycleNum: number) {\n\t\treturn this._waitVblankAsync(thread, AcceptCallbacks.YES);\n\t}\n\n\t@nativeFunction(0x984C27E7, 150, {disableInsideInterrupt: true})\n    @U32 sceDisplayWaitVblankStart(@THREAD thread: Thread) {\n\t\treturn this._waitVblankAsync(thread, AcceptCallbacks.NO);\n\t\t//return this._waitVblankStartAsync(thread, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x46F186C3, 150, {disableInsideInterrupt: true})\n    @U32 sceDisplayWaitVblankStartCB(@THREAD thread: Thread) {\n\t\treturn this._waitVblankAsync(thread, AcceptCallbacks.YES);\n\t\t//return this._waitVblankStartAsync(thread, AcceptCallbacks.YES)\n\t}\n\n\t@nativeFunction(0x9C6EAAD7, 150)\n    @I32 sceDisplayGetVcount() {\n\t\tthis.context.display.updateTime();\n\t\treturn this.context.display.vblankCount;\n\t}\n\n\t@nativeFunction(0xDBA6C4C4, 150)\n    @F32 sceDisplayGetFramePerSec() {\n\t\treturn PspDisplay.PROCESSED_PIXELS_PER_SECOND * PspDisplay.CYCLES_PER_PIXEL / (PspDisplay.PIXELS_IN_A_ROW * PspDisplay.NUMBER_OF_ROWS);\n\t}\n\n\t@nativeFunction(0x4D4E10EC, 150)\n\t@I32 sceDisplayIsVblank() {\n\t\treturn (this.context.display.secondsLeftForVblank == 0);\n\t}\n\n\t@nativeFunction(0x289D82FE, 150)\n\t@U32 sceDisplaySetFrameBuf(@U32 address: uint, @I32 bufferWidth: int, @U32 pixelFormat: PixelFormat, @U32 sync: SebufMode) {\n\t    //console.log('sceDisplaySetFrameBuf', sync, SebufMode[sync])\n        this.context.display.address = address;\n        this.context.display.bufferWidth = bufferWidth;\n        this.context.display.pixelFormat = pixelFormat;\n        this.context.display.sync = sync;\n        return 0;\n\t}\n\n\t@nativeFunction(0xEEDA2E54, 150)\n    @U32 sceDisplayGetFrameBuf(@PTR topaddrPtr: Stream, @PTR bufferWidthPtr: Stream, @PTR pixelFormatPtr: Stream, @PTR syncPtr: Stream) {\n\t\tif (topaddrPtr) topaddrPtr.writeInt32(this.context.display.address);\n\t\tif (bufferWidthPtr) bufferWidthPtr.writeInt32(this.context.display.bufferWidth);\n\t\tif (pixelFormatPtr) pixelFormatPtr.writeInt32(this.context.display.pixelFormat);\n\t\tif (syncPtr) syncPtr.writeInt32(this.context.display.sync);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x773DD3A3, 150)\n    @U32 sceDisplayGetCurrentHcount() {\n\t\tthis.context.display.updateTime();\n\t\treturn this.context.display.hcountTotal;\n\t}\n}\n\nenum SebufMode {\n    IMMEDIATE = 0,\n    NEXTFRAME = 1\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {PromiseFast} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, U32} from \"../utils\";\n\nexport class sceDmac {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate _sceDmacMemcpy(destination: number, source: number, size: number): any {\n\t\tif (size == 0) return SceKernelErrors.ERROR_INVALID_SIZE;\n\t\tif (destination == 0) return SceKernelErrors.ERROR_INVALID_POINTER;\n\t\tif (source == 0) return SceKernelErrors.ERROR_INVALID_POINTER;\n\t\tthis.context.memory.copy(source, destination, size);\n\t\tif (size < 272) return 0;\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\t@nativeFunction(0x617F3FE6, 150)\n\t@U32 sceDmacMemcpy(@U32 destination: number, @U32 source: number, @I32 size: number) {\n\t\treturn this._sceDmacMemcpy(destination, source, size);\n\t}\n\n\t@nativeFunction(0xD97F94D8, 150)\n    @U32 sceDmacTryMemcpy(@U32 destination: number, @U32 source: number, @I32 size: number) {\n\t\treturn this._sceDmacMemcpy(destination, source, size);\n\t}\n}\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {AcceptCallbacks, Compensate, PromiseFast, WaitingThreadInfo} from \"../../global/utils\";\nimport {Struct, StructUInt32} from \"../../global/struct\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\nimport {PspGpuCallback} from \"../../core/gpu/gpu_core\";\nimport {SyncType} from \"../../core/gpu/gpu_state\";\n\nexport class sceGe_user {\n    constructor(private context: EmulatorContext) {\n\t}\n\n\tprivate eDRAMMemoryWidth = 0;\n\n\t@nativeFunction(0xB77905EA, 150)\n    @U32 sceGeEdramSetAddrTranslation(@I32 size: number) {\n\t\ttry { return this.eDRAMMemoryWidth; } finally { this.eDRAMMemoryWidth = size; }\n\t}\n\n\t@nativeFunction(0xA4FC06A4, 150)\n    @U32 sceGeSetCallback(@THREAD thread: Thread, @PTR callbackDataPtr: Stream) {\n        const callbacks = this.context.gpu.callbacks;\n        const info = CallbackData.struct.read(callbackDataPtr);\n        return callbacks.allocate(new PspGpuCallback(thread.state, info.signalFunction, info.signalArgument, info.finishFunction, info.finishArgument));\n\t}\n\n\t@nativeFunction(0x05DB22CE, 150)\n    @U32 sceGeUnsetCallback(@I32 callbackId: number) {\n\t\tthis.context.gpu.callbacks.remove(callbackId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xAB49E76A, 150)\n    @U32 sceGeListEnQueue(@U32 start: number, @U32 stall: number, @I32 callbackId: number, @PTR argsPtr: Stream) {\n\t\treturn this.context.gpu.listEnqueue(start, stall, callbackId, argsPtr);\n    }\n\n\t@nativeFunction(0x03444EB4, 150)\n    @U32 sceGeListSync(@I32 displayListId: number, @I32 syncType: SyncType) {\n        //console.warn('Not implemented sceGe_user.sceGeListSync');\n        return this.context.gpu.listSync(displayListId, syncType);\n    }\n\n    @nativeFunction(0xE0D68148, 150)\n    @U32 sceGeListUpdateStallAddr(@I32 displayListId: number, @I32 stall: number) {\n        //console.warn('Not implemented sceGe_user.sceGeListUpdateStallAddr');\n        return this.context.gpu.updateStallAddr(displayListId, stall);\n    }\n\n\t@nativeFunction(0xB287BD61, 150)\n\t@U32 sceGeDrawSync(@I32 syncType: SyncType): any {\n        const result = this.context.gpu.drawSync(syncType);\n        if (PromiseFast.isPromise(result)) {\n\t\t\t//result = PromiseFast.all([result, waitAsync(10)]);\n\t\t\treturn new WaitingThreadInfo('sceGeDrawSync', this.context.gpu, result, AcceptCallbacks.NO, Compensate.YES);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t@nativeFunction(0x4C06E472, 150)\n\t@U32 sceGeContinue() {\n\t\treturn -1;\n\t}\n\n\t@nativeFunction(0xB448EC0D, 150)\n\t@U32 sceGeBreak(@I32 mode:number, @PTR breakAddress:Stream) {\n\t\treturn -1;\n\t}\n\n\t@nativeFunction(0xE47E40E4, 150)\n\t@U32 sceGeEdramGetAddr() {\n\t\t//console.warn('Not implemented sceGe_user.sceGeEdramGetAddr', 0x04000000);\n\t\treturn 0x04000000;\n\t}\n\n\t@nativeFunction(0x1F6752AD, 150)\n\t@U32 sceGeEdramGetSize() {\n\t\t//console.warn('Not implemented sceGe_user.sceGeEdramGetSize', 0x00200000);\n\t\treturn 0x00200000; // 2MB\n\t}\n}\n\nclass CallbackData extends Struct {\n\t@StructUInt32 signalFunction: number = 0 // GE callback for the signal interrupt alias void function(int id, void *arg) PspGeCallback;\n    @StructUInt32 signalArgument: number = 0 // GE callback argument for signal interrupt\n    @StructUInt32 finishFunction: number = 0 // GE callback for the finish interrupt alias void function(int id, void *arg) PspGeCallback;\n    @StructUInt32 finishArgument: number = 0 // GE callback argument for finish interrupt\n}", "\uFEFFimport \"../../emu/global\"\nimport {ArrayBufferUtils} from \"../../global/utils\";\nimport {MathUtils} from \"../../global/math\";\nimport {getMemoryInstance} from \"../memory\";\nimport {GpuState, NumericEnum, PrimitiveType, VertexInfo} from \"./gpu_state\";\n\nconst memory = getMemoryInstance();\n\nconst enum SpriteVID {\n\tTL = 0,\n\tBR = 1,\n\tTR = 2,\n\tBL = 3,\n}\n\n// 0 - 2\n// | X |\n// 3 - 1\n\ntype SpriteExpanderFunc = (input:Uint8Array, output:Uint8Array, count:number) => void;\n\nclass SpriteExpander {\n\tstatic cache = new Map<number, SpriteExpanderFunc>();\n\t\n\tstatic forVertexInfo(vi: VertexInfo):SpriteExpanderFunc {\n        const hash = vi.hash;\n        if (!this.cache.has(hash)) {\n\t\t\tthis.cache.set(hash, <SpriteExpanderFunc>eval(`(function read_${vi.describe()}(input, output, count) { ${this.readAllCode(vi)} })`));\n\t\t}\n\t\treturn this.cache.get(hash)!;\n\t}\n\t\n\tstatic readAllCode(vi: VertexInfo) {\n        let code = `\"use strict\";`;\n\n        code += `const i8  = new Uint8Array(input.buffer, input.byteOffset);\\n`;\n\t\tcode += `const i16 = new Uint16Array(input.buffer, input.byteOffset);\\n`;\n\t\tcode += `const i32 = new Uint32Array(input.buffer, input.byteOffset);\\n`;\n\t\tcode += `const o8  = new Uint8Array(output.buffer, output.byteOffset);\\n`;\n\t\tif (vi.align >= 2) {\n\t\t\tcode += `const o16 = new Uint16Array(output.buffer, output.byteOffset);\\n`;\n\t\t\tif (vi.align >= 4) {\n\t\t\t\tcode += `const o32 = new Uint32Array(output.buffer, output.byteOffset);\\n`;\n\t\t\t}\n\t\t}\n\t\tcode += `let i = 0, o = 0;\\n`;\n\t\tcode += `for (let n = 0; n < count; n++) {\\n`;\n\t\tcode += this.readOneCode(vi);\n\t\tcode += `}\\n`;\n\t\treturn code;\n\t}\n\t\n\tprivate static readOneCode(vi: VertexInfo) {\n        let code = '';\n        const vsize = vi.size;\n\n        const CONVV = [null, 'o8', 'o16', 'o32'];\n        const CONVS = [0, 0, 1, 2];\n\n        const COLV = [null, null, null, null, 'o16', 'o16', 'o16', 'o32']; // ColorEnum\n        const COLS = [0, 0, 0, 0, 1, 1, 1, 2];\n\n        function _get(vid:SpriteVID, type: NumericEnum, offset:number, component:number) {\n\t\t\treturn `${CONVV[type]}[((o + ${offset + vsize * +vid}) >> ${CONVS[type]}) + ${component}]`;\n\t\t}\n\n\t\tfunction getColor(vid:SpriteVID) { return `${COLV[vi.color]}[((o + ${vi.colorOffset + vsize * +vid}) >> ${COLS[vi.color]})]`; }\n\t\tfunction getP_(vid:SpriteVID, n:number) { return _get(vid, vi.position, vi.positionOffset, n); }\n\t\tfunction getN_(vid:SpriteVID, n:number) { return _get(vid, vi.normal, vi.normalOffset, n); }\n\t\tfunction getT_(vid:SpriteVID, n:number) { return _get(vid, vi.texture, vi.textureOffset, n); }\n\n\t\tfunction copy_(vidTo:SpriteVID, vidFrom:SpriteVID, n:number) {\n            const out: string[] = [];\n            if (vi.hasPosition) out.push(`${getP_(vidTo, n)} = ${getP_(vidFrom, n)};`);\n\t\t\tif (vi.hasNormal) out.push(`${getN_(vidTo, n)} = ${getN_(vidFrom, n)};`);\n\t\t\tif (vi.hasTexture) out.push(`${getT_(vidTo, n)} = ${getT_(vidFrom, n)};`);\n\t\t\treturn out.join('\\n');\n\t\t}\n\t\t\n\t\tfunction copyX(vidTo:SpriteVID, vidFrom:SpriteVID) { return copy_(vidTo, vidFrom, 0); }\n\t\tfunction copyY(vidTo:SpriteVID, vidFrom:SpriteVID) { return copy_(vidTo, vidFrom, 1); }\n\t\tfunction copyColor(vidTo:SpriteVID, vidFrom:SpriteVID) { return vi.hasColor ? `${getColor(vidTo)} = ${getColor(vidFrom)};\\n` : ''; }\n\t\t\n\t\t/*\n\t\tif ((vsize % 4) == 0) {\n\t\t\tfor (let n = 0; n < (vsize / 4) * 2; n++) {\n\t\t\t\tcode += `o32[(o >> 2) + ${n + vsize * 0}] = i32[(i >> 2) + ${n + (vsize * 0)}];\\n`;\n\t\t\t\tcode += `o32[(o >> 2) + ${n + vsize * 2}] = i32[(i >> 2) + ${n + (vsize * 1)}];\\n`;\n\t\t\t}\n\t\t} else if ((vsize % 2) == 0) {\n\t\t\tfor (let n = 0; n < (vsize / 2) * 2; n++) {\n\t\t\t\tcode += `o16[(o >> 1) + ${n + vsize * 0}] = i16[(i >> 1) + ${n + (vsize * 0)}];\\n`;\n\t\t\t\tcode += `o16[(o >> 1) + ${n + vsize * 2}] = i16[(i >> 1) + ${n + (vsize * 1)}];\\n`;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let n = 0; n < vsize * 2; n++) {\n\t\t\t\tcode += `o8[(o >> 0) + ${n + vsize * 0}] = i8[(i >> 0) + ${n + (vsize * 0)}];\\n`;\n\t\t\t\tcode += `o8[(o >> 0) + ${n + vsize * 2}] = i8[(i >> 0) + ${n + (vsize * 1)}];\\n`;\n\t\t\t}\n\t\t}\n\t\t*/\n        const vsizex2 = vsize * 2\n        if ((vsize % 4) == 0) {\n            for (let n = 0; n < vsizex2 / 4; n++) {\n                const n4 = n * 4\n                code += `o32[(o + ${n4}) >> 2] = i32[(i + ${n4}) >> 2]; o32[(o + ${n4 + vsizex2}) >> 2] = i32[(i + ${n4}) >> 2];\\n`\n            }\n        } else {\n            for (let n = 0; n < vsizex2; n++) {\n                code += `o8[o + ${n}] = i8[i + ${n}]; o8[o + ${n + vsizex2}] = i8[i + ${n}];\\n`\n            }\n        }\n\t\t//code += `o8.subarray(o + ${vsize * 0}, o + ${vsize * 2}).set(i8.subarray(i, i + ${vsize * 2}));\\n`;\n\t\t//code += `o8.subarray(o + ${vsize * 2}, o + ${vsize * 4}).set(i8.subarray(i, i + ${vsize * 2}));\\n`;\n\n        const TL = SpriteVID.TL;\n        const BR = SpriteVID.BR;\n\n        code += copyX(SpriteVID.TR, BR);\n\t\tcode += copyY(SpriteVID.TR, TL);\n\t\tcode += copyX(SpriteVID.BL, TL);\n\t\tcode += copyY(SpriteVID.BL, BR);\t\n\t\tcode += copyColor(SpriteVID.TL, BR);\n\t\tcode += copyColor(SpriteVID.TR, BR);\n\t\tcode += copyColor(SpriteVID.BL, BR);\n\t\t\n\t\tcode += `i += ${vsize * 2};\\n`;\n\t\tcode += `o += ${vsize * 4};\\n`;\n\t\treturn code;\n\t\t//vertexInfo.size\n\t}\n}\n\nexport interface OptimizedDrawBufferDataTransfer {\n\tdata: number;\n\tdatasize: number;\n\tindices: number;\n\tindicesCount: number;\n}\n\nexport interface OptimizedBatchTransfer {\n\tstateOffset: number;\n\tprimType: PrimitiveType;\n\tdataLow: number, dataHigh: number,\n\tindexLow: number, indexHigh: number,\n\tindexCount: number,\n\ttextureLow: number, textureHigh: number,\n\tclutLow: number, clutHigh: number\n}\n\nexport interface BatchesTransfer {\n\tbuffer: ArrayBuffer;\n\tdata: OptimizedDrawBufferDataTransfer;\n\tbatches: OptimizedBatchTransfer[];\n}\n\nexport class OptimizedDrawBufferTransfer {\n\tstatic buildBatchesTransfer(odb:OptimizedDrawBuffer, batches2:OptimizedBatch[]):BatchesTransfer {\n\t\tconst chunks: { offset: number, size: number, data: ArrayBufferView }[] = [];\n\t\tlet offset = 0;\n\t\tconst batches:OptimizedBatchTransfer[] = [];\n\t\t\n\t\tfunction alloc(size: number) {\n            const address = offset;\n            offset += MathUtils.nextAligned(size, 16);\n\t\t\treturn address;\n\t\t}\n\t\t\n\t\tfunction allocData(data: ArrayBufferView) {\n\t\t\tchunks.push({ offset: offset, size: data.byteLength, data: data });\n\t\t\treturn alloc(data.byteLength);\n\t\t}\n\n        const odbData = odb.getData();\n        const odbIndices = odb.getIndices();\n\t\tconst data:OptimizedDrawBufferDataTransfer = {\n\t\t\tdata: allocData(odbData), datasize: odbData.length,\n\t\t\tindices: allocData(odbIndices), indicesCount: odbIndices.length,\n\t\t}\n\n        const memorySegments = new Map<number, number>();\n\n        function allocMemoryData(data: Uint8Array|null) {\n\t\t\tif (data == null) return 0;\n\t\t\tif (!memorySegments.has(data.byteOffset)) memorySegments.set(data.byteOffset, allocData(data));\n\t\t\treturn memorySegments.get(data.byteOffset);\n\t\t}\n\t\t\n\t\tfor (let batch of batches2) {\n\t\t\tlet btl = allocMemoryData(batch.textureData)!\n\t\t\tlet bcl = allocMemoryData(batch.clutData)!\n\t\t\tbatches.push({\n\t\t\t\tstateOffset: allocData(batch.stateData),\n\t\t\t\tprimType: batch.primType,\n\t\t\t\tdataLow: batch.dataLow,\n\t\t\t\tdataHigh: batch.dataHigh,\n\t\t\t\tindexLow: batch.indexLow,\n\t\t\t\tindexHigh: batch.indexHigh,\n\t\t\t\tindexCount: batch.indexCount,\n\t\t\t\ttextureLow: btl,\n\t\t\t\ttextureHigh: btl + (batch.textureData ? batch.textureData.length : 0),\n\t\t\t\tclutLow: bcl,\n\t\t\t\tclutHigh: bcl + (batch.clutData ? batch.clutData.length : 0),\n\t\t\t});\n\t\t}\n\n        const buffer = new ArrayBuffer(offset);\n\t\tconst bufferU8 = new Uint8Array(buffer)\n\t\tfor (let chunk of chunks) {\n            bufferU8.set(\n                new Uint8Array(chunk.data.buffer, chunk.data.byteOffset, chunk.size),\n                chunk.offset\n            );\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\tdata: data,\n\t\t\tbatches: batches,\n\t\t}\n\t}\n}\n\nexport class OptimizedDrawBuffer {\n\tdata = new Uint8Array(2 * 1024 * 1024);\n\tprivate dataOffset = 0;\n\tindices = new Uint16Array(512 * 1024);\n\tprivate indexOffset = 0;\n\tprivate vertexIndex = 0;\n\tprivate batchDataOffset: number = 0;\n\tprivate batchIndexOffset: number = 0;\n\t\n\treset() {\n\t\tthis.dataOffset = 0;\n\t\tthis.indexOffset = 0;\n\t\tthis.vertexIndex = 0;\n\t\tthis.batchDataOffset = 0;\n\t\tthis.batchIndexOffset = 0;\n\t}\n\t\n\tgetData() { return this.data.subarray(0, this.dataOffset); }\n\tgetIndices() { return this.indices.subarray(0, this.indexOffset); }\n\t\n\tget hasElements() {\n\t\treturn this.dataOffset > this.batchDataOffset;\n\t}\n\t\n\tcreateBatch(state: GpuState, primType: PrimitiveType, vertexInfo: VertexInfo) {\n        const data = new OptimizedBatch(\n            state, this, primType, vertexInfo,\n            this.batchDataOffset, this.dataOffset,\n            this.batchIndexOffset, this.indexOffset\n        );\n        this.dataOffset = this.batchDataOffset = (this.dataOffset + 15) & ~0xF;\n\t\tthis.batchIndexOffset = this.indexOffset;\n\t\tthis.vertexIndex = 0;\n\t\treturn data;\n\t}\n\n\taddVertices(vertices:Uint8Array, vertexCount:number, verticesSize:number) {\n\t\tthis.addVerticesData(vertices,  verticesSize);\n\t\tthis.addVerticesIndices(vertexCount);\n\t}\n\n\taddVerticesData(vertices:Uint8Array, verticesSize:number) {\n\t\tArrayBufferUtils.copy(vertices, 0, this.data, this.dataOffset, verticesSize);\n\t\tthis.dataOffset += verticesSize;\n\t}\n\n\taddVerticesIndices(vertexCount:number) {\n\t\tfor (let n = 0; n < vertexCount; n++) this.indices[this.indexOffset++] = this.vertexIndex++;\n\t}\n\n\taddVerticesIndicesSprite(vertexCount:number) {\n\t\tfor (let n = 0; n < vertexCount / 2; n++) {\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 3;\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 0;\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 2;\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 3;\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 2;\n\t\t\tthis.indices[this.indexOffset++] = this.vertexIndex + 1;\n\t\t\tthis.vertexIndex += 4;\n\t\t}\n\t}\n\t\n\taddVerticesDataSprite(vertices:Uint8Array, verticesSize:number, count:number, vi: VertexInfo) {\n\t\tconst func = SpriteExpander.forVertexInfo(vi)\n        func(vertices, this.data.subarray(this.dataOffset), count / 2);\n\t\tthis.dataOffset += verticesSize * 2;\n\t}\n\t\n\taddVerticesIndicesList(indices:Uint8Array | Uint16Array) {\n        let max = 0;\n        const ioffset = this.indexOffset;\n        for (let n = 0; n < indices.length; n++) {\n            const v = indices[n];\n            this.indices[ioffset + n] = v;\n\t\t\tmax = Math.max(max, v);\n\t\t}\n\t\tmax++;\n\t\tthis.vertexIndex = max;\n\t\tthis.indexOffset += indices.length;\n\t\treturn max;\n\t}\n\t\n\tjoin(vertexSize:number) {\n\t\tthis.indices[this.indexOffset++] = this.vertexIndex - 1;\n\t\tthis.indices[this.indexOffset++] = this.vertexIndex;\n\t}\n}\n\nexport class OptimizedBatch {\n\tpublic stateData:Uint32Array;\n\tpublic textureData:Uint8Array|null = null;\n\tpublic clutData: Uint8Array|null = null;\n\tpublic indexCount: number;\n\t\n\tconstructor(\n\t\tstate: GpuState,\n\t\tpublic drawBuffer: OptimizedDrawBuffer,\n\t\tpublic primType: PrimitiveType, vertexInfo: VertexInfo,\n\t\tpublic dataLow: number, public dataHigh: number,\n\t\tpublic indexLow: number, public indexHigh: number\n\t) {\n\t\tthis.stateData = state.readData();\n\t\tthis.indexCount = this.indexHigh - this.indexLow;\n\t\tif (vertexInfo.hasTexture) {\n            const mipmap = state.texture.mipmaps[0];\n            this.textureData = memory.getPointerU8Array(mipmap.address, mipmap.sizeInBytes);\n\t\t\tif (state.texture.hasClut) {\n                const clut = state.texture.clut;\n                this.clutData = memory.getPointerU8Array(clut.address, clut.sizeInBytes);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//getData() { return this.drawBuffer.data.subarray(this.dataLow, this.dataHigh); }\n\t//getIndices() { return this.drawBuffer.indices.subarray(this.indexLow, this.indexHigh); }\n\t\n\t//get indexCount() { return this.indexHigh - this.indexLow; }\n}\n", "\uFEFFimport \"../../emu/global\"\n\nimport { GpuStats } from './gpu_stats';\nimport { Memory } from '../memory';\nimport { IPspDisplay } from '../display';\nimport { GpuOpCodes as Op } from './gpu_opcodes';\nimport { GpuState, VertexInfo, ColorEnum, PrimitiveType, IndexEnum, DisplayListStatus, SyncType } from './gpu_state';\nimport { OptimizedDrawBuffer, OptimizedBatch } from './gpu_vertex';\nimport {Stream} from \"../../global/stream\";\nimport {addressToHex, Microtask, PromiseFast, Signal2, UidCollection, WatchValue} from \"../../global/utils\";\nimport {MathFloat, MathUtils} from \"../../global/math\";\nimport {CpuState} from \"../cpu/cpu_core\";\nimport {EmulatorUI} from \"../../ui/emulator_ui\";\nimport {Component} from \"../component\";\n\nexport interface CpuExecutor {\n\texecute(state: CpuState, address: number, gprArray: number[]): void;\n}\n\nconst optimizedDrawBuffer = new OptimizedDrawBuffer();\nconst singleCallTest = false;\n\nconst enum PrimDrawType {\n\tSINGLE_DRAW = 0,\n\tBATCH_DRAW = 1,\n\tBATCH_DRAW_DEGENERATE = 2,\n}\n\nconst DRAW_TYPE_CONV = [\n    PrimDrawType.BATCH_DRAW, // Points = 0\n    PrimDrawType.BATCH_DRAW, // Lines = 1,\n    PrimDrawType.BATCH_DRAW_DEGENERATE, // LineStrip = 2,\n    PrimDrawType.BATCH_DRAW, // Triangles = 3,\n    PrimDrawType.BATCH_DRAW_DEGENERATE, // TriangleStrip = 4,\n    PrimDrawType.SINGLE_DRAW, // TriangleFan = 5,\n    PrimDrawType.BATCH_DRAW, // Sprites = 6,\n];\n\nfunction bool1(p: number) { return p != 0; }\nfunction param1(p: number, offset: number) { return (p >> offset) & 0x1; }\nfunction param2(p: number, offset: number) { return (p >> offset) & 0x3; }\nfunction param3(p: number, offset: number) { return (p >> offset) & 0x7; }\nfunction param4(p: number, offset: number) { return (p >> offset) & 0xF; }\nfunction param5(p: number, offset: number) { return (p >> offset) & 0x1F; }\nfunction param8(p: number, offset: number) { return (p >> offset) & 0xFF; }\nfunction param10(p: number, offset: number) { return (p >> offset) & 0x3FF; }\nfunction param16(p: number, offset: number) { return (p >> offset) & 0xFFFF; }\nfunction param24(p: number) { return p & 0xFFFFFF; }\nfunction float1(p: number) { return MathFloat.reinterpretIntAsFloat(p << 8); }\n\nlet dumpFrameCommands = false;\nconst dumpFrameCommandsList: string[] = [];\n\nclass PspGpuList {\n    current4: number = 0\n    stall4: number = 0\n\tcallbackId: number = 0\n\t// @ts-ignore\n    argsPtr: Stream;\n    completed: boolean = false;\n\tstatus = DisplayListStatus.Paused;\n    // @ts-ignore\n\tprivate promise: PromiseFast<any>;\n    // @ts-ignore\n\tprivate promiseResolve: Function;\n    // @ts-ignore\n\tprivate promiseReject: Function;\n\terrorCount: number = 0;\n\n\tconstructor(public id: number, public stats: GpuStats, public memory: Memory, private runner: PspGpuListRunner, public gpu: PspGpu, public cpuExecutor: CpuExecutor, public state: GpuState) {\n    }\n\n    complete() {\n        this.completed = true;\n\t\tthis.runner.deallocate(this);\n\t\tthis.promiseResolve(0);\n    }\n\n\tcallstack = new Int32Array(1024);\n\tcallstackIndex = 0;\n\n\tprimBatchPrimitiveType: number = -1;\n\n\tfinishPrimBatch() {\n\t\tif (optimizedDrawBuffer.hasElements) {\n\t\t\tthis.batchPrimCount = 0;\n            const batch = optimizedDrawBuffer.createBatch(this.state, this.primBatchPrimitiveType, this.vertexInfo);\n            this.gpu.queueBatch(batch);\n\t\t\tif (dumpFrameCommands) dumpFrameCommandsList.push(`<BATCH:${batch.indexCount}>`);\n\t\t\tthis.primBatchPrimitiveType = -1;\n\t\t\tthis.stats.batchCount++;\n\t\t}\n\t}\n\n\tbatchPrimCount = 0;\n\t//private showOpcodes = true;\n\tprivate showOpcodes = false;\n\tprivate opcodes: string[] = [];\n\tfinish() {\n\t}\n\n\tprivate get isStalled() {\n\t\treturn ((this.stall4 != 0) && (this.current4 >= this.stall4));\n\t}\n\n\n    private get hasMoreInstructions() {\n\t\treturn !this.completed && !this.isStalled;\n\t\t//return !this.completed && ((this.stall == 0) || (this.current < this.stall));\n\t}\n\t\n\tprivate gpuHang() {\n\t\tconsole.error('GPU hang!');\n\t\tdebugger;\n\t}\n\n\tprivate runUntilStallInner() {\n\t\tlet memory = this.memory;\n\t\t//let showOpcodes = this.showOpcodes;\n\t\tlet stall4 = this.stall4;\n\t\tlet state = this.state;\n\t\tlet totalCommandsLocal = 0;\n\t\tlet current4 = this.current4;\n\t\tlet localPrimCount = 0;\n\t\tlet stats = this.stats;\n\t\t//let startTime = 0;\n\t\tif (stall4 == 0) stall4 = 0x7FFFFFFF;\n\n\t\tloop: while (current4 < stall4) {\n\t\t\ttotalCommandsLocal++;\n\t\t\tlet instructionPC4 = current4++;\n\t\t\tlet instruction = memory.lw_2(instructionPC4);\n\t\t\tlet op = (instruction >> 24) & 0xFF;\n\t\t\tlet p = instruction & 0xFFFFFF;\n\t\t\t\n\t\t\tif (totalCommandsLocal >= 30000) {\n\t\t\t\tthis.gpuHang();\n\t\t\t\ttotalCommandsLocal = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (dumpFrameCommands) {\n\t\t\t\tdumpFrameCommandsList.push(`${Op[op]}:${addressToHex(p)}`);\n\t\t\t}\n\n\t\t\tswitch (op) {\n\t\t\t\tcase Op.PRIM: {\n                    const rprimCount = 0;\n\n                    this.current4 = current4;\n\t\t\t\t\tlocalPrimCount++;\n\t\t\t\t\tlet primitiveType = <PrimitiveType>param3(p, 16);\n\t\t\t\t\tif (this.primBatchPrimitiveType != primitiveType) this.finishPrimBatch();\n\t\t\t\t\tif (this.prim(param24(p)) == PrimAction.FLUSH_PRIM) {\n\t\t\t\t\t\tthis.finishPrimBatch();\n\t\t\t\t\t}\n\t\t\t\t\tcurrent4 = this.current4;\n\t\t\t\t\t//stats.primCount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase Op.BEZIER:\n\t\t\t\t\tthis.finishPrimBatch();\n\t\t\t\t\tthis.bezier(param24(p));\n\t\t\t\t\tbreak;\n\t\t\t\tcase Op.END:\n\t\t\t\t\tthis.finishPrimBatch();\n\t\t\t\t\tthis.gpu.end();\n\t\t\t\t\tthis.complete();\n\t\t\t\t\tbreak loop;\n\t\t\t\tcase Op.TFLUSH: this.gpu.textureFlush(state); this.finishPrimBatch(); break;\n\t\t\t\tcase Op.TSYNC: this.gpu.textureSync(state); break;\n\t\t\t\tcase Op.NOP: break;\n\t\t\t\tcase Op.DUMMY: break;\n\t\t\t\tcase Op.JUMP:\n\t\t\t\tcase Op.CALL:\n\t\t\t\t\tif (op == Op.CALL) {\n\t\t\t\t\t\tthis.callstack[this.callstackIndex++] = ((instructionPC4 << 2) + 4);\n\t\t\t\t\t\tthis.callstack[this.callstackIndex++] = (((state.baseOffset >>> 2) & Memory.MASK));\n\t\t\t\t\t}\n\t\t\t\t\tcurrent4 = (((this.state.baseAddress + (param24(p) & ~3))) >> 2) & Memory.MASK;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Op.RET:\n\t\t\t\t\tif (this.callstackIndex > 0 && this.callstackIndex < 1024) {\n\t\t\t\t\t\tstate.baseOffset = this.callstack[--this.callstackIndex];\n\t\t\t\t\t\tcurrent4 = ((this.callstack[--this.callstackIndex] >>> 2) & Memory.MASK);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.info('gpu callstack empty or overflow');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Op.FINISH: {\n\t\t\t\t\tthis.finish();\n\t\t\t\t\tlet callback = this.gpu.callbacks.get(this.callbackId);\n\t\t\t\t\tif (callback && callback.cpuState && callback.finishFunction) {\n\t\t\t\t\t\tthis.cpuExecutor.execute(callback.cpuState, callback.finishFunction, [param24(p), callback.finishArgument]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase Op.SIGNAL: console.warn('Not implemented: GPU SIGNAL'); break;\n\t\t\t\t\n\t\t\t\t//case Op.PROJMATRIXNUMBER: console.log(state.projectionMatrix); break;\n\t\t\t\tcase Op.PROJMATRIXDATA: state.writeFloat(Op.PROJMATRIXNUMBER, Op.MAT_PROJ, float1(p)); break;\n\t\t\t\tcase Op.VIEWMATRIXDATA: state.writeFloat(Op.VIEWMATRIXNUMBER, Op.MAT_VIEW, float1(p)); break;\n\t\t\t\tcase Op.WORLDMATRIXDATA: state.writeFloat(Op.WORLDMATRIXNUMBER, Op.MAT_WORLD, float1(p)); break;\n\t\t\t\tcase Op.BONEMATRIXDATA: state.writeFloat(Op.BONEMATRIXNUMBER, Op.MAT_BONES, float1(p)); break;\n\t\t\t\tcase Op.TGENMATRIXDATA: state.writeFloat(Op.TGENMATRIXNUMBER, Op.MAT_TEXTURE, float1(p)); break;\n\t\t\t\t\n\t\t\t\t// No invalidate prim\n\t\t\t\tcase Op.BASE:\n\t\t\t\tcase Op.IADDR:\n\t\t\t\tcase Op.VADDR:\n\t\t\t\tcase Op.OFFSETADDR:\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: if (state.data[op] != p) this.finishPrimBatch(); break;\n\t\t\t}\n\t\t\tstate.data[op] = p;\n\t\t}\n\n\t\tthis.current4 = current4;\n\n\t\tthis.stats.totalStalls++;\n\t\tthis.stats.primCount = localPrimCount;\n\t\tthis.stats.totalCommands += totalCommandsLocal;\n\t\tthis.status = (this.isStalled) ? DisplayListStatus.Stalling : DisplayListStatus.Completed;\n\t}\n\n\tvertexInfo = new VertexInfo();\n\n\tprivate prim(p: number):PrimAction {\n        const vertexCount = param16(p, 0);\n        const primitiveType = <PrimitiveType>param3(p, 16);\n        if (vertexCount <= 0) return PrimAction.NOTHING\n\n        const memory = this.memory;\n        const state = this.state;\n        const stats = this.stats;\n        const vertexInfo = this.vertexInfo.setState(this.state);\n        const vertexSize = vertexInfo.size;\n        const vertexAddress = state.getAddressRelativeToBaseOffset(vertexInfo.address);\n        const indicesAddress = state.getAddressRelativeToBaseOffset(state.indexAddress);\n        const hasIndices = (vertexInfo.index != IndexEnum.Void);\n\n        if (hasIndices) {\n\t\t\tstats.indexCount++;\n\t\t} else {\n\t\t\tstats.nonIndexCount++;\n\t\t}\n\n\t\tthis.primBatchPrimitiveType = primitiveType;\n\t\t\n\t\t//if (vertexState.realWeightCount > 0) debugger;\n\t\t\n\t\tswitch (primitiveType) {\n\t\t\tcase PrimitiveType.Triangles: stats.trianglePrimCount++; break;\n\t\t\tcase PrimitiveType.TriangleStrip: stats.triangleStripPrimCountalue++; break;\n\t\t\tcase PrimitiveType.Sprites: stats.spritePrimCount++; break;\n\t\t\tdefault: stats.otherPrimCount++; break;\n\t\t}\n\n        const vertexInput: Uint8Array = this.memory.getPointerU8Array(vertexAddress);\n        const drawType = DRAW_TYPE_CONV[primitiveType];\n        const optimized = (vertexInfo.realMorphingVertexCount == 1);\n        //const optimized = (vertexInfo.index == IndexEnum.Void) && (primitiveType != PrimitiveType.Sprites) && (vertexInfo.realMorphingVertexCount == 1);\n\t\t\n\t\tif (vertexInfo.realMorphingVertexCount != 1) {\n\t\t\tthrow new Error('@TODO: Morphing not implemented!');\n\t\t}\n\n\t\tswitch (vertexInfo.index) {\n\t\t\tcase IndexEnum.Void:\n\t\t\t\tthis.primOptimizedNoIndex(primitiveType, (drawType == PrimDrawType.BATCH_DRAW_DEGENERATE), vertexSize, vertexInfo, vertexInput);\n\t\t\tbreak;\n\t\t\tcase IndexEnum.Byte:\n\t\t\tcase IndexEnum.Short:\n\t\t\t\tif (primitiveType == PrimitiveType.Sprites) {\n\t\t\t\t\tthrow new Error('@TODO: Sprites with indices not implemented!');\n\t\t\t\t}\n\n                let totalVertices = 0;\n                if (vertexInfo.index == IndexEnum.Byte) {\n\t\t\t\t\ttotalVertices = optimizedDrawBuffer.addVerticesIndicesList(this.memory.getPointerU8Array(indicesAddress, vertexCount));\n\t\t\t\t} else {\n\t\t\t\t\ttotalVertices = optimizedDrawBuffer.addVerticesIndicesList(this.memory.getPointerU16Array(indicesAddress, vertexCount * 2));\n\t\t\t\t}\n\t\t\t\toptimizedDrawBuffer.addVerticesData(vertexInput, totalVertices * vertexSize);\n\t\t\t\treturn PrimAction.FLUSH_PRIM;\n\t\t}\n\n\t\treturn (drawType == PrimDrawType.SINGLE_DRAW) ? PrimAction.FLUSH_PRIM : PrimAction.NOTHING;\n\t}\n\n\tprivate primOptimizedNoIndex(primitiveType: PrimitiveType, drawTypeDegenerated: boolean, vertexSize:number, vertexInfo:VertexInfo, vertexInput: Uint8Array) {\n        let current4 = (this.current4 - 1) | 0;\n        let batchPrimCount = this.batchPrimCount | 0;\n        const _optimizedDrawBuffer = optimizedDrawBuffer;\n        let p2 = 0;\n        let vertex2Count = 0;\n        const memory = this.memory;\n        let totalVertexCount = 0;\n        const isSprite = (primitiveType == PrimitiveType.Sprites);\n        primitiveType |= 0;\n\t\tvertexSize |= 0;\n\t\twhile (true) {\n\t\t\tp2 = memory.lw_2(current4) | 0;\n\t\t\tif ((((p2 >> 24) & 0xFF) != Op.PRIM) || (param3(p2, 16) != primitiveType)) break;\n\t\t\tvertex2Count = param16(p2, 0) | 0;\n\t\t\ttotalVertexCount += vertex2Count;\n\t\t\tif (isSprite) {\n\t\t\t\t_optimizedDrawBuffer.addVerticesIndicesSprite(vertex2Count);\n\t\t\t} else {\n\t\t\t\tif (drawTypeDegenerated && (batchPrimCount > 0)) _optimizedDrawBuffer.join(vertexSize);\n\t\t\t\t_optimizedDrawBuffer.addVerticesIndices(vertex2Count);\n\t\t\t}\n\t\t\tcurrent4++;\n\t\t\tbatchPrimCount++;\n\t\t}\n\n\t\tthis.stats.vertexCount += totalVertexCount;\n\t\tlet totalVerticesSize = totalVertexCount * vertexSize;\n\t\tif (isSprite) {\n\t\t\t_optimizedDrawBuffer.addVerticesDataSprite(vertexInput, totalVerticesSize, totalVertexCount, vertexInfo);\n\t\t} else {\n\t\t\t_optimizedDrawBuffer.addVerticesData(vertexInput, totalVerticesSize);\n\t\t}\n\t\tvertexInfo.address += totalVerticesSize;\n\t\tthis.state.vertex.address = vertexInfo.address; \n\t\tthis.batchPrimCount = batchPrimCount;\n\t\tthis.current4 = current4;\n\t}\n\n\tvertexInfo2: VertexInfo = new VertexInfo();\n\tprivate bezier(p: number) {\n\t\t/*\n\t\tlet state = this.state;\n\n\t\tlet ucount = param8(p, 0);\n\t\tlet vcount = param8(p, 8);\n\t\tlet divs = state.patch.divs;\n\t\tlet divt = state.patch.divt;\n\t\tlet vertexState = state.vertex;\n\t\tlet vertexInfo2 = this.vertexInfo2.setState(state);\n\t\tlet vertexAddress = state.getAddressRelativeToBaseOffset(state.vertex.address);\n\t\tlet vertexInput8 = this.memory.getPointerU8Array(vertexAddress);\n\n\t\tvertexInfo2.texture = _state.NumericEnum.Float;\n\n\t\tlet getBezierControlPoints = (ucount: number, vcount: number) => {\n\t\t\tlet controlPoints = ArrayUtils.create2D<_state.Vertex>(ucount, vcount);\n\n\t\t\tlet mipmap = state.texture.mipmaps[0];\n\t\t\tlet scale = mipmap.textureWidth / mipmap.bufferWidth;\n\t\t\tfor (let u = 0; u < ucount; u++) {\n\t\t\t\tfor (let v = 0; v < vcount; v++) {\n\t\t\t\t\tlet vertex = vertexReader.readOne(vertexInput8, null, v * ucount + u);;\n\t\t\t\t\tcontrolPoints[u][v] = vertex;\n\t\t\t\t\tvertex.tx = (u / (ucount - 1)) * scale;\n\t\t\t\t\tvertex.ty = (v / (vcount - 1));\n\t\t\t\t\t//Console.WriteLine(\"getControlPoints({0}, {1}) : {2}\", u, v, controlPoints[u, v]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn controlPoints;\n\t\t};\n\n\t\tlet controlPoints = getBezierControlPoints(ucount, vcount);\n\t\tlet vertices2: _state.Vertex[] = [];\n\t\tvertices2.push(controlPoints[0][0]);\n\t\tvertices2.push(controlPoints[ucount - 1][0]);\n\t\tvertices2.push(controlPoints[0][vcount - 1]);\n\n\t\tvertices2.push(controlPoints[ucount - 1][0]);\n\t\tvertices2.push(controlPoints[ucount - 1][vcount - 1]);\n\t\tvertices2.push(controlPoints[0][vcount - 1]);\n\n\t\tthis.drawDriver.queueBatch(new _vertex.UnoptimizedBatch(state, _state.PrimitiveType.Triangles, vertices2, vertexInfo2));\n\t\t*/\n\t}\n\n\tprivate runUntilStall() {\n\t\tthis.status = DisplayListStatus.Drawing;\n\t\twhile (this.hasMoreInstructions) {\n\t\t\t//try {\n\t\t\tthis.runUntilStallInner();\n\t\t\t/*\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tconsole.log(e['stack']);\n\t\t}\n\t\t*/\n\t\t}\n    }\n\n    private enqueueRunUntilStall() {\n        Microtask.queue(() => {\n            this.runUntilStall();\n        });\n    }\n\n    updateStall(stall: number) {\n        this.stall4 = ((stall >>> 2) & Memory.MASK);\n        this.enqueueRunUntilStall();\n    }\n\n\tstart() {\n\t\tthis.status = DisplayListStatus.Queued;\n\n\t\tthis.promise = new PromiseFast((resolve, reject) => {\n\t\t\tthis.promiseResolve = resolve;\n\t\t\tthis.promiseReject = reject;\n\t\t});\n        this.completed = false;\n\n        this.enqueueRunUntilStall();\n    }\n\n    waitAsync() {\n        return this.promise;\n    }\n}\n\nclass PspGpuListRunner {\n    private lists: PspGpuList[] = [];\n    private freeLists: PspGpuList[] = [];\n\tprivate runningLists: PspGpuList[] = [];\n\tprivate state = new GpuState();\n\n\tconstructor(private memory: Memory, private stats: GpuStats, private gpu: PspGpu, private callbackManager: CpuExecutor) {\n        for (let n = 0; n < 32; n++) {\n            const list = new PspGpuList(n, stats, memory, this, gpu, callbackManager, this.state);\n            this.lists.push(list);\n            this.freeLists.push(list);\n        }\n    }\n\t\n    allocate() {\n        if (!this.freeLists.length) throw new Error('Out of gpu free lists');\n        const list = this.freeLists.pop()!;\n        this.runningLists.push(list)\n        return list;\n    }\n\n    getById(id: number) {\n        return this.lists[id];\n    }\n\n    deallocate(list: PspGpuList) {\n        this.freeLists.push(list);\n        this.runningLists.remove(list);\n\t}\n\n\tpeek() {\n        const _peek = (() => {\n            for (let n = 0; n < this.runningLists.length; n++) {\n                const list = this.runningLists[n];\n                if (list.status != DisplayListStatus.Completed) return list.status;\n            }\n            return DisplayListStatus.Completed;\n        });\n        const result = _peek();\n        //result = Math.floor(Math.random() * 4);\n\t\tconsole.warn(`not implemented gpu list peeking -> ${result}`);\n\t\treturn result;\n\t}\n\n\twaitAsync() {\n\t\treturn PromiseFast.all(this.runningLists.map(list => list.waitAsync())).thenFast(() => DisplayListStatus.Completed);\n    }\n}\n\nexport class PspGpuCallback {\n\tconstructor(public cpuState: CpuState, public signalFunction: number, public signalArgument: number, public finishFunction: number, public finishArgument: number) {\n\t}\n}\n\nexport class PspGpu implements Component {\n    //private gl: WebGLRenderingContext;\n\tprivate listRunner: PspGpuListRunner;\n\tcallbacks = new UidCollection<PspGpuCallback>(1);\n\n\tconstructor(private memory: Memory, private display: IPspDisplay, private cpuExecutor: CpuExecutor, public stats: GpuStats) {\n\t\t/*\n\t\ttry {\n\t\t\tthis.driver = new WebGlPspDrawDriver(memory, display, canvas);\n\t\t} catch (e) {\n\t\t\tthis.driver = new _driver.BaseDrawDriver();\n\t\t}\n\t\tglobalDriver = this.driver;\n\t\t*/\n\t\t//this.driver = new Context2dPspDrawDriver(memory, canvas);\n\n\t\tthis.listRunner = new PspGpuListRunner(memory, this.stats, this, this.cpuExecutor);\n    }\n\t\n\tdumpCommands() {\n\t\tdumpFrameCommands = true;\n\t}\n\n\tregister() {\n    }\n\n    unregister() {\n\t\tthis.onDrawBatches.clear();\n    }\n\n\tlistEnqueue(start: number, stall: number, callbackId: number, argsPtr: Stream) {\n        const list = this.listRunner.allocate();\n        list.current4 = ((start >>> 2) & Memory.MASK);\n        list.stall4 = stall;\n\t\tlist.callbackId = callbackId;\n\t\tlist.argsPtr = argsPtr;\n        list.start();\n        return list.id;\n    }\n\n    listSync(displayListId: number, syncType: SyncType) {\n        //console.log('listSync');\n\t\t//overlay.update();\n        return this.listRunner.getById(displayListId).waitAsync();\n\t\t//return 0;\n    }\n\n    updateStallAddr(displayListId: number, stall: number) {\n        this.listRunner.getById(displayListId).updateStall(stall);\n        return 0;\n    }\n\t\n\tend() {\n\t}\n\n\ttextureFlush(state:GpuState) {\n\t}\n\t\n\ttextureSync(state:GpuState) {\n\t}\n\t\n\tprivate batches: OptimizedBatch[] = [];\n\tqueueBatch(batch:OptimizedBatch) {\n\t\tthis.batches.push(batch);\n\t}\n\n\tprivate flushCommands() {\n\t\tif (!dumpFrameCommands || dumpFrameCommandsList.length == 0) return;\n\t\tconsole.info('-----------------------------------------------');\n\t\tdumpFrameCommands = false;\n        const list: string[] = [];\n\n        function flushBuffer() {\n\t\t\tif (list.length == 0) return;\n\t\t\tconsole.log(list.join(', '));\n\t\t\tlist.length = 0;\n\t\t}\n\t\tfor (let item of dumpFrameCommandsList) {\n\t\t\tif (item.startsWith('<BATCH')) {\n\t\t\t\tflushBuffer();\n\t\t\t\tconsole.warn(item);\n\t\t\t} else {\n\t\t\t\tlist.push(item);\n\t\t\t\tif (item.startsWith('PRIM')) flushBuffer();\n\t\t\t}\n\t\t}\n\t\tflushBuffer();\n\t\tdumpFrameCommandsList.length = 0;\n\t}\n\t\n\tpublic onDrawBatches = new Signal2<OptimizedDrawBuffer, OptimizedBatch[]>();\n\t\n\tprivate wv = new WatchValue(false);\n\tsync() {\n\t\tthis.wv.value = true;\n\t}\n\t\n\tpublic freezing = new WatchValue(false);\n\n\tprivate lastTime = 0;\n\tdrawSync(syncType: SyncType): any {\n\t\t//console.log('drawSync');\n\t\t//console.warn('Not implemented sceGe_user.sceGeDrawSync');\n\t\treturn this.listRunner.waitAsync().thenFast(() => {\n\t\t\tthis.flushCommands()\n\t\t\ttry {\n                const end = performance.now();\n                this.stats.timePerFrame = MathUtils.interpolate(this.stats.timePerFrame, end - this.lastTime, 0.5);\n\t\t\t\tthis.lastTime = end;\n\t\t\t\t//this.stats.batchCount = this.batches.length;\n\t\t\t\tthis.stats.updateAndReset();\n\t\t\t\t//this.onDrawBatches.dispatch(optimizedDrawBuffer, this.batches.slice(0, overlayBatchSlider.ratio));\n\t\t\t\t//console.info('onDrawBatches:', this.batches.length);\n\t\t\t\tthis.wv.value = false;\n\t\t\t\tthis.onDrawBatches.dispatch(optimizedDrawBuffer, this.batches);\n\t\t\t\t//this.driver.drawBatches(optimizedDrawBuffer, );\n\t\t\t\toptimizedDrawBuffer.reset();\n\t\t\t\tthis.batches = [];\n\t\t\t\t//return freezing.waitUntilValueAsync(false);\n\t\t\t\treturn this.wv.waitUntilValueAsync(true).thenFast(() => {\n\t\t\t\t\treturn this.freezing.waitUntilValueAsync(false);\n\t\t\t\t});\n\t\t\t\t//return this.freezing.waitUntilValueAsync(false);\n\t\t\t} catch (e) {\n                EmulatorUI.openMessageAsync(e.stack || e)\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t});\n\n\t\t//switch (syncType) {\n\t\t//\tcase _state.SyncType.Peek: return this.listRunner.peek();\n\t\t//\tcase _state.SyncType.WaitForCompletion: return this.listRunner.waitAsync();\n\t\t//\tdefault: throw (new Error(\"Not implemented SyncType.\" + syncType));\n\t\t//}\n    }\n}\n\nconst enum PrimAction {\n\tNOTHING = 0,\n\tFLUSH_PRIM = 1,\n}\n\n//overlay.update();\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {nativeFunction, PTR, U32} from \"../utils\";\n\nexport class sceHprm {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x1910B327, 150)\n    @U32 sceHprmPeekCurrentKey(@PTR PspHprmKeysEnumKeyPtr: Stream) {\n\t\tPspHprmKeysEnumKeyPtr.writeInt32(0);\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceHttp {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceParseHttp {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceParseUri {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {nativeFunction, PTR, U32} from '../utils';\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {ButtonPreference, PspLanguages} from \"../structs\";\n\nexport class sceImpose {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x8C943191, 150)\n\t@U32 sceImposeGetBatteryIconStatus(@PTR isChargingPointer: Stream, @PTR iconStatusPointer: Stream) {\n\t\tisChargingPointer.writeInt32(this.context.battery.chargingType);\n\t\ticonStatusPointer.writeInt32(this.context.battery.iconStatus);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x36AA6E91, 150)\n    @U32 sceImposeSetLanguageMode(@U32 language: PspLanguages, @U32 buttonPreference: ButtonPreference) {\n\t\tthis.context.config.language = language;\n\t\tthis.context.config.buttonPreference = buttonPreference;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x24FD7BCF, 150)\n    @U32 sceImposeGetLanguageMode(@PTR languagePtr: Stream, @PTR buttonPreferencePtr: Stream) {\n\t\tlanguagePtr.writeUInt32(this.context.config.language);\n\t\tbuttonPreferencePtr.writeUInt32(this.context.config.buttonPreference);\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {UidCollection} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {F32, I32, nativeFunction, PTR, U32} from \"../utils\";\n\nexport class sceLibFont {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate fontLibUid = new UidCollection<FontLib>(1);\n\tprivate fontUid = new UidCollection<Font>(1);\n\n\t@nativeFunction(0x67F17ED7, 150)\n    @U32 sceFontNewLib(@PTR paramsPtr: Stream, @PTR errorCodePtr: Stream) {\n        const fontLib = new FontLib();\n        return this.fontLibUid.allocate(fontLib);\n\t}\n\n\t@nativeFunction(0x099EF33C, 150)\n    @U32 sceFontFindOptimumFont(@U32 fontLibId: number, @PTR fontStylePointer: Stream, @PTR errorCodePointer: Stream) {\n        const fontLib = this.fontLibUid.get(fontLibId);\n        return 0;\n\t}\n\n\t@nativeFunction(0xA834319D, 150)\n    @U32 sceFontOpen(@I32 fontLibId: number, @I32 index: number, @I32 mode:number, @PTR errorCodePointer:Stream) {\n        const fontLib = this.fontLibUid.get(fontLibId);\n        return this.fontUid.allocate(new Font());\n\t}\n\n\t@nativeFunction(0x0DA7535E, 150)\n\t@U32 sceFontGetFontInfo(@I32 fontId: number, @PTR fontInfoPointer: Stream) {\n        const font = this.fontUid.get(fontId);\n        return 0;\n\t}\n\n\t@nativeFunction(0x48293280, 150)\n\t@U32 sceFontSetResolution(@I32 fontLibId: number, @F32 horizontalResolution: number, @F32 verticalResolution: number) {\n\t\t//const font = this.fontUid.get(fontId);\n\t\t//FontLibrary.HorizontalResolution = HorizontalResolution;\n\t\t//FontLibrary.VerticalResolution = VerticalResolution;\n\t\treturn 0;\n\t}\n}\n\nclass FontLib {\n}\n\nclass Font {\n}\n\n/*\nclass FontInfo {\n\tprivate Fixed26_6 MaxGlyphWidthI;\n\tprivate Fixed26_6 MaxGlyphHeightI;\n\tprivate Fixed26_6 MaxGlyphAscenderI;\n\tprivate Fixed26_6 MaxGlyphDescenderI;\n\tprivate Fixed26_6 MaxGlyphLeftXI;\n\tprivate Fixed26_6 MaxGlyphBaseYI;\n\tprivate Fixed26_6 MinGlyphCenterXI;\n\tprivate Fixed26_6 MaxGlyphTopYI;\n\tprivate Fixed26_6 MaxGlyphAdvanceXI;\n\tprivate Fixed26_6 MaxGlyphAdvanceYI;\n\n\tprivate float MaxGlyphWidthF;\n\tprivate float MaxGlyphHeightF;\n\tprivate float MaxGlyphAscenderF;\n\tprivate float MaxGlyphDescenderF;\n\tprivate float MaxGlyphLeftXF;\n\tprivate float MaxGlyphBaseYF;\n\tprivate float MinGlyphCenterXF;\n\tprivate float MaxGlyphTopYF;\n\tprivate float MaxGlyphAdvanceXF;\n\tprivate float MaxGlyphAdvanceYF;\n\n\tpublic float MaxGlyphAscender { set { MaxGlyphAscenderI = MaxGlyphAscenderF = value; } get { return MaxGlyphAscenderF; } }\n\tpublic float MaxGlyphDescender { set { MaxGlyphDescenderI = MaxGlyphDescenderF = value; } get { return MaxGlyphDescenderF; } }\n\tpublic float MaxGlyphLeftX { set { MaxGlyphLeftXI = MaxGlyphLeftXF = value; } get { return MaxGlyphLeftXF; } }\n\tpublic float MaxGlyphBaseY { set { MaxGlyphBaseYI = MaxGlyphBaseYF = value; } get { return MaxGlyphBaseYF; } }\n\tpublic float MinGlyphCenterX { set { MinGlyphCenterXI = MinGlyphCenterXF = value; } get { return MinGlyphCenterXF; } }\n\tpublic float MaxGlyphTopY { set { MaxGlyphTopYI = MaxGlyphTopYF = value; } get { return MaxGlyphTopYF; } }\n\tpublic float MaxGlyphAdvanceX { set { MaxGlyphAdvanceXI = MaxGlyphAdvanceXF = value; } get { return MaxGlyphAdvanceXF; } }\n\tpublic float MaxGlyphAdvanceY { set { MaxGlyphAdvanceYI = MaxGlyphAdvanceYF = value; } get { return MaxGlyphAdvanceYF; } }\n\n\tpublic ushort MaxGlyphWidth { set { MaxGlyphWidthI = MaxGlyphWidthF = _MaxGlyphWidth = value; } get { return _MaxGlyphWidth; } }\n\tpublic ushort MaxGlyphHeight { set { MaxGlyphHeightI = MaxGlyphHeightF = _MaxGlyphHeight = value; } get { return _MaxGlyphHeight; } }\n\n\t#region Bitmap dimensions.\n/// <summary>\n/// \n/// </summary>\nprivate ushort _MaxGlyphWidth;\n\n\t/// <summary>\n\t/// \n\t/// </summary>\n\tprivate ushort _MaxGlyphHeight;\n\n\t/// <summary>\n\t/// Number of elements in the font's charmap.\n\t/// </summary>\n\tpublic uint CharMapLength;\n\n\t/// <summary>\n\t/// Number of elements in the font's shadow charmap.\n\t/// </summary>\n\tpublic uint ShadowMapLength;\n\n\t/// <summary>\n\t/// Font style (used by font comparison functions).\n\t/// </summary>\n\tpublic FontStyle FontStyle;\n\t#endregion\n\n\t/// <summary>\n\t/// Font's BPP. = 4\n\t/// </summary>\n\tpublic byte BPP;\n\n\t/// <summary>\n\t/// Padding.\n\t/// </summary>\n\tpublic fixed byte Pad[3];\n}\n*/", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceMp3 {\n\tconstructor(private context: EmulatorContext) { }\n}\n\n", "\uFEFFimport {I32, nativeFunction, PTR, U32} from '../utils';\nimport { EmulatorContext } from '../../emu/context';\nimport { PixelFormat } from '../../core/pixelformat';\nimport { SceKernelErrors } from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {addressToHex, ProgramExitException} from \"../../global/utils\";\nimport {\n    Int32,\n    Int32_l,\n    Int64,\n    Stringn,\n    Struct,\n    StructClass,\n    StructInt32, StructInt32_l, StructInt64, StructStructStringn,\n    StructUInt32, StructUInt32_l,\n    UInt32,\n    UInt32_l\n} from \"../../global/struct\";\nimport {Integer64} from \"../../global/int64\";\n\nconst ENABLE = false;\n//const ENABLE = true;\n\nexport class sceMpeg {\n\tconstructor(private context: EmulatorContext) { }\n\n\tstatic RING_BUFFER_PACKET_SIZE = 0x800;\n\tstatic MPEG_MEMSIZE = 64 * 1024;\n\n\t@nativeFunction(0x682A619B, 150)\n\t@U32 sceMpegInit() {\n\t\treturn ENABLE ? 0 : -1;\n\t}\n\t\n\t@nativeFunction(0x874624D6, 150)\n    @U32 sceMpegFinish() {\n\t\t//this.getMpeg(sceMpegPointer).delete();\n\t\treturn 0;\n\t}\n\n\t_sceMpegReadField(name: string, bufferAddr: number, output: Stream, readField: (p: PmfStruct) => number) {\n\t\tconst buffer = this.context.memory.getPointerStream(bufferAddr)!\n\t\tconsole.log(`${name}: ${addressToHex(bufferAddr)}`);\n        const pmf = PmfStruct.struct.createProxy(buffer)\n\t\tif (pmf.magic != 'PSMF') { debugger; return SceKernelErrors.ERROR_MPEG_INVALID_VALUE; }\n        const result = readField(pmf);\n\t\toutput.writeInt32(result);\n\t\tconsole.log(`--> ${result}`);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x21FF80E4, 150)\n    @U32 sceMpegQueryStreamOffset(@U32 mpegAddr: number, @U32 bufferAddr: number, @PTR output: Stream) {\n\t\tif (!this.isValidMpeg(mpegAddr)) return -1;\n\t\treturn this._sceMpegReadField('sceMpegQueryStreamOffset', bufferAddr, output, p => p.offset);\n\t}\n\t\n\t@nativeFunction(0x611E9E11, 150)\n    @U32 sceMpegQueryStreamSize(@U32 bufferAddr: number, @PTR output: Stream) {\n\t\treturn this._sceMpegReadField('sceMpegQueryStreamSize', bufferAddr, output, p => p.size);\n\t}\n\t\n\t\n\tprivate mode: number = 0\n\tprivate pixelformat: PixelFormat = PixelFormat.RGBA_8888;\n\t\n\t@nativeFunction(0xA11C7026, 150)\n    @U32 sceMpegAvcDecodeMode(@U32 mpegAddr: number, @PTR modeAddr: Stream) {\n\t\tif (!this.isValidMpeg(mpegAddr)) return -1;\n        const mode = SceMpegAvcMode.struct.createProxy(modeAddr);\n        this.mode = mode.mode;\n\t\tif ((mode.pixelformat >= PixelFormat.RGBA_5650) && (mode.pixelformat <= PixelFormat.RGBA_8888)) {\n\t\t\tthis.pixelformat = mode.pixelformat;\n\t\t} else {\n\t\t\tconsole.warn(`sceMpegAvcDecodeMode(${mode.mode}, ${mode.pixelformat}) invalid pixelformat`);\n\t\t}\n\t\treturn 0;\n\t}\n\t\n\t@nativeFunction(0xA780CF7E, 150)\n    @U32 sceMpegMallocAvcEsBuf(@U32 mpegAddr: number) {\n\t\tif (!this.isValidMpeg(mpegAddr)) return -1;\n        const mpeg = this.mpegs.get(mpegAddr)!\n\t\treturn mpeg.allocAvcEsBuf();\n\t}\n\t\n\t@nativeFunction(0x167AFD9E, 150)\n    @U32 sceMpegInitAu(@U32 mpegAddr: number, @U32 bufferAddr: number, @PTR auPointer: Stream) {\n\t\tconst au = SceMpegAu.struct.createProxy(auPointer);\n\t\tau.esBuffer = bufferAddr;\n\t\tau.esSize = 2112;\n\t\tau.pts = Integer64.fromNumber(0);\n\t\tau.dts = Integer64.fromNumber(0);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xF8DCB679, 150)\n    @U32 sceMpegQueryAtracEsSize(@U32 mpegAddr: number, @PTR esSizeAddr: Stream, @PTR outSizeAddr: Stream) {\n\t\tesSizeAddr.writeInt32(2112);\n\t\toutSizeAddr.writeInt32(8192);\n\t\treturn 0;\n\t}\n\t\n\t@nativeFunction(0x42560F23, 150)\n    @U32 sceMpegRegistStream(@U32 mpegAddr: number, @U32 streamType: StreamType, @U32 streamNum: number) {\n\t\tif (!this.isValidMpeg(mpegAddr)) return -1;\n        const mpeg = this.mpegs.get(mpegAddr)!;\n        return mpeg.registerStream(streamType, streamNum);\n\t}\n\t\n\t@nativeFunction(0xC132E22F, 150)\n    @U32 sceMpegQueryMemSize(@I32 mode: number) {\n\t\treturn sceMpeg.MPEG_MEMSIZE;\n\t}\n\n\tprivate isValidMpeg(mpegAddr: number) {\n\t\treturn this.mpegs.has(mpegAddr);\n\t}\n\t\n\tprivate mpegs = new Map<number, Mpeg>();\n\t// @ts-ignore\n    private mpeg: Mpeg;\n\n\t@nativeFunction(0xd8c5f121, 150)\n    @U32 sceMpegCreate(@U32 mpegAddr: number, @U32 dataPtr: number, @U32 size: number, @PTR ringbufferAddr: Stream, @U32 mode: number, @U32 ddrTop: number) {\n\t\tif (!this.context.memory.isValidAddress(mpegAddr)) return -1;\n\t\tif (size < sceMpeg.MPEG_MEMSIZE) return SceKernelErrors.ERROR_MPEG_NO_MEMORY;\n\t\tif (ringbufferAddr == Stream.INVALID) {\n\t\t\tconst ringBuffer = RingBuffer.struct.createProxy(ringbufferAddr.clone());\n\t\t\tif (ringBuffer.packetSize == 0) {\n\t\t\t\tringBuffer.packetsAvail = 0;\n\t\t\t} else {\n\t\t\t\tringBuffer.packetsAvail = (ringBuffer.dataUpperBound - ringBuffer.data) / ringBuffer.packetSize;\n\t\t\t}\n\t\t\tringBuffer.mpeg = mpegAddr;\n\t\t}\n        const mpeg = this.context.memory.getPointerStream(mpegAddr)!\n\n\t\tmpeg.writeInt32(dataPtr + 0x30);\n\n        const mpegHandle = this.context.memory.getPointerStream(dataPtr + 0x30)!\n\t\tmpegHandle.writeString(\"LIBMPEG\\u0000001\\u0000\")\n\t\tmpegHandle.writeInt32(-1);\n\t\t\n\t\tthis.mpegs.set(mpegAddr, this.mpeg = new Mpeg());\n\t\t// @TODO: WIP\n\t\t//mpegHandle.writeInt32(mpegAddr);\n\t\t//mpegHandle.write\n\t}\n\n\t@nativeFunction(0x606A4649, 150)\n    @U32 sceMpegDelete(@I32 sceMpegPointer: number) {\n\t\t//this.getMpeg(sceMpegPointer).delete();\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xB5F6DC87, 150)\n    @U32 sceMpegRingbufferAvailableSize(@PTR rinbuggerAddr: Stream) {\n        const ringbuffer = RingBuffer.struct.createProxy(rinbuggerAddr);\n        return ringbuffer.packets - ringbuffer.packetsAvail;\n\t}\n\n\t@nativeFunction(0xD7A29F46, 150)\n    @U32 sceMpegRingbufferQueryMemSize(@I32 numberOfPackets:number) {\n\t\treturn (sceMpeg.RING_BUFFER_PACKET_SIZE + 0x68) * numberOfPackets;\n\t}\n\t\n\t@nativeFunction(0x37295ED8, 150)\n    @U32 sceMpegRingbufferConstruct(@PTR ringbufferAddr: Stream, @I32 numPackets: number, @I32 data: number, @I32 size: number, @I32 callbackAddr: number, @I32 callbackArg: number) {\n\t\tif (ringbufferAddr == Stream.INVALID) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_ADDR;\n\t\tif (size < 0) return SceKernelErrors.ERROR_MPEG_NO_MEMORY;\n\t\tif (this.__mpegRingbufferQueryMemSize(numPackets) > size) {\n\t\t\tif (numPackets < 0x00100000) {\n\t\t\t\treturn SceKernelErrors.ERROR_MPEG_NO_MEMORY;\n\t\t\t} else {\n\t\t\t\t// The PSP's firmware allows some cases here, due to a bug in its validation.\n\t\t\t}\n\t\t}\n        const buf = RingBuffer.struct.createProxy(ringbufferAddr);\n        buf.packets = numPackets;\n\t\tbuf.packetsRead = 0;\n\t\tbuf.packetsWritten = 0;\n\t\tbuf.packetsAvail = 0;\n\t\tbuf.packetSize = 2048;\n\t\tbuf.data = data;\n\t\tbuf.callback_addr = callbackAddr;\n\t\tbuf.callback_args = callbackArg;\n\t\tbuf.dataUpperBound = data + numPackets * 2048;\n\t\tbuf.semaID = 0;\n\t\tbuf.mpeg = 0;\n\t\t// This isn't in ver 0104, but it is in 0105.\n\t\t//if (mpegLibVersion >= 0x0105) buf.gp = __KernelGetModuleGP(__KernelGetCurThreadModuleId());\n\t}\n\t\n\t@nativeFunction(0x13407F13, 150)\n    @U32 sceMpegRingbufferDestruct(@I32 ringBufferPointer: number) {\n\t\t//Ringbuffer- > PacketsAvailable = Ringbuffer- > PacketsTotal;\n\t\t//Ringbuffer- > PacketsRead = 0;\n\t\t//Ringbuffer- > PacketsWritten = 0;\n\t\treturn 0;\n\t}\n\t\n\tprivate _mpegRingbufferRead() {\n\t\t\n\t}\n\n\t@nativeFunction(0xB240A59E, 150)\n    @U32 sceMpegRingbufferPut(@PTR ringbufferAddr: Stream, @U32 numPackets: number, @U32 available: number) {\n        const state = this.context.currentState;\n\n        //console.log('sceMpegRingbufferPut');\n\t\tthis._mpegRingbufferRead();\n\t\tnumPackets = Math.min(numPackets, available);\n\t\tif (numPackets <= 0) {\n\t\t\tdebugger;\n\t\t\treturn 0;\n\t\t}\n\n        const ringbuffer = RingBuffer.struct.createProxy(ringbufferAddr.clone());\n\n        //console.log(this.context.memory.getPointerU8Array(ringbuffer.data, ringbuffer.packetSize));\n\t\t\n\t\t// Execute callback function as a direct MipsCall, no blocking here so no messing around with wait states etc\n\t\tif (ringbuffer.callback_addr != 0) {\n            const packetsThisRound = Math.min(numPackets, ringbuffer.packets);\n            this.context.interop.execute(state, ringbuffer.callback_addr, [\n\t\t\t\tringbuffer.data, packetsThisRound, ringbuffer.callback_args\n\t\t\t]);\n\t\t\tconsole.log(state.V0);\n\t\t} else {\n\t\t\tconsole.warn(\"sceMpegRingbufferPut: callback_addr zero\");\n\t\t\tdebugger;\n\t\t}\n\t\t\n\t\tthis.mpeg.addData(this.context.memory.getPointerU8Array(ringbuffer.data, ringbuffer.packetSize));\n\t\t\n\t\treturn state.V0;\n\t}\n\n\tprivate __mpegRingbufferQueryMemSize(packets: number) {\n\t\treturn packets * (104 + 2048);\n\t}\n}\n\nenum StreamType {\n\tAvc = 0,\n\tAtrac = 1,\n\tPcm = 2,\n\tData = 3,\n\tAudio = 15,\n}\n\nclass MeStream {\n    static openData(data: Uint8Array): MeStream {\n        throw new ProgramExitException(\"Unimplemented MeStream\")\n    }\n}\n\nclass Mpeg {\n\t// @ts-ignore\n    private stream: MeStream;\n\tprivate streamIdGen: number = 1;\n\tprivate avcEsBuf: number = 1;\n\t\n\tconstructor() {\n\t\tMeStream.openData(new Uint8Array(1024));\n\t}\n\t\n\taddData(data:Uint8Array) {\n\t\t\n\t}\n\t\n\tregisterStream(type: StreamType, num: number) {\n\t\treturn this.streamIdGen++;\n\t}\n\t\n\tallocAvcEsBuf() {\n\t\treturn this.avcEsBuf++;\n\t}\n}\n\nclass SceMpegAvcMode extends Struct {\n\t@StructInt32 mode: number = 0;\n    @StructInt32 pixelformat: number = 0;\n}\n\nclass SceMpegAu extends Struct {\n\t@StructInt64 pts: Integer64 = Integer64.ZERO  // presentation time stamp\n    @StructInt64 dts: Integer64 = Integer64.ZERO  // decode time stamp\n    @StructUInt32 esBuffer: number = 0\n    @StructUInt32 esSize: number = 0\n}\n\nclass PmfStruct extends Struct {\n    // PSP info\n\t@StructStructStringn(4) magic: string = '' // PSMF\n\t@StructUInt32 version: number = 0\n    @StructUInt32 offset: number = 0\n    @StructUInt32 size: number = 0\n    @StructStructStringn(0x44) _unknown: number = 0\n    @StructStructStringn(6) firstTimestampOffset: string = ''\n    @StructStructStringn(6) lastTimestampOffset: string = ''\n}\n\nclass RingBuffer extends Struct {\n\t@StructInt32_l packets: number = 0\n    @StructInt32_l packetsRead: number = 0\n    @StructInt32_l packetsWritten: number = 0\n    @StructInt32_l packetsAvail: number = 0 // pspsdk: unk2, noxa: iUnk0\n    @StructInt32_l packetSize: number = 0 // 2048\n    @StructUInt32_l data: number = 0 // address, ring buffer\n    @StructUInt32_l callback_addr: number = 0 // see sceMpegRingbufferPut\n    @StructInt32_l callback_args: number = 0\n    @StructInt32_l dataUpperBound: number = 0\n    @StructInt32_l semaID: number = 0 // unused?\n    @StructInt32_l mpeg: number = 0 // pointer to mpeg struct, fixed up in sceMpegCreate\n\t// Note: not available in all versions.\n    @StructInt32_l gp: number = 0\n}\n\n", "\uFEFFimport {mac2string, string2mac} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {xrange} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {FBYTES, I32, nativeFunction, PTR, STRING} from \"../utils\";\n\nexport class sceNet {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x39AF39A6, 150)\n\t@I32 sceNetInit(\n        @I32 memoryPoolSize: number,\n        @I32 calloutprio: number,\n        @I32 calloutstack: number,\n        @I32 netintrprio: number,\n        @I32 netintrstack: number\n    ) {\n\t\tthis.context.container['mac'] = new Uint8Array(xrange(0, 6).map(index => Math.random() * 255));\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x281928A9, 150)\n\t@I32 sceNetTerm() {\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x50647530, 150)\n\t@I32 sceNetFreeThreadinfo(@I32 threadId: number) {\n\t\tthrow new Error(\"Not implemented\");\n\t}\n\n\t@nativeFunction(0xAD6844c6, 150)\n\t@I32 sceNetThreadAbort(@I32 threadId: number) {\n\t\tthrow new Error(\"Not implemented\");\n\t}\n\n\t/** Convert string to a Mac address **/\n\t@nativeFunction(0xD27961C9, 150)\n\t@I32 sceNetEtherStrton(@STRING string: string, @FBYTES(6) mac: Uint8Array) {\n\t\tmac.set(string2mac(string));\n\t\treturn 0;\n\t}\n\n\t/** Convert Mac address to a string **/\n\t@nativeFunction(0x89360950, 150)\n\t@I32 sceNetEtherNtostr(@FBYTES(6) mac: Uint8Array, @PTR outputAddress: Stream) {\n\t\toutputAddress.writeStringz(mac2string(mac));\n\t\treturn 0;\n\t}\n\n\t/** Retrieve the local Mac address **/\n\t@nativeFunction(0x0BF0A3AE, 150)\n\t@I32 sceNetGetLocalEtherAddr(@FBYTES(6) macOut: Uint8Array) {\n\t\tconsole.info(\"sceNetGetLocalEtherAddr: \", mac2string(this.context.netManager.mac));\n\t\tmacOut.set(this.context.netManager.mac);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xCC393E48, 150)\n\t@I32 sceNetGetMallocStat(@PTR statPtr: Stream) {\n\t\tthrow new Error(\"Not implemented\");\n\t}\n}\n", "\uFEFFimport {Cancelable, PromiseFast, Signal0, UidCollection} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {\n    Int8, Struct,\n    StructInt16,\n    StructInt32,\n    StructStructArray,\n    StructUInt32\n} from \"../../global/struct\";\nimport {xrange} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {MemoryPartition} from \"../manager/memory\";\nimport {BYTES, FBYTES, I32, nativeFunction, PTR, U32} from \"../utils\";\nimport {NetPacket} from \"../manager/net\";\n\nexport class sceNetAdhoc {\n\tconstructor(private context: EmulatorContext) {\n\t}\n\n\t// @ts-ignore\n    private partition: MemoryPartition;\n\n\t/** Initialise the adhoc library. */\n\t@nativeFunction(0xE1D621D7, 150)\n\t@I32 sceNetAdhocInit() {\n\t\tthis.partition = this.context.memoryManager.kernelPartition.allocateLow(0x4000);\n\t\treturn 0;\n\t}\n\n\t/** Terminate the adhoc library */\n\t@nativeFunction(0xA62C6F57, 150)\n    @I32 sceNetAdhocTerm() {\n\t\tthis.partition.deallocate();\n\t\treturn 0;\n\t}\n\n\t/** */\n\t@nativeFunction(0x7A662D6B, 150)\n    @I32 sceNetAdhocPollSocket(@I32 socketAddress: number, @I32 int: number, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow new Error(\"Not implemented sceNetAdhocPollSocket\");\n\t}\n\n\tprivate pdps = new UidCollection<Pdp>(1);\n\n\t/** Create a PDP object. */\n\t@nativeFunction(0x6F92741B, 150)\n    @I32 sceNetAdhocPdpCreate(@FBYTES(6) mac: Uint8Array, @I32 port: number, @U32 bufsize: number, @I32 unk1: number) {\n        const pdp = new Pdp(this.context, mac, port, bufsize);\n\t\tpdp.id = this.pdps.allocate(pdp);\n\t\treturn pdp.id;\n\t}\n\n\t/** Delete a PDP object. */\n\t@nativeFunction(0x7F27BB5E, 150)\n    @I32 sceNetAdhocPdpDelete(@I32 pdpId: number, @I32 unk1: number) {\n        const pdp = this.pdps.get(pdpId);\n\t\tpdp.dispose();\n\t\tthis.pdps.remove(pdpId);\n\t\treturn 0;\n\t}\n\n\t/** Send a PDP packet to a destination. */\n\t@nativeFunction(0xABED3790, 150)\n    @I32 sceNetAdhocPdpSend(@I32 pdpId: number, @FBYTES(6) destMac: Uint8Array, @I32 port: number, @FBYTES(6) dataStream: Stream, @I32 timeout: number, @I32 nonblock: number) {\n\t\t//debugger;\n        const pdp = this.pdps.get(pdpId);\n        const data = dataStream.readBytes(dataStream.length);\n\t\tpdp.send(port, destMac, data);\n\n\t\treturn 0;\n\t}\n\n\t/** Receive a PDP packet */\n\t@nativeFunction(0xDFE53E03, 150)\n    @I32 async sceNetAdhocPdpRecv(@I32 pdpId: number, @FBYTES(6) srcMac: Uint8Array, @PTR portPtr: Stream, @PTR data: Stream, @PTR dataLengthPtr: Stream, @I32 timeout: number, @I32 nonblock: number) {\n        const block = !nonblock;\n        const pdp = this.pdps.get(pdpId);\n\t\tconst recvOne = (chunk: NetPacket) => {\n\t\t\tsrcMac.set(chunk.mac);\n\t\t\tdata.writeBytes(chunk.payload);\n\t\t\tportPtr.writeInt16(pdp.port);\n\t\t\tdataLengthPtr.writeInt32(chunk.payload.length);\n\t\t\treturn 0;\n\t\t};\n\n\t\t// block\n\t\tif (block) {\n            const data = await pdp.recvOneAsync()\n\t\t\treturn recvOne(data)\n\t\t} else {\n\t\t\tif (pdp.chunks.length <= 0) return 0x80410709; // ERROR_NET_ADHOC_NO_DATA_AVAILABLE\n\t\t\treturn recvOne(pdp.chunks.shift()!);\n\t\t}\n\t}\n\n\t/** Get the status of all PDP objects */\n\t@nativeFunction(0xC7C1FC57, 150)\n    @I32 sceNetAdhocGetPdpStat(@PTR sizeStream: Stream, @PTR pdpStatStruct: Stream) {\n        const maxSize = sizeStream.sliceWithLength(0).readInt32();\n        const pdps = this.pdps.list();\n        const totalSize = pdps.length * PdpStatStruct.struct.length;\n        sizeStream.sliceWithLength(0).writeInt32(totalSize);\n\t\t//const outStream = this.context.memory.getPointerStream(this.partition.low, this.partition.size);\n        const pos = 0;\n        pdps.forEach(pdp => {\n            const stat = new PdpStatStruct();\n            stat.nextPointer = 0;\n\t\t\tstat.pdpId = pdp.id;\n\t\t\tstat.port = pdp.port;\n\t\t\tstat.mac = xrange(0, 6).map(index => pdp.mac[index]);\n\t\t\tstat.rcvdData = pdp.getDataLength();\n\t\t\t//console.log(\"sceNetAdhocGetPdpStat:\", stat);\n\t\t\tPdpStatStruct.struct.write(pdpStatStruct, stat);\n\t\t});\n\t\treturn 0;\n\t}\n\n\t/** Create own game object type data. */\n\t@nativeFunction(0x7F75C338, 150)\n    @I32 sceNetAdhocGameModeCreateMaster(@BYTES data: Stream) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeCreateMaster\"));\n\t}\n\n\t/** Create peer game object type data. */\n\t@nativeFunction(0x3278AB0C, 150)\n    @I32 sceNetAdhocGameModeCreateReplica(@FBYTES(6) mac: Uint8Array, @BYTES data: Stream) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeCreateReplica\"));\n\t}\n\n\t/** Update own game object type data. */\n\t@nativeFunction(0x98C204C8, 150)\n    @I32 sceNetAdhocGameModeUpdateMaster() {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeUpdateMaster\"));\n\t}\n\n\t/** Update peer game object type data. */\n\t@nativeFunction(0xFA324B4E, 150)\n    @I32 sceNetAdhocGameModeUpdateReplica(@I32 id: number, @I32 unk1: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeUpdateReplica\"));\n\t}\n\n\t/** Delete own game object type data. */\n\t@nativeFunction(0xA0229362, 150)\n    @I32 sceNetAdhocGameModeDeleteMaster() {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeDeleteMaster\"));\n\t}\n\n\t/** Delete peer game object type data. */\n\t@nativeFunction(0x0B2228E9, 150)\n    @I32 sceNetAdhocGameModeDeleteReplica(@I32 id: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGameModeDeleteReplica\"));\n\t}\n\n\t/** Open a PTP (Peer To Peer) connection */\n\t@nativeFunction(0x877F6D66, 150)\n    @I32 sceNetAdhocPtpOpen(@FBYTES(6) srcmac: Uint8Array, @I32 srcport: number, @PTR destmac: Stream, @I32 destport: number, @I32 bufsize: number, @I32 delay: number, @I32 count: number, @I32 unk1: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpOpen\"));\n\t}\n\n\t/** Wait for an incoming PTP connection */\n\t@nativeFunction(0xE08BDAC1, 150)\n    @I32 sceNetAdhocPtpListen(@FBYTES(6) srcmac: Uint8Array, @I32 srcport: number, @I32 bufsize: number, @I32 delay: number, @I32 count: number, @I32 queue: number, @I32 unk1: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpListen\"));\n\t}\n\n\t/** Wait for connection created by sceNetAdhocPtpOpen */\n\t@nativeFunction(0xFC6FC07B, 150)\n    @I32 sceNetAdhocPtpConnect(@I32 id: number, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpConnect\"));\n\t}\n\n\t/** Accept an incoming PTP connection */\n\t@nativeFunction(0x9DF81198, 150)\n    @I32 sceNetAdhocPtpAccept(@I32 id: number, @PTR data: Stream, @PTR datasize: Stream, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpAccept\"));\n\t}\n\n\t/** Send data */\n\t@nativeFunction(0x4DA4C788, 150)\n    @I32 sceNetAdhocPtpSend(@I32 id: number, @PTR data: Stream, @PTR datasize: Stream, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpSend\"));\n\t}\n\t\n\t/** Receive data */\n\t@nativeFunction(0x8BEA2B3E, 150)\n    @I32 sceNetAdhocPtpRecv(@I32 id: number, @PTR data: Stream, @PTR datasize: Stream, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpRecv\"));\n\t}\n\n\t/** Wait for data in the buffer to be sent */\n\t@nativeFunction(0x9AC2EEAC, 150)\n    @I32 sceNetAdhocPtpFlush(@I32 id: number, @I32 timeout: number, @I32 nonblock: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpFlush\"));\n\t}\n\n\t/** Close a socket */\n\t@nativeFunction(0x157E6225, 150)\n    @I32 sceNetAdhocPtpClose(@I32 id: number, @I32 unk1: number) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocPtpClose\"));\n\t}\n\n\t/** Get the status of all PTP objects */\n\t@nativeFunction(0xB9685118, 150)\n    @I32 sceNetAdhocGetPtpStat(@PTR size: Stream, @PTR stat: Stream) {\n\t\tthrow (new Error(\"Not implemented sceNetAdhocGetPtpStat\"));\n\t}\n}\n\n\n\nclass PdpRecv {\n\tport = 0;\n\tmac = new Uint8Array(6);\n\tdata = new Uint8Array(0);\n}\n\nexport class Pdp {\n\tid: number = 0\n\tonMessageCancel: Cancelable | null;\n\tchunks = <NetPacket[]>[];\n\tonChunkRecv = new Signal0();\n\n\tconstructor(private context: EmulatorContext, public mac: Uint8Array, public port: number, public bufsize: number) {\n\t\tthis.onMessageCancel = this.context.netManager.onmessage(port).add(packet => {\n\t\t\tthis.chunks.push(packet);\n\t\t\tthis.onChunkRecv.dispatch();\n\t\t})\n\t}\n\n\trecvOneAsync() {\n\t\treturn new PromiseFast<NetPacket>((resolve, reject) => {\n\t\t\tthis.onChunkRecv.once(() => {\n\t\t\t\tresolve(this.chunks.shift());\n\t\t\t});\n\t\t});\n\t}\n\n\tsend(port: number, destMac: Uint8Array, data: Uint8Array) {\n\t\tthis.context.netManager.send(port, 'sceNetAdhocPdpSend', destMac, data);\n\t}\n\n\tgetDataLength() {\n\t\treturn this.chunks.sum(chunk => chunk.payload.length);\n\t}\n\n\tdispose() {\n\t\tif (this.onMessageCancel) {\n\t\t\tthis.onMessageCancel.cancel();\n\t\t\tthis.onMessageCancel = null;\n\t\t}\n\t}\n}\n\nclass PdpStatStruct extends Struct {\n\t@StructUInt32 nextPointer = 0\n    @StructInt32 pdpId = 0\n\t@StructStructArray(Int8, 6) mac = [0, 0, 0, 0, 0, 0]\n\t@StructInt16 port = 0\n    @StructUInt32 rcvdData = 0\n}\n\n/*\nclass ptpStatStruct { // PTP status structure\n\tpublic uint NextAddress; // Pointer to next PTP structure in list (ptpStatStruct *next;)\n\tpublic int ptpId; // ptp ID\n\tpublic fixed byte mac[6]; // MAC address\n\tpublic fixed byte peermac[6]; // Peer MAC address\n\tpublic ushort port; // Port\n\tpublic ushort peerport; // Peer Port\n\tpublic uint sentData; // Bytes sent\n\tpublic uint rcvdData; // Bytes received\n\tpublic int unk1; // Unknown\n}\n*/\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {Cancelable, UidCollection} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING} from \"../utils\";\n\nexport class sceNetAdhocctl {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate currentState = State.Disconnected;\n\tprivate currentName = \"noname\";\n\n\tpublic ws?: WebSocket;\n\n\t/** Initialise the Adhoc control library */\n\t@nativeFunction(0xE26F226E, 150)\n\t@I32 sceNetAdhocctlInit(@I32 stacksize: number, @I32 priority: number, @PTR product: Stream) {\n\t\tthis.currentState = State.Disconnected;\n\t\treturn 0;\n\t}\n\n\t/** Terminate the Adhoc control library */\n\t@nativeFunction(0x9D689E13, 150)\n    @I32 sceNetAdhocctlTerm() {\n\t\treturn 0;\n\t}\n\n\tprivate connectHandlers = <Cancelable[]>[];\n\n\t/** Connect to the Adhoc control */\n\t@nativeFunction(0x0AD043ED, 150)\n\t@I32 sceNetAdhocctlConnect(@STRING name: string) {\n\t\tthis.currentName = name;\n\n\t\tthis.connectHandlers.push(this.context.netManager.onopen.add(() => {\n\t\t\tthis.currentState = State.Connected;\n\t\t\tthis._notifyAdhocctlHandler(Event.Connected);\n\t\t}));\n\t\tthis.connectHandlers.push(this.context.netManager.onclose.add(() => {\n\t\t\tthis.currentState = State.Disconnected;\n\t\t\tthis._notifyAdhocctlHandler(Event.Disconnected);\n\t\t}));\n\t\tif (this.context.netManager.connected) {\n\t\t\tthis.currentState = State.Connected;\n\t\t\tthis._notifyAdhocctlHandler(Event.Connected);\n\t\t}\n\t\tthis.context.netManager.connectOnce();\n\t\treturn 0;\n\t}\n\n\t/** Disconnect from the Adhoc control */\n\t@nativeFunction(0x34401D65, 150)\n\t@I32 sceNetAdhocctlDisconnect() {\n\t\twhile (this.connectHandlers.length) this.connectHandlers.shift()!.cancel();\n\t\treturn 0;\n\t}\n\n\tprivate handlers = new UidCollection<HandlerCallback>(1);\n\n\t@nativeFunction(0x20B317A0, 150)\n\t@I32 sceNetAdhocctlAddHandler(@I32 callback: number, @I32 parameter: number) {\n\t\treturn this.handlers.allocate(new HandlerCallback(callback, parameter));\n\t}\n\n\t@nativeFunction(0x6402490B, 150)\n\t@I32 sceNetAdhocctlDelHandler(@I32 handler: number) {\n\t\tthis.handlers.remove(handler);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x75ECD386, 150)\n\t@I32 sceNetAdhocctlGetState(@PTR stateOut: Stream) {\n\t\tstateOut.writeInt32(this.currentState);\n\t\treturn 0;\n\t}\n\n\tprivate _notifyAdhocctlHandler(event: Event, error = <SceKernelErrors>0) {\n\t\tthis.handlers.list().forEach(callback => {\n\t\t\tthis.context.callbackManager.executeLater(callback.callback, [event, error, callback.argument]);\n\t\t\t//this.context.interop.execute(this.context.threadManager.current.state, callback.callback, [event, error, callback.argument]);\n\t\t});\n\t}\n}\n\nclass HandlerCallback {\n\tconstructor(public callback: number, public argument: number) {\n\t}\n}\n\n\nenum State {\n\tDisconnected = 0,\n\tConnected = 1,\n\tScan = 2,\n\tGame = 3,\n\tDiscover = 4,\n\tWol = 5,\n}\n\nenum Mode {\n\tNormal = 0,\n\tGameMode = 1,\n\tNone = -1,\n}\n\n\nenum Event {\n\tError = 0,\n\tConnected = 1,\n\tDisconnected = 2,\n\tScan = 3,\n\tGame = 4,\n\tDiscover = 5,\n\tWol = 6,\n\tWolInterrupted = 7,\n}\n\n\nconst NICK_NAME_LENGTH = 128;\nconst GROUP_NAME_LENGTH = 8;\nconst IBSS_NAME_LENGTH = 6;\nconst ADHOC_ID_LENGTH = 9;\nconst MAX_GAME_MODE_MACS = 16;\n", "\uFEFFimport {Cancelable, mac2string, UidCollection} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {MathUtils} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, THREAD, U32} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\n\nexport class sceNetAdhocMatching {\n\tconstructor(private context: EmulatorContext) {\n\t}\n\n\tprivate poolStat = { size: 0, maxsize: 0, freesize: 0 };\n\n\t/** Initialise the Adhoc matching library */\n\t@nativeFunction(0x2A2A1E07, 150)\n\t@I32 sceNetAdhocMatchingInit(@I32 memSize: number) {\n\t\t//stateOut.writeInt32(this.currentState);\n\t\tthis.poolStat.size = memSize;\n\t\tthis.poolStat.maxsize = memSize;\n\t\tthis.poolStat.freesize = memSize;\n\t\treturn 0;\n\t}\n\n\t/** Terminate the Adhoc matching library */\n\t@nativeFunction(0x7945ECDA, 150)\n    @I32 sceNetAdhocMatchingTerm() {\n\t\treturn 0;\n\t}\n\n\tprivate matchings = new UidCollection<Matching>(1);\n\n\t/** Create an Adhoc matching object */\n\t@nativeFunction(0xCA5EDA6F, 150)\n    @I32 sceNetAdhocMatchingCreate(\n        @THREAD thread: Thread, @I32 mode: Mode,\n        @I32 maxPeers: number, @I32 port: number, @I32 bufSize: number,\n        @I32 helloDelay: number, @I32 pingDelay: number, @I32 initCount: number,\n        @I32 msgDelay: number, @U32 callback: number\n    ) {\n        const matching = new Matching(this.context, thread, mode, maxPeers, port, bufSize, helloDelay, pingDelay, initCount, msgDelay, callback);\n        matching.id = this.matchings.allocate(matching);\n\t\treturn matching.id;\n\t}\n\n\t/** Select a matching target */\n\t@nativeFunction(0x5E3D4B79, 150)\n    @I32 sceNetAdhocMatchingSelectTarget(\n        @I32 matchingId: number, @PTR macStream:Stream,\n        @I32 dataLength: number, @PTR dataPointer: Stream\n    ) {\n        const matching = this.matchings.get(matchingId);\n        const mac = macStream.readBytes(6);\n        matching.selectTarget(mac, (dataPointer && dataLength) ? dataPointer.readBytes(dataLength) : null);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xEA3C6108, 150)\n    @I32 sceNetAdhocMatchingCancelTarget(@I32 matchingId: number, @PTR mac: Stream) {\n        const matching = this.matchings.get(matchingId);\n        matching.cancelTarget(mac.readBytes(6));\n\t\treturn 0;\n\t}\n\n\t/** Delete an Adhoc matching object */\n\t@nativeFunction(0xF16EAF4F, 150)\n    @I32 sceNetAdhocMatchingDelete(@I32 matchingId: number) {\n\t\tthis.matchings.remove(matchingId);\n\t\treturn 0;\n\t}\n\n\t/** Start a matching object */\n\t@nativeFunction(0x93EF3843, 150)\n    @I32 sceNetAdhocMatchingStart(\n        @I32 matchingId: number, @I32 evthPri: number, @I32 evthStack: number,\n        @I32 inthPri: number, @I32 inthStack: number, @I32 optLen: number,\n        @PTR optData: Stream\n    ) {\n\t\t//throw (new Error(\"sceNetAdhocMatchingStart\"));\n        const matching = this.matchings.get(matchingId);\n        matching.hello = optData.readBytes(optLen);\n\t\tmatching.start();\n\t\treturn 0;\n\t}\n\n\t/** Stop a matching object */\n\t@nativeFunction(0x32B156B3, 150)\n    @I32 sceNetAdhocMatchingStop(@I32 matchingId: number) {\n        const matching = this.matchings.get(matchingId);\n        matching.stop();\n\t\treturn 0;\n\t}\n}\n\nexport const enum State {\n\tSTART,\n\tJOIN_WAIT_RESPONSE,\n\tJOIN_WAIT_COMPLETE,\n\tCOMPLETED,\n}\n\nexport class Matching {\n\tpublic id = 0;\n\n\tjoinMac = '00:00:00:00:00:00';\n\n\tconstructor(private context: EmulatorContext, private thread: Thread, public mode: number, public maxPeers: number, public port: number, public bufSize: number, public helloDelay: number, public pingDelay: number, public initCount: number, public msgDelay: number, public callback: number) {\n\t}\n\n\tprivate static MAC_ALL = new Uint8Array([0, 0, 0, 0, 0, 0]);\n\n\tpublic mac = new Uint8Array([1, 2, 3, 4, 5, 6]);\n\tpublic hello = new Uint8Array(0);\n\tprivate helloTimer = -1;\n\tprivate dataTimer = -1;\n\tprivate onMessageCancelable: Cancelable | null = null;\n\tprivate state = State.START;\n\n\tprivate sendHello() {\n\t\tif (this.state != State.START) return;\n\t\tthis.sendMessage(Event.Hello, Matching.MAC_ALL, this.hello);\n\t}\n\n\tstart() {\n\t\tthis.onMessageCancelable = this.context.netManager.onmessage(this.port).add(packet => {\n\t\t\tthis.notify((<any>Event)[packet.type], packet.mac, packet.payload);\n\t\t})\n\n\t\tthis.helloTimer = setInterval(() => { this.sendHello(); }, this.helloDelay / 1000) as any;\n\t\tthis.sendHello();\n\n\t\tthis.dataTimer = setInterval(() => {\n\t\t}, this.msgDelay / 1000) as any;\n\t}\n\n\tstop() {\n\t\tclearInterval(this.helloTimer);\n\t\tclearInterval(this.dataTimer);\n\n\t\tif (this.onMessageCancelable) {\n\t\t\tthis.onMessageCancelable.cancel();\n\t\t\tthis.onMessageCancelable = null;\n\t\t}\n\t}\n\n\tselectTarget(mac: Uint8Array, data: Uint8Array | null) {\n        const macstr = mac2string(mac);\n        console.info(\"net.adhoc: selectTarget\", macstr);\n\t\t// Accept\n\t\tif ((this.state == State.JOIN_WAIT_RESPONSE) && (macstr == this.joinMac)) {\n\t\t\tthis.state = State.JOIN_WAIT_COMPLETE;\n\t\t\tthis.sendMessage(Event.Accept, mac, data);\n\t\t}\n\t\t// Send a Join request\n\t\telse {\n\t\t\tthis.state = State.JOIN_WAIT_RESPONSE;\n\t\t\tthis.sendMessage(Event.Join, mac, data);\n\t\t}\n\t}\n\n\tcancelTarget(mac: Uint8Array) {\n\t\t// Cancel\n        const macstr = mac2string(mac);\n        console.info(\"net.adhoc: cancelTarget\", macstr);\n\t\tthis.state = State.START;\n\t\tthis.sendMessage(Event.Cancel, mac, null as any);\n\t}\n\n\t//private messageQueue = [];\n\n\tsendMessage(event: Event, tomac: Uint8Array, data: Uint8Array | null) {\n\t\t//this.messageQueue.push({ event: event, tomac: ArrayBufferUtils.cloneBytes(tomac), data: ArrayBufferUtils.cloneBytes(data) });\n\t\tif (!data) data = new Uint8Array(0);\n\t\tif (event != Event.Hello) {\n\t\t\tconsole.info(\"net.adhoc: send ->\", Event[event], event, ':', mac2string(tomac), ':', Stream.fromUint8Array(data).readString(data.length));\n\t\t}\n\n\t\tthis.context.netManager.send(this.port, Event[event], tomac, data);\n\t}\n\n\tnotify(event: Event, frommac: Uint8Array, data: Uint8Array) {\n\t\tif (!data) data = new Uint8Array(0);\n\n\t\tif (event != Event.Hello) {\n\t\t\tconsole.info(\"net.adhoc: received <-\", Event[event], event, ':', mac2string(frommac), ':', Stream.fromUint8Array(data).readString(data.length));\n\t\t}\n\n\t\tswitch (event) {\n\t\t\tcase Event.Join:\n\t\t\t\tthis.state = State.JOIN_WAIT_RESPONSE;\n\t\t\t\tthis.joinMac = mac2string(frommac);\n\t\t\t\tbreak;\n\t\t}\n\n        const macPartition = this.context.memoryManager.kernelPartition.allocateLow(8, 'Matching.mac');\n        this.context.memory.memset(macPartition.low, 0, macPartition.size);\n\t\tthis.context.memory.writeUint8Array(macPartition.low, frommac);\n\n        const dataPartition = this.context.memoryManager.kernelPartition.allocateLow(Math.max(8, MathUtils.nextAligned(data.length, 8)), 'Matching.data');\n        this.context.memory.memset(dataPartition.low, 0, dataPartition.size);\n\t\tthis.context.memory.writeUint8Array(dataPartition.low, data);\n\n\t\t//// @TODO: Enqueue callback instead of executing now?\n\n\t\tthis.context.callbackManager.executeLater(this.callback, [\n\t\t\tthis.id, event, macPartition.low, data.length, data.length ? dataPartition.low : 0\n\t\t]);\n\t\t//this.context.interop.execute(this.thread.state, this.callback, [\n\t\t//\tthis.id, event, macPartition.low, data.length, data.length ? dataPartition.low : 0\n\t\t//]);\n\n\t\tdataPartition.deallocate();\n\t\tmacPartition.deallocate();\n\n\t\tswitch (event) {\n\t\t\tcase Event.Accept:\n\t\t\t\tthis.sendMessage(Event.Complete, frommac, data);\n\t\t\t\tthis.state = State.JOIN_WAIT_COMPLETE;\n\t\t\t\tbreak;\n\t\t\tcase Event.Complete:\n\t\t\t\tif (this.state == State.JOIN_WAIT_COMPLETE) {\n\t\t\t\t\tthis.sendMessage(Event.Complete, frommac, data);\n\t\t\t\t\tthis.state = State.COMPLETED;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase Event.Data:\n\t\t\t\tthis.sendMessage(Event.DataConfirm, frommac, null as any);\n\t\t\t\tbreak;\n\t\t\tcase Event.Disconnect:\n\t\t\tcase Event.Left:\n\t\t\t\tthis.state = State.START;\n\t\t\t\tbreak;\n\t\t}\n\n\t}\n}\n\nexport enum Event {\n\tHello = 1, // Hello event. optdata contains data if optlen > 0.\n\tJoin = 2, // Join request. optdata contains data if optlen > 0.\n\tLeft = 3, // Target left matching.\n\tReject = 4, // Join request rejected.\n\tCancel = 5, // Join request cancelled.\n\tAccept = 6, // Join request accepted. optdata contains data if optlen > 0.\n\tComplete = 7, // Matching is complete.\n\tTimeout = 8, // Ping timeout event.\n\tError = 9, // Error event.\n\tDisconnect = 10, // Peer disconnect event.\n\tData = 11, // Data received event. optdata contains data if optlen > 0.\n\tDataConfirm = 12, // Data acknowledged event.\n\tDataTimeout = 13, // Data timeout event.\n\t//InternalPing = 100, // Internal ping message.\n}\n\nexport const enum Mode {\n\tHost = 1,\n\tClient = 2,\n\tPtp = 3,\n}", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNetApctl {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNetInet {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNetResolver {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNp {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNpAuth {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceNpService {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceOpenPSID {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {EmulatorContext} from \"../../emu/context\";\nimport {F32, I32, nativeFunction} from \"../utils\";\n\nexport class scePower {\n    constructor(private context: EmulatorContext) { }\n\n\t// 222/111\n\t// 333/166\n\n\tprivate cpuMult = 511; // 222mhz\n\tprivate pllFreq = 222;\n\tprivate busFreq = 111; // MAX BUS: 166\n\n\t_getCpuMult() {\n\t\treturn 0.43444227005871 * (this.busFreq / 111);\n\t}\n\n\t_getCpuFreq() {\n\t\treturn this.cpuMult * this._getCpuMult();\n\t}\n\n\t_setCpuFreq(cpuFreq: number) {\n\t\tif (cpuFreq > 222) { // TODO: necessary until integer arithmetic to avoid it failing\n\t\t\t// do nothing\n\t\t} else if (cpuFreq == 222) {\n\t\t\tthis.cpuMult = 511;\n\t\t} else {\n\t\t\tthis.cpuMult = Math.floor(cpuFreq / this._getCpuMult());\n\t\t}\n\t}\n\n\t@nativeFunction(0x04B7766E, 150)\n\t@I32 scePowerRegisterCallback(@I32 slotIndex: number, @I32 callbackId: number) {\n\t\tthis.context.callbackManager.notify(callbackId, CallbackStatus.BATTERY_EXIST);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xDB9D28DD, 150)\n    @I32 scePowerUnregitserCallback(@I32 slotIndex: number) {\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xDFA8BAF8, 150)\n    @I32 scePowerUnregisterCallback(@I32 slotIndex: number) {\n\t\treturn 0;\n\t}\n\n\t_isValidCpuFreq(freq: number) {\n\t\treturn (freq >= 1 && freq <= 222);\n\t}\n\n\t_isValidBusFreq(freq: number) {\n\t\treturn (freq >= 1 && freq <= 111);\n\t}\n\n\t_isValidPllFreq(freq: number) {\n\t\treturn (freq >= 19 && freq <= 111);\n\t}\n\n\t_scePowerSetClockFrequency(pllFreq: number, cpuFreq: number, busFreq: number) {\n\t\tif (!this._isValidCpuFreq(cpuFreq)) return SceKernelErrors.ERROR_INVALID_VALUE;\n\t\tif (!this._isValidBusFreq(busFreq)) return SceKernelErrors.ERROR_INVALID_VALUE;\n\t\tif (!this._isValidPllFreq(pllFreq)) return SceKernelErrors.ERROR_INVALID_VALUE;\n\t\tthis.pllFreq = pllFreq;\n\t\tthis._setCpuFreq(cpuFreq);\n\t\tthis.busFreq = busFreq;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x737486F2, 150)\n    @I32 scePowerSetClockFrequency(@I32 pllFreq: number, @I32 cpuFreq: number, @I32 busFreq: number) {\n\t\treturn this._scePowerSetClockFrequency(pllFreq, cpuFreq, busFreq);\n\t}\n\n\t@nativeFunction(0xEBD177D6, 150)\n    @I32 scePowerSetClockFrequency2(@I32 pllFreq: number, @I32 cpuFreq: number, @I32 busFreq: number) {\n\t\treturn this._scePowerSetClockFrequency(pllFreq, cpuFreq, busFreq);\n\t}\n\n\t@nativeFunction(0x469989AD, 150)\n    @I32 scePowerSetClockFrequency3(@I32 pllFreq: number, @I32 cpuFreq: number, @I32 busFreq: number) {\n\t\treturn this._scePowerSetClockFrequency(pllFreq, cpuFreq, busFreq);\n\t}\n\t\n\n\t@nativeFunction(0xFEE03A2F, 150)\n    @I32 scePowerGetCpuClockFrequency() { return this._getCpuFreq(); }\n\t@nativeFunction(0xFDB5BFE9, 150)\n    @I32 scePowerGetCpuClockFrequencyInt() { return this._getCpuFreq(); }\n\t@nativeFunction(0xB1A52C83, 150)\n    @F32 scePowerGetCpuClockFrequencyFloat() { return this._getCpuFreq(); }\n\n\t@nativeFunction(0x478FE6F5, 150)\n    @I32 scePowerGetBusClockFrequency() { return this.busFreq; }\n\t@nativeFunction(0xBD681969, 150)\n    @I32 scePowerGetBusClockFrequencyInt() { return this.busFreq; }\n\t@nativeFunction(0x9BADB3EB, 150)\n    @F32 scePowerGetBusClockFrequencyFloat() { return this.busFreq; }\n\n\t@nativeFunction(0x34F9C463, 150)\n    @I32 scePowerGetPllClockFrequencyInt() { return this.pllFreq; }\n\t@nativeFunction(0xEA382A27, 150)\n    @F32 scePowerGetPllClockFrequencyFloat() { return this.pllFreq; }\n\n\t@nativeFunction(0xB8D7B3FB, 150)\n    @I32 scePowerSetBusClockFrequency(@I32 busFreq: number) {\n\t\tif (!this._isValidBusFreq(busFreq)) return SceKernelErrors.ERROR_INVALID_VALUE;\n\t\t//this.busFreq = busFreq;\n\t\tthis.busFreq = 111;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x843FBF43, 150)\n    @I32 scePowerSetCpuClockFrequency(@I32 cpuFreq: number) {\n\t\tif (!this._isValidCpuFreq(cpuFreq)) return SceKernelErrors.ERROR_INVALID_VALUE;\n\t\tthis._setCpuFreq(cpuFreq);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x2085D15D, 150)\n    @I32 scePowerGetBatteryLifePercent() { return (this.context.battery.level * 100) | 0; }\n\t\n\t@nativeFunction(0x87440F5E, 150)\n    @I32 scePowerIsPowerOnline() { return +this.context.battery.charging; }\n\t\n\t@nativeFunction(0x0AFD0D8B, 150)\n    @I32 scePowerIsBatteryExist() { return 1; }\n\t\n\t@nativeFunction(0xD3075926, 150)\n    @I32 scePowerIsLowBattery() { return +this.context.battery.isLowBattery; }\n\t\n\t@nativeFunction(0x1E490401, 150)\n    @I32 scePowerIsBatteryCharging() { return +this.context.battery.charging; }\n\t\n\t// in minutes\n\t@nativeFunction(0x8EFB3FA2, 150)\n    @I32 scePowerGetBatteryLifeTime() { return (this.context.battery.lifetime / 60) | 0; }\n\t\n\t@nativeFunction(0x483CE86B, 150)\n    @I32 scePowerGetBatteryVolt() { return 4135; }\n\t@nativeFunction(0x28E12023, 150)\n    @I32 scePowerGetBatteryTemp() { return 28; }\n    @nativeFunction(0xD6D016EF, 150)\n    @I32 scePowerLock(@I32 unknown: number) { return 0; }\n    @nativeFunction(0xCA3D34C1, 150)\n    @I32 scePowerUnlock(@I32 unknown: number) { return 0; }\n    @nativeFunction(0xEFD3C963, 150)\n    @I32 scePowerTick(type: number) { return 0; } // all = 0, suspend = 1, display = 6\n\n\t@nativeFunction(0xB4432BC8, 150)\n    @I32 scePowerGetBatteryChargingStatus() {\n\t\treturn PowerFlagsSet.BatteryExists | PowerFlagsSet.AcPower | PowerFlagsSet.BatteryPower;\n\t}\n}\n\n\nenum CallbackStatus {\n\tAC_POWER = 0x00001000,\n\tBATTERY_EXIST = 0x00000080,\n\tBATTERY_FULL = 0x00000064,\n}\n\nenum PowerFlagsSet {\n\tPowerSwitch = 0x80000000, // PSP_POWER_CB_POWER_SWITCH - Indicates the power switch it pushed, putting the unit into suspend mode\n\tHoldSwitch = 0x40000000, // PSP_POWER_CB_HOLD_SWITCH - Indicates the hold switch is on\n\tStandBy = 0x00080000, // PSP_POWER_CB_STANDBY - What is standby mode?\n\tResumeComplete = 0x00040000, // PSP_POWER_CB_RESUME_COMPLETE - Indicates the resume process has been completed (only seems to be triggered when another event happens)\n\tResuming = 0x00020000, // PSP_POWER_CB_RESUMING - Indicates the unit is resuming from suspend mode\n\tSuspending = 0x00010000, // PSP_POWER_CB_SUSPENDING - Indicates the unit is suspending, seems to occur due to inactivity\n\tAcPower = 0x00001000, // PSP_POWER_CB_AC_POWER - Indicates the unit is plugged into an AC outlet\n\tBatteryLow = 0x00000100, // PSP_POWER_CB_BATTERY_LOW - Indicates the battery charge level is low\n\tBatteryExists = 0x00000080, // PSP_POWER_CB_BATTERY_EXIST - Indicates there is a battery present in the unit\n\tBatteryPower = 0x0000007F, // PSP_POWER_CB_BATTPOWER - Unknown\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class scePspNpDrm_user {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {\n    Struct,\n    StructInt32,\n    StructStructStringz,\n    StructUInt32\n} from \"../../global/struct\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING} from \"../utils\";\n\nexport class sceReg {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x92E41280, 150)\n\t@I32 sceRegOpenRegistry(@PTR regParamPtr: Stream, @I32 mode: number, @PTR regHandlePtr: Stream) {\n\t\tconst regParam = RegParam.struct.read(regParamPtr);\n\t\tconsole.warn(`sceRegOpenRegistry: ${regParam.name}`);\n\t\tregHandlePtr.writeInt32(0);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x1D8A762E, 150)\n\t@I32 sceRegOpenCategory(@I32 regHandle: number, @STRING name:string, @I32 mode: number, @PTR regCategoryHandlePtr: Stream) {\n\t\tconsole.warn(`sceRegOpenCategory: ${name}`);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD4475AA8, 150)\n    @I32 sceRegGetKeyInfo(@I32 categoryHandle: number, @STRING name: string, @PTR regKeyHandlePtr: Stream, @PTR regKeyTypesPtr: Stream, @PTR sizePtr: Stream) {\n\t\tconsole.warn(`sceRegGetKeyInfo: ${name}`);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x28A8E98A, 150)\n    @I32 sceRegGetKeyValue(@I32 categoryHandle: number, @I32 regKeyHandle: number, @PTR bufferPtr: Stream, @I32 size: number) {\n\t\tconsole.warn('sceRegGetKeyValue');\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x0D69BF40, 150)\n    @I32 sceRegFlushCategory(@I32 categoryHandle: number) {\n\t\tconsole.warn('sceRegFlushCategory');\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x0CAE832B, 150)\n    @I32 sceRegCloseCategory(@I32 categoryHandle: number) {\n\t\tconsole.warn('sceRegCloseCategory');\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x39461B4D, 150)\n    @I32 sceRegFlushRegistry(@I32 regHandle: number) {\n\t\tconsole.warn('sceRegFlushRegistry');\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xFA8A5739, 150)\n    @I32 sceRegCloseRegistry(@I32 regHandle: number) {\n\t\tconsole.warn('sceRegCloseRegistry');\n\t\treturn 0;\n\t}\n}\n\nclass RegParam extends Struct {\n\t@StructUInt32 regType: number = 0\n    @StructStructStringz(256) name: string = ''\n    @StructInt32 nameLength: number = 0\n    @StructInt32 unknown2: number = 0\n    @StructInt32 unknown3: number = 0\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, U32} from \"../utils\";\nimport {ScePspDateTime} from \"../structs\";\n\nexport class sceRtc {\n    constructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x3F7AD767, 150)\n\t@I32 sceRtcGetCurrentTick(@PTR tickPtr: Stream) {\n\t\ttickPtr.writeUInt64(ScePspDateTime.fromDate(new Date()).getTotalMicroseconds());\n        return 0;\n    }\n\n\t@nativeFunction(0x57726BC1, 150)\n    @I32 sceRtcGetDayOfWeek(@I32 year: number, @I32 month: number, @I32 day: number) {\n\t\treturn this.context.rtc.getDayOfWeek(year, month, day);\n\t}\n\n\t@nativeFunction(0x05EF322C, 150)\n    @I32 sceRtcGetDaysInMonth(@I32 year: number, @I32 month: number) {\n\t\treturn this.context.rtc.getDaysInMonth(year, month);\n\t}\n\n\t@nativeFunction(0xC41C2853, 150)\n    @U32 sceRtcGetTickResolution(@PTR tickPtr: Stream) {\n\t\treturn 1000000;\n\t}\n\t\n\t@nativeFunction(0x7ED29E40, 150)\n    @I32 sceRtcSetTick(@PTR datePtr: Stream, @PTR ticksPtr: Stream) {\n        const ticks = ticksPtr.readInt64();\n        datePtr.writeStruct(ScePspDateTime.struct, ScePspDateTime.fromTicks(ticks));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x6FF40ACC, 150)\n    @I32 sceRtcGetTick(@PTR datePtr: Stream, @PTR ticksPtr: Stream) {\n\t\ttry {\n            const date = ScePspDateTime.struct.read(datePtr);\n            ticksPtr.writeUInt64(date.getTotalMicroseconds());\n\t\t\treturn 0;\n\t\t} catch (e) {\n\t\t\treturn SceKernelErrors.ERROR_INVALID_VALUE;\n\t\t}\n\t}\n\n\t@nativeFunction(0x4CFA57B0, 150)\n    @I32 sceRtcGetCurrentClock(@U32 dateAddress: number, @I32 timezone: number) {\n\t\t//let currentDate = this.context.rtc.getCurrentUnixMicroseconds();\n\t\t//currentDate += timezone * 60 * 1000000;\n\t\tconst date = new Date()\n        const pointer = this.context.memory.getPointerPointer<ScePspDateTime>(ScePspDateTime.struct, dateAddress)!\n\t\tpointer.write(ScePspDateTime.fromDate(new Date()));\n\n\t\treturn 0;\n\t}\n\n    @nativeFunction(0xE7C27D1B, 150)\n    @nativeFunction(0x9012B140, 660)\n    @I32 sceRtcGetCurrentClockLocalTime(@U32 dateAddress: number) {\n        const pointer = this.context.memory.getPointerPointer<ScePspDateTime>(ScePspDateTime.struct, dateAddress)!\n        pointer.write(ScePspDateTime.fromDate(new Date()));\n        return 0;\n    }\n}\n", "\uFEFFimport {BOOL, BYTES, I32, nativeFunction, PTR, U32} from '../utils';\nimport { SceKernelErrors } from '../SceKernelErrors';\nimport {Stream} from \"../../global/stream\";\nimport {MathUtils} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {Sample} from \"../../core/audio\";\nimport {VagSoundSource} from \"../../format/vag\";\n\nconst PSP_SAS_VOL_MAX = 0x1000;\nconst PSP_SAS_PITCH_MIN = 0x1;\nconst PSP_SAS_PITCH_BASE = 0x1000;\nconst PSP_SAS_PITCH_MAX = 0x4000;\n\nexport class sceSasCore {\n\tprivate static PSP_SAS_VOICES_MAX = 32;\n\tprivate static PSP_SAS_GRAIN_SAMPLES = 256;\n\tprivate static PSP_SAS_LOOP_MODE_OFF = 0;\n\tprivate static PSP_SAS_LOOP_MODE_ON = 1;\n\tprivate static PSP_SAS_NOISE_FREQ_MAX = 0x3F;\n\tprivate static PSP_SAS_ENVELOPE_HEIGHT_MAX = 0x40000000;\n\tprivate static PSP_SAS_ENVELOPE_FREQ_MAX = 0x7FFFFFFF;\n\tprivate static PSP_SAS_ADSR_ATTACK = 1;\n\tprivate static PSP_SAS_ADSR_DECAY = 2;\n\tprivate static PSP_SAS_ADSR_SUSTAIN = 4;\n\tprivate static PSP_SAS_ADSR_RELEASE = 8;\n\n\tprivate core = new SasCore();\n\n\tconstructor(private context: EmulatorContext) {\n\t}\n\n\t@nativeFunction(0x42778A9F, 150)\n    @U32 __sceSasInit(@I32 sasCorePointer: number, @I32 grainSamples: number, @I32 maxVoices: number, @I32 outputMode: number, @I32 sampleRate: number) {\n\t\tif (sampleRate != 44100) {\n\t\t\treturn SceKernelErrors.ERROR_SAS_INVALID_SAMPLE_RATE;\n\t\t}\n\n\t\t//CheckGrains(GrainSamples);\n\n\t\tif (maxVoices < 1 || maxVoices > sceSasCore.PSP_SAS_VOICES_MAX) {\n\t\t\treturn SceKernelErrors.ERROR_SAS_INVALID_MAX_VOICES;\n\t\t}\n\n\t\tif (outputMode != OutputMode.STEREO && outputMode != OutputMode.MULTICHANNEL) {\n\t\t\treturn SceKernelErrors.ERROR_SAS_INVALID_OUTPUT_MODE;\n\t\t}\n\n\t\t//const SasCore = GetSasCore(SasCorePointer, CreateIfNotExists: true);\n\t\tthis.core.grainSamples = grainSamples;\n\t\tthis.core.maxVoices = maxVoices;\n\t\tthis.core.outputMode = outputMode;\n\t\tthis.core.sampleRate = sampleRate;\n\t\tthis.core.initialized = true;\n\n\t\t//BufferTemp = new StereoIntSoundSample[SasCore.GrainSamples * 2];\n\t\t//BufferShort = new StereoShortSoundSample[SasCore.GrainSamples * 2];\n\t\t//MixBufferShort = new StereoShortSoundSample[SasCore.GrainSamples * 2];\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD1E0A01E, 150)\n    @U32 __sceSasSetGrain(@I32 sasCorePointer: number, @I32 grainSamples: number) {\n\t\tthis.core.grainSamples = grainSamples;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xE855BF76, 150)\n    @U32 __sceSasSetOutputmode(@I32 sasCorePointer: number, @I32 outputMode: OutputMode) {\n\t\tthis.core.outputMode = outputMode;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x99944089, 150)\n    @U32 __sceSasSetVoice(@I32 sasCorePointer: number, @I32 voiceId: number, @BYTES data: Stream, @I32 loop: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        if (data == null) {\n\t\t\tvoice.unsetSource();\n\t\t\treturn 0;\n\t\t}\n\t\tif (data.length == 0) return SceKernelErrors.ERROR_SAS_INVALID_ADPCM_SIZE;\n\t\tif (data.length < 0x10) return SceKernelErrors.ERROR_SAS_INVALID_ADPCM_SIZE;\n\t\tif (data.length % 0x10) return SceKernelErrors.ERROR_SAS_INVALID_ADPCM_SIZE;\n\t\tif (data == Stream.INVALID) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n\t\tif (loop != 0 && loop != 1) return SceKernelErrors.ERROR_SAS_INVALID_LOOP_POS;\n\t\tif (data == null) {\n\t\t\tvoice.unsetSource();\n\t\t} else {\n\t\t\tvoice.setAdpcm(data, loop);\n\t\t}\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xE1CD9561, 150)\n    @U32 __sceSasSetVoicePCM(@I32 sasCorePointer: number, @I32 voiceId: number, @BYTES data: Stream, @I32 loop: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        if (data == null) {\n\t\t\tvoice.unsetSource();\n\t\t} else {\n\t\t\tvoice.setPCM(data, loop);\n\t\t}\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x50A14DFC, 150)\n    @U32 __sceSasCoreWithMix(@I32 sasCorePointer: number, @PTR sasOut: Stream, @I32 leftVolume: number, @I32 rightVolume: number) {\n\t\treturn this.core.mix(sasCorePointer, sasOut, leftVolume, rightVolume);\n\t}\n\n\t@nativeFunction(0xA3589D81, 150)\n    @U32 __sceSasCore(@I32 sasCorePointer: number, @PTR sasOut: Stream) {\n\t\treturn this.core.mix(sasCorePointer, sasOut, PSP_SAS_VOL_MAX, PSP_SAS_VOL_MAX);\n\t}\n\n\t@nativeFunction(0x68A46B95, 150)\n    @U32 __sceSasGetEndFlag(@I32 sasCorePointer: number) {\n\t\treturn this.core.endFlags;\n\t}\n\n\t@nativeFunction(0x33D4AB37, 150)\n    @U32 __sceSasRevType(@I32 sasCorePointer: number, @I32 waveformEffectType: WaveformEffectType) {\n\t\tthis.core.waveformEffectType = waveformEffectType;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xF983B186, 150)\n    @U32 __sceSasRevVON(@I32 sasCorePointer: number, @I32 waveformEffectIsDry: boolean, @I32 waveformEffectIsWet: boolean) {\n\t\tthis.core.waveformEffectIsDry = waveformEffectIsDry;\n\t\tthis.core.waveformEffectIsWet = waveformEffectIsWet;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xD5A229C9, 150)\n    @U32 __sceSasRevEVOL(@I32 sasCorePointer: number, @I32 leftVolume: number, @I32 rightVolume: number) {\n\t\tthis.core.leftVolume = leftVolume;\n\t\tthis.core.rightVolume = rightVolume;\n\t\treturn 0;\n\t}\n\n\tprivate hasSasCoreVoice(sasCorePointer: number, voiceId: number) {\n\t\treturn this.core.voices[voiceId] != null;\n\t}\n\n\tprivate getSasCoreVoice(sasCorePointer: number, voiceId: number) {\n\t\treturn this.core.voices[voiceId];\n\t}\n\n\t@nativeFunction(0x019B25EB, 150)\n    @U32 __sceSasSetADSR(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 flags: AdsrFlags, @I32 attackRate: number, @I32 decayRate: number, @I32 sustainRate: number, @I32 releaseRate: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n\n        if (flags & AdsrFlags.HasAttack) voice.envelope.attackRate = attackRate;\n\t\tif (flags & AdsrFlags.HasDecay) voice.envelope.decayRate = decayRate;\n\t\tif (flags & AdsrFlags.HasSustain) voice.envelope.sustainRate = sustainRate;\n\t\tif (flags & AdsrFlags.HasRelease) voice.envelope.releaseRate = releaseRate;\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x9EC3676A, 150)\n    @U32 __sceSasSetADSRmode(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 flags: AdsrFlags, @I32 attackCurveMode: AdsrCurveMode, @I32 decayCurveMode: AdsrCurveMode, @I32 sustainCurveMode: AdsrCurveMode, @I32 releaseCurveMode: AdsrCurveMode) {\n\t\tconsole.warn('__sceSasSetADSRmode not implemented!');\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xA0CF2FA4, 150)\n    @U32 __sceSasSetKeyOff(@I32 sasCorePointer: number, @I32 voiceId: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        if (!voice.paused) return SceKernelErrors.ERROR_SAS_VOICE_PAUSED;\n\t\tvoice.setOn(false);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x76F01ACA, 150)\n    @U32 __sceSasSetKeyOn(@I32 sasCorePointer: number, @I32 voiceId: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        voice.setOn(true);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x74AE582A, 150)\n    @U32 __sceSasGetEnvelopeHeight(@I32 sasCorePointer: number, @I32 voiceId: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        return voice.envelope.height;\n\t}\n\n\t@nativeFunction(0x5F9529F6, 150)\n    @U32 __sceSasSetSL(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 sustainLevel: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        voice.sustainLevel = sustainLevel;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x787D04D5, 150)\n    @U32 __sceSasSetPause(@I32 sasCorePointer: number, @I32 voiceBits: number, @BOOL pause: boolean) {\n\t\tthis.core.voices.forEach((voice) => {\n\t\t\tif (voiceBits & (1 << voice.index)) {\n\t\t\t\tvoice.paused = pause;\n\t\t\t}\n\t\t});\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x2C8E6AB3, 150)\n    @U32 __sceSasGetPauseFlag(@I32 sasCorePointer: number) {\n        let voiceBits = 0;\n        this.core.voices.forEach((voice) => {\n\t\t\tvoiceBits |= (voice.paused ? 1 : 0) << voice.index;\n\t\t});\n\t\treturn voiceBits;\n\t}\n\n\t@nativeFunction(0x07F58C24, 150)\n    @U32 __sceSasGetAllEnvelopeHeights(@I32 sasCorePointer: number, @PTR heightPtr: Stream) {\n\t\tthis.core.voices.forEach((voice) => {\n\t\t\theightPtr.writeInt32(voice.envelope.height);\n\t\t});\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xB7660A23, 150)\n    @U32 __sceSasSetNoise(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 noiseFrequency: number) {\n\t\tif (noiseFrequency < 0 || noiseFrequency >= 64) return SceKernelErrors.ERROR_SAS_INVALID_NOISE_CLOCK;\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        return 0;\n\t}\n\n\t@nativeFunction(0x440CA7D8, 150)\n    @U32 __sceSasSetVolume(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 leftVolume: number, @I32 rightVolume: number, @I32 effectLeftVol: number, @I32 effectRightVol: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        leftVolume = Math.abs(leftVolume);\n\t\trightVolume = Math.abs(rightVolume);\n\t\teffectLeftVol = Math.abs(effectLeftVol);\n\t\teffectRightVol = Math.abs(effectRightVol);\n\n\t\tif (leftVolume > PSP_SAS_VOL_MAX || rightVolume > PSP_SAS_VOL_MAX || effectLeftVol > PSP_SAS_VOL_MAX || effectRightVol > PSP_SAS_VOL_MAX) {\n\t\t\treturn SceKernelErrors.ERROR_SAS_INVALID_VOLUME_VAL;\n\t\t}\n\n\t\tvoice.leftVolume = leftVolume;\n\t\tvoice.rightVolume = rightVolume;\n\t\tvoice.effectLeftVolume = effectLeftVol;\n\t\tvoice.effectRightVolume = effectRightVol;\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xAD84D37F, 150)\n    @U32 __sceSasSetPitch(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 pitch: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        if (pitch < PSP_SAS_PITCH_MIN || pitch > PSP_SAS_PITCH_MAX) return -1;\n\t\tvoice.pitch = pitch;\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x267A6DD2, 150)\n    @U32 __sceSasRevParam(@I32 sasCorePointer: number, @I32 delay: number, @I32 feedback: number) {\n\t\tthis.core.delay = delay;\n\t\tthis.core.feedback = feedback;\n\t\t// Not implemented\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xCBCD4F79, 150)\n    @U32 __sceSasSetSimpleADSR(@I32 sasCorePointer: number, @I32 voiceId: number, @I32 env1Bitfield: number, @I32 env2Bitfield: number) {\n\t\tif (!this.hasSasCoreVoice(sasCorePointer, voiceId)) return SceKernelErrors.ERROR_SAS_INVALID_VOICE;\n        const voice = this.getSasCoreVoice(sasCorePointer, voiceId);\n        return 0;\n\t}\n}\n\nclass SasCore {\n\tinitialized = false;\n\tgrainSamples = 0;\n\tmaxVoices = 32;\n\toutputMode = OutputMode.STEREO;\n\tsampleRate = 44100;\n\tdelay = 0;\n\tfeedback = 0;\n\tendFlags = 0;\n\twaveformEffectType = WaveformEffectType.OFF;\n\twaveformEffectIsDry = false;\n\twaveformEffectIsWet = false;\n\tleftVolume = PSP_SAS_VOL_MAX;\n\trightVolume = PSP_SAS_VOL_MAX;\n\tvoices: Voice[] = [];\n\tbufferTempArray = <Sample[]>[];\n\n\tconstructor() {\n\t\twhile (this.voices.length < 32) this.voices.push(new Voice(this.voices.length));\n\t}\n\n\tmix(sasCorePointer: number, sasOut: Stream, leftVolume: number, rightVolume: number) {\n\t\twhile (this.bufferTempArray.length < this.grainSamples) this.bufferTempArray.push(new Sample(0, 0));\n\n\t\tconst numberOfChannels = (this.outputMode == OutputMode.STEREO) ? 2 : 1;\n        const numberOfSamples = this.grainSamples;\n        const numberOfVoicesPlaying = Math.max(1, this.voices.count(Voice => Voice.onAndPlaying));\n\n\t\tfor (let n = 0; n < numberOfSamples; n++) this.bufferTempArray[n].set(0, 0);\n\n        let prevPosDiv = -1;\n\n\t\tfor (let n = 0; n < this.voices.length; n++) {\n            const voice = this.voices[n];\n            if (!voice.onAndPlaying) continue;\n\n\t\t\t//const sampleLeftSum = 0, sampleRightSum = 0;\n\t\t\t//const sampleLeftMax = 0, sampleRightMax = 0;\n\t\t\t//const sampleCount = 0;\n\n            let pos = 0;\n\t\t\twhile (true) {\n\t\t\t\tif ((voice.source != null) && (voice.source.hasMore)) {\n                    const posDiv = Math.floor(pos / voice.pitch);\n\n\t\t\t\t\tif (posDiv >= numberOfSamples) break;\n\n\t\t\t\t\tconst sample = voice.source.getNextSample();\n\n\t\t\t\t\tfor (let m = prevPosDiv + 1; m <= posDiv; m++) {\n\t\t\t\t\t\t//sampleLeftSum += voice.leftVolume;\n\t\t\t\t\t\t//sampleRightSum += voice.rightVolume;\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//sampleLeftMax = Math.max(sampleLeftMax, Math.abs(voice.leftVolume));\n\t\t\t\t\t\t//sampleRightMax = Math.max(sampleRightMax, Math.abs(voice.rightVolume));\n\t\t\t\t\t\t//\n\t\t\t\t\t\t//sampleCount++;\n\t\t\t\t\t\tthis.bufferTempArray[m].addScaled(sample, voice.leftVolume / PSP_SAS_VOL_MAX, voice.rightVolume / PSP_SAS_VOL_MAX);\n\t\t\t\t\t}\n\n\t\t\t\t\tprevPosDiv = posDiv;\n\t\t\t\t\tpos += PSP_SAS_PITCH_BASE;\n\t\t\t\t} else {\n\t\t\t\t\tvoice.setPlaying(false);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let n = 0; n < numberOfSamples; n++) {\n            const sample = this.bufferTempArray[n];\n            sample.scale(leftVolume / PSP_SAS_VOL_MAX, rightVolume / PSP_SAS_VOL_MAX);\n\n\t\t\tif (numberOfChannels >= 1) sasOut.writeInt16(MathUtils.clamp(sample.left, -32768, 32767));\n\t\t\tif (numberOfChannels >= 2) sasOut.writeInt16(MathUtils.clamp(sample.right, -32768, 32767));\n\t\t}\n\n\t\treturn 0;\n\t}\n}\n\nexport interface SoundSource {\n\thasMore: boolean;\n\treset(): void;\n\tgetNextSample(): Sample;\n}\n\n\nclass Voice {\n\tenvelope = new Envelope();\n\tsustainLevel = 0;\n\ton = false;\n\tplaying = false;\n\tpaused = false;\n\tleftVolume = PSP_SAS_VOL_MAX;\n\trightVolume = PSP_SAS_VOL_MAX;\n\teffectLeftVolume = PSP_SAS_VOL_MAX;\n\teffectRightVolume = PSP_SAS_VOL_MAX;\n\tpitch = PSP_SAS_PITCH_BASE;\n\tsource: SoundSource | null = null;\n\n\tconstructor(public index: number) {\n\t}\n\n\tget onAndPlaying() {\n\t\treturn this.on && this.playing;\n\t}\n\n\tsetOn(set: boolean) {\n\t\tthis.on = set;\n\t\tthis.setPlaying(set);\n\t}\n\n\tsetPlaying(set: boolean) {\n\t\tthis.playing = set;\n\n\t\t// CHECK. Reset on change?\n\t\tif (this.source) this.source.reset();\n\t}\n\n\tget ended() {\n\t\treturn !this.playing;\n\t}\n\n\tunsetSource() {\n\t\tthis.source = null;\n\t}\n\n\tsetAdpcm(stream: Stream, loopCount: number) {\n\t\tthis.source = new VagSoundSource(stream, loopCount);\n\t\tthis.source.reset();\n\t}\n\n\tsetPCM(stream: Stream, loopCount: number) {\n\t\tthis.source = new PcmSoundSource(stream, loopCount);\n\t\tthis.source.reset();\n\t}\n}\n\n\nexport class PcmSoundSource implements SoundSource {\n    public dummySample = new Sample(0, 0)\n\n\tconstructor(stream: Stream, loopCount: number) {\n\t}\n\n\treset() {\n\t}\n\n\tget hasMore() {\n\t\treturn false;\n\t}\n\n\tgetNextSample(): Sample {\n\t\treturn this.dummySample;\n\t}\n}\n\nclass Envelope {\n\tattackRate = 0;\n\tdecayRate = 0;\n\tsustainRate = 0;\n\treleaseRate = 0;\n\theight = 0;\n}\n\nenum OutputMode { STEREO = 0, MULTICHANNEL = 1 }\nenum WaveformEffectType { OFF = -1, ROOM = 0, UNK1 = 1, UNK2 = 2, UNK3 = 3, HALL = 4, SPACE = 5, ECHO = 6, DELAY = 7, PIPE = 8 }\nenum AdsrCurveMode { LINEAR_INCREASE = 0, LINEAR_DECREASE = 1, LINEAR_BENT = 2, EXPONENT_REV = 3, EXPONENT = 4, DIRECT = 5 }\n\nenum AdsrFlags {\n\tHasAttack = (1 << 0),\n\tHasDecay = (1 << 1),\n\tHasSustain = (1 << 2),\n\tHasRelease = (1 << 3),\n}\n", "\uFEFFimport \"../emu/global\"\nimport {Stream} from \"../global/stream\";\nimport {Struct, StructClass, StructUInt32, StructUInt32_b, UInt32, UInt32_b} from \"../global/struct\";\nimport {BitUtils, MathUtils} from \"../global/math\";\nimport {Sample} from \"../core/audio\";\nimport {SoundSource} from \"../hle/module/sceSasCore\";\n\nconst VAG_f = [0, 0, 60, 0, 115, -52, 98, -55, 122, -60];\n\nclass VagDecoder {\n\tstatic COMPRESSED_BYTES_IN_BLOCK = 14;\n\tstatic DECOMPRESSED_SAMPLES_IN_BLOCK = VagDecoder.COMPRESSED_BYTES_IN_BLOCK * 2; // 28\n\n\tdecodedBlockSamples = <number[]>(new Array(VagDecoder.DECOMPRESSED_SAMPLES_IN_BLOCK));\n\tprivate predict1: number = 0;\n\tprivate predict2: number = 0;\n\n\tsampleIndexInBlock: number = 0\n\tsampleIndexInBlock2: number = 0\n\treachedEnd: boolean = false\n\tloopStack = <VagState[]>[];\n\n\tcurrentState = new VagState();\n\tcurrentLoopCount = 0;\n\ttotalLoopCount = 0;\n\n\tget hasMore() { return !this.reachedEnd; }\n\n\tconstructor(private blockStream: Stream, private BlockTotalCount: number) {\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis.currentState = new VagState();\n\t\tthis.sampleIndexInBlock = 0;\n\t\tthis.sampleIndexInBlock2 = 0;\n\t\tthis.reachedEnd = false;\n\t\tthis.currentLoopCount = 0;\n\t}\n\n\tsetLoopCount(LoopCount: number) {\n\t\tthis.currentLoopCount = 0;\n\t\tthis.totalLoopCount = LoopCount;\n\t}\n\n\tseekNextBlock() {\n\t\tif (this.reachedEnd || this.currentState.blockIndex >= this.BlockTotalCount) { this.reachedEnd = true; return; }\n\n\t\tthis.blockStream.position = this.currentState.blockIndex * 16;\n\t\tthis.currentState.blockIndex++;\n\n\t\t//const block = VagBlock.struct.read(this.blockStream);\n        const block = this.blockStream.readBytes(16);\n\n        switch (block[1]) {\n\t\t\tcase VagBlockType.LOOP_START:\n                const copyState = this.currentState.clone();\n                copyState.blockIndex--;\n\t\t\t\tthis.loopStack.push(copyState);\n\t\t\t\tbreak;\n\t\t\tcase VagBlockType.LOOP_END:\n\t\t\t\tif (this.currentLoopCount++ < this.totalLoopCount) {\n\t\t\t\t\tthis.currentState = this.loopStack.pop()!;\n\t\t\t\t} else {\n\t\t\t\t\tthis.loopStack.pop();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase VagBlockType.END:\n\t\t\t\tthis.reachedEnd = true;\n\t\t\t\treturn;\n\t\t}\n\t\tthis.decodeBlock(block);\n\t}\n\n\tprivate sample = new Sample(0, 0);\n\n\tgetNextSample() {\n\t\tif (this.reachedEnd) return this.sample.set(0, 0);\n\n\t\tthis.sampleIndexInBlock %= VagDecoder.DECOMPRESSED_SAMPLES_IN_BLOCK;\n\n\t\tif (this.sampleIndexInBlock == 0) {\n\t\t\tthis.seekNextBlock();\n\t\t}\n\n\t\tif (this.reachedEnd) return this.sample.set(0, 0);\n\n        const value = this.decodedBlockSamples[this.sampleIndexInBlock++];\n        return this.sample.set(value, value);\n\t}\n\n\tdecodeBlock(block: Uint8Array) {\n        let sampleOffset = 0\n        const shiftFactor = BitUtils.extract(block[0], 0, 4)\n        const predictIndex = BitUtils.extract(block[0], 4, 4) % VAG_f.length\n\n        this.predict1 = VAG_f[predictIndex * 2 + 0]\n\t\tthis.predict2 = VAG_f[predictIndex * 2 + 1]\n\n\t\t// Mono 4-bit/28 Samples per block.\n\t\tfor (let n = 0; n < VagDecoder.COMPRESSED_BYTES_IN_BLOCK; n++) {\n            const dataByte = block[n + 2]\n            //debugger;\n            const v1 = MathUtils.sextend16((((dataByte >>> 0) & 0xF) << 12)) >> shiftFactor\n            const v2 = MathUtils.sextend16((((dataByte >>> 4) & 0xF) << 12)) >> shiftFactor\n            this.decodedBlockSamples[sampleOffset + 0] = this.handleSampleKeepHistory(v1)\n\t\t\tthis.decodedBlockSamples[sampleOffset + 1] = this.handleSampleKeepHistory(v2)\n\n\t\t\t//console.log(\"\" + dataByte, ':', block.modificator, shiftFactor, ':', v1, v2, ':', this.currentState.history1, this.currentState.history2, ':', this.predict1, this.predict2, ':', this.decodedBlockSamples[sampleOffset + 0], this.decodedBlockSamples[sampleOffset + 1]);\n\n\t\t\tsampleOffset += 2\n\t\t}\n\t\t//console.log('--------------> ', this.currentState.history1, this.currentState.history2);\n\t}\n\n\tprivate handleSampleKeepHistory(unpackedSample: number) {\n        const sample = this.handleSample(unpackedSample)\n        this.currentState.history2 = this.currentState.history1\n\t\tthis.currentState.history1 = sample\n\t\treturn sample\n\t}\n\n\tprivate handleSample(unpackedSample: number) {\n        let sample = 0\n        sample += unpackedSample\n\t\tsample += ((this.currentState.history1 * this.predict1) / 64) >> 0 // integer divide by 64\n\t\tsample += ((this.currentState.history2 * this.predict2) / 64) >> 0\n\t\t//console.log(unpackedSample, '->', sample, ' : ')\n\t\treturn MathUtils.clamp(sample, -32768, 32767)\n\t}\n}\n\n\nenum VagBlockType { LOOP_END = 3, LOOP_START = 6, END = 7 }\n\nclass VagHeader extends Struct {\n\t@StructUInt32 magic: number = 0\n\t@StructUInt32_b vagVersion: number = 0\n    @StructUInt32_b dataSize: number = 0\n    @StructUInt32_b sampleRate: number = 0\n\t//name: string = ''\n}\n\nexport class VagSoundSource implements SoundSource{\n\tprivate header: VagHeader | null = null;\n\tprivate samplesCount: number = 0;\n\tprivate decoder: VagDecoder\n\n\tconstructor(stream: Stream, loopCount: number) {\n\t\tif (stream.length < 0x10) {\n\t\t\tthis.header = null;\n\t\t\tthis.samplesCount = 0;\n\t\t\tthis.decoder = new VagDecoder(stream, 0);\n\t\t} else {\n            const headerStream = stream.sliceWithLength(0, VagHeader.struct.length);\n            const dataStream = stream.sliceWithLength(VagHeader.struct.length);\n\n            //debugger;\n\n\t\t\tthis.header = VagHeader.struct.read(headerStream);\n\t\t\tthis.samplesCount = Math.floor(dataStream.length * 56 / 16);\n\t\t\tthis.decoder = new VagDecoder(dataStream, Math.floor(dataStream.length / 16));\n\t\t}\n\t}\n\n\treset() { this.decoder.reset(); }\n\tget hasMore() { return this.decoder.hasMore; }\n\tgetNextSample(): Sample { return this.decoder.getNextSample(); }\n}\n\nclass VagState {\n\tconstructor(public blockIndex = 0, public history1 = 0, public history2 = 0) { }\n\tclone() { return new VagState(this.blockIndex, this.history1, this.history2); }\n}", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceSsl {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {EmulatorContext} from \"../../emu/context\";\nimport {nativeFunction, U32} from \"../utils\";\n\nexport class sceSuspendForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xEADB1BD7, 150)\n    @U32 sceKernelPowerLock(@U32 lockType: number) {\n\t\tif (lockType != 0) return SceKernelErrors.ERROR_INVALID_MODE;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x3AEE7261, 150)\n    @U32 sceKernelPowerUnlock(@U32 lockType: number) {\n\t\tif (lockType != 0) return SceKernelErrors.ERROR_INVALID_MODE;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x090CCB3F, 150)\n\t@U32 sceKernelPowerTick(@U32 value: number) {\n\t\t// prevent screen from turning off!\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {AcceptCallbacks, PromiseFast, Signal1} from \"../../global/utils\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, STRING, U32} from \"../utils\";\n\nexport class sceUmdUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\tcallbackIds = <number[]>[];\n\tsignal = new Signal1<number>();\n\n\t@nativeFunction(0xAEE7404D, 150)\n\t@U32 sceUmdRegisterUMDCallBack(@I32 callbackId: number) {\n\t\tthis.callbackIds.push(callbackId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xBD2BDE07, 150)\n    @U32 sceUmdUnRegisterUMDCallBack(@I32 callbackId: number) {\n\t\tif (!this.callbackIds.contains(callbackId)) return SceKernelErrors.ERROR_ERRNO_INVALID_ARGUMENT;\n\t\tthis.callbackIds.remove(callbackId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x46EBB729, 150)\n    @U32 sceUmdCheckMedium() {\n\t\treturn UmdCheckMedium.Inserted;\n\t}\n\n\t_sceUmdWaitDriveStat(pspUmdState: number, acceptCallbacks: AcceptCallbacks) {\n\t\tthis.context.callbackManager.executePendingWithinThread(this.context.threadManager.current);\n\t\treturn 0;\n\t\t/*\n\t\treturn new WaitingThreadInfo('sceUmdWaitDriveStatCB', this, new PromiseFast((resolve, reject) => {\n\t\t\tconst signalCallback = this.signal.add((result) => {\n\t\t\t\tthis.signal.remove(signalCallback);\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}), AcceptCallbacks.YES);\n\t\t*/\n\t}\n\n\t@nativeFunction(0x8EF08FCE, 150)\n    @U32 sceUmdWaitDriveStat(@U32 pspUmdState: number) {\n\t\treturn this._sceUmdWaitDriveStat(pspUmdState, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x4A9E5E29, 150)\n    @U32 sceUmdWaitDriveStatCB(@U32 pspUmdState: number, @U32 timeout: number) {\n\t\treturn this._sceUmdWaitDriveStat(pspUmdState, AcceptCallbacks.YES);\n\t}\n\n\tprivate _notify(data: number) {\n\t\tthis.signal.dispatch(data);\n\n\t\tthis.callbackIds.forEach(callbackId => {\n\t\t\t//const state = this.context.threadManager.current.state;\n\t\t\tthis.context.callbackManager.notify(callbackId, data);\n\t\t});\n\t}\n\n\t@nativeFunction(0xC6183D47, 150)\n    @U32 sceUmdActivate(@I32 mode: number, @STRING drive: string) {\n\t\tthis._notify(PspUmdState.PSP_UMD_READABLE | PspUmdState.PSP_UMD_READY | PspUmdState.PSP_UMD_PRESENT);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xE83742BA, 150)\n    @U32 sceUmdDeactivate(@I32 mode: number, @STRING drive: string) {\n\t\tthis._notify(PspUmdState.PSP_UMD_READABLE | PspUmdState.PSP_UMD_READY | PspUmdState.PSP_UMD_PRESENT);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x6B4A146C, 150)\n    @U32 sceUmdGetDriveStat() {\n\t\treturn PspUmdState.PSP_UMD_PRESENT | PspUmdState.PSP_UMD_READY | PspUmdState.PSP_UMD_READABLE;\n\t}\n\n\t@nativeFunction(0x56202973, 150)\n    @U32 sceUmdWaitDriveStatWithTimer(@U32 state: number, @U32 timeout: number) {\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\t@nativeFunction(0x20628E6F, 150)\n    @U32 sceUmdGetErrorStat() {\n\t\t//console.warn('called sceUmdGetErrorStat!');\n\t\treturn PromiseFast.resolve(0);\n\t}\n}\n\nenum UmdCheckMedium {\n\tNoDisc = 0,\n\tInserted = 1,\n}\n\nenum PspUmdState {\n\tPSP_UMD_INIT = 0x00,\n\tPSP_UMD_NOT_PRESENT = 0x01,\n\tPSP_UMD_PRESENT = 0x02,\n\tPSP_UMD_CHANGED = 0x04,\n\tPSP_UMD_NOT_READY = 0x08,\n\tPSP_UMD_READY = 0x10,\n\tPSP_UMD_READABLE = 0x20,\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\n\nimport {PromiseFast} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {\n    Int32,\n    Struct,\n    StructInt32, StructMember,\n    StructStructArray, StructStructStringz, StructStructUtf8Stringz, StructUInt32, StructUInt8,\n    UInt8\n} from \"../../global/struct\";\nimport {MathUtils, parseIntFormat} from \"../../global/math\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction, PTR, U32} from \"../utils\";\nimport {FileOpenFlags} from \"../vfs/vfs\";\nimport {EmulatorUI} from \"../../ui/emulator_ui\";\nimport {PspLanguages} from \"../structs\";\n\nexport class sceUtility {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate currentStep: DialogStepEnum = DialogStepEnum.NONE;\n\n\t@nativeFunction(0x2A2B3DE0, 150)\n\t@U32 sceUtilityLoadModule(@I32 pspModule: PspModule) {\n\t\tconsole.warn(\"Not implemented sceUtilityLoadModule '\" + pspModule + \"'\");\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\t@nativeFunction(0x50C4CD57, 150)\n    @U32 async sceUtilitySavedataInitStart(@PTR paramsPtr: Stream) {\n        const result = await this._sceUtilitySavedataInitStart(paramsPtr.clone())\n        const params = SceUtilitySavedataParam.struct.read(paramsPtr.clone());\n        params.base.result = result;\n        return 0;\n\t}\n\n\tasync _sceUtilitySavedataInitStart(paramsPtr: Stream) {\n\t\tconsole.error('sceUtilitySavedataInitStart');\n        const params = SceUtilitySavedataParam.struct.createProxy(paramsPtr);\n\n        const func = (async () => {\n            const fileManager = this.context.fileManager;\n            const savePathFolder = \"ms0:/PSP/SAVEDATA/\" + params.gameName + params.saveName;\n            const saveDataBin = savePathFolder + \"/DATA.BIN\";\n            const saveIcon0 = savePathFolder + \"/ICON0.PNG\";\n            const savePic1 = savePathFolder + \"/PIC1.PNG\";\n\n            this.currentStep = DialogStepEnum.SUCCESS;\n\n\t\t\t//debugger;\n\t\t\tconsole.info('mode:', PspUtilitySavedataMode[params.mode]);\n\t\t\tswitch (params.mode) {\n\t\t\t\tcase PspUtilitySavedataMode.Autoload:\n\t\t\t\tcase PspUtilitySavedataMode.Load:\n\t\t\t\tcase PspUtilitySavedataMode.ListLoad: {\n\t\t\t\t    try {\n                        const file = await fileManager.openAsync(saveDataBin, FileOpenFlags.Read, parseIntFormat('0777'))\n                        const data = await file.entry.readAllAsync()\n                        console.info('readed:', data.byteLength);\n                        params.dataSize = data.byteLength;\n                        this.context.memory.writeBytes(params.dataBufPointer, data);\n                        return 0;\n                    } catch (error) {\n                        console.info(\"can't read file:\", saveDataBin, error);\n                        return SceKernelErrors.ERROR_SAVEDATA_LOAD_NO_DATA;\n                    }\n                }\n\t\t\t\tcase PspUtilitySavedataMode.Autosave:\n\t\t\t\tcase PspUtilitySavedataMode.Save:\n\t\t\t\tcase PspUtilitySavedataMode.ListSave:\n                {\n                    try {\n                        const data = this.context.memory.readArrayBuffer(params.dataBufPointer, params.dataSize);\n                        const file = await fileManager.openAsync(saveDataBin, FileOpenFlags.Create | FileOpenFlags.Truncate | FileOpenFlags.Write, parseIntFormat('0777'))\n                        const written = file.entry.writeAllAsync(data)\n                        return 0\n                    } catch (e) {\n                        return SceKernelErrors.ERROR_SAVEDATA_SAVE_ACCESS_ERROR;\n                    }\n                }\n\t\t\t\tcase PspUtilitySavedataMode.Read:\n\t\t\t\tcase PspUtilitySavedataMode.ReadSecure: {\n                    console.error(\"Not Implemented: sceUtilitySavedataInitStart.Read\");\n                    return 0\n                }\n\t\t\t\tcase PspUtilitySavedataMode.Sizes: {\n                    const SceKernelError = SceKernelErrors.ERROR_OK;\n\n                    //Console.Error.WriteLine(\"Not Implemented: sceUtilitySavedataInitStart.Sizes\");\n\n                    const SectorSize = 1024;\n                    const FreeSize = 32 * 1024 * 1024; // 32 MB\n                    const UsedSize = 0;\n\n                    // MS free size.\n                    // Gets the ammount of free space in the Memory Stick. If null,\n                    // the size is ignored and no error is returned.\n                    {\n                        const sizeFreeInfoPtr = this.context.memory.getPointerPointer<SizeFreeInfo>(SizeFreeInfo.struct, params.msFreeAddr)!\n                        sizeFreeInfoPtr.readWrite(sizeFreeInfo => {\n                            sizeFreeInfo.sectorSize = SectorSize;\n                            sizeFreeInfo.freeSectors = FreeSize / SectorSize;\n                            sizeFreeInfo.freeKb = FreeSize / 1024;\n                            sizeFreeInfo.freeKbString = sizeFreeInfo.freeKb + 'KB';\n                        });\n                    }\n\n                    // MS data size.\n                    // Gets the size of the data already saved in the Memory Stick.\n                    // If null, the size is ignored and no error is returned.\n                    {\n                        const sizeUsedInfoPtr = this.context.memory.getPointerPointer<SizeUsedInfo>(SizeUsedInfo.struct, params.msDataAddr);\n                    }\n\n                    // Utility data size.\n                    // Gets the size of the data to be saved in the Memory Stick.\n                    // If null, the size is ignored and no error is returned.\n                    {\n                        const sizeRequiredSpaceInfoPtr = this.context.memory.getPointerPointer<SizeRequiredSpaceInfo>(SizeRequiredSpaceInfo.struct, params.utilityDataAddr);\n\n                        if (sizeRequiredSpaceInfoPtr != null) {\n                            let RequiredSize = 0;\n                            RequiredSize += params.icon0FileData.size;\n                            RequiredSize += params.icon1FileData.size;\n                            RequiredSize += params.pic1FileData.size;\n                            RequiredSize += params.snd0FileData.size;\n                            RequiredSize += params.dataSize;\n\n                            sizeRequiredSpaceInfoPtr.readWrite(sizeRequiredSpaceInfo => {\n                                sizeRequiredSpaceInfo.requiredSpaceSectors = MathUtils.requiredBlocks(RequiredSize, SectorSize);\n                                sizeRequiredSpaceInfo.requiredSpaceKb = MathUtils.requiredBlocks(RequiredSize, 1024);\n                                sizeRequiredSpaceInfo.requiredSpace32KB = MathUtils.requiredBlocks(RequiredSize, 32 * 1024);\n\n                                sizeRequiredSpaceInfo.requiredSpaceString = (sizeRequiredSpaceInfo.requiredSpaceKb) + \"KB\";\n                                sizeRequiredSpaceInfo.requiredSpace32KBString = (sizeRequiredSpaceInfo.requiredSpace32KB) + \"KB\";\n                            });\n                        }\n                    }\n\n                    if (SceKernelError != SceKernelErrors.ERROR_OK) return PromiseFast.resolve(SceKernelError);\n                    break;\n                }\n\t\t\t\tdefault: {\n                    console.error(`Not implemented ${params.mode}: ${PspUtilitySavedataMode[params.mode]}`);\n                    break;\n                }\n\t\t\t}\n\t\t\treturn PromiseFast.resolve(0);\n\t\t})\n        const result = await func()\n        try {\n            console.error('result: ', result);\n            params.base.result = result as number;\n            return 0;\n        } catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t@nativeFunction(0x9790B33C, 150)\n    @U32 sceUtilitySavedataShutdownStart() {\n\t\t//console.log('sceUtilitySavedataShutdownStart');\n\t\t//debugger;\n\t\tthis.currentStep = DialogStepEnum.SHUTDOWN;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x8874DBE0, 150)\n    @U32 sceUtilitySavedataGetStatus() {\n\t\t//console.log('sceUtilitySavedataGetStatus');\n\t\t//debugger;\n\t\ttry {\n\t\t\treturn this.currentStep;\n\t\t} finally {\n\t\t\tif (this.currentStep == DialogStepEnum.SHUTDOWN) this.currentStep = DialogStepEnum.NONE;\n\t\t}\n\t}\n\n\t@nativeFunction(0x2AD8E239, 150)\n    @U32 async sceUtilityMsgDialogInitStart(@PTR paramsPtr: Stream) {\n\t\t// @TODO: should not stop\n\t\tlet params = PspUtilityMsgDialogParams.struct.createProxy(paramsPtr);\n\t\tconsole.warn('sceUtilityMsgDialogInitStart:', params.message);\n        await EmulatorUI.openMessageAsync(params.message)\n        params.buttonPressed = PspUtilityMsgDialogPressed.PSP_UTILITY_MSGDIALOG_RESULT_YES;\n        this.currentStep = DialogStepEnum.SUCCESS;\n        return 0;\n\t}\n\n\t@nativeFunction(0x9A1C91D7, 150)\n    @U32 sceUtilityMsgDialogGetStatus() {\n\t\ttry {\n\t\t\treturn this.currentStep;\n\t\t} finally {\n\t\t\tif (this.currentStep == DialogStepEnum.SHUTDOWN) this.currentStep = DialogStepEnum.NONE;\n\t\t}\n\t}\n\n\t@nativeFunction(0x9A1C91D7, 150)\n    @U32 sceUtilityMsgDialogUpdate(@I32 value: number) {\n\t}\n\n\t@nativeFunction(0x1579A159, 150)\n    @U32 sceUtilityLoadNetModule() {\n\t\tconsole.warn('Not implemented sceUtilityLoadNetModule');\n\t\treturn 0;\n\t}\n\n\tprivate _getKey(id: PSP_SYSTEMPARAM_ID): any {\n\t\tswitch (id) {\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_ADHOC_CHANNEL: return PSP_SYSTEMPARAM_ADHOC_CHANNEL.AUTOMATIC;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_WLAN_POWERSAVE: return PSP_SYSTEMPARAM_WLAN_POWERSAVE.ON;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_DATE_FORMAT: return PSP_SYSTEMPARAM_DATE_FORMAT.YYYYMMDD;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_TIME_FORMAT: return PSP_SYSTEMPARAM_TIME_FORMAT._24HR;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_TIMEZONE: return -5 * 60;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_DAYLIGHTSAVINGS: return PSP_SYSTEMPARAM_DAYLIGHTSAVINGS.STD;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_LANGUAGE: return this.context.config.language;\n\t\t\tcase PSP_SYSTEMPARAM_ID.INT_BUTTON_PREFERENCE: return PSP_SYSTEMPARAM_BUTTON_PREFERENCE.NA;\n\t\t\tcase PSP_SYSTEMPARAM_ID.STRING_NICKNAME: return \"USERNAME\";\n\t\t}\n\t\tthrow (new Error(\"Invalid key \" + id));\n\t}\n\n\t@nativeFunction(0xA5DA2406, 150)\n    @U32 sceUtilityGetSystemParamInt(@I32 id: PSP_SYSTEMPARAM_ID, @PTR valuePtr: Stream) {\n\t\t//console.warn(\"Not implemented sceUtilityGetSystemParamInt\", id, PSP_SYSTEMPARAM_ID[id]);\n        const value = parseInt(this._getKey(id));\n        if (valuePtr) valuePtr.writeInt32(value);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x34B78343, 150)\n    @U32 sceUtilityGetSystemParamString(@I32 id: PSP_SYSTEMPARAM_ID, @PTR strPtr: Stream, @I32 len: number) {\n        let value = String(this._getKey(id));\n        value = value.substr(0, Math.min(value.length, len - 1));\n\t\tif (strPtr) strPtr.writeStringz(value);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xC629AF26, 150)\n    @U32 sceUtilityLoadAvModule(@I32 id: number) {\n\t\treturn 0;\n\t}\n}\n\nenum PSP_SYSTEMPARAM_ID {\n\tSTRING_NICKNAME = 1,\n\tINT_ADHOC_CHANNEL = 2,\n\tINT_WLAN_POWERSAVE = 3,\n\tINT_DATE_FORMAT = 4,\n\tINT_TIME_FORMAT = 5,\n\tINT_TIMEZONE = 6, // Timezone offset from UTC in minutes, (EST = -300 = -5 * 60)\n\tINT_DAYLIGHTSAVINGS = 7,\n\tINT_LANGUAGE = 8,\n\tINT_BUTTON_PREFERENCE = 9,\n}\n\nenum DialogStepEnum {\n\tNONE = 0,\n\tINIT = 1,\n\tPROCESSING = 2,\n\tSUCCESS = 3,\n\tSHUTDOWN = 4,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_ADHOC_CHANNEL\n/// </summary>\nenum PSP_SYSTEMPARAM_ADHOC_CHANNEL {\n\tAUTOMATIC = 0,\n\tC1 = 1,\n\tC6 = 6,\n\tC11 = 11,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_WLAN_POWERSAVE\n/// </summary>\nenum PSP_SYSTEMPARAM_WLAN_POWERSAVE {\n\tOFF = 0,\n\tON = 1,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_DATE_FORMAT\n/// </summary>\nenum PSP_SYSTEMPARAM_DATE_FORMAT {\n\tYYYYMMDD = 0,\n\tMMDDYYYY = 1,\n\tDDMMYYYY = 2,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_TIME_FORMAT\n/// </summary>\nenum PSP_SYSTEMPARAM_TIME_FORMAT {\n\t_24HR = 0,\n\t_12HR = 1,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_DAYLIGHTSAVINGS\n/// </summary>\nenum PSP_SYSTEMPARAM_DAYLIGHTSAVINGS {\n\tSTD = 0,\n\tSAVING = 1,\n}\n\n/// <summary>\n/// Valid values for PSP_SYSTEMPARAM_ID_INT_LANGUAGE\n/// </summary>\nenum PSP_SYSTEMPARAM_LANGUAGE {\n\tJAPANESE = 0,\n\tENGLISH = 1,\n\tFRENCH = 2,\n\tSPANISH = 3,\n\tGERMAN = 4,\n\tITALIAN = 5,\n\tDUTCH = 6,\n\tPORTUGUESE = 7,\n\tRUSSIAN = 8,\n\tKOREAN = 9,\n\tCHINESE_TRADITIONAL = 10,\n\tCHINESE_SIMPLIFIED = 11,\n}\n\n/// <summary>\n/// #9 seems to be Region or maybe X/O button swap.\n/// It doesn't exist on JAP v1.0\n/// is 1 on NA v1.5s\n/// is 0 on JAP v1.5s\n/// is read-only\n/// </summary>\nenum PSP_SYSTEMPARAM_BUTTON_PREFERENCE {\n\tJAP = 0,\n\tNA = 1,\n\t//CIRCLE = 0,\n\t//CROSS = 1,\n}\n\nenum PspModule {\n\tPSP_MODULE_NET_COMMON = 0x0100,\n\tPSP_MODULE_NET_ADHOC = 0x0101,\n\tPSP_MODULE_NET_INET = 0x0102,\n\tPSP_MODULE_NET_PARSEURI = 0x0103,\n\tPSP_MODULE_NET_PARSEHTTP = 0x0104,\n\tPSP_MODULE_NET_HTTP = 0x0105,\n\tPSP_MODULE_NET_SSL = 0x0106,\n\n\t// USB Modules\n\tPSP_MODULE_USB_PSPCM = 0x0200,\n\tPSP_MODULE_USB_MIC = 0x0201,\n\tPSP_MODULE_USB_CAM = 0x0202,\n\tPSP_MODULE_USB_GPS = 0x0203,\n\n\t// Audio/video Modules\n\tPSP_MODULE_AV_AVCODEC = 0x0300,\n\tPSP_MODULE_AV_SASCORE = 0x0301,\n\tPSP_MODULE_AV_ATRAC3PLUS = 0x0302,\n\tPSP_MODULE_AV_MPEGBASE = 0x0303,\n\tPSP_MODULE_AV_MP3 = 0x0304,\n\tPSP_MODULE_AV_VAUDIO = 0x0305,\n\tPSP_MODULE_AV_AAC = 0x0306,\n\tPSP_MODULE_AV_G729 = 0x0307,\n\n\t// NP\n\tPSP_MODULE_NP_COMMON = 0x0400,\n\tPSP_MODULE_NP_SERVICE = 0x0401,\n\tPSP_MODULE_NP_MATCHING2 = 0x0402,\n\n\tPSP_MODULE_NP_DRM = 0x0500,\n\n\t// IrDA\n\tPSP_MODULE_IRDA = 0x0600,\n}\n\nenum PspUtilityMsgDialogMode {\n\tPSP_UTILITY_MSGDIALOG_MODE_ERROR = 0, // Error message\n\tPSP_UTILITY_MSGDIALOG_MODE_TEXT = 1, // String message\n}\n\nenum PspUtilityMsgDialogOption {\n\tPSP_UTILITY_MSGDIALOG_OPTION_ERROR = 0x00000000, // Error message (why two flags?)\n\tPSP_UTILITY_MSGDIALOG_OPTION_TEXT = 0x00000001, // Text message (why two flags?)\n\tPSP_UTILITY_MSGDIALOG_OPTION_YESNO_BUTTONS = 0x00000010, // Yes/No buttons instead of 'Cancel'\n\tPSP_UTILITY_MSGDIALOG_OPTION_DEFAULT_NO = 0x00000100, // Default position 'No', if not set will default to 'Yes'\n}\n\nenum PspUtilityMsgDialogPressed {\n\tPSP_UTILITY_MSGDIALOG_RESULT_UNKNOWN1 = 0,\n\tPSP_UTILITY_MSGDIALOG_RESULT_YES = 1,\n\tPSP_UTILITY_MSGDIALOG_RESULT_NO = 2,\n\tPSP_UTILITY_MSGDIALOG_RESULT_BACK = 3,\n}\n\nclass PspUtilityDialogCommon extends Struct {\n\t@StructInt32 size = 0; // 0000 - Size of the structure\n\t@StructInt32 language = PspLanguages.SPANISH; // 0004 - Language\n\t@StructInt32 buttonSwap = 0; // 0008 - Set to 1 for X/O button swap\n\t@StructInt32 graphicsThread = 0; // 000C - Graphics thread priority\n\t@StructInt32 accessThread = 0; // 0010 - Access/fileio thread priority (SceJobThread)\n\t@StructInt32 fontThread = 0; // 0014 - Font thread priority (ScePafThread)\n\t@StructInt32 soundThread = 0; // 0018 - Sound thread priority\n\t@StructInt32 result = SceKernelErrors.ERROR_OK; // 001C - Result\n\t@StructStructArray<number>(Int32, 4) reserved = [0, 0, 0, 0]; // 0020 - Set to 0\n}\n\nenum PspUtilitySavedataMode {\n\tAutoload = 0, // PSP_UTILITY_SAVEDATA_AUTOLOAD = 0\n\tAutosave = 1, // PSP_UTILITY_SAVEDATA_AUTOSAVE = 1\n\tLoad = 2, // PSP_UTILITY_SAVEDATA_LOAD = 2\n\tSave = 3, // PSP_UTILITY_SAVEDATA_SAVE = 3\n\tListLoad = 4, // PSP_UTILITY_SAVEDATA_LISTLOAD = 4\n\tListSave = 5, // PSP_UTILITY_SAVEDATA_LISTSAVE = 5 \n\tListDelete = 6, // PSP_UTILITY_SAVEDATA_LISTDELETE = 6\n\tDelete = 7, // PSP_UTILITY_SAVEDATA_DELETE = 7\n\tSizes = 8, // PSP_UTILITY_SAVEDATA_SIZES = 8\n\tAutoDelete = 9, // PSP_UTILITY_SAVEDATA_AUTODELETE = 9\n\tSingleDelete = 10, // PSP_UTILITY_SAVEDATA_SINGLEDELETE = 10 = 0x0A\n\tList = 11, // PSP_UTILITY_SAVEDATA_LIST = 11 = 0x0B\n\tFiles = 12, // PSP_UTILITY_SAVEDATA_FILES = 12 = 0x0C\n\tMakeDataSecure = 13, // PSP_UTILITY_SAVEDATA_MAKEDATASECURE = 13 = 0x0D\n\tMakeData = 14, // PSP_UTILITY_SAVEDATA_MAKEDATA = 14 = 0x0E\n\tReadSecure = 15, // PSP_UTILITY_SAVEDATA_READSECURE = 15 = 0x0F\n\tRead = 16, // PSP_UTILITY_SAVEDATA_READ = 16 = 0x10\n\tWriteSecure = 17, // PSP_UTILITY_SAVEDATA_WRITESECURE = 17 = 0x11\n\tWrite = 18, // PSP_UTILITY_SAVEDATA_WRITE = 18 = 0x12\n\tEraseSecure = 19, // PSP_UTILITY_SAVEDATA_ERASESECURE = 19 = 0x13\n\tErase = 20, // PSP_UTILITY_SAVEDATA_ERASE = 20 = 0x14\n\tDeleteData = 21, // PSP_UTILITY_SAVEDATA_DELETEDATA = 21 = 0x15\n\tGetSize = 22, // PSP_UTILITY_SAVEDATA_GETSIZE = 22 = 0x16\n}\n\nenum PspUtilitySavedataFocus {\n\tPSP_UTILITY_SAVEDATA_FOCUS_UNKNOWN = 0, // \n\tPSP_UTILITY_SAVEDATA_FOCUS_FIRSTLIST = 1, // First in list\n\tPSP_UTILITY_SAVEDATA_FOCUS_LASTLIST = 2, // Last in list\n\tPSP_UTILITY_SAVEDATA_FOCUS_LATEST = 3, // Most recent date\n\tPSP_UTILITY_SAVEDATA_FOCUS_OLDEST = 4, // Oldest date\n\tPSP_UTILITY_SAVEDATA_FOCUS_UNKNOWN2 = 5, //\n\tPSP_UTILITY_SAVEDATA_FOCUS_UNKNOWN3 = 6, //\n\tPSP_UTILITY_SAVEDATA_FOCUS_FIRSTEMPTY = 7, // First empty slot\n\tPSP_UTILITY_SAVEDATA_FOCUS_LASTEMPTY = 8, // Last empty slot\n}\n\nclass PspUtilitySavedataFileData extends Struct {\n\t@StructInt32 bufferPointer = 0; // 0000 -\n    @StructInt32 bufferSize = 0; // 0004 -\n    @StructInt32 size = 0; // 0008 - why are there two sizes?\n    @StructInt32 unknown = 0; // 000C -\n\n\tget used() {\n\t\tif (this.bufferPointer == 0) return false;\n\t\t//if (BufferSize == 0) return false;\n\t\tif (this.size == 0) return false;\n\t\treturn true;\n\t}\n}\n\nclass PspUtilitySavedataSFOParam extends Struct {\n\t@StructStructStringz(0x80) title = ''; // 0000 -\n\t@StructStructStringz(0x80) savedataTitle = ''; // 0080 -\n\t@StructStructStringz(0x400) detail = ''; // 0100 -\n\t@StructUInt8 parentalLevel = 0; // 0500 -\n\t@StructStructArray(UInt8, 3) unknown = [0, 0, 0]; // 0501 -\n}\n\nclass SceUtilitySavedataParam extends Struct {\n\t@StructMember(PspUtilityDialogCommon.struct) base = new PspUtilityDialogCommon(); // 0000 - PspUtilityDialogCommon\n\t@StructInt32 mode = <PspUtilitySavedataMode>0; // 0030 -\n\t@StructInt32 unknown1 = 0; // 0034 -\n\t@StructInt32 overwrite = 0; // 0038 -\n\t@StructStructStringz(16) gameName = ''; // 003C - GameName: name used from the game for saves, equal for all saves\n\t@StructStructStringz(20) saveName = ''; // 004C - SaveName: name of the particular save, normally a number\n\t@StructUInt32 saveNameListPointer = 0; // 0060 - SaveNameList: used by multiple modes (char[20])\n\t@StructStructStringz(16) fileName = ''; // 0064 - FileName: Name of the data file of the game for example DATA.BIN\n\t@StructUInt32 dataBufPointer = 0; // 0074 - Pointer to a buffer that will contain data file unencrypted data\n\t@StructUInt32 dataBufSize = 0; // 0078 - Size of allocated space to dataBuf\n\t@StructUInt32 dataSize = 0; // 007C -\n\t@StructMember(PspUtilitySavedataSFOParam.struct) sfoParam = new PspUtilitySavedataSFOParam(); // 0080 - (504?)\n\t@StructMember(PspUtilitySavedataFileData.struct) icon0FileData = new PspUtilitySavedataFileData(); // 0584 - (16)\n\t@StructMember(PspUtilitySavedataFileData.struct) icon1FileData = new PspUtilitySavedataFileData(); // 0594 - (16)\n\t@StructMember(PspUtilitySavedataFileData.struct) pic1FileData = new PspUtilitySavedataFileData(); // 05A4 - (16)\n\t@StructMember(PspUtilitySavedataFileData.struct) snd0FileData = new PspUtilitySavedataFileData(); // 05B4 - (16)\n\t@StructUInt32 newDataPointer = 0; // 05C4 -Pointer to an PspUtilitySavedataListSaveNewData structure (PspUtilitySavedataListSaveNewData *)\n\t@StructUInt32 focus = PspUtilitySavedataFocus.PSP_UTILITY_SAVEDATA_FOCUS_UNKNOWN; // 05C8 -Initial focus for lists\n\t@StructUInt32 abortStatus = 0; // 05CC -\n\t@StructUInt32 msFreeAddr = 0; // 05D0 -\n\t@StructUInt32 msDataAddr = 0; // 05D4 -\n\t@StructUInt32 utilityDataAddr = 0; // 05D8 -\n    @StructStructArray(UInt8, 16) key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // 05E0 - Key: Encrypt/decrypt key for save with firmware >= 2.00\n\t@StructUInt32 secureVersion = 0; // 05F0 -\n\t@StructUInt32 multiStatus = 0; // 05F4 -\n\t@StructUInt32 idListAddr = 0; // 05F8 -\n\t@StructUInt32 fileListAddr = 0; // 05FC -\n\t@StructUInt32 sizeAddr = 0; // 0600 -\n\t@StructStructArray(UInt8, 20 - 5) unknown3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // 0604 -unknown3: ?\n\n}\n\nclass SizeFreeInfo extends Struct {\n\t@StructUInt32 sectorSize: number = 0\n    @StructUInt32 freeSectors: number = 0\n    @StructUInt32 freeKb: number = 0\n    @StructStructStringz(8) freeKbString: string = ''\n}\n\nclass SizeUsedInfo extends Struct {\n\t@StructStructStringz(16) gameName: string = '' // 16\n\t@StructStructStringz(24) saveName: string = '' // 20\n\t@StructUInt32 usedSectors: number = 0\n\t@StructUInt32 usedKb: number = 0\n\t@StructStructStringz(8) usedKbString: string = '' // 8\n\t@StructUInt32 usedKb32: number = 0\n\t@StructStructStringz(8) usedKb32String: string = '' // 8\n}\n\nclass SizeRequiredSpaceInfo extends Struct {\n\t@StructUInt32 requiredSpaceSectors: number = 0\n\t@StructUInt32 requiredSpaceKb: number = 0\n\t@StructStructStringz(8) requiredSpaceString: string = '' // 8\n\t@StructUInt32 requiredSpace32KB: number = 0\n\t@StructStructStringz(8) requiredSpace32KBString: string = '' // 8\n}\n\nclass PspUtilityMsgDialogParams extends Struct {\n\t// @ts-ignore\n    @StructMember(PspUtilityDialogCommon.struct) base: PspUtilityDialogCommon;\n\t@StructInt32 unknown: number = 0 // uint\n\t@StructInt32 mnode: PspUtilityMsgDialogMode = PspUtilityMsgDialogMode.PSP_UTILITY_MSGDIALOG_MODE_ERROR // uint\n\t@StructInt32 errorValue: number = 0 // uint\n\t@StructStructUtf8Stringz(512) message: string = '' // byte[512]\n\t@StructInt32 options: PspUtilityMsgDialogOption = PspUtilityMsgDialogOption.PSP_UTILITY_MSGDIALOG_OPTION_ERROR\n\t@StructInt32 buttonPressed: PspUtilityMsgDialogPressed = PspUtilityMsgDialogPressed.PSP_UTILITY_MSGDIALOG_RESULT_UNKNOWN1\n}", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\n\nexport class sceVaudio {\n\tconstructor(private context: EmulatorContext) { }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\nimport {BOOL, nativeFunction} from \"../utils\";\n\nexport class sceWlanDrv {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xD7763699, 150)\n\t@BOOL sceWlanGetSwitchState() {\n\t\treturn true;\n\t}\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, nativeFunction} from \"../utils\";\n\nexport class StdioForUser {\n    constructor(private context: EmulatorContext) { }\n\n    @nativeFunction(0x172D316E, 150)\n    @I32 sceKernelStdin() { return 0; }\n    @nativeFunction(0xA6BAB2E9, 150)\n    @I32 sceKernelStdout() { return 1; }\n    @nativeFunction(0xF78BA90A, 150)\n    @I32 sceKernelStderr() { return 2; }\n}\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {logger, sprintf, UidCollection} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {MemoryAnchor, MemoryPartition} from \"../manager/memory\";\nimport {I32, nativeFunction, PTR, STRING, THREAD, U32, VOID} from \"../utils\";\nimport {Thread} from \"../manager/thread\";\n\nconst console = logger.named('module.SysMemUserForUser');\n\nexport class SysMemUserForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate partitionUids = new UidCollection<MemoryPartition>(1);\n\tprivate blockUids = new UidCollection<MemoryPartition>(1);\n\n\t@nativeFunction(0x237DBD4F, 150)\n    @I32 sceKernelAllocPartitionMemory(@I32 partitionId: number, @STRING name: string, @I32 anchor: MemoryAnchor, @I32 size: number, @I32 address: number) {\n\t\tif (name == null) return SceKernelErrors.ERROR_ERROR;\n\n\t\ttry {\n            const parentPartition = this.context.memoryManager.memoryPartitionsUid[partitionId];\n            const allocatedPartition = parentPartition.allocate(size, anchor, address, name);\n            console.info(sprintf(\"SysMemUserForUser.sceKernelAllocPartitionMemory (partitionId:%d, name:'%s', type:%d, size:%d, address:%08X) : %08X-%08X\", partitionId, name, anchor, size, address, allocatedPartition.low, allocatedPartition.high));\n\t\t\treturn this.partitionUids.allocate(allocatedPartition);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn SceKernelErrors.ERROR_KERNEL_FAILED_ALLOC_MEMBLOCK;\n\t\t}\n\t}\n\n\t@nativeFunction(0xFE707FDF, 150)\n    @I32 AllocMemoryBlock(@STRING name: string, @U32 type: MemoryAnchor, @U32 size: number, @PTR paramsAddrPtr: Stream) {\n\t\tif (name == null) return SceKernelErrors.ERROR_ERROR;\n\t\tif (type < 0 || type > 1) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_MEMBLOCK_ALLOC_TYPE;\n\t\tif (size == 0) return SceKernelErrors.ERROR_KERNEL_FAILED_ALLOC_MEMBLOCK;\n\t\tif (paramsAddrPtr) {\n\t\t\tconst size = paramsAddrPtr.readInt32();\n            const unk = paramsAddrPtr.readInt32();\n\t\t\tif (size != 4) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_ARGUMENT;\n\t\t}\n        const parentPartition = this.context.memoryManager.userPartition;\n\t\ttry {\n            const block = parentPartition.allocate(size, type, 0, name);\n\t\t\treturn this.blockUids.allocate(block);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn SceKernelErrors.ERROR_KERNEL_FAILED_ALLOC_MEMBLOCK;\n\t\t}\n\t}\n\n\t@nativeFunction(0xDB83A952, 150)\n    @I32 GetMemoryBlockAddr(@I32 blockId: number) {\n\t\tif (!this.blockUids.has(blockId)) return 0;\n        const block = this.blockUids.get(blockId);\n        return block.low;\n\t}\n\n\t@nativeFunction(0x50F61D8A, 150)\n    @I32 FreeMemoryBlock(@I32 blockId: number) {\n\t\tif (!this.blockUids.has(blockId)) return SceKernelErrors.ERROR_KERNEL_UNKNOWN_UID;\n\t\tthis.blockUids.remove(blockId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xB6D61D02, 150)\n    @I32 sceKernelFreePartitionMemory(@I32 partitionId: number) {\n\t\tif (!this.partitionUids.has(partitionId)) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_MEMBLOCK;\n        const partition = this.partitionUids.get(partitionId);\n        partition.deallocate();\n\t\tthis.partitionUids.remove(partitionId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xF919F628, 150)\n    @I32 sceKernelTotalFreeMemSize() {\n\t\treturn this.context.memoryManager.userPartition.getTotalFreeMemory() - 0x8000;\n\t}\n\n\t@nativeFunction(0x9D9A5BA1, 150)\n    @U32 sceKernelGetBlockHeadAddr(@I32 partitionId: number) {\n\t\tif (!this.partitionUids.has(partitionId)) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_MEMBLOCK;\n        const block = this.partitionUids.get(partitionId);\n        return block.low;\n\t}\n\n\t/**\n\t\t* Get the size of the largest free memory block.\n\t\t*/\n\t@nativeFunction(0xA291F107, 150)\n    @I32 sceKernelMaxFreeMemSize() {\n\t\treturn this.context.memoryManager.userPartition.nonAllocatedPartitions.max(partition => partition.size).size;\n\t}\n\n\t@nativeFunction(0x7591C7DB, 150)\n    @U32 sceKernelSetCompiledSdkVersion(@U32 sdkVersion: number) {\n\t\tconsole.info(sprintf('sceKernelSetCompiledSdkVersion: %08X', sdkVersion));\n\t}\n\n\t@nativeFunction(0xF77D77CB, 150)\n    @U32 sceKernelSetCompilerVersion(@U32 version: number) {\n\t\tconsole.info(sprintf('sceKernelSetCompilerVersion: %08X', version));\n\t}\n\n\t@nativeFunction(0xEBD5C3E6, 150)\n    @U32 sceKernelSetCompiledSdkVersion395(@U32 param: number) {\n\t\tconsole.info(sprintf('sceKernelSetCompiledSdkVersion395: %08X', param));\n\t}\n\n\t@nativeFunction(0x3FC9AE6A, 150)\n    @U32 sceKernelDevkitVersion(@U32 version: number) {\n\t\t//const Version = HleConfig.FirmwareVersion;\n\t\t//return (Version.Major << 24) | (Version.Minor << 16) | (Version.Revision << 8) | 0x10;\n\t\treturn 0x02070110;\n\t}\n\n\t@nativeFunction(0x13A5ABEF, 150)\n    @VOID sceKernelPrintf(@THREAD thread: Thread, @STRING format: string) {\n        let gprIndex = 5;\n        const memory = this.context.memory;\n        let state = thread.state;\n\n\t\tconst readParam = (type:string): string => {\n\t\t\tswitch (type) {\n\t\t\t\tcase '%s': return memory.readStringz(state.getGPR(gprIndex++))!\n\t\t\t\tcase '%d': return String(state.getGPR(gprIndex++));\n\t\t\t}\n\t\t\treturn `??[${type}]??`;\n\t\t};\n\t\tconsole.info(`sceKernelPrintf: ${format.replace(/%[dsux]/g, (data) => {\n            return readParam(data);\n        })}`);\n\t\t//console.warn(this.context.memory.readStringz(thread.state.GPR5));\n\t}\n}\n", "\uFEFFimport {EmulatorContext} from \"../../emu/context\";\nimport {nativeFunction, U32, VOID} from \"../utils\";\n\nexport class UtilsForKernel {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xC2DF770E, 150)\n\t@VOID sceKernelIcacheInvalidateRange(@U32 address: number, @U32 size: number) {\n\t\tthis.context.currentInstructionCache.invalidateRange(address, address + size);\n\t}\n}\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {MathUtils} from \"../../global/math\";\nimport {SceKernelErrors} from \"../SceKernelErrors\";\nimport {EmulatorContext} from \"../../emu/context\";\nimport {I32, MEMORY, nativeFunction, PTR, U32} from \"../utils\";\nimport {Memory} from \"../../core/memory\";\n\nexport class UtilsForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x91E4F6A7, 150)\n\t@U32 sceKernelLibcClock() {\n\t\treturn this.context.rtc.getClockMicroseconds();\n\t}\n\n    @nativeFunction(0x27CC57F0, 150)\n    @U32 sceKernelLibcTime(@PTR pointer: Stream) {\n\t\t//console.warn('Not implemented UtilsForUser.sceKernelLibcTime');\n\t\tif (pointer == Stream.INVALID) return 0;\n\n        const result = (this.context.rtc.getCurrentUnixSeconds()) | 0;\n        if (pointer) pointer.writeInt32(result);\n\t\treturn result;\n\t}\n\n\t@nativeFunction(0x37FB5C42, 150)\n\t@U32 sceKernelGetGPI() {\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xE860E75E, 150)\n\t@U32 sceKernelUtilsMt19937Init(@MEMORY memory: Memory, @U32 contextPtr: number, @U32 seed: number) {\n        console.warn('Not implemented UtilsForUser.sceKernelUtilsMt19937Init');\n        return 0;\n    }\n\n\t@nativeFunction(0x06FB8A63, 150)\n\t@U32 sceKernelUtilsMt19937UInt(@MEMORY memory: Memory, @U32 contextPtr: number) {\n        return Math.round(Math.random() * 0xFFFFFFFF);\n    }\n\n    @nativeFunction(0x71EC4271, 150, {doNotWait: true})\n\t@U32 sceKernelLibcGettimeofday(@I32 timevalPtr: number, @I32 timezonePtr: number) {\n\t\tif (timevalPtr) {\n            const totalMilliseconds = Date.now()\n            const totalSeconds = Math.floor(totalMilliseconds / 1000)\n            const milliseconds = Math.floor(totalMilliseconds % 1000)\n            const microseconds = milliseconds * 1000\n            this.context.memory.writeInt32(timevalPtr, totalSeconds)\n            this.context.memory.writeInt32(timevalPtr + 4, microseconds)\n        }\n\n        if (timezonePtr) {\n            const minutesWest = 0\n            const dstTime = 0\n            this.context.memory.writeInt32(timezonePtr, minutesWest)\n            this.context.memory.writeInt32(timezonePtr + 4, dstTime)\n        }\n\n        return 0\n\t}\n\n\t@nativeFunction(0x34B9FA9E, 150)\n\t@U32 sceKernelDcacheWritebackInvalidateRange(@U32 pointer: number, @U32 size: number) {\n\t\t//console.log('sceKernelDcacheWritebackInvalidateRange');\n\t\tif (size > 0x7FFFFFFF) return SceKernelErrors.ERROR_INVALID_SIZE;\n\t\tif (pointer >= 0x80000000) return SceKernelErrors.ERROR_INVALID_POINTER;\n\t\tthis.context.memory.invalidateDataRange.dispatch(pointer, pointer + size);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x3EE30821, 150)\n    @U32 sceKernelDcacheWritebackRange(@U32 pointer: number, @U32 size: number) {\n\t\t//console.log('sceKernelDcacheWritebackRange');\n\t\tif (size > 0x7FFFFFFF) return SceKernelErrors.ERROR_INVALID_SIZE;\n\t\tif (pointer >= 0x80000000) return SceKernelErrors.ERROR_INVALID_POINTER;\n\t\tthis.context.memory.invalidateDataRange.dispatch(pointer, pointer + size);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x79D1C3FA, 150)\n    @U32 sceKernelDcacheWritebackAll() {\n\t\t//console.log('sceKernelDcacheWritebackAll');\n\t\tthis.context.memory.invalidateDataAll.dispatch();\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xBFA98062, 150)\n    @U32 sceKernelDcacheInvalidateRange(@U32 pointer: number, @U32 size: number) {\n\t\t//console.log('sceKernelDcacheInvalidateRange');\n\t\tif (!MathUtils.isAlignedTo(size, 4)) return SceKernelErrors.ERROR_KERNEL_NOT_CACHE_ALIGNED;\n\t\t//if (!this.context.memory.isValidAddress(pointer + size)) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_ADDR;\n\t\tif (size > 0x7FFFFFFF) return SceKernelErrors.ERROR_INVALID_SIZE;\n\t\tif (pointer >= 0x80000000) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_ADDR;\n\t\tif (!MathUtils.isAlignedTo(pointer, 4)) return SceKernelErrors.ERROR_KERNEL_NOT_CACHE_ALIGNED;\n\t\tthis.context.memory.invalidateDataRange.dispatch(pointer, pointer + size);\n\t\treturn 0;\n\t}\n\t\t\n\t@nativeFunction(0xB435DEC5, 150)\n    @U32 sceKernelDcacheWritebackInvalidateAll() {\n\t\t//console.log('sceKernelDcacheWritebackInvalidateAll');\n\t\tthis.context.memory.invalidateDataAll.dispatch();\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x6AD345D7, 150)\n    @U32 sceKernelSetGPO(@I32 value: number) {\n\t\treturn 0;\n\t}\n}\n", "\uFEFFimport {DebugOnce, delay, logger, PromiseFast, setToString, sprintf, UidCollection} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {Integer64} from \"../../../global/int64\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {BYTES, I32, I64, nativeFunction, PTR, STRING, THREAD, U32} from \"../../utils\";\nimport {HleDirectory, HleFile} from \"../../manager/file\";\nimport {FileMode, FileOpenFlags, VfsStat} from \"../../vfs/vfs\";\nimport {Thread} from \"../../manager/thread\";\nimport {HleIoDirent, IOFileModes, SceIoStat, ScePspDateTime, SeekAnchor} from \"../../structs\";\n\n//const console = logger.named('module.IoFileMgrForUser');\nconst log = logger.named('module.IoFileMgrForUser');\n\nexport class IoFileMgrForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0x54F5FB11, 150)\n\t@U32 sceIoDevctl(@STRING deviceName: string, @U32 command: number, @U32 inputPointer: number, @I32 inputLength: number, @U32 outputPointer: number, @I32 outputLength: number) {\n        const input = this.context.memory.getPointerStream(inputPointer, inputLength)!\n\t\tconst output = this.context.memory.getPointerStream(outputPointer, outputLength)!\n\n\t\treturn this.context.fileManager.devctlAsync(deviceName, command, input, output);\n\t}\n\n\n    static STDIN_ID = 0\n    static STDOUT_ID = 1\n    static STDERR_ID = 2\n\tfileUids = new UidCollection<HleFile>(3);\n\n\tdirectoryUids = new UidCollection<HleDirectory>(1);\n\n\thasFileById(id:number):boolean { return this.fileUids.has(id); }\n\tgetFileById(id:number):HleFile { return this.fileUids.get(id); }\n\n\t@nativeFunction(0x109F50BC, 150)\n\t@I32 sceIoOpen(@STRING filename: string, @I32 flags: FileOpenFlags, @I32 mode: FileMode) {\n\t\treturn this._sceIoOpenAsync(filename, flags, mode).thenFast(result => {\n            const str = sprintf('IoFileMgrForUser.sceIoOpen(\"%s\", %d(%s), 0%o)', filename, flags, setToString(FileOpenFlags, flags), mode);\n            if (result == SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND) {\n\t\t\t\tlog.error(str, result);\n\t\t\t} else {\n\t\t\t\tlog.info(str, result);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tprivate _sceIoOpenAsync(filename: string, flags: FileOpenFlags, mode: FileMode) {\n\t\treturn this.context.fileManager.openAsync(filename, flags, mode)\n\t\t\t.thenFast(file => {\n\t\t\t\treturn this.fileUids.allocate(file);\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tlog.error('Not found', filename, e);\n\t\t\t\treturn SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n\t\t\t})\n\t\t;\n\t}\n\n\t@nativeFunction(0x89AA9906, 150)\n\t@I32 sceIoOpenAsync(@STRING filename: string, @I32 flags: FileOpenFlags, @I32 mode: FileMode) {\n\t\tlog.info(sprintf('IoFileMgrForUser.sceIoOpenAsync(\"%s\", %d(%s), 0%o)', filename, flags, setToString(FileOpenFlags, flags), mode));\n\t\t//if (filename == '') return PromiseFast.resolve(0);\n\n\t\treturn this._sceIoOpenAsync(filename, flags, mode).thenFast(fileId => {\n\t\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n            const file = this.getFileById(fileId);\n            file.setAsyncOperation(PromiseFast.resolve(Integer64.fromNumber(fileId)));\n\t\t\tlog.info('-->', fileId);\n\t\t\treturn fileId;\n\t\t})\n\t}\n\n\t@nativeFunction(0xFF5940B6, 150)\n\t@I32 sceIoCloseAsync(@I32 fileId: number) {\n        log.info(sprintf('IoFileMgrForUser.closeAsync(%d)', fileId));\n\t\t//if (filename == '') return PromiseFast.resolve(0);\n\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n        if (file) file.close();\n\n\t\t//file.setAsyncOperation(PromiseFast.resolve(Integer64.fromInt(fileId)));\n\t\t//file.setAsyncOperation(PromiseFast.resolve(Integer64.fromInt(0)));\n\n        (async () => {\n            await delay(100)\n            this.fileUids.remove(fileId);\n        })()\n\n        file.setAsyncOperation(Integer64.ZERO);\n\n\t\treturn 0;\n\t}\n\n\n\t@nativeFunction(0xB2A628C1, 150)\n\t@I32 sceIoAssign(@STRING device1: string, @STRING device2: string, @STRING device3: string, @I32 mode: number, @PTR unk1Ptr: Stream, @I64 unk2: Integer64) {\n\t\t// IoFileMgrForUser.sceIoAssign(Device1:'disc0:', Device2:'umd0:', Device3:'isofs0:', mode:1, unk1:0x00000000, unk2:0x0880001E)\n\t\tlog.warn(sprintf(\"sceIoAssign not implemented! %s -> %s -> %s\", device1, device2, device3));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x810C4BC3, 150)\n\t@I32 sceIoClose(@I32 fileId: number) {\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n        if (file) file.close();\n\t\tthis.fileUids.remove(fileId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x42EC03AC, 150)\n\t@I32 sceIoWrite(@I32 fileId: number, @BYTES input: Stream): any {\n\t\tif (fileId < 3) {\n\t\t\t// @TODO: Fixme! Create a proper file\n            const str = input.readString(input.length);\n            log.warn(`STD[${fileId}]`, str);\n\t\t\tthis.context.onStdout.dispatch(str);\n\t\t\t//return immediateAsync().thenFast(() => 0);\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n            const file = this.getFileById(fileId);\n\n            return file.entry.writeChunkAsync(file.cursor, input.toArrayBuffer()).thenFast((writtenCount: number) => {\n\t\t\t\tlog.info('sceIoWrite', 'file.cursor', file.cursor, 'input.length:', input.length, 'writtenCount:', writtenCount);\n\t\t\t\tfile.cursor += writtenCount;\n\t\t\t\treturn writtenCount;\n\t\t\t}).catch(e => {\n\t\t\t\tlog.error(e);\n\t\t\t\treturn SceKernelErrors.ERROR_ERROR;\n\t\t\t});\n\t\t}\n\t}\n\n\t@nativeFunction(0x6A638D83, 150)\n\t@I32 sceIoRead(@I32 fileId: number, @U32 outputPointer: number, @I32 outputLength: number):number | PromiseFast<number> {\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n\n        return file.entry.readChunkAsync(file.cursor, outputLength).thenFast(readedData => {\n\t\t\tfile.cursor += readedData.byteLength;\n\t\t\t//log.log(new Uint8Array(readedData));\n\t\t\tthis.context.memory.writeBytes(outputPointer, readedData);\n\t\t\t//log.info(sprintf('IoFileMgrForUser.sceIoRead(%d, %08X: %d) : cursor:%d ->%d', fileId, outputPointer, outputLength, file.cursor, readedData.byteLength));\n\t\t\treturn readedData.byteLength;\n\t\t});\n\t}\n\n\t@nativeFunction(0xA0B5A7C2, 150)\n\t@I32 sceIoReadAsync(@THREAD thread:Thread, @I32 fileId: number, @U32 outputPointer: number, @I32 outputLength: number) {\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n\n        // SCE_KERNEL_ERROR_ASYNC_BUSY\n\n\t\tfile.setAsyncOperation(file.entry.readChunkAsync(file.cursor, outputLength).thenFast(readedData => {\n\t\t\t//log.log('sceIoReadAsync', file, fileId, outputLength, readedData.byteLength, new Uint8Array(readedData));\n\t\t\tfile.cursor += readedData.byteLength;\n\t\t\t//log.info(thread, 'readed', new Uint8Array(readedData));\n\t\t\tthis.context.memory.writeBytes(outputPointer, readedData);\n\t\t\treturn Integer64.fromNumber(readedData.byteLength);\n\t\t}));\n\n\t\treturn 0;\n\t}\n\n\t_sceIoWaitAsyncCB(thread: Thread, fileId: number, resultPointer: Stream): number | PromiseFast<number> {\n\t\tthread.state.LO = fileId;\n\n\t\tif (!this.fileUids.has(fileId)) {\n\t\t\tif (DebugOnce('_sceIoWaitAsyncCB', 100)) log.info('_sceIoWaitAsyncCB', fileId, 'file not found');\n\t\t\treturn PromiseFast.resolve(SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND);\n\t\t}\n\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n\n        if (file.asyncOperation) {\n\t\t\tif (DebugOnce('_sceIoWaitAsyncCB', 100)) log.info(thread.name, ':_sceIoWaitAsyncCB', fileId, 'completed');\n\t\t\treturn file.asyncOperation.thenFast(result => {\n\t\t\t\t//debugger;\n\t\t\t\tif (DebugOnce('_sceIoWaitAsyncCB', 100)) log.info(thread.name, ':_sceIoWaitAsyncCB', fileId, 'result: ', result.getNumber());\n\t\t\t\tresultPointer.writeInt64(result);\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t} else {\n\t\t\tif (DebugOnce('_sceIoWaitAsyncCB', 100)) log.info(thread.name, ':_sceIoWaitAsyncCB', fileId, 'incompleted');\n\t\t\tresultPointer.writeInt64(Integer64.fromNumber(0));\n\t\t\treturn PromiseFast.resolve(1);\n\t\t}\n\t}\n\n\n\t@nativeFunction(0xE23EEC33, 150)\n\t@I32 sceIoWaitAsync(@THREAD thread: Thread, @I32 fileId: number, @PTR resultPointer: Stream) {\n\t\treturn this._sceIoWaitAsyncCB(thread, fileId, resultPointer);\n\t}\n\n\t@nativeFunction(0x35DBD746, 150)\n\t@I32 sceIoWaitAsyncCB(@THREAD thread: Thread, @I32 fileId: number, @PTR resultPointer: Stream) {\n\t\treturn this._sceIoWaitAsyncCB(thread, fileId, resultPointer);\n\t}\n\n\t@nativeFunction(0x3251EA56, 150)\n\t@U32 sceIoPollAsync(@THREAD thread: Thread, @I32 fileId: number, @PTR resultPointer: Stream) {\n\t\t//log.info('sceIoPollAsync', fileId);\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n\n        if (file.asyncResult) {\n\t\t\t//return this._sceIoWaitAsyncCB(thread, fileId, resultPointer);\n\t\t\t//if (DebugOnce('sceIoPollAsync', 100)) log.log(thread.name, ':sceIoPollAsync', fileId, 'resolved -> ', file.asyncResult.number);\n\t\t\tresultPointer.writeInt64(file.asyncResult);\n\t\t\treturn 0;\n\t\t} else {\n\t\t\t//if (DebugOnce('sceIoPollAsync', 100)) log.log(thread.name, ':sceIoPollAsync', fileId, 'not resolved');\n\n\t\t\t//log.log('not resolved');\n\t\t\tresultPointer.writeInt64(Integer64.fromInt(0));\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/*\n\t[HlePspFunction(NID = 0xA0B5A7C2, FirmwareVersion = 150)]\n\tpublic int sceIoReadAsync(SceUID FileId, byte * OutputPointer, int OutputSize)\n\t{\n\t\tconst File = HleIoManager.HleIoDrvFileArgPool.Get(FileId);\n\t\tFile.AsyncLastResult = sceIoRead(FileId, OutputPointer, OutputSize);\n\n\t\t_DelayIo(IoDelayType.Read, OutputSize);\n\n\t\treturn 0;\n\t}\n\t*/\n\n\t_vfsStatToSceIoStat(stat: VfsStat) {\n        const stat2 = new SceIoStat();\n        //stat2.mode = <_structs.SceMode>parseInt('777', 8)\n\t\tstat2.mode = 0;\n\t\tstat2.size = stat.size;\n\t\tstat2.timeCreation = ScePspDateTime.fromDate(stat.timeCreation);\n\t\tstat2.timeLastAccess = ScePspDateTime.fromDate(stat.timeLastAccess);\n\t\tstat2.timeLastModification = ScePspDateTime.fromDate(stat.timeLastModification);\n\t\tstat2.deviceDependentData[0] = stat.dependentData0 || 0;\n\t\tstat2.deviceDependentData[1] = stat.dependentData1 || 0;\n\n\t\tstat2.attributes = 0;\n\t\tif (stat.isDirectory) {\n\t\t\tstat2.mode = 0x1000; // Directory\n\t\t\tstat2.attributes |= IOFileModes.Directory;\n\t\t\tstat2.attributes |= IOFileModes.CanRead;\n\t\t} else {\n\t\t\tstat2.mode = 0x2000; // File\n\t\t\tstat2.attributes |= IOFileModes.File;\n\t\t\tstat2.attributes |= IOFileModes.CanExecute;\n\t\t\tstat2.attributes |= IOFileModes.CanRead;\n\t\t\tstat2.attributes |= IOFileModes.CanWrite;\n\t\t}\n\t\treturn stat2;\n\t}\n\n\t@nativeFunction(0xACE946E8, 150)\n\t@I32 sceIoGetstat(@STRING fileName: string, @PTR sceIoStatPointer: Stream): any {\n\t\tif (sceIoStatPointer) {\n\t\t\tsceIoStatPointer.position = 0;\n\t\t\tSceIoStat.struct.write(sceIoStatPointer, new SceIoStat());\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.context.fileManager.getStatAsync(fileName)\n\t\t\t\t.thenFast(stat => {\n                    const stat2 = this._vfsStatToSceIoStat(stat);\n                    log.info(sprintf('IoFileMgrForUser.sceIoGetstat(\"%s\")', fileName), stat2);\n\t\t\t\t\tif (sceIoStatPointer) {\n\t\t\t\t\t\tsceIoStatPointer.position = 0;\n\t\t\t\t\t\tSceIoStat.struct.write(sceIoStatPointer, stat2);\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t})\n\t\t\t\t.catch(error => SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND)\n\t\t\t;\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n\t\t}\n\t}\n\n\t@nativeFunction(0x55F4717D, 150)\n\t@I32 sceIoChdir(@STRING path: string) {\n\t\tlog.info(sprintf('IoFileMgrForUser.sceIoChdir(\"%s\")', path));\n\t\ttry {\n\t\t\tthis.context.fileManager.chdir(path);\n\t\t\treturn 0;\n\t\t} catch (e) {\n\t\t\tlog.error(e);\n\t\t\treturn SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n\t\t}\n\t}\n\n\t/*\n\t[HlePspFunction(NID = 0x71B19E77, FirmwareVersion = 150)]\n\tpublic int sceIoLseekAsync(SceUID FileId, long Offset, SeekAnchor Whence)\n\t{\n\t\tconst File = HleIoManager.HleIoDrvFileArgPool.Get(FileId);\n\t\tFile.AsyncLastResult = sceIoLseek(FileId, Offset, Whence);\n\t\t_DelayIo(IoDelayType.Seek);\n\t\treturn 0;\n\t}\n\t*/\n\n\t@nativeFunction(0x71B19E77, 150)\n\t@I32 sceIoLseekAsync(@I32 fileId: number, @I64 offset: Integer64, @I32 whence: number) {\n\t\t//const file = this.getFileById(fileId);\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n        const result = this._seek(fileId, offset.getNumber(), whence);\n        file.setAsyncOperationNow(Integer64.fromNumber(result));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x27EB27B8, 150)\n\t@I64 sceIoLseek(@I32 fileId: number, @I64 offset: Integer64, @I32 whence: number) {\n        const result = this._seek(fileId, offset.getNumber(), whence);\n        //log.info(sprintf('IoFileMgrForUser.sceIoLseek(%d, %d, %d): %d', fileId, offset, whence, result));\n\t\treturn Integer64.fromNumber(result);\n\t}\n\n\t@nativeFunction(0x68963324, 150)\n\t@I32 sceIoLseek32(@I32 fileId: number, @I32 offset: number, @I32 whence: number) {\n        const result = this._seek(fileId, offset, whence);\n        //log.info(sprintf('IoFileMgrForUser.sceIoLseek32(%d, %d, %d) : %d', fileId, offset, whence, result));\n\t\treturn result;\n\t}\n\n\t@nativeFunction(0x06A70004, 150)\n\t@U32 sceIoMkdir(@STRING path: string, @I32 accessMode: number) {\n\t\tlog.warn(`Not implemented: sceIoMkdir(\"${path}\", ${accessMode.toString(8)})`);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xB29DDF9C, 150)\n\t@U32 sceIoDopen(@STRING path: string) {\n\t\tlog.log(`sceIoDopen(\"${path}\")`);\n\t\treturn this.context.fileManager.openDirectoryAsync(path).thenFast((directory) => {\n\t\t\tlog.log(`opened directory \"${path}\"`);\n\t\t\treturn this.directoryUids.allocate(directory);\n\t\t}).catch((error) => {\n\t\t\tlog.error(error);\n\t\t\treturn SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n\t\t});\n\t}\n\n\t@nativeFunction(0xEB092469, 150)\n\t@U32 sceIoDclose(@I32 fileId: number) {\n\t\tif (!this.directoryUids.has(fileId)) return -1;\n\t\tthis.directoryUids.get(fileId).close();\n\t\tthis.directoryUids.remove(fileId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xE3EB004C, 150)\n\t@I32 sceIoDread(@I32 fileId: number, @PTR hleIoDirentPtr: Stream) {\n\t\tif (!this.directoryUids.has(fileId)) return -1;\n        const directory = this.directoryUids.get(fileId);\n\t\tif (directory.left > 0) {\n            const stat = directory.read();\n            const hleIoDirent = new HleIoDirent();\n\t\t\thleIoDirent.name = stat.name ?? '';\n\t\t\thleIoDirent.stat = this._vfsStatToSceIoStat(stat);\n\t\t\thleIoDirent.privateData = 0;\n\t\t\tHleIoDirent.struct.write(hleIoDirentPtr, hleIoDirent);\n\t\t}\n\t\treturn directory.left;\n\t}\n\n\t@nativeFunction(0xB293727F, 150)\n\t@I32 sceIoChangeAsyncPriority(@I32 fileId: number, @I32 priority: number) {\n\t\treturn 0;\n\t}\n\n\t_seek(fileId: number, offset: number, whence: number) {\n\t\tif (!this.hasFileById(fileId)) return SceKernelErrors.ERROR_ERRNO_FILE_NOT_FOUND;\n        const file = this.getFileById(fileId);\n        switch (whence) {\n\t\t\tcase SeekAnchor.Set:\n\t\t\t\tfile.cursor = 0 + offset;\n\t\t\t\tbreak;\n\t\t\tcase SeekAnchor.Cursor:\n\t\t\t\tfile.cursor = file.cursor + offset;\n\t\t\t\tbreak;\n\t\t\tcase SeekAnchor.End:\n\t\t\t\tfile.cursor = file.entry.size + offset;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn file.cursor;\n\t}\n}\n\n", "\uFEFFimport {\n\tAcceptCallbacks,\n\tlogger,\n\tPromiseFast,\n\tsprintf,\n\tUidCollection,\n\tWaitingThreadInfo\n} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {\n    Struct,\n    StructInt32,\n    StructStructStringz,\n    StructUInt32\n} from \"../../../global/struct\";\nimport {MathUtils} from \"../../../global/math\";\nimport {Integer64} from \"../../../global/int64\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {PspThreadAttributes, Thread, ThreadStatus} from \"../../manager/thread\";\nimport {CPUSTATE, I32, I64, nativeFunction, PTR, STRING, THREAD, U32} from \"../../utils\";\nimport {OutOfMemoryError} from \"../../manager/memory\";\nimport {CpuSpecialAddresses, CpuState} from \"../../../core/cpu/cpu_core\";\n\nconst console = logger.named('module.ThreadManForUser');\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate threadUids = new UidCollection<Thread>(1);\n\n\t@nativeFunction(0x446D8DE6, 150)\n    @I32 sceKernelCreateThread(\n        @STRING name: string,\n        @U32 entryPoint: number, @I32 initPriority: number, @I32 stackSize: number,\n        @I32 attributes: PspThreadAttributes, @I32 optionPtr: number,\n        @THREAD currentThread: Thread\n    ) {\n\t\tif (name == null) return SceKernelErrors.ERROR_ERROR;\n\t\tif (stackSize < 0x200) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_STACK_SIZE;\n\t\tif (initPriority < 0x08 || initPriority > 0x77) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_PRIORITY;\n\n\t\tif (!this.context.memory.isValidAddress(entryPoint) || entryPoint == 0) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_THREAD_ENTRY_ADDR;\n\t\tif (name.length > 31) name = name.substr(0, 31);\n\t\tif (stackSize > 2 * 1024 * 1024) return -3;\n\t\tif ((attributes & (~PspThreadAttributes.ValidMask)) != 0) {\n\t\t\t//console.log(sprintf('Invalid mask %08X, %08X, %08X', attributes, PspThreadAttributes.ValidMask, (attributes & (~PspThreadAttributes.ValidMask))));\n\t\t\treturn SceKernelErrors.ERROR_KERNEL_ILLEGAL_ATTR;\n\t\t}\n\n\t\tattributes |= PspThreadAttributes.User;\n\t\tattributes |= PspThreadAttributes.LowFF;\n\n\t\ttry {\n\t\t\tstackSize = Math.max(stackSize, 0x200); // 512 byte min. (required for interrupts)\n\t\t\tstackSize = MathUtils.nextAligned(stackSize, 0x100); // Aligned to 256 bytes.\n\n            const newThread = this.context.threadManager.create(name, entryPoint, initPriority, stackSize, attributes);\n            newThread.id = this.threadUids.allocate(newThread);\n\t\t\tnewThread.status = ThreadStatus.DORMANT;\n\n\t\t\tnewThread.state.GP = currentThread.state.GP;\n\n\t\t\tconsole.info(sprintf('sceKernelCreateThread: %d:\"%s\":priority=%d, currentPriority=%d, entryPC=%08X', newThread.id, newThread.name, newThread.priority, currentThread.priority, entryPoint));\n\n\t\t\treturn newThread.id;\n\t\t\t//return PromiseFast.resolve(newThread.id);\n\t\t} catch (e) {\n\t\t\tif (e instanceof OutOfMemoryError) return SceKernelErrors.ERROR_KERNEL_NO_MEMORY;\n\t\t\tthrow(e);\n\t\t}\n\t}\n\t\n\thasThreadById(id: number) { return this.threadUids.has(id);  }\n\n\tgetThreadById(id: number) {\n\t\tif (id == 0) return this.context.threadManager.current;\n\t\treturn this.threadUids.get(id);\n\t}\n\n\tprivate _sceKernelDelayThreadCB(thread: Thread, delayInMicroseconds: number, acceptCallbacks: AcceptCallbacks) {\n\t\treturn new WaitingThreadInfo('_sceKernelDelayThreadCB', `microseconds:${delayInMicroseconds}`, thread.delayMicrosecondsAsync(delayInMicroseconds, false), acceptCallbacks);\n\t}\n\n\t@nativeFunction(0xCEADEB47, 150)\n    @U32 sceKernelDelayThread(@THREAD thread: Thread, @U32 delayInMicroseconds: number) {\n\t\treturn this._sceKernelDelayThreadCB(thread, delayInMicroseconds, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x68DA9E36, 150)\n    @U32 sceKernelDelayThreadCB(@THREAD thread: Thread, @U32 delayInMicroseconds: number) {\n\t\treturn this._sceKernelDelayThreadCB(thread, delayInMicroseconds, AcceptCallbacks.YES);\n\t}\n\n\tprivate _sceKernelWaitThreadEndCB(thread: Thread, acceptCallbacks:AcceptCallbacks) {\n\t\treturn new WaitingThreadInfo('_sceKernelWaitThreadEndCB', thread, (async () => {\n            await thread.waitEndAsync()\n            return thread.exitStatus\n        })(), acceptCallbacks);\n\t}\n\n\t@nativeFunction(0x840E8133, 150)\n    @U32 sceKernelWaitThreadEndCB(@U32 threadId: number, @PTR timeoutPtr: Stream):any {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n\t\treturn this._sceKernelWaitThreadEndCB(this.getThreadById(threadId), AcceptCallbacks.YES);\n\t}\n\n\t@nativeFunction(0x278C0DF5, 150)\n    @U32 sceKernelWaitThreadEnd(@U32 threadId: number, @PTR timeoutPtr: Stream): any {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n\t\treturn this._sceKernelWaitThreadEndCB(this.getThreadById(threadId), AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0x94AA61EE, 150)\n    @I32 sceKernelGetThreadCurrentPriority(@THREAD currentThread: Thread) {\n\t\treturn currentThread.priority;\n\t}\n\n\t@nativeFunction(0xF475845D, 150)\n    @U32 sceKernelStartThread(@THREAD currentThread: Thread, @I32 threadId: number, @I32 userDataLength: number, @I32 userDataPointer: number):any {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const newThread = this.getThreadById(threadId);\n\n        newThread.exitStatus = SceKernelErrors.ERROR_KERNEL_THREAD_IS_NOT_DORMANT;\n\n\t\t//if (!newThread) debugger;\n\n        const newState = newThread.state;\n        const memory = newState.memory;\n        const currentStack = newThread.stackPartition;\n        newState.setRA(CpuSpecialAddresses.EXIT_THREAD);\n\n\t\tif ((newThread.attributes & 0x00100000) == 0) { // PSP_THREAD_ATTR_NO_FILLSTACK\n\t\t\tmemory.memset(currentStack.low, 0xFF, currentStack.size);\n\t\t}\n\n        const copiedDataAddress = ((newThread.stackPartition.high) - ((userDataLength + 0xF) & ~0xF));\n\n        if (userDataPointer != null) {\n\t\t\tmemory.copy(userDataPointer, copiedDataAddress, userDataLength);\n\t\t\tnewState.setGPR(4, userDataLength);\n\t\t\tnewState.setGPR(5, copiedDataAddress);\n\t\t} else {\n\t\t\tnewState.setGPR(4, 0);\n\t\t\tnewState.setGPR(5, 0);\n\t\t}\n\t\t\n\t\tnewState.SP = copiedDataAddress;\n\t\t\n\t\tnewState.SP -= 0x100;\n\t\tnewState.K0 = newState.SP;\n\t\tmemory.memset(newState.K0, 0, 0x100);\n\t\tmemory.sw(newState.K0 + 0xc0, newThread.id); \n\t\tmemory.sw(newState.K0 + 0xc8, currentStack.low);\n\t\tmemory.sw(newState.K0 + 0xf8, 0xFFFFFFFF);\n\t\tmemory.sw(newState.K0 + 0xfc, 0xFFFFFFFF);\n\t\tmemory.sw(currentStack.low, newThread.id);\n\n\t\tconsole.info(sprintf('sceKernelStartThread: %d:\"%s\":priority=%d, currentPriority=%d, SP=%08X, GP=%08X, FP=%08X', threadId, newThread.name, newThread.priority, currentThread.priority, newState.SP, newState.GP, newState.FP));\n\n\t\tnewThread.start();\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\t@nativeFunction(0x71BC9871, 150)\n    @U32 sceKernelChangeThreadPriority(@THREAD currentThread: Thread, @I32 threadId: number, @I32 priority: number): any {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const thread = this.getThreadById(threadId);\n        thread.priority = priority;\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\t@nativeFunction(0xAA73C935, 150)\n    @I32 sceKernelExitThread(@I32 exitStatus: number, @THREAD currentThread: Thread, @CPUSTATE state: CpuState) {\n\t\tconsole.info(sprintf('sceKernelExitThread: %d', exitStatus));\n\n\t\tcurrentThread.exitStatus = (exitStatus < 0) ? SceKernelErrors.ERROR_KERNEL_ILLEGAL_ARGUMENT : exitStatus;\n\t\tcurrentThread.stop('sceKernelExitThread');\n\t\tstate.throwEndCycles();\n\t}\n\n\t@nativeFunction(0x3B183E26, 150)\n    @I32 sceKernelGetThreadExitStatus(@I32 threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const thread = this.getThreadById(threadId);\n        return thread.exitStatus;\n\t}\n\n\t_sceKernelTerminateThread(threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const newThread = this.getThreadById(threadId);\n        newThread.stop('_sceKernelTerminateThread');\n\t\tnewThread.exitStatus = 0x800201ac;\n\t\treturn 0;\n\t}\n\n\t_sceKernelDeleteThread(threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const newThread = this.getThreadById(threadId);\n        newThread.delete();\n\t\tthis.threadUids.remove(threadId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x9FA03CD3, 150)\n    @I32 sceKernelDeleteThread(@I32 threadId: number) {\n\t\treturn this._sceKernelDeleteThread(threadId);\n\t}\n\n\t@nativeFunction(0x616403BA, 150)\n    @I32 sceKernelTerminateThread(@I32 threadId: number) {\n\t\tconsole.info(sprintf('sceKernelTerminateThread: %d', threadId));\n\n\t\treturn this._sceKernelTerminateThread(threadId);\n\t}\n\n\t@nativeFunction(0x809CE29B, 150)\n    @U32 sceKernelExitDeleteThread(@I32 exitStatus: number, @THREAD currentThread: Thread, @CPUSTATE state: CpuState) {\n\t\tcurrentThread.exitStatus = exitStatus;\n\t\tcurrentThread.stop('sceKernelExitDeleteThread');\n\t\tstate.throwEndCycles();\n\t}\n\n\t@nativeFunction(0x383F7BCC, 150)\n    @I32 sceKernelTerminateDeleteThread(@I32 threadId: number) {\n\t\tthis._sceKernelTerminateThread(threadId);\n\t\tthis._sceKernelDeleteThread(threadId);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x82826F70, 150)\n    @U32 sceKernelSleepThreadCB(@THREAD currentThread: Thread) {\n\t\treturn currentThread.wakeupSleepAsync(AcceptCallbacks.YES);\n\t}\n\n\t@nativeFunction(0x9ACE131E, 150)\n    @U32 sceKernelSleepThread(@THREAD currentThread: Thread) {\n\t\treturn currentThread.wakeupSleepAsync(AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0xD59EAD2F, 150)\n    @U32 sceKernelWakeupThread(@I32 threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return PromiseFast.resolve(SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD);\n        const thread = this.getThreadById(threadId);\n        return thread.wakeupWakeupAsync();\n\t}\n\n\t_getCurrentMicroseconds() {\n\t\treturn this.context.rtc.getCurrentUnixMicroseconds();\n\t}\n\n\t@nativeFunction(0x110DEC9A, 150)\n    @U32 sceKernelUSec2SysClock(@U32 microseconds: number, @PTR clockPtr: Stream) {\n\t\tif (clockPtr != null) clockPtr.writeInt64(Integer64.fromUnsignedInt(microseconds));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x369ED59D, 150)\n    @U32 sceKernelGetSystemTimeLow() {\n\t\treturn this._getCurrentMicroseconds();\n\t}\n\n\t@nativeFunction(0xDB738F35, 150)\n    @U32 sceKernelGetSystemTime(@PTR timePtr: Stream) {\n\t\tif (timePtr == null) return SceKernelErrors.ERROR_ERRNO_INVALID_ARGUMENT;\n\t\ttimePtr.writeInt64(Integer64.fromNumber(this._getCurrentMicroseconds()));\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x82BC5777, 150)\n    @I64 sceKernelGetSystemTimeWide() {\n\t\t//console.warn('Not implemented ThreadManForUser.sceKernelGetSystemTimeLow');\n\t\treturn Integer64.fromNumber(this._getCurrentMicroseconds());\n\t}\n\n    @I32 @nativeFunction(0x293B45B8, 150)\n\tsceKernelGetThreadId(@THREAD currentThread: Thread) {\n\t\treturn currentThread.id\n\t}\n\n\t@nativeFunction(0x9944F31F, 150)\n    @I32 sceKernelSuspendThread(@I32 threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n\t\tthis.getThreadById(threadId).suspend();\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x75156E8F, 150)\n    @I32 sceKernelResumeThread(@I32 threadId: number) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n\t\tthis.getThreadById(threadId).resume();\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x17C1684E, 150)\n    @I32 sceKernelReferThreadStatus(@I32 threadId: number, @PTR sceKernelThreadInfoPtr: Stream) {\n\t\tif (!this.hasThreadById(threadId)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_THREAD;\n        const thread = this.getThreadById(threadId);\n\n        const info = new SceKernelThreadInfo();\n\n        info.size = SceKernelThreadInfo.struct.length;\n\n\t\tinfo.name = thread.name;\n\t\tinfo.attributes = thread.attributes;\n\t\tinfo.status = thread.status;\n\t\tinfo.threadPreemptionCount = thread.preemptionCount;\n\t\tinfo.entryPoint = thread.entryPoint\n\t\tinfo.stackPointer = thread.stackPartition.high;\n\t\tinfo.stackSize = thread.stackPartition.size;\n\t\tinfo.GP = thread.state.GP;\n\n\t\tinfo.priorityInit = thread.initialPriority;\n\t\tinfo.priority = thread.priority;\n\t\tinfo.waitType = 0;\n\t\tinfo.waitId = 0;\n\t\tinfo.wakeupCount = 0;\n\t\tinfo.exitStatus = thread.exitStatus;\n\t\tinfo.runClocksLow = 0;\n\t\tinfo.runClocksHigh = 0;\n\t\tinfo.interruptPreemptionCount = 0;\n\t\tinfo.threadPreemptionCount = 0;\n\t\tinfo.releaseCount = 0;\n\n\t\tSceKernelThreadInfo.struct.write(sceKernelThreadInfoPtr, info);\n\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xEA748E31, 150)\n    @I32 sceKernelChangeCurrentThreadAttr(@THREAD currentThread: Thread, @U32 removeAttributes: number, @U32 addAttributes: number) {\n\t\tcurrentThread.attributes &= ~removeAttributes;\n\t\tcurrentThread.attributes |= addAttributes;\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xC8CD158C, 150)\n    @I32 sceKernelUSec2SysClockWide(@U32 microseconds: number) {\n\t\treturn microseconds;\n\t}\n}\n\nclass SceKernelThreadInfo extends Struct {\n    @StructInt32 size: number = 0\n    @StructStructStringz(32) name: string = ''\n    @StructUInt32 attributes: number = 0\n    @StructUInt32 status: ThreadStatus = ThreadStatus.RUNNING\n    @StructUInt32 entryPoint: number = 0\n    @StructUInt32 stackPointer: number = 0\n    @StructInt32 stackSize: number = 0\n    @StructUInt32 GP: number = 0\n    @StructInt32 priorityInit: number = 0\n    @StructInt32 priority: number = 0\n    @StructUInt32 waitType: number = 0\n    @StructInt32 waitId: number = 0\n    @StructInt32 wakeupCount: number = 0\n    @StructInt32 exitStatus: number = 0\n    @StructInt32 runClocksLow: number = 0\n    @StructInt32 runClocksHigh: number = 0\n    @StructInt32 interruptPreemptionCount: number = 0\n    @StructInt32 threadPreemptionCount: number = 0\n    @StructInt32 releaseCount: number = 0\n}\n\n", "\uFEFFimport { SceKernelErrors } from '../SceKernelErrors';\nimport {\n    AcceptCallbacks,\n    Compensate, CpuBreakException,\n    DSet,\n    logger,\n    Microtask, ProgramExitException,\n    PromiseFast,\n    sprintf,\n    WaitingThreadInfo\n} from \"../../global/utils\";\nimport {waitAsync} from \"../../global/async\";\nimport {Integer64} from \"../../global/int64\";\nimport {MemoryManager, MemoryPartition} from \"./memory\";\nimport {\n    CpuConfig,\n    CpuSpecialAddresses,\n    CpuState,\n    NativeFunction,\n    SyscallManager\n} from \"../../core/cpu/cpu_core\";\nimport {CallbackManager} from \"./callback\";\nimport {Memory} from \"../../core/memory\";\nimport {InterruptManager} from \"../../core/interrupt\";\nimport {PspDisplay} from \"../../core/display\";\nimport {EmulatorUI} from \"../../ui/emulator_ui\";\nimport {CpuExecutor} from \"../../core/cpu/cpu_executor\";\nimport {Component} from \"../../core/component\";\n\nconst console = logger.named('hle.thread');\n\nexport const enum ThreadStatus {\n\tRUNNING = 1,\n\tREADY = 2,\n\tWAIT = 4,\n\tSUSPEND = 8,\n\tDORMANT = 16,\n\tDEAD = 32,\n\n\tWAITSUSPEND = WAIT | SUSPEND,\n}\n\nexport const enum PspThreadAttributes {\n\tNone = 0,\n\tLowFF = 0x000000FF,\n\tVfpu = 0x00004000, // Enable VFPU access for the thread.\n\tV0x2000 = 0x2000,\n\tV0x4000 = 0x4000,\n\tV0x400000 = 0x400000,\n\tV0x800000 = 0x800000,\n\tV0xf00000 = 0xf00000,\n\tV0x8000000 = 0x8000000,\n\tV0xf000000 = 0xf000000,\n\tUser = 0x80000000, // Start the thread in user mode (done automatically if the thread creating it is in user mode).\n\tUsbWlan = 0xa0000000, // Thread is part of the USB/WLAN API.\n\tVsh = 0xc0000000, // Thread is part of the VSH API.\n\t//ScratchRamEnable = 0x00008000, // Allow using scratchpad memory for a thread, NOT USABLE ON V1.0\n\tNoFillStack = 0x00100000, // Disables filling the stack with 0xFF on creation\n\tClearStack = 0x00200000, // Clear the stack when the thread is deleted\n\tValidMask = LowFF | Vfpu | User | UsbWlan | Vsh | /*ScratchRamEnable |*/ NoFillStack | ClearStack | V0x2000 | V0x4000 | V0x400000 | V0x800000 | V0xf00000 | V0x8000000 | V0xf000000,\n}\n\nexport class Thread {\n    id: number = 0;\n\tstatus: ThreadStatus = ThreadStatus.DORMANT;\n\tinitialPriority: number = 10;\n\tentryPoint: number = 0;\n\tpriority: number = 10;\n\tattributes: number = 0;\n\tsceKernelCpuResumeIntrCount: number = 0;\n\t//exitStatus: number = 0x800201a2;\n\texitStatus: number = SceKernelErrors.ERROR_KERNEL_THREAD_ALREADY_DORMANT;\n    running: boolean = false;\n\tstackPartition: MemoryPartition;\n\tpreemptionCount: number = 0;\n\tinfo: WaitingThreadInfo<any>|null = null;\n\twaitingName: string|null = null;\n\twaitingObject: any = null;\n\twaitingPromise: PromiseFast<any>|null = null;\n\trunningPromise: PromiseFast<number>;\n\t// @ts-ignore\n    runningStop: () => void;\n\tacceptingCallbacks = false;\n\n\tget runningOrAcceptingCallbacks() {\n\t\treturn this.running || this.acceptingCallbacks;\n\t}\n\n\tconstructor(public name: string, public manager: ThreadManager, memoryManager: MemoryManager, public state: CpuState, stackSize: number) {\n        this.state.thread = this;\n\t\tthis.runningPromise = new PromiseFast<any>((resolve, reject) => { this.runningStop = resolve; });\n\t\tthis.stackPartition = memoryManager.stackPartition.allocateHigh(stackSize, name + '-stack', 0x100);\n\t}\n\n\tdelete() {\n\t\tthis.stackPartition.deallocate();\n\t}\n\n\twaitEndAsync() {\n\t\treturn this.runningPromise;\n\t}\n\n\tprivate wakeupCount: number = 0;\n\tprivate wakeupPromise: PromiseFast<number>|null = null;\n\tprivate wakeupFunc: (() => void)|null = null;\n\n\tprivate getWakeupPromise() {\n\t\tif (!this.wakeupPromise) {\n\t\t\tthis.wakeupPromise = new PromiseFast<number>((resolve, reject) => {\n\t\t\t\tthis.wakeupFunc = resolve;\n\t\t\t});\n\t\t}\n\t\treturn this.wakeupPromise;\n\t}\n\n\twakeupSleepAsync(callbacks: AcceptCallbacks) {\n\t\tthis.wakeupCount--;\n\t\tthis.suspend();\n\t\t//return new PromiseFast((resolve, reject) => { });\n\t\treturn this.getWakeupPromise();\n\t}\n\n\twakeupWakeupAsync() {\n\t\tthis.wakeupCount++;\n\t\tif (this.wakeupCount >= 0) {\n\t\t\tthis.wakeupFunc?.();\n\t\t\tthis.wakeupPromise = null;\n\t\t\tthis.wakeupFunc = null;\n\t\t}\n\t\treturn PromiseFast.resolve(0);\n\t}\n\n\taccumulatedMicroseconds = 0;\n\tasync delayMicrosecondsAsync(delayMicroseconds: number, allowCompensating = false) {\n\t\t//console.error(delayMicroseconds, this.accumulatedMicroseconds);\n\t\t//return waitAsync(delayMicroseconds / 1000).thenFast(() => 0);\n\n\n\t\tthis.accumulatedMicroseconds = Math.min(this.accumulatedMicroseconds, 50000); // Don't accumulate more than 50ms\n\n\t\tif (allowCompensating) {\n\t\t\t//debugger;\n            const subtractAccumulatedMicroseconds = Math.min(delayMicroseconds, this.accumulatedMicroseconds);\n            delayMicroseconds -= subtractAccumulatedMicroseconds;\n\t\t\tthis.accumulatedMicroseconds -= subtractAccumulatedMicroseconds;\n\t\t}\n\n\t\t//console.error(delayMicroseconds, this.accumulatedMicroseconds, subtractAccumulatedMicroseconds);\n\n\t\tif (delayMicroseconds <= 0.00001) {\n\t\t\t//console.error('none!');\n\t\t\t//return PromiseFast.resolve(0);\n\t\t}\n\n        const start = performance.now();\n        await waitAsync(delayMicroseconds / 1000)\n        const end = performance.now();\n        const elapsedmicroseconds = (end - start) * 1000;\n\n        this.accumulatedMicroseconds += ((elapsedmicroseconds - delayMicroseconds) | 0);\n\n        return 0;\n\t}\n\n\tsuspend() {\n\t\t//console.log(`suspended ${this.name}`);\n        this.running = false;\n        this.manager.eventOcurred();\n\t}\n\n\tsuspendUntilDone(info: WaitingThreadInfo<any>) {\n\t\tthis.info = info;\n\t\tthis.waitingName = info.name;\n\t\tthis.waitingObject = info.object;\n\t\tthis.acceptingCallbacks = (info.callbacks == AcceptCallbacks.YES);\n\t\tthis._suspendUntilPromiseDone(PromiseFast.ensure(info.promise), info.compensate);\n\t}\n\n\tsuspendUntilPromiseDone(promise: PromiseFast<any>, info: NativeFunction) {\n\t\t//this.waitingName = sprintf('%s:0x%08X (PromiseFast)', info.name, info.nid);\n\t\tthis.waitingName = `${info.name}:0x${info.nid.toString(16)} (PromiseFast)`\n\t\tthis.waitingObject = info\n\t\tthis._suspendUntilPromiseDone(promise, Compensate.NO)\n\t}\n\n\t_suspendUntilPromiseDone(promise: PromiseFast<any>, compensate: Compensate) {\n        let startTime: number = 0\n\t\tif (compensate == Compensate.YES) {\n\t\t\tstartTime = performance.now();\n\t\t}\n\n\t\tthis.waitingPromise = promise;\n\n\t\tthis.suspend();\n\n\t\t//console.log(promise);\n\n\t\tpromise.thenFast((result: any) => {\n\t\t\tthis.waitingPromise = null;\n\t\t\tthis.waitingName = null;\n\t\t\tthis.waitingObject = null;\n\t\t\tthis.acceptingCallbacks = false;\n\t\t\tif (result !== undefined) {\n\t\t\t\tif (result instanceof Integer64) {\n\t\t\t\t\tthis.state.V0 = result.low;\n\t\t\t\t\tthis.state.V1 = result.high;\n\t\t\t\t} else {\n\t\t\t\t\tthis.state.V0 = result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (compensate == Compensate.YES) {\n                const endTime = performance.now();\n                this.accumulatedMicroseconds += (endTime - startTime) * 1000;\n\t\t\t}\n\n\t\t\t//console.error(`resumed ${this.name}`);\n            this.resume();\n        });\n    }\n\n    resume() {\n        this.running = true;\n        this.manager.eventOcurred();\n    }\n\n    start() {\n\t\tthis.running = true;\n\t\tconsole.info('starting thread ', this.name);\n\t\tthis.manager.threads.add(this);\n\t\tthis.manager.eventOcurred();\n    }\n\n    stop(reason: string) {\n\t\tthis.running = false;\n\t\tthis.runningStop();\n\t\t//debugger;\n\t\tconsole.info('stopping thread ', this.name, 'reason:', reason);\n\t\tthis.manager.threads.delete(this);\n\t\tthis.manager.eventOcurred();\n    }\n\n\trunStep() {\n\t\tthis.manager.current = this;\n\t\tthis.preemptionCount++;\n        CpuExecutor.executeAtPC(this.state)\n    }\n}\n\nexport class ThreadManager implements Component {\n    threads: DSet<Thread> = new DSet<Thread>();\n\tenqueued: boolean = false;\n\tenqueuedTime = 0;\n\trunning: boolean = false;\n\texitPromise: PromiseFast<number>;\n    // @ts-ignore\n\texitResolve: (errorCode: number) => void;\n    // @ts-ignore\n\tcurrent: Thread;\n\tprivate rootCpuState: CpuState;\n\n\tconstructor(\n\t    private memory: Memory,\n        private interruptManager: InterruptManager,\n        private callbackManager: CallbackManager,\n        private memoryManager: MemoryManager,\n        private display: PspDisplay,\n        private syscallManager: SyscallManager,\n        private cpuConfig: CpuConfig\n    ) {\n\t\tthis.rootCpuState = new CpuState(this.memory, this.syscallManager, this.cpuConfig);\n\t\tthis.exitPromise = new PromiseFast((resolve, reject) => {\n\t\t\tthis.exitResolve = resolve;\n\t\t});\n\t\tthis.interruptManager.event.add(this.eventOcurred);\n    }\n\n\tcreate(name: string, entryPoint: number, initialPriority: number, stackSize: number = 0x1000, attributes: PspThreadAttributes = 0) {\n        const thread = new Thread(name, this, this.memoryManager, this.rootCpuState.clone(), stackSize);\n        thread.entryPoint = entryPoint;\n        thread.state.setPC(entryPoint);\n        thread.state.setRA(CpuSpecialAddresses.EXIT_THREAD);\n\t\tthread.state.SP = thread.stackPartition.high;\n\t\tthread.initialPriority = initialPriority;\n\t\tthread.priority = initialPriority;\n\t\tthread.attributes = attributes;\n\n\t\tif ((thread.stackPartition.high & 0xFF) != 0) throw (new Error(\"Stack not aligned\"));\n\n\t\tif (!(thread.attributes & PspThreadAttributes.NoFillStack)) {\n\t\t\t//this.memory.memset(thread.stackPartition.low, 0xFF, thread.stackPartition.size);\n\t\t} else if ((thread.attributes & PspThreadAttributes.ClearStack)) {\n\t\t\t//this.memory.memset(thread.stackPartition.low, 0x00, thread.stackPartition.size);\n\t\t}\n\n        return thread;\n    }\n\n\teventOcurred() {\n\t\tif (!this.running) return\n        if (this.enqueued) return\n\t\tthis.enqueued = true\n\t\tthis.enqueuedTime = performance.now()\n\t\tMicrotask.queue(() => this.eventOcurredCallback())\n    }\n\n    frame() {\n\t    //this.eventOcurred()\n    }\n\n    //get runningThreads() { return this.threads.filter(thread => thread.running); }\n\n    private static getHighestPriority(threads: Thread[]) {\n        let priority = -9999;\n        threads.forEach(thread => {\n            priority = Math.max(priority, thread.priority);\n        });\n        return priority;\n    }\n\n\teventOcurredCallback() {\n\t\tif (!this.running) return;\n\n        const microsecondsToCompensate = Math.round((performance.now() - this.enqueuedTime) * 1000);\n        //console.log('delayedTime', timeMsToCompensate);\n\n        this.enqueued = false;\n        const start = window.performance.now();\n\n        while (true) {\n\t\t\tif (this.threads.elements.length > 0) {\n\t\t\t\tthis.interruptManager.execute(this.threads.elements[0].state);\n\t\t\t}\n\n            let callbackThreadCount = 0;\n            let callbackPriority = Number.MAX_VALUE;\n            let runningThreadCount = 0;\n            let runningPriority = Number.MAX_VALUE;\n\n            this.threads.forEach((thread) => {\n\t\t\t\tif (this.callbackManager.hasPendingCallbacks) {\n\t\t\t\t\tif (thread.acceptingCallbacks) {\n\t\t\t\t\t\tcallbackThreadCount++;\n\t\t\t\t\t\tcallbackPriority = Math.min(callbackPriority, thread.priority);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (thread.running) {\n\t\t\t\t\trunningThreadCount++;\n\t\t\t\t\trunningPriority = Math.min(runningPriority, thread.priority);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif ((runningThreadCount == 0) && (callbackThreadCount == 0)) break;\n\n\t\t\tif (callbackThreadCount != 0) {\n\t\t\t\tthis.threads.forEach((thread) => {\n\t\t\t\t\tif (thread.acceptingCallbacks && (thread.priority == callbackPriority)) {\n\t\t\t\t\t\tthis.callbackManager.executePendingWithinThread(thread);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (runningThreadCount != 0) {\n                try {\n                    this.threads.forEach((thread) => {\n                        if (thread.running && (thread.priority == runningPriority)) {\n                            // No callbacks?\n                            this.callbackManager.executeLaterPendingWithinThread(thread);\n                            this.runThreadStep(thread);\n                        }\n                    });\n                } catch (e) {\n                    if (ProgramExitException.is(e)) {\n                        console.error(\"Stopping game due to error\", e)\n                        this.exitGame(-1)\n                        return;\n                    }\n                    throw e\n                }\n\t\t\t}\n\t\t\t\n\t\t\t//Microtask.execute(); // causes game to freeze\n\n            const current = window.performance.now();\n            if (current - start >= 100) {\n\t\t\t\tsetTimeout(() => this.eventOcurred(), 0);\n                return;\n\t\t\t}\n        }\n    }\n\n\tprivate runThreadStep(thread: Thread) {\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tthread.runStep();\n\t\t\t\tif (!this.interruptManager.enabled) {\n\t\t\t\t\tconsole.log(thread.name, ':interrupts disabled, no thread scheduling!');\n\t\t\t\t}\n\t\t\t} while (!this.interruptManager.enabled);\n\t\t} catch (e) {\n\t\t\t//console.groupEnd();\n\t\t\t//console.log(e);\n\t\t\t//console.log(e['stack']);\n\t\t\t//debugger;\n\t\t\tif (CpuBreakException.is(e)) return\n            if (ProgramExitException.is(e)) throw e\n            const estack = e['stack'] || e;\n            EmulatorUI.openMessageAsync(estack)\n\t\t\tthread.stop(`thread.stop.error:${estack}`)\n\t\t\tthrow e\n\t\t}\n\t}\n\n    private debugThreads() {\n        let html = '';\n        this.threads.forEach((thread) => {\n            html += sprintf(\"%08X:%s:%s\", thread.state.PC, thread.name, thread.running);\n        });\n        document.getElementById('thread_list')!.innerHTML = html;\n    }\n\n\tprivate callbackAdded: any = null;\n\tregister() {\n\t\tthis.running = true\n        this.eventOcurred()\n\t\tthis.callbackAdded = this.callbackManager.onAdded.add(() => {\n\t\t\tthis.eventOcurred()\n\t\t});\n    }\n\n    unregister() {\n\t\tthis.running = false\n\t\tthis.callbackManager.onAdded.remove(this.callbackAdded)\n\t}\n\n    stopAsync() {\n\t    this.unregister()\n        return PromiseFast.resolve()\n    }\n\n    startAsync() {\n        this.register()\n        return PromiseFast.resolve()\n    }\n\n\texitGame(errorCode: number = 0) {\n\t\tthis.exitResolve(errorCode);\n\t}\n\n\twaitExitGameAsync(): PromiseFast<number> {\n\t\treturn this.exitPromise;\n\t}\n\n    delayThread(microseconds: number) {\n    }\n}\n", "\uFEFFimport {NumberDictionary, sprintf} from \"../../global/utils\";\n\nenum MemoryPartitions {\n    Kernel0 = 0,\n    User = 2,\n    VolatilePartition = 5,\n    UserStacks = 6,\n}\n\nexport enum MemoryAnchor {\n    Low = 0,\n    High = 1,\n    Address = 2,\n    LowAligned = 3,\n    HighAligned = 4,\n}\n\nexport class OutOfMemoryError implements Error {\n\tconstructor(public message: string, public name: string = 'OutOfMemoryError') { }\n}\n\nexport class MemoryPartition {\n    private _childPartitions: MemoryPartition[] = [];\n\n    get size() { return this.high - this.low; }\n\n    get root():MemoryPartition { return (this.parent) ? this.parent.root : this; }\n\n    get childPartitions() {\n        if (this._childPartitions.length == 0) this._childPartitions.push(new MemoryPartition(\"\", this.low, this.high, false));\n        return this._childPartitions;\n    }\n\n    contains(address: number) {\n        return address >= this.low && address < this.high;\n    }\n\n    constructor(public name: string, public low: number, public high: number, public allocated: boolean, public parent?: MemoryPartition) {\n\t}\n\n\tdeallocate() {\n\t\tthis.allocated = false;\n\t\tif (this.parent) {\n\t\t\tthis.parent.cleanup();\n\t\t}\n\t}\n\n    allocate(size: number, anchor: MemoryAnchor, address: number = 0, name: string = '') {\n\t\tswitch (anchor) {\n\t\t\tcase MemoryAnchor.LowAligned: // @TODO: aligned!\n\t\t\tcase MemoryAnchor.Low: return this.allocateLow(size, name);\n\t\t\tcase MemoryAnchor.High: return this.allocateHigh(size, name);\n\t\t\tcase MemoryAnchor.Address: return this.allocateSet(size, address, name);\n            default: throw (new Error(sprintf(\"Not implemented anchor %d:%s\", anchor, MemoryAnchor[anchor])));\n        }\n    }\n\n\tallocateSet(size: number, addressLow: number, name: string = '') {\n        const childs = this.childPartitions;\n        const addressHigh = addressLow + size;\n\n        if (!this.contains(addressLow) || !this.contains(addressHigh)) {\n\t\t\tthrow (new OutOfMemoryError(sprintf(\"Can't allocate [%08X-%08X] in [%08X-%08X]\", addressLow, addressHigh, this.low, this.high)));\n        }\n\n        for (let n = 0; n < childs.length; n++) {\n            const child = childs[n];\n            if (!child.contains(addressLow)) continue;\n            if (child.allocated) throw (new Error(\"Memory already allocated\"));\n            if (!child.contains(addressHigh - 1)) throw (new Error(\"Can't fit memory\"));\n\n            const p1 = new MemoryPartition('', child.low, addressLow, false, this);\n            const p2 = new MemoryPartition(name, addressLow, addressHigh, true, this);\n            const p3 = new MemoryPartition('', addressHigh, child.high, false, this);\n\n            childs.splice(n, 1, p1, p2, p3);\n\n            this.cleanup();\n            return p2;\n        }\n        console.log(sprintf('address: %08X, size: %d', addressLow, size));\n        console.log(this);\n        throw (new Error(\"Can't find the segment\"));\n    }\n\n\tallocateLow(size: number, name: string = '') {\n        return this.allocateLowHigh(size, true, name);\n    }\n\n\tallocateHigh(size: number, name: string = '', alignment: number = 1) {\n        return this.allocateLowHigh(size, false, name);\n\t}\n\n\tprivate _validateChilds() {\n        const childs = this._childPartitions;\n\n        if (childs[0].low != this.low) throw(new Error(\"Invalid state [1]\"));\n\t\tif (childs[childs.length - 1].high != this.high) throw (new Error(\"Invalid state [2]\"));\n\n\t\tfor (let n = 0; n < childs.length - 1; n++) {\n\t\t\tif (childs[n + 0].high != childs[n + 1].low) throw (new Error(\"Invalid state [3] -> \" + n));\n\t\t}\n\t}\n\n\tprivate allocateLowHigh(size: number, low: boolean, name: string = '') {\n        const childs = this.childPartitions\n        for (let n = 0; n < childs.length; n++) {\n            const child = childs[n]\n            if (child.allocated) continue\n            if (child.size < size) continue\n\n            let allocatedChild: MemoryPartition\n            if (low) {\n                const p1 = child.low\n                const p2 = child.low + size\n                const p3 = child.high\n                allocatedChild = new MemoryPartition(name, p1, p2, true, this)\n                const unallocatedChild = new MemoryPartition(\"\", p2, p3, false, this)\n\t\t\t\tchilds.splice(n, 1, allocatedChild, unallocatedChild)\n            } else {\n                const p1 = child.low\n                const p2 = child.high - size\n                const p3 = child.high\n                const unallocatedChild = new MemoryPartition(\"\", p1, p2, false, this)\n                allocatedChild = new MemoryPartition(name, p2, p3, true, this)\n\t\t\t\tchilds.splice(n, 1, unallocatedChild, allocatedChild)\n            }\n            this.cleanup();\n            return allocatedChild\n        }\n\n        //console.info(this);\n        throw (new OutOfMemoryError(\"Can't find a partition with \" + size + \" available\"));\n    }\n\n    unallocate() {\n        this.name = '';\n        this.allocated = false;\n        if (this.parent) this.parent.cleanup();\n    }\n\n\tprivate cleanup() {\n        const startTotalFreeMemory = this.getTotalFreeMemory();\n\n        //this._validateChilds();\n\n        // join contiguous free memory\n        const childs = this.childPartitions;\n        if (childs.length >= 2) {\n            for (let n = 0; n < childs.length - 1; n++) {\n                const child = childs[n + 0];\n                const c1 = childs[n + 1];\n\t\t\t\tif (!child.allocated && !c1.allocated) {\n\t\t\t\t\t//console.log('joining', child, c1, child.low, c1.high);\n\t\t\t\t\tchilds.splice(n, 2, new MemoryPartition(\"\", child.low, c1.high, false, this));\n                    n--;\n                }\n            }\n        }\n        // remove empty segments\n\t\tfor (let n = 0; n < childs.length; n++) {\n            const child = childs[n];\n            if (!child.allocated && child.size == 0) childs.splice(n, 1);\n\t\t}\n\n\t\t//this._validateChilds();\n\n        const endTotalFreeMemory = this.getTotalFreeMemory();\n\n        if (endTotalFreeMemory != startTotalFreeMemory) {\n\t\t\tconsole.log(`assertion failed! : ${startTotalFreeMemory},${endTotalFreeMemory}`);\n\t\t}\n    }\n\n    get nonAllocatedPartitions() {\n        return this.childPartitions.filter(item => !item.allocated);\n    }\n\n    getTotalFreeMemory() {\n        return this.nonAllocatedPartitions.reduce<number>((prev, item) => item.size + prev, 0);\n    }\n\n\tgetMaxContiguousFreeMemory() {\n\t\treturn this.nonAllocatedPartitions.max(item => item.size).size;\n    }\n\n    private findFreeChildWithSize(size: number) {\n    }\n}\n\nexport class MemoryManager {\n    memoryPartitionsUid: NumberDictionary<MemoryPartition> = {};\n\n\tconstructor() {\n        this.init();\n    }\n\n    private init() {\n        this.memoryPartitionsUid[MemoryPartitions.Kernel0] = new MemoryPartition(\"Kernel Partition 1\", 0x88000000, 0x88300000, false);\n        //this.memoryPartitionsUid[MemoryPartitions.User] = new MemoryPartition(\"User Partition\", 0x08800000, 0x08800000 + 0x100000 * 32, false);\n        //this.memoryPartitionsUid[MemoryPartitions.UserStacks] = new MemoryPartition(\"User Stacks Partition\", 0x08800000, 0x08800000 + 0x100000 * 32, false);\n        this.memoryPartitionsUid[MemoryPartitions.User] = new MemoryPartition(\"User Partition\", 0x08800000, 0x08800000 + 0x100000 * 24, false);\n        this.memoryPartitionsUid[MemoryPartitions.UserStacks] = new MemoryPartition(\"User Stacks Partition\", 0x08800000, 0x08800000 + 0x100000 * 24, false);\n        this.memoryPartitionsUid[MemoryPartitions.VolatilePartition] = new MemoryPartition(\"Volatile Partition\", 0x08400000, 0x08800000, false);\n\t}\n\n\tget kernelPartition() {\n\t\treturn this.memoryPartitionsUid[MemoryPartitions.Kernel0];\n\t}\n\n    get userPartition() {\n        return this.memoryPartitionsUid[MemoryPartitions.User];\n    }\n\n    get stackPartition() {\n        return this.memoryPartitionsUid[MemoryPartitions.UserStacks];\n    }\n}\n", "\uFEFFimport {EmulatorContext} from \"../../../emu/context\";\nimport {I32, nativeFunction, STRING, THREAD, U32} from \"../../utils\";\nimport {Callback} from \"../../manager/callback\";\nimport {Thread} from \"../../manager/thread\";\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xE81CAF8F, 150)\n\t@U32 sceKernelCreateCallback(@STRING name: string, @I32 functionCallbackAddr: number, @U32 argument: number) {\n\t\treturn this.context.callbackManager.register(new Callback(name, functionCallbackAddr, argument));\n\t}\n\n\t@nativeFunction(0xEDBA5844, 150)\n\t@U32 sceKernelDeleteCallback(@I32 callbackId: number) {\n\t\tthis.context.callbackManager.remove(callbackId);\n\t}\n\n\t/**\n\t * Run all peding callbacks and return if executed any.\n\t * Callbacks cannot be executed inside a interrupt.\n\t * @return 0 no reported callbacks; 1 reported callbacks which were executed successfully.\n\t */\n\t@nativeFunction(0x349D6D6C, 150)\n\t@U32 sceKernelCheckCallback(@THREAD thread: Thread) {\n\t\t//console.warn('Not implemented ThreadManForUser.sceKernelCheckCallback');\n\t\treturn this.context.callbackManager.executePendingWithinThread(thread) ? 1 : 0;\n\t}\n\n\t@nativeFunction(0xC11BA8C4, 150)\n\t@U32 sceKernelNotifyCallback(@THREAD thread: Thread, @I32 callbackId: number, @I32 argument2: number) {\n\t\treturn this.context.callbackManager.notify(callbackId, argument2);\n\t}\n}\n", "\uFEFFimport \"../../emu/global\"\n\nimport {Signal1, UidCollection} from \"../../global/utils\";\nimport {Interop} from \"./interop\";\nimport {Thread} from \"./thread\";\n\nexport class CallbackManager {\n\tprivate uids = new UidCollection<Callback>(1);\n\tprivate notifications = <CallbackNotification[]>[];\n\tpublic onAdded = new Signal1<number>();\n\n\tconstructor(private interop:Interop) {\n\t}\n\n\tget hasPendingCallbacks() {\n\t\treturn this.notifications.length > 0;\n\t}\n\n\tregister(callback: Callback) {\n\t\treturn this.uids.allocate(callback);\n\t}\n\n\tremove(id: number) {\n\t\treturn this.uids.remove(id);\n\t}\n\n\tget(id: number) {\n\t\treturn this.uids.get(id);\n\t}\n\n\tprivate normalCallbacks = <{ callback: number; args: number[] }[]>[];\n\n\texecuteLater(callback: number, args: number[]) {\n\t\tthis.normalCallbacks.push({ callback: callback, args: args });\n\t}\n\n\tnotify(id: number, arg2: number) {\n        const callback = this.get(id);\n        //if (!callback) throw(new Error(\"Can't find callback by id '\" + id + \"'\"));\n\t\tthis.notifications.push(new CallbackNotification(callback, arg2));\n\t\tthis.onAdded.dispatch(this.notifications.length);\n\t}\n\n\texecuteLaterPendingWithinThread(thread: Thread) {\n        // noinspection UnnecessaryLocalVariableJS\n        const state = thread.state;\n\n        while (this.normalCallbacks.length > 0) {\n            const normalCallback = this.normalCallbacks.shift()!;\n            this.interop.execute(state, normalCallback.callback, normalCallback.args);\n\t\t}\n\t}\n\n\texecutePendingWithinThread(thread: Thread) {\n        const state = thread.state;\n        let count = 0;\n\n        this.executeLaterPendingWithinThread(thread);\n\n\t\twhile (this.notifications.length > 0) {\n            const notification = this.notifications.shift()!\n\n            this.interop.execute(\n\t\t\t\tstate,\n\t\t\t\tnotification.callback.funcptr,\n\t\t\t\t[1, notification.arg2, notification.callback.argument]\n\t\t\t);\n\n\t\t\tcount++;\n\t\t}\n\n\t\treturn (count > 0);\n\t}\n}\n\nexport class CallbackNotification {\n\tconstructor(public callback: Callback, public arg2: number) {\n\t}\n}\n\nexport class Callback {\n\tpublic count = 0;\n\n\tconstructor(public name: string, public funcptr: number, public argument: number) {\n\t}\n}", "\uFEFFimport {AcceptCallbacks, PromiseFast, SortedSet, sprintf, UidCollection, WaitingThreadInfo} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {Struct, StructInt32, StructStructStringz} from \"../../../global/struct\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING, THREAD, U32} from \"../../utils\";\nimport {Thread} from \"../../manager/thread\";\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate semaporesUid = new UidCollection<Semaphore>(1);\n\n\t@nativeFunction(0xD6DA4BA1, 150)\n\t@I32 sceKernelCreateSema(@STRING name: string, @I32 attribute: SemaphoreAttribute, @I32 initialCount: number, @I32 maxCount: number, @PTR options: Stream) {\n        const semaphore = new Semaphore(name, attribute, initialCount, maxCount);\n        const id = this.semaporesUid.allocate(semaphore);\n        semaphore.id = id;\n\t\tconsole.warn(sprintf('Not implemented ThreadManForUser.sceKernelCreateSema(\"%s\", %d, count=%d, maxCount=%d) -> %d', name, attribute, initialCount, maxCount, id));\n\t\treturn id;\n\t}\n\n\t@nativeFunction(0x28B6489C, 150)\n\t@I32 sceKernelDeleteSema(@I32 id: number) {\n\t\tif (!this.semaporesUid.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_SEMAPHORE;\n        const semaphore = this.semaporesUid.get(id);\n        semaphore.delete();\n\t\tthis.semaporesUid.remove(id);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x8FFDF9A2, 150)\n    @U32 nativeFunctionEx(@U32 id: number, @U32 count: number, @PTR numWaitingThreadsPtr: Stream) {\n\t\tif (!this.semaporesUid.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_SEMAPHORE;\n        const semaphore = this.semaporesUid.get(id);\n        if (numWaitingThreadsPtr) numWaitingThreadsPtr.writeInt32(semaphore.numberOfWaitingThreads);\n\t\tsemaphore.cancel();\n\t\treturn 0;\n\t}\n\n\tprivate _sceKernelWaitSemaCB(currentThread: Thread, id: number, signal: number, timeout: Stream, acceptCallbacks: AcceptCallbacks): any {\n\n\t\tif (!this.semaporesUid.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_SEMAPHORE;\n        const semaphore = this.semaporesUid.get(id);\n        const promise = semaphore.waitAsync(currentThread, signal);\n        if (promise) {\n\t\t\treturn new WaitingThreadInfo('sceKernelWaitSema', semaphore, promise, acceptCallbacks);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t@nativeFunction(0x6D212BAC, 150)\n\t@I32 sceKernelWaitSemaCB(@THREAD currentThread: Thread, @I32 id: number, @I32 signal: number, @PTR timeout: Stream): any {\n\t\treturn this._sceKernelWaitSemaCB(currentThread, id, signal, timeout, AcceptCallbacks.YES);\n\t}\n\n\t@nativeFunction(0x4E3A1105, 150)\n\t@I32 sceKernelWaitSemaEx(@THREAD currentThread: Thread, @I32 id: number, @I32 signal: number, @PTR timeout: Stream): any {\n\t\treturn this._sceKernelWaitSemaCB(currentThread, id, signal, timeout, AcceptCallbacks.NO);\n\t}\n\n\t@nativeFunction(0xBC6FEBC5, 150)\n\t@I32 sceKernelReferSemaStatus(@I32 id: number, @PTR infoStream: Stream) {\n\t\tif (!this.semaporesUid.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_SEMAPHORE;\n        const semaphore = this.semaporesUid.get(id);\n        const semaphoreInfo = new SceKernelSemaInfo();\n        semaphoreInfo.size = SceKernelSemaInfo.struct.length;\n\t\tsemaphoreInfo.attributes = semaphore.attributes;\n\t\tsemaphoreInfo.currentCount = semaphore.currentCount;\n\t\tsemaphoreInfo.initialCount = semaphore.initialCount;\n\t\tsemaphoreInfo.maximumCount = semaphore.maximumCount;\n\t\tsemaphoreInfo.name = semaphore.name;\n\t\tsemaphoreInfo.numberOfWaitingThreads = semaphore.numberOfWaitingThreads;\n\t\tSceKernelSemaInfo.struct.write(infoStream, semaphoreInfo);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x3F53E640, 150)\n\t@I32 sceKernelSignalSema(@THREAD currentThread: Thread, @I32 id: number, @I32 signal: number): any {\n\t\tif (!this.semaporesUid.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_SEMAPHORE;\n        const semaphore = this.semaporesUid.get(id);\n        const previousCount = semaphore.currentCount;\n        if (semaphore.currentCount + signal > semaphore.maximumCount) return SceKernelErrors.ERROR_KERNEL_SEMA_OVERFLOW;\n        const awakeCount = semaphore.incrementCount(signal);\n        if (awakeCount > 0) {\n\t\t\treturn PromiseFast.resolve(0);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t@nativeFunction(0x58B1F937, 150)\n\t@I32 sceKernelPollSema(@THREAD currentThread: Thread, @I32 id: number, @I32 signal: number): any {\n        const semaphore = this.semaporesUid.get(id);\n        if (signal <= 0) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_COUNT;\n\t\tif (signal > semaphore.currentCount) return SceKernelErrors.ERROR_KERNEL_SEMA_ZERO;\n\t\tsemaphore.incrementCount(-signal);\n\t\treturn 0;\n\t}\n}\n\nclass SceKernelSemaInfo extends Struct {\n\t@StructInt32 size: number = 0\n    @StructStructStringz(32) name: string = ''\n    @StructInt32 attributes: SemaphoreAttribute = SemaphoreAttribute.FirstInFirstOut\n    @StructInt32 initialCount: number = 0\n    @StructInt32 currentCount: number = 0\n    @StructInt32 maximumCount: number = 0\n    @StructInt32 numberOfWaitingThreads: number = 0\n}\n\nclass WaitingSemaphoreThread {\n\tconstructor(public expectedCount: number, public wakeUp: Function) {\n\t}\n}\n\nclass Semaphore {\n\tid: number = 0\n\tcurrentCount: number;\n\twaitingSemaphoreThreadList = new SortedSet<WaitingSemaphoreThread>();\n\n\tconstructor(public name: string, public attributes: SemaphoreAttribute, public initialCount: number, public maximumCount: number) {\n\t\tthis.currentCount = initialCount;\n\t}\n\n\tget numberOfWaitingThreads() { return this.waitingSemaphoreThreadList.length; }\n\n\tincrementCount(count: number) {\n\t\tthis.currentCount = Math.min(this.currentCount + count, this.maximumCount);\n\t\treturn this.updatedCount();\n\t}\n\n\tcancel() {\n\t\tthis.waitingSemaphoreThreadList.forEach(item => {\n\t\t\titem.wakeUp();\n\t\t});\n\t}\n\n\tprivate updatedCount() {\n        let awakeCount = 0;\n        this.waitingSemaphoreThreadList.forEach(item => {\n\t\t\tif (this.currentCount >= item.expectedCount) {\n\t\t\t\tthis.currentCount -= item.expectedCount;\n\t\t\t\titem.wakeUp();\n\t\t\t\tawakeCount++;\n\t\t\t}\n\t\t});\n\t\treturn awakeCount;\n\t}\n\n\twaitAsync(thread: Thread, expectedCount: number) {\n\t\tif (this.currentCount >= expectedCount) {\n\t\t\tthis.currentCount -= expectedCount;\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst promise = new PromiseFast((resolve, reject) => {\n                const waitingSemaphoreThread = new WaitingSemaphoreThread(expectedCount, () => {\n\t\t\t\t\tthis.waitingSemaphoreThreadList.delete(waitingSemaphoreThread);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t\tthis.waitingSemaphoreThreadList.add(waitingSemaphoreThread);\n\t\t\t});\n\t\t\tthis.updatedCount();\n\t\t\treturn promise;\n\t\t}\n\t}\n\n\tdelete() {\n\t}\n}\n\nenum SemaphoreAttribute {\n\tFirstInFirstOut = 0x000,\n\tPriority = 0x100,\n}\n", "\uFEFFimport {\n\tAcceptCallbacks,\n\tSortedSet,\n\tUidCollection,\n\tWaitingThreadInfo\n} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {\n    Struct,\n    StructInt32,\n    StructStructStringz, StructUInt32\n} from \"../../../global/struct\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {CPUSTATE, I32, nativeFunction, PTR, STRING, U32} from \"../../utils\";\nimport {CpuState} from \"../../../core/cpu/cpu_core\";\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\n\tprivate eventFlagUids = new UidCollection<EventFlag>(1);\n\n\t@nativeFunction(0x55C20A00, 150)\n\t@U32 sceKernelCreateEventFlag(\n\t    @STRING name: string,\n        @I32 attributes: number,\n        @I32 bitPattern: number,\n        @PTR optionsPtr: Stream\n    ) {\n\t\tif (name === null) return SceKernelErrors.ERROR_ERROR;\n\t\tif ((attributes & 0x100) != 0 || attributes >= 0x300) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_ATTR;\n\n\t\t//console.warn(sprintf('Not implemented ThreadManForUser.sceKernelCreateEventFlag(\"%s\", %d, %08X)', name, attributes, bitPattern));\n        const eventFlag = new EventFlag();\n        eventFlag.name = name;\n\t\teventFlag.attributes = attributes;\n\t\teventFlag.initialPattern = bitPattern;\n\t\teventFlag.currentPattern = bitPattern;\n\t\treturn this.eventFlagUids.allocate(eventFlag);\n\t}\n\n\t@nativeFunction(0x1FB15A32, 150)\n    @U32 sceKernelSetEventFlag(@I32 id: number, @U32 bitPattern: number) {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\t\tthis.eventFlagUids.get(id).setBits(bitPattern);\n\t\treturn 0;\n\t}\n\n\tprivate _sceKernelWaitEventFlagCB(id: number, bits: number, waitType: EventFlagWaitTypeSet, outBits: Stream, timeout: Stream, acceptCallbacks: AcceptCallbacks, state: CpuState): any {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n        const eventFlag = this.eventFlagUids.get(id);\n\n        if ((waitType & ~(EventFlagWaitTypeSet.MaskValidBits)) != 0) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_MODE;\n\t\tif (bits == 0) return SceKernelErrors.ERROR_KERNEL_EVENT_FLAG_ILLEGAL_WAIT_PATTERN;\n        const timedOut = false;\n        const previousPattern = eventFlag.currentPattern;\n        const promise = (async () => {\n            await eventFlag.waitAsync(bits, waitType, outBits, timeout, acceptCallbacks, state)\n            if (outBits != null) outBits.writeUInt32(previousPattern);\n            return 0;\n        })()\n        return new WaitingThreadInfo('_sceKernelWaitEventFlagCB', eventFlag, promise, acceptCallbacks);\n\t}\n\n\t@nativeFunction(0x402FCF22, 150)\n    @U32 sceKernelWaitEventFlag(\n        @I32 id: number, @U32 bits: number,\n        @I32 waitType: EventFlagWaitTypeSet,\n        @PTR outBits: Stream, @PTR timeout: Stream,\n        @CPUSTATE state: CpuState,\n    ) {\n\t\treturn this._sceKernelWaitEventFlagCB(id, bits, waitType, outBits, timeout, AcceptCallbacks.NO, state);\n\t}\n\n\t@nativeFunction(0x328C546A, 150)\n    @U32 sceKernelWaitEventFlagCB(\n        @I32 id: number, @U32 bits: number,\n        @I32 waitType: EventFlagWaitTypeSet,\n        @PTR outBits: Stream, @PTR timeout: Stream,\n        @CPUSTATE state: CpuState,\n    ) {\n\t\treturn this._sceKernelWaitEventFlagCB(id, bits, waitType, outBits, timeout, AcceptCallbacks.YES, state);\n\t}\n\n\t@nativeFunction(0x30FD48F0, 150)\n    @U32 sceKernelPollEventFlag(\n        @I32 id: number, @U32 bits: number,\n        @I32 waitType: EventFlagWaitTypeSet,\n        @PTR outBits: Stream\n    ) {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\t\tif ((waitType & ~EventFlagWaitTypeSet.MaskValidBits) != 0) return SceKernelErrors.ERROR_KERNEL_ILLEGAL_MODE;\n\t\tif ((waitType & (EventFlagWaitTypeSet.Clear | EventFlagWaitTypeSet.ClearAll)) == (EventFlagWaitTypeSet.Clear | EventFlagWaitTypeSet.ClearAll)) {\n\t\t\treturn SceKernelErrors.ERROR_KERNEL_ILLEGAL_MODE;\n\t\t}\n\t\tif (bits == 0) return SceKernelErrors.ERROR_KERNEL_EVENT_FLAG_ILLEGAL_WAIT_PATTERN;\n\t\tif (EventFlag == null) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\n        const matched = this.eventFlagUids.get(id).poll(bits, waitType, outBits);\n\n        return matched ? 0 : SceKernelErrors.ERROR_KERNEL_EVENT_FLAG_POLL_FAILED;\n\t}\n\n\t@nativeFunction(0xEF9E4C70, 150)\n    @U32 sceKernelDeleteEventFlag(@I32 id: number) {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\t\tthis.eventFlagUids.remove(id);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0x812346E4, 150)\n    @U32 sceKernelClearEventFlag(@I32 id: number, @U32 bitsToClear: number) {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\t\tthis.eventFlagUids.get(id).clearBits(bitsToClear);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xCD203292, 150)\n    @U32 sceKernelCancelEventFlag(@I32 id: number, @U32 newPattern: number, @PTR numWaitThreadPtr: Stream) {\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n\t\tthis.eventFlagUids.get(id).cancel(newPattern);\n\t\treturn 0;\n\t}\n\n\t@nativeFunction(0xA66B0120, 150)\n    @U32 sceKernelReferEventFlagStatus(@I32 id: number, @PTR infoPtr: Stream) {\n        const size = infoPtr.readUInt32();\n        if (size == 0) return 0;\n\n\t\tinfoPtr.position = 0;\n\t\tif (!this.eventFlagUids.has(id)) return SceKernelErrors.ERROR_KERNEL_NOT_FOUND_EVENT_FLAG;\n        const eventFlag = this.eventFlagUids.get(id);\n        const info = new EventFlagInfo();\n        info.size = EventFlagInfo.struct.length;\n\t\tinfo.name = eventFlag.name;\n\t\tinfo.currentPattern = eventFlag.currentPattern;\n\t\tinfo.initialPattern = eventFlag.initialPattern;\n\t\tinfo.attributes = eventFlag.attributes;\n\t\tinfo.numberOfWaitingThreads = eventFlag.waitingThreads.length;\n\t\tEventFlagInfo.struct.write(infoPtr, info);\n\t\tconsole.warn('Not implemented ThreadManForUser.sceKernelReferEventFlagStatus');\n\t\treturn 0;\n\t}\n}\n\n\nclass EventFlagWaitingThread {\n\tconstructor(public bitsToMatch: number, public waitType: EventFlagWaitTypeSet, public outBits: Stream, public eventFlag: EventFlag, public wakeUp: () => void) {\n\t}\n}\n\nclass EventFlag {\n\tname: string = ''\n\tattributes: number = 0\n\tcurrentPattern: number = 0\n\tinitialPattern: number = 0\n\twaitingThreads = new SortedSet<EventFlagWaitingThread>();\n\n\twaitAsync(bits: number, waitType: EventFlagWaitTypeSet, outBits: Stream, timeout: Stream, callbacks: AcceptCallbacks, state: CpuState) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst waitingSemaphoreThread = new EventFlagWaitingThread(bits, waitType, outBits, this, () => {\n\t\t\t\tthis.waitingThreads.delete(waitingSemaphoreThread);\n\t\t\t\tresolve(0);\n\t\t\t\tstate.throwEndCycles();\n\t\t\t});\n\t\t\tthis.waitingThreads.add(waitingSemaphoreThread);\n\t\t})\n\t}\n\n\tpoll(bitsToMatch: number, waitType: EventFlagWaitTypeSet, outBits: Stream) {\n\t\tif (outBits != null) outBits.writeInt32(this.currentPattern);\n\n\t\tif (\n\t\t\t(waitType & EventFlagWaitTypeSet.Or)\n\t\t\t? ((this.currentPattern & bitsToMatch) != 0) // one or more bits of the mask\n\t\t\t: ((this.currentPattern & bitsToMatch) == bitsToMatch)) // all the bits of the mask\n\t\t{\n\t\t\tthis._doClear(bitsToMatch, waitType);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate _doClear(bitsToMatch: number, waitType: EventFlagWaitTypeSet) {\n\t\tif (waitType & (EventFlagWaitTypeSet.ClearAll)) this.clearBits(~0xFFFFFFFF, false);\n\t\tif (waitType & (EventFlagWaitTypeSet.Clear)) this.clearBits(~bitsToMatch, false);\n\t}\n\n\tcancel(newPattern: number) {\n\t\tthis.waitingThreads.forEach(item => {\n\t\t\titem.wakeUp();\n\t\t});\n\t}\n\n\tclearBits(bitsToClear: number, doUpdateWaitingThreads = true) {\n\t\tthis.currentPattern &= bitsToClear;\n\t\tif (doUpdateWaitingThreads) this.updateWaitingThreads();\n\t}\n\n\tsetBits(bits: number, doUpdateWaitingThreads = true) {\n\t\tthis.currentPattern |= bits;\n\t\tif (doUpdateWaitingThreads) this.updateWaitingThreads();\n\t}\n\n\tprivate updateWaitingThreads() {\n\t\tthis.waitingThreads.forEach(waitingThread => {\n\t\t\tif (this.poll(waitingThread.bitsToMatch, waitingThread.waitType, waitingThread.outBits)) {\n\t\t\t\twaitingThread.wakeUp();\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass EventFlagInfo extends Struct {\n\t@StructInt32 size: number = 0\n\t@StructStructStringz(32) name: string = ''\n    @StructInt32 attributes: number = 0 // HleEventFlag.AttributesSet\n    @StructUInt32 initialPattern: number = 0\n    @StructUInt32 currentPattern: number = 0\n    @StructInt32 numberOfWaitingThreads: number = 0\n}\n\nenum EventFlagWaitTypeSet {\n\tAnd = 0x00,\n\tOr = 0x01,\n\tClearAll = 0x10,\n\tClear = 0x20,\n\tMaskValidBits = Or | Clear | ClearAll,\n}\n", "\uFEFFimport {UidCollection} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING, U32} from \"../../utils\";\nimport {MemoryAnchor, MemoryPartition} from \"../../manager/memory\";\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\tprivate vplUid = new UidCollection<Vpl>(1);\n\n\t@nativeFunction(0x56C039B5, 150)\n\t@U32 sceKernelCreateVpl(@STRING name: string, @I32 partitionId: number, @I32 attribute: VplAttributeFlags, @I32 size: number, @PTR optionsPtr: Stream) {\n        const partition = this.context.memoryManager.memoryPartitionsUid[partitionId];\n        const allocatedPartition = partition.allocate(size, (attribute & VplAttributeFlags.PSP_VPL_ATTR_ADDR_HIGH) ? MemoryAnchor.High : MemoryAnchor.Low);\n\n        const vpl = new Vpl(name, allocatedPartition);\n        return this.vplUid.allocate(vpl);\n\t}\n\n\t@nativeFunction(0xAF36D708, 150)\n\t@U32 sceKernelTryAllocateVpl(@I32 vplId: number, @I32 size: number, @PTR addressPtr: Stream) {\n        const vpl = this.vplUid.get(vplId);\n        //console.log('sceKernelTryAllocateVpl', vplId, size, addressPtr);\n\t\ttry {\n            const item = vpl.partition.allocateLow(size);\n            console.log('-->', item.low);\n\t\t\tif (addressPtr) addressPtr.writeInt32(item.low);\n\t\t\treturn 0;\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t\treturn SceKernelErrors.ERROR_KERNEL_NO_MEMORY;\n\t\t}\n\t}\n}\n\nclass Vpl {\n\tconstructor(public name: string, public partition: MemoryPartition) {\n\t}\n}\n\nenum VplAttributeFlags {\n\tPSP_VPL_ATTR_MASK = 0x41FF, // Anything outside this mask is an illegal attr.\n\tPSP_VPL_ATTR_ADDR_HIGH = 0x4000, // Create the vpl in high memory.\n\tPSP_VPL_ATTR_EXT = 0x8000, // Extend the vpl memory area (exact purpose is unknown).\n}", "import {ProgramExitException, UidCollection} from \"../../../global/utils\";\nimport {Stream} from \"../../../global/stream\";\nimport {SceKernelErrors} from \"../../SceKernelErrors\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING, U32} from \"../../utils\";\nimport {MemoryAnchor, MemoryPartition} from \"../../manager/memory\";\n\nexport class ThreadManForUser {\n    constructor(private context: EmulatorContext) {\n    }\n\n    private fplUid = new UidCollection<Fpl>(1);\n\n    @nativeFunction(0xC07BB470, 150)\n    @I32 sceKernelCreateFpl(@STRING name: string, @I32 partitionId: number, @I32 attribute: FplAttributeFlags, @I32 size: number, @I32 blocks: number, @PTR optionsPtr: Stream) {\n        const partition = this.context.memoryManager.memoryPartitionsUid[partitionId];\n        const allocatedPartition = partition.allocate(size, (attribute & FplAttributeFlags.PSP_FPL_ATTR_ADDR_HIGH) ? MemoryAnchor.High : MemoryAnchor.Low);\n        const vpl = new Fpl(name, allocatedPartition, size, blocks);\n        return this.fplUid.allocate(vpl);\n    }\n\n    @nativeFunction(0xD979E9BF, 150)\n    @I32 sceKernelAllocateFpl(@U32 uid: number, @PTR dataAddr: Stream, @PTR timeoutAddr: Stream) {\n        return this._sceKernelAllocateFpl(uid, dataAddr, timeoutAddr, true, false);\n    }\n\n    @nativeFunction(0xF6414A71, 150)\n    @I32 sceKernelFreeFpl(@U32 uid: number, @PTR dataAddr: Stream) {\n        const fpl = this.fplUid.get(uid)\n        fpl.free(dataAddr.position)\n    }\n\n    private _sceKernelAllocateFpl(uid: number, dataAddr: Stream | null, timeoutAddr: Stream, wait: boolean, doCallbacks: boolean): number {\n        const fpl = this.fplUid.get(uid)\n        if (dataAddr == null || dataAddr.isNull) {\n            return SceKernelErrors.ERROR_INVALID_POINTER\n        }\n        dataAddr.writeInt32(fpl.alloc())\n        return 0\n    }\n}\n\nclass Fpl {\n    private currentOffset = 0\n    private allocList = new Set<number>()\n    private freeList = new Set<number>()\n\n    constructor(\n        public name: string,\n        public partition: MemoryPartition,\n        public size: number,\n        public blocks: number\n    ) {\n    }\n\n    private getAddress(index: number) {\n        return this.partition.low + (index * this.size)\n    }\n\n    private getIndexFromAddress(address: number) {\n        return Math.floor((address - this.partition.low) / this.size)\n    }\n\n    alloc() {\n        return this.getAddress(this.allocIndex())\n    }\n\n    free(address: number) {\n        const index = this.getIndexFromAddress(address)\n        if (this.allocList.has(index)) {\n            this.allocList.delete(index)\n            this.freeList.add(index)\n        }\n    }\n\n    private allocIndex() {\n        let index = -1\n        if (this.freeList.size > 0) {\n            index = this.freeList.keys().next().value\n            this.freeList.delete(index)\n        } else if (this.currentOffset < this.blocks) {\n            index = this.currentOffset++\n        } else {\n            throw new ProgramExitException(\"TODO: Fpl is full\")\n        }\n        this.allocList.add(index)\n        return index\n    }\n}\n\n\nconst enum FplAttributeFlags {\n    PSP_FPL_ATTR_FIFO = 0,\n    PSP_FPL_ATTR_PRIORITY = 0x100,\n    PSP_FPL_ATTR_MASK = 0x41FF,\n    PSP_FPL_ATTR_ADDR_HIGH = 0x4000\n}\n", "\uFEFFimport {Stream} from \"../../../global/stream\";\nimport {EmulatorContext} from \"../../../emu/context\";\nimport {I32, nativeFunction, PTR, STRING, U32} from \"../../utils\";\n\nexport class ThreadManForUser {\n\tconstructor(private context: EmulatorContext) { }\n\n\t@nativeFunction(0xB7D098C6, 150)\n\t@U32 sceKernelCreateMutex(@STRING name: string, @I32 attribute: number, @I32 options: number) {\n\t\treturn -1;\n\t}\n\n\t@nativeFunction(0x5BF4DD27, 150)\n    @U32 sceKernelLockMutexCB(@I32 mutexId:number, @I32 count:number, @PTR timeout:Stream) {\n\t\treturn -1;\n\t}\n}", "\uFEFFimport * as ExceptionManagerForKernel from './module/ExceptionManagerForKernel'\nimport * as InterruptManager from './module/InterruptManager';\nimport * as KDebugForKernel from './module/KDebugForKernel';\nimport * as Kernel_Library from './module/Kernel_Library';\nimport * as LoadCoreForKernel from './module/LoadCoreForKernel';\nimport * as LoadExecForUser from './module/LoadExecForUser';\nimport * as ModuleMgrForUser from './module/ModuleMgrForUser';\nimport * as sceAtrac3plus from './module/sceAtrac3plus';\nimport * as sceAudio from './module/sceAudio';\nimport * as sceCtrl from './module/sceCtrl';\nimport * as sceDisplay from './module/sceDisplay';\nimport * as sceDmac from './module/sceDmac';\nimport * as sceGe_user from './module/sceGe_user';\nimport * as sceHprm from './module/sceHprm';\nimport * as sceHttp from './module/sceHttp';\nimport * as sceParseHttp from './module/sceParseHttp';\nimport * as sceParseUri from './module/sceParseUri';\nimport * as sceImpose from './module/sceImpose';\nimport * as sceLibFont from './module/sceLibFont';\nimport * as sceMp3 from './module/sceMp3';\nimport * as sceMpeg from './module/sceMpeg';\nimport * as sceNet from './module/sceNet';\nimport * as sceNetAdhoc from './module/sceNetAdhoc';\nimport * as sceNetAdhocctl from './module/sceNetAdhocctl';\nimport * as sceNetAdhocMatching from './module/sceNetAdhocMatching';\nimport * as sceNetApctl from './module/sceNetApctl';\nimport * as sceNetInet from './module/sceNetInet';\nimport * as sceNetResolver from './module/sceNetResolver';\nimport * as sceNp from './module/sceNp';\nimport * as sceNpAuth from './module/sceNpAuth';\nimport * as sceNpService from './module/sceNpService';\nimport * as sceOpenPSID from './module/sceOpenPSID';\nimport * as scePower from './module/scePower';\nimport * as scePspNpDrm_user from './module/scePspNpDrm_user';\nimport * as sceReg from './module/sceReg';\nimport * as sceRtc from './module/sceRtc';\nimport * as sceSasCore from './module/sceSasCore';\nimport * as sceSsl from './module/sceSsl';\nimport * as sceSuspendForUser from './module/sceSuspendForUser';\nimport * as sceUmdUser from './module/sceUmdUser';\nimport * as sceUtility from './module/sceUtility';\nimport * as sceVaudio from './module/sceVaudio';\nimport * as sceWlanDrv from './module/sceWlanDrv';\nimport * as StdioForUser from './module/StdioForUser';\nimport * as SysMemUserForUser from './module/SysMemUserForUser';\nimport * as UtilsForKernel from './module/UtilsForKernel';\nimport * as UtilsForUser from './module/UtilsForUser';\n\nimport * as IoFileMgrForUser from './module/iofilemgr/IoFileMgrForUser';\nimport * as ThreadManForUser from './module/threadman/ThreadManForUser';\nimport * as ThreadManForUser_callbacks from './module/threadman/ThreadManForUser_callbacks';\nimport * as ThreadManForUser_sema from './module/threadman/ThreadManForUser_sema';\nimport * as ThreadManForUser_eventflag from './module/threadman/ThreadManForUser_eventflag';\nimport * as ThreadManForUser_vpl from './module/threadman/ThreadManForUser_vpl';\nimport * as ThreadManForUser_fpl from './module/threadman/ThreadManForUser_fpl';\nimport * as ThreadManForUser_mutex from './module/threadman/ThreadManForUser_mutex';\nimport {SyscallManager} from \"../core/cpu/cpu_core\";\nimport {ModuleManager} from \"./manager/module\";\n\nfunction _registerModules(manager: ModuleManager) {\n}\n\nfunction _registerSyscall(syscallManager: SyscallManager, moduleManager: ModuleManager, id: number, moduleName: string, functionName: string) {\n\tsyscallManager.registerWithId(id, moduleManager.getByName(moduleName).getByName(functionName));\n}\n\nfunction registerModules(manager: ModuleManager) {\n\tmanager.registerModule(ExceptionManagerForKernel);\n\tmanager.registerModule(InterruptManager);\n\tmanager.registerModule(KDebugForKernel);\n\tmanager.registerModule(Kernel_Library);\n\tmanager.registerModule(LoadCoreForKernel);\n\tmanager.registerModule(LoadExecForUser);\n\tmanager.registerModule(ModuleMgrForUser);\n\tmanager.registerModule(sceAtrac3plus);\n\tmanager.registerModule(sceAudio);\n\tmanager.registerModule(sceCtrl);\n\tmanager.registerModule(sceDisplay);\n\tmanager.registerModule(sceDmac);\n\tmanager.registerModule(sceGe_user);\n\tmanager.registerModule(sceHprm);\n\tmanager.registerModule(sceHttp);\n\tmanager.registerModule(sceParseHttp);\n\tmanager.registerModule(sceParseUri);\n\tmanager.registerModule(sceImpose);\n\tmanager.registerModule(sceLibFont);\n\tmanager.registerModule(sceMp3);\n\tmanager.registerModule(sceMpeg);\n\tmanager.registerModule(sceNet);\n\tmanager.registerModule(sceNetAdhoc);\n\tmanager.registerModule(sceNetAdhocctl);\n\tmanager.registerModule(sceNetAdhocMatching);\n\tmanager.registerModule(sceNetApctl);\n\tmanager.registerModule(sceNetInet);\n\tmanager.registerModule(sceNetResolver);\n\tmanager.registerModule(sceNp);\n\tmanager.registerModule(sceNpAuth);\n\tmanager.registerModule(sceNpService);\n\tmanager.registerModule(sceOpenPSID);\n\tmanager.registerModule(scePower);\n\tmanager.registerModule(scePspNpDrm_user);\n\tmanager.registerModule(sceReg);\n\tmanager.registerModule(sceRtc);\n\tmanager.registerModule(sceSasCore);\n\tmanager.registerModule(sceSsl);\n\tmanager.registerModule(sceSuspendForUser);\n\tmanager.registerModule(sceUmdUser);\n\tmanager.registerModule(sceUtility);\n\tmanager.registerModule(sceVaudio);\n\tmanager.registerModule(sceWlanDrv);\n\tmanager.registerModule(StdioForUser);\n\tmanager.registerModule(SysMemUserForUser);\n\tmanager.registerModule(UtilsForKernel);\n\tmanager.registerModule(UtilsForUser);\n\tmanager.registerModule(IoFileMgrForUser);\n\tmanager.registerModule(ThreadManForUser);\n\tmanager.registerModule(ThreadManForUser_callbacks);\n\tmanager.registerModule(ThreadManForUser_sema);\n\tmanager.registerModule(ThreadManForUser_eventflag);\n\tmanager.registerModule(ThreadManForUser_vpl);\n    manager.registerModule(ThreadManForUser_fpl);\n\tmanager.registerModule(ThreadManForUser_mutex);\n}\n\nfunction registerSyscalls(syscallManager: SyscallManager, moduleManager: ModuleManager) {\n\t_registerSyscall(syscallManager, moduleManager, 0x206D, \"ThreadManForUser\", \"sceKernelCreateThread\");\n\t_registerSyscall(syscallManager, moduleManager, 0x206F, \"ThreadManForUser\", \"sceKernelStartThread\");\n\t_registerSyscall(syscallManager, moduleManager, 0x2071, \"ThreadManForUser\", \"sceKernelExitDeleteThread\");\n\t\n\t_registerSyscall(syscallManager, moduleManager, 0x20BF, \"UtilsForUser\", \"sceKernelUtilsMt19937Init\");\n\t_registerSyscall(syscallManager, moduleManager, 0x20C0, \"UtilsForUser\", \"sceKernelUtilsMt19937UInt\");\n\t\n\t_registerSyscall(syscallManager, moduleManager, 0x213A, \"sceDisplay\", \"sceDisplaySetMode\");\n\t_registerSyscall(syscallManager, moduleManager, 0x2147, \"sceDisplay\", \"sceDisplayWaitVblankStart\");\n\t_registerSyscall(syscallManager, moduleManager, 0x213F, \"sceDisplay\", \"sceDisplaySetFrameBuf\");\n\t\n\t_registerSyscall(syscallManager, moduleManager, 0x20EB, \"LoadExecForUser\", \"sceKernelExitGame\");\n\t\n\t_registerSyscall(syscallManager, moduleManager, 0x2150, \"sceCtrl\", \"sceCtrlPeekBufferPositive\");\n}\n\nexport function registerModulesAndSyscalls(syscallManager: SyscallManager, moduleManager: ModuleManager) {\n\tregisterModules(moduleManager);\n\tregisterSyscalls(syscallManager, moduleManager);\n}\n", "\uFEFFimport \"../emu/global\"\nimport {\n    Struct,\n    StructArray,\n    StructClass,\n    StructUInt16,\n    StructUInt32,\n    StructUInt8,\n    UInt16,\n    UInt32,\n    UInt8\n} from \"../global/struct\";\nimport {StringDictionary} from \"../global/utils\";\nimport {Stream} from \"../global/stream\";\n\nenum DataType {\n\tBinary = 0,\n\tText = 2,\n\tInt = 4,\n}\n\nclass HeaderStruct extends Struct {\n\t@StructUInt32 magic: number = 0\n    @StructUInt32 version: number = 0\n    @StructUInt32 keyTable: number = 0\n    @StructUInt32 valueTable: number = 0\n    @StructUInt32 numberOfPairs: number = 0\n}\n\nexport interface IEntryStruct {\n\tkey: string;\n\tvalue: any;\n}\n\nclass EntryStruct extends Struct implements IEntryStruct {\n\t@StructUInt16 keyOffset: number = 0\n    @StructUInt8 private unknown: number = 0\n    @StructUInt8 dataType: DataType = DataType.Binary\n    @StructUInt32 valueSize: number = 0\n    @StructUInt32 valueSizePad: number = 0\n    @StructUInt32 valueOffset: number = 0\n\n    key: string = ''\n    value: any\n}\n\nexport class Psf {\n\tpublic entries: IEntryStruct[] = [];\n\tpublic entriesByName: StringDictionary<any> = {};\n\t// @ts-ignore\n    private header: HeaderStruct;\n\n\tconstructor() {\n\t}\n\n\tstatic fromStream(stream: Stream) {\n        const psf = new Psf();\n        psf.load(stream);\n\t\treturn psf;\n\t}\n\n\tload(stream: Stream) {\n        const header = this.header = HeaderStruct.struct.read(stream);\n        if (header.magic != 0x46535000) throw (\"Not a PSF file\");\n        const entries = StructArray<EntryStruct>(EntryStruct.struct, header.numberOfPairs).read(stream);\n        const entriesByName: StringDictionary<IEntryStruct> = {};\n\n        const keysStream = stream.sliceWithLength(header.keyTable);\n        const valuesStream = stream.sliceWithLength(header.valueTable);\n\n        entries.forEach(entry => {\n            const key = keysStream.sliceWithLength(entry.keyOffset).readUtf8Stringz();\n            const valueStream = valuesStream.sliceWithLength(entry.valueOffset, entry.valueSize);\n            entry.key = key;\n\n\t\t\tswitch (entry.dataType) {\n\t\t\t\tcase DataType.Binary: entry.value = valueStream.sliceWithLength(0); break;\n\t\t\t\tcase DataType.Int: entry.value = valueStream.readInt32(); break;\n\t\t\t\tcase DataType.Text: entry.value = valueStream.readUtf8Stringz(); break;\n\t\t\t\tdefault: throw `Unknown dataType: ${entry.dataType}`;\n\t\t\t}\n\n\t\t\tentriesByName[entry.key] = entry.value;\n\t\t});\n\n\t\tthis.entries = entries;\n\t\tthis.entriesByName = entriesByName;\n\t}\n}\n", "\uFEFFimport \"../emu/global\"\nimport {AsyncStream, Stream} from \"../global/stream\";\nimport {PromiseFast} from \"../global/utils\";\n\nexport async function detectFormatAsync(asyncStream: AsyncStream): Promise<string> {\n\tconst data = await asyncStream.readChunkAsync(0, 4)\n    const stream = Stream.fromArrayBuffer(data);\n    if (stream.length < 4) {\n        console.error(asyncStream);\n        throw (new Error(\"detectFormatAsync: Buffer is too small (\" + data.byteLength + \")\"));\n    }\n    const magic = stream.readString(4);\n    switch (magic) {\n        case 'PK\\u0001\\u0002':\n        case 'PK\\u0003\\u0004':\n        case 'PK\\u0005\\u0006':\n            return 'zip';\n        case '\\u0000PBP': return 'pbp';\n        case '\\u007FELF': return 'elf';\n        case '~PSP': return 'psp';\n        case 'CISO': return 'ciso';\n        case '\\u0000\\u0000\\u0000\\u0000':\n            const data = await asyncStream.readChunkAsync(0x10 * 0x800, 6)\n            const stream = Stream.fromArrayBuffer(data);\n            const magic = stream.readString(6);\n            switch (magic) {\n                case '\\u0001CD001':\n                    return 'iso';\n                default:\n                    throw `Unknown format. Magic: '${magic}'`;\n            }\n        default:\n            break;\n    }\n    throw `Unknown format. Magic: '${magic}'`;\n}\n", "/** license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\n'use strict';\n\nclass Huffman {\n    constructor(public data: Uint32Array, public max: number, public min: number) {\n    }\n\n    static buildHuffmanTable(lengths: Uint8Array): Huffman {\n        const listSize = lengths.length\n        let maxCodeLength = 0\n        let minCodeLength = Number.POSITIVE_INFINITY\n        \n        for (let i = 0, il = listSize; i < il; ++i) {\n            if (lengths[i] > maxCodeLength) maxCodeLength = lengths[i]\n            if (lengths[i] < minCodeLength) minCodeLength = lengths[i]\n        }\n\n        const size = 1 << maxCodeLength\n        const table = new Uint32Array(size)\n\n        for (let bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {\n            for (let i = 0; i < listSize; ++i) {\n                if (lengths[i] === bitLength) {\n                    let reversed = 0 \n                    for (let rtemp = code, j = 0; j < bitLength; ++j) {\n                        reversed = (reversed << 1) | (rtemp & 1)\n                        rtemp >>= 1\n                    }\n                    const value = (bitLength << 16) | i;\n                    for (let j = reversed; j < size; j += skip) table[j] = value\n                    ++code\n                }\n            }\n            ++bitLength\n            code <<= 1\n            skip <<= 1\n        }\n\n        return new Huffman(table, maxCodeLength, minCodeLength)\n    }\n}\n\nconst ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000\n\nclass RawInflate {\n    buffer: Uint8Array = new Uint8Array(0)\n    blocks: Uint8Array[] = []\n    currentLitlenTable?: Huffman\n    bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE\n    ip = 0\n    bitsbuf = 0\n    bitsbuflen = 0\n    output = new Uint8Array(this.bufferSize)\n    op = 0\n    bfinal = false\n\n    constructor(public input: Uint8Array) {\n    }\n\n    decompress() {\n        while (!this.bfinal) {\n            this.parseBlock()\n        }\n\n        return this.concatBufferDynamic()\n    }\n\n    static Order = new Uint16Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])\n    static LengthCodeTable = new Uint16Array([\n        0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b,\n        0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b,\n        0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3,\n        0x00e3, 0x0102, 0x0102, 0x0102\n    ])\n    static LengthExtraTable = new Uint8Array([\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,\n        5, 5, 0, 0, 0\n    ])\n    static DistCodeTable = new Uint16Array([\n        0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011,\n        0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181,\n        0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001,\n        0x3001, 0x4001, 0x6001\n    ])\n    static DistExtraTable = new Uint8Array([\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,\n        11, 12, 12, 13, 13\n    ])\n\n    static FixedLiteralLengthTable = (() => {\n        const lengths = new Uint8Array(288)\n        for (let i = 0, il = lengths.length; i < il; ++i) lengths[i] = (i <= 143) ? 8 : (i <= 255) ? 9 : (i <= 279) ? 7 : 8\n        return Huffman.buildHuffmanTable(lengths)\n    })()\n\n    static FixedDistanceTable = (() => {\n        const lengths = new Uint8Array(30)\n        for (let i = 0, il = lengths.length; i < il; ++i) lengths[i] = 5\n        return Huffman.buildHuffmanTable(lengths)\n    })()\n    \n    parseBlock() {\n        let hdr = this.readBits(3)\n        if (hdr & 0x1) this.bfinal = true\n        hdr >>>= 1\n        switch (hdr) {\n            case 0: this.parseUncompressedBlock(); break\n            case 1: this.parseFixedHuffmanBlock(); break\n            case 2: this.parseDynamicHuffmanBlock(); break\n            default: throw new Error(`unknown BTYPE: ${hdr}`)\n        }\n    }\n\n    readBits(length: number) {\n        let bitsbuf = this.bitsbuf\n        let bitsbuflen = this.bitsbuflen\n        const input = this.input\n        let ip = this.ip\n        const inputLength = input.length\n        if (ip + ((length - bitsbuflen + 7) >> 3) >= inputLength) throw new Error('input buffer is broken')\n        while (bitsbuflen < length) {\n            bitsbuf |= input[ip++] << bitsbuflen\n            bitsbuflen += 8\n        }\n        const octet = bitsbuf & ((1 << length) - 1)\n        bitsbuf >>>= length\n        bitsbuflen -= length\n    \n        this.bitsbuf = bitsbuf\n        this.bitsbuflen = bitsbuflen\n        this.ip = ip\n    \n        return octet\n    }\n    \n    readCodeByTable(table: Huffman) {\n        let bitsbuf = this.bitsbuf\n        let bitsbuflen = this.bitsbuflen\n        let ip = this.ip\n        const input = this.input\n        const inputLength = input.length\n        const codeTable = table.data\n        const maxCodeLength: number = table.max\n        while (bitsbuflen < maxCodeLength) {\n            if (ip >= inputLength) break\n            bitsbuf |= input[ip++] << bitsbuflen\n            bitsbuflen += 8\n        }\n        const codeWithLength = codeTable[bitsbuf & ((1 << maxCodeLength) - 1)]\n        const codeLength = codeWithLength >>> 16\n        if (codeLength > bitsbuflen) throw new Error(`invalid code length: ${codeLength}`)\n        this.bitsbuf = bitsbuf >> codeLength\n        this.bitsbuflen = bitsbuflen - codeLength\n        this.ip = ip\n        return codeWithLength & 0xffff\n    }\n    \n    parseUncompressedBlock() {\n        const input = this.input\n        let ip = this.ip\n        let output = this.output\n        let op = this.op\n        const inputLength = input.length\n        this.bitsbuf = 0\n        this.bitsbuflen = 0\n        if (ip + 1 >= inputLength) throw new Error('invalid uncompressed block header: LEN')\n        const len = input[ip++] | (input[ip++] << 8)\n        if (ip + 1 >= inputLength) throw new Error('invalid uncompressed block header: NLEN')\n        const nlen = input[ip++] | (input[ip++] << 8)\n        if (len === ~nlen) throw new Error('invalid uncompressed block header: length verify')\n        if (ip + len > input.length) throw new Error('input buffer is broken')\n        while (op + len > output.length) output = this.expandBufferAdaptive(2)\n        output.set(input.subarray(ip, ip + len), op)\n        op += len\n        ip += len\n        this.ip = ip\n        this.op = op\n        this.output = output\n    }\n    \n    parseFixedHuffmanBlock() {\n        this.decodeHuffmanAdaptive(RawInflate.FixedLiteralLengthTable, RawInflate.FixedDistanceTable);\n    }\n    \n    parseDynamicHuffmanBlock() {\n        const hlit = this.readBits(5) + 257;\n        const hdist = this.readBits(5) + 1;\n        const hclen = this.readBits(4) + 4;\n        const codeLengths = new Uint8Array(RawInflate.Order.length);\n        let prev = 0\n\n        for (let i = 0; i < hclen; ++i) codeLengths[RawInflate.Order[i]] = this.readBits(3)\n\n        const codeLengthsTable = Huffman.buildHuffmanTable(codeLengths);\n        const lengthTable = new Uint8Array(hlit + hdist)\n        for (let i = 0, il = hlit + hdist; i < il;) {\n            const code = this.readCodeByTable(codeLengthsTable);\n            switch (code) {\n                case 16: {\n                    let repeat = 3 + this.readBits(2)\n                    while (repeat--) lengthTable[i++] = prev\n                    break\n                }\n                case 17: {\n                    let repeat = 3 + this.readBits(3)\n                    while (repeat--) lengthTable[i++] = 0\n                    prev = 0\n                    break\n                }\n                case 18: {\n                    let repeat = 11 + this.readBits(7)\n                    while (repeat--) lengthTable[i++] = 0\n                    prev = 0\n                    break\n                }\n                default:\n                    lengthTable[i++] = code\n                    prev = code\n                    break\n            }\n        }\n    \n        const litlenTable = Huffman.buildHuffmanTable(lengthTable.subarray(0, hlit))\n        const distTable = Huffman.buildHuffmanTable(lengthTable.subarray(hlit))\n\n        this.decodeHuffmanAdaptive(litlenTable, distTable)\n    }\n    decodeHuffmanAdaptive(litlen: Huffman, dist: Huffman) {\n        let output = this.output\n        let op = this.op\n        let code = 0\n        let olength = output.length\n        this.currentLitlenTable = litlen\n        const lengthCodeTable = RawInflate.LengthCodeTable\n        const lengthExtraTable = RawInflate.LengthExtraTable\n        const distCodeTable = RawInflate.DistCodeTable\n        const distExtraTable = RawInflate.DistExtraTable\n\n        while ((code = this.readCodeByTable(litlen)) !== 256) {\n            if (code < 256) {\n                if (op >= olength) {\n                    output = this.expandBufferAdaptive()\n                    olength = output.length\n                }\n                output[op++] = code\n                continue\n            }\n    \n            const ti = code - 257\n            let codeLength = lengthCodeTable[ti]\n            if (lengthExtraTable[ti] > 0) codeLength += this.readBits(lengthExtraTable[ti])\n\n            code = this.readCodeByTable(dist)\n            let codeDist = distCodeTable[code]\n            if (distExtraTable[code] > 0) codeDist += this.readBits(distExtraTable[code])\n\n            if (op + codeLength > olength) {\n                output = this.expandBufferAdaptive()\n                olength = output.length\n            }\n\n            while (codeLength--) output[op] = output[(op++) - codeDist]\n        }\n    \n        while (this.bitsbuflen >= 8) {\n            this.bitsbuflen -= 8\n            this.ip--\n        }\n        this.op = op\n    }\n\n    expandBufferAdaptive(ratio: number = (this.input.length / this.ip + 1) | 0) {\n        const input = this.input;\n        const output = this.output;\n\n        let newSize: number\n        if (ratio < 2) {\n            const maxHuffCode = (input.length - this.ip) / this.currentLitlenTable!.min\n            const maxInflateSize = (maxHuffCode / 2 * 258) | 0\n            newSize = (maxInflateSize < output.length) ? (output.length + maxInflateSize) : (output.length << 1)\n        } else {\n            newSize = output.length * ratio;\n        }\n    \n        const buffer = new Uint8Array(newSize)\n        buffer.set(output)\n\n        this.output = buffer\n    \n        return this.output\n    }\n\n    concatBufferDynamic() {\n        let buffer;\n        const op = this.op;\n        buffer = this.output.subarray(0, op);\n        this.buffer = buffer;\n        return this.buffer;\n    }\n}\n\nexport function zlib_inflate_raw(data: Uint8Array): Uint8Array {\n    return new RawInflate(data).decompress()\n}\n", "\uFEFFimport {\n    Struct,\n    StructInteger64_l,\n    StructStructStringz, StructUInt16, StructUInt32, StructUInt8\n} from \"../global/struct\";\nimport {ArrayBufferUtils, PromiseFast} from \"../global/utils\";\nimport {AsyncStream, BaseAsyncStream, Stream} from \"../global/stream\";\nimport {Integer64} from \"../global/int64\";\nimport {zlib_inflate_raw} from \"./zlib\";\n\nconst CSO_MAGIC = 'CISO'\n\nclass Header extends Struct {\n    @StructStructStringz(4) magic: string = ''\n    @StructUInt32 headerSize: number = 0\n    @StructInteger64_l totalBytes: Integer64 = Integer64.ZERO\n    @StructUInt32 blockSize: number = 0;\n    @StructUInt8 version: number = 0\n    @StructUInt8 alignment: number = 0\n    @StructUInt16 reserved: number = 0\n\n    get numberOfBlocks() { return Math.floor(this.totalBytes.number / this.blockSize); }\n}\n\nclass Block {\n\tprivate _uncompressedData: Uint8Array|null = null;\n\tpublic compressedData: Uint8Array = new Uint8Array()\n\tpublic compressed: boolean;\n\tpublic low: number;\n\tpublic high: number;\n\t\n\tconstructor(public index:number, raw1:number, raw2:number) {\n\t\tthis.compressed = (raw1 & 0x80000000) == 0;\n\t\tthis.low = raw1 & 0x7FFFFFFF;\n\t\tthis.high = raw2 & 0x7FFFFFFF;\n\t}\n\t\n\tget uncompresesdData():Uint8Array {\n\t\tif (!this._uncompressedData) {\n\t\t\tif (this.compressed) {\n\t\t\t\tthis._uncompressedData = zlib_inflate_raw(this.compressedData);\n\t\t\t} else {\n\t\t\t\tthis._uncompressedData = this.compressedData; \n\t\t\t}\n\t\t}\n\t\treturn this._uncompressedData;\n\t}\n\t\n\tget size() {\n\t\treturn this.high - this.low;\n\t}\n\t\n\tstatic getBlocksUncompressedData(blocks: Block[]):Uint8Array {\n\t\treturn ArrayBufferUtils.concatU8(blocks.map(b => {\n\t\t\t//console.log('block', b.index, b.low, b.compressed);\n\t\t\treturn b.uncompresesdData;\n\t\t}));\n\t}\n}\n\nexport class Cso extends BaseAsyncStream {\n\tdate: Date = new Date();\n    // @ts-ignore\n    private stream: AsyncStream;\n    // @ts-ignore\n    private header: Header;\n    // @ts-ignore\n\tprivate offsets: Uint32Array;\n\t\n\tprivate getBlockInfo(index:number) {\n\t\treturn new Block(index, this.offsets[index + 0], this.offsets[index + 1]);\n\t}\n\n\tstatic fromStreamAsync(stream: AsyncStream) {\n        return new Cso().loadAsync(stream);\n    }\n\n\tget name() { return this.stream.name; }\n    get size() { return this.header.totalBytes.number; }\n\t\n\tprivate async readUncachedBlocksAsync(index: number, count:number): Promise<Block[]> {\n        const low = this.getBlockInfo(index).low;\n        const high = this.getBlockInfo(index + count - 1).high;\n        const data = await this.stream.readChunkAsync(low, high - low)\n        const chunks: Block[] = [];\n        for (let n = 0; n < count; n++) {\n            const chunk = this.getBlockInfo(index + n);\n            chunk.compressedData = new Uint8Array(data, chunk.low - low, chunk.size);\n            chunks.push(chunk);\n        }\n        return chunks;\n\t}\n\n\tasync readChunkPromiseAsync(offset: number, count: number): Promise<ArrayBuffer> {\n        const blockIndexLow = Math.floor(offset / this.header.blockSize);\n        const blockIndexHigh = Math.floor((offset + count - 1) / this.header.blockSize);\n        const blockCount = blockIndexHigh - blockIndexLow + 2;\n        //const skip = (this.header.blockSize - (offset % this.header.blockSize)) % this.header.blockSize;\n        const skip = offset % this.header.blockSize;\n\n        //console.log('reading: ', offset, count, 'blocks:', blockIndexLow, blockIndexHigh, blockCount, 'skip:', skip);\n\n        const blocks = await this.readUncachedBlocksAsync(blockIndexLow, blockCount)\n\t\t\n        return ArrayBufferUtils.copyUint8ToArrayBuffer(Block.getBlocksUncompressedData(blocks).subarray(skip, skip + count));\n    }\n\n    private async loadAsync(stream: AsyncStream) {\n\t\tthis.stream = stream;\n\t\tthis.date = stream.date;\n\n        let buffer = await stream.readChunkAsync(0, Header.struct.length);\n        const header = this.header = Header.struct.read(Stream.fromArrayBuffer(buffer));\n        if (header.magic != CSO_MAGIC) throw ('Not a CSO file');\n        const buffer2 = await stream.readChunkAsync(Header.struct.length, (header.numberOfBlocks + 1) * 4)\n        this.offsets = new Uint32Array(buffer2);\n        return this;\n    }\n}\n", "\uFEFFimport \"../emu/global\"\nimport {Int32, Struct, StructArray, StructClass, StructInt32, StructStructArray} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\n\nenum PbpMagic {\n    expected = 0x50425000,\n}\n\nclass PbpHeader extends Struct {\n    @StructInt32 magic: PbpMagic = 0\n    @StructInt32 version: number = 0\n    @StructStructArray(Int32, 8) offsets: number[] = []\n}\n\nexport class Names {\n    static ParamSfo = \"param.sfo\";\n    static Icon0Png = \"icon0.png\";\n    static Icon1Pmf = \"icon1.pmf\";\n    static Pic0Png = \"pic0.png\";\n    static Pic1Png = \"pic1.png\";\n    static Snd0At3 = \"snd0.at3\";\n    static PspData = \"psp.data\";\n    static PsarData = \"psar.data\";\n}\n\nexport const PbpNames = Names\n\nexport class Pbp {\n    // @ts-ignore\n    private header: PbpHeader\n    // @ts-ignore\n    private stream: Stream\n\n    private static names = [Names.ParamSfo, Names.Icon0Png, Names.Icon1Pmf, Names.Pic0Png, Names.Pic1Png, Names.Snd0At3, Names.PspData, Names.PsarData];\n\n    constructor() {\n    }\n\n    static fromStream(stream: Stream) {\n        const pbp = new Pbp();\n        pbp.load(stream);\n        return pbp;\n    }\n\n    load(stream: Stream) {\n        this.stream = stream;\n        this.header = PbpHeader.struct.read(stream);\n        if (this.header.magic != PbpMagic.expected) throw(\"Not a PBP file\");\n        this.header.offsets.push(stream.length);\n    }\n\n    get(name: string): Stream {\n        const index = Pbp.names.indexOf(name);\n        return this.getByIndex(index);\n    }\n\n    getByIndex(index: number): Stream {\n        const offsets = this.header.offsets;\n        return this.stream.sliceWithLowHigh(offsets[index + 0], offsets[index + 1]);\n    }\n}\n", "\uFEFFimport \"../../emu/global\"\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n// Lookup tables\nconst SBOX = new Uint8Array(256);\nconst INV_SBOX = new Uint8Array(256);\nconst SUB_MIX_0 = new Uint32Array(256);\nconst SUB_MIX_1 = new Uint32Array(256);\nconst SUB_MIX_2 = new Uint32Array(256);\nconst SUB_MIX_3 = new Uint32Array(256);\nconst INV_SUB_MIX_0 = new Uint32Array(256);\nconst INV_SUB_MIX_1 = new Uint32Array(256);\nconst INV_SUB_MIX_2 = new Uint32Array(256);\nconst INV_SUB_MIX_3 = new Uint32Array(256);\n\n// Compute lookup tables\n(function () {\n\t// Compute double table\n    const d: number[] = [];\n    for (let i = 0; i < 256; i++) {\n\t\td[i] = (i << 1);\n\t\tif (i >= 128) d[i] ^= 0x11b;\n\t}\n\n\t// Walk GF(2^8)\n    let x = 0;\n    let xi = 0;\n    for (let i = 0; i < 256; i++) {\n\t\t// Compute sbox\n        let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t\tSBOX[x] = sx;\n\t\tINV_SBOX[sx] = x;\n\n\t\t// Compute multiplication\n        const x2 = d[x];\n        const x4 = d[x2];\n        const x8 = d[x4];\n\n        // Compute sub bytes, mix columns tables\n        let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n        SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t\tSUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t\tSUB_MIX_2[x] = (t << 8) | (t >>> 24);\n\t\tSUB_MIX_3[x] = (t << 0);\n\n\t\t// Compute inv sub bytes, inv mix columns tables\n        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n        INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t\tINV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t\tINV_SUB_MIX_2[sx] = (t << 8) | (t >>> 24);\n\t\tINV_SUB_MIX_3[sx] = (t << 0);\n\n\t\t// Compute next counter\n\t\tif (!x) {\n\t\t\tx = xi = 1;\n\t\t} else {\n\t\t\tx = x2 ^ d[d[d[x8 ^ x2]]];\n\t\t\txi ^= d[d[xi]];\n\t\t}\n\t}\n} ());\n\n// Precomputed Rcon lookup\nconst RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n/**\n * AES block cipher algorithm.\n */\nexport class AES {\n\tprivate _key = new Uint32Array([0, 0, 0, 0]);\n\tprivate _nRounds = -1;\n\tprivate _keySchedule:number[] = [];\n\tprivate _invKeySchedule:number[] = [];\n\n\tconstructor(key: Uint8Array) {\n\t\t//this.keySize = key.length / 8;\n\t\tthis._key = uint8array_to_words(key);\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\t// Shortcuts\n        const key = this._key;\n        const keyWords = key;\n        const keySize = key.length; // number of words\n\n        const nRounds = this._nRounds = keySize + 6; // Compute number of rounds\n        const ksRows = (nRounds + 1) * 4; // Compute number of key schedule rows\n        const keySchedule: number[] = this._keySchedule = []; // Compute key schedule\n\n\t\tfor (let ksRow = 0; ksRow < ksRows; ksRow++) {\n\t\t\tif (ksRow < keySize) {\n\t\t\t\tkeySchedule[ksRow] = keyWords[ksRow];\n\t\t\t} else {\n\t\t\t\tlet t = keySchedule[ksRow - 1];\n\n\t\t\t\tif (!(ksRow % keySize)) {\n\t\t\t\t\tt = (t << 8) | (t >>> 24); // Rot word\n\t\t\t\t\tt = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff]; // Sub word\n\t\t\t\t\tt ^= RCON[(ksRow / keySize) | 0] << 24; // Mix Rcon\n\t\t\t\t} else if (keySize > 6 && ksRow % keySize == 4) {\n\t\t\t\t\tt = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff]; // Sub word\n\t\t\t\t}\n\n\t\t\t\tkeySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t\t\t}\n\t\t}\n\n\t\t// Compute inv key schedule\n        const invKeySchedule: number[] = this._invKeySchedule = [];\n        for (let invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n            const ksRow = ksRows - invKsRow;\n            let t\n\n            if (invKsRow % 4) {\n\t\t\t\tt = keySchedule[ksRow];\n\t\t\t} else {\n\t\t\t\tt = keySchedule[ksRow - 4];\n\t\t\t}\n\n\t\t\tif (invKsRow < 4 || ksRow <= 4) {\n\t\t\t\tinvKeySchedule[invKsRow] = t;\n\t\t\t} else {\n\t\t\t\tinvKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t\t\t\tINV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t\t\t}\n\t\t}\n\t}\n\n\tencryptBlock(M: Uint8Array, offset: number) {\n\t\tthis._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t}\n\n\tdecryptBlock(M:Uint32Array, offset: number) {\n\t\t// Swap 2nd and 4th rows\n        {\n            let t = M[offset + 1];\n            M[offset + 1] = M[offset + 3];\n            M[offset + 3] = t;\n        }\n\n\t\tthis._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t\t// Inv swap 2nd and 4th rows\n        {\n            let t = M[offset + 1];\n            M[offset + 1] = M[offset + 3];\n            M[offset + 3] = t;\n        }\n\t}\n\n\tprivate _doCryptBlock(M:Uint32Array|Uint8Array, offset:number, keySchedule:number[], SUB_MIX_0:Uint32Array, SUB_MIX_1:Uint32Array, SUB_MIX_2:Uint32Array, SUB_MIX_3:Uint32Array, SBOX:Uint32Array|Uint8Array) {\n        const nRounds = this._nRounds;\n\n        let s0 = M[offset + 0] ^ keySchedule[0];\n        let s1 = M[offset + 1] ^ keySchedule[1];\n        let s2 = M[offset + 2] ^ keySchedule[2];\n        let s3 = M[offset + 3] ^ keySchedule[3];\n\n        // Key schedule row counter\n        let ksRow = 4;\n\n        // Rounds\n\t\tfor (let round = 1; round < nRounds; round++) {\n\t\t\t// Shift rows, sub bytes, mix columns, add round key\n\t\t\tconst t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[(s3 >>> 0) & 0xff] ^ keySchedule[ksRow++];\n            const t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[(s0 >>> 0) & 0xff] ^ keySchedule[ksRow++];\n            const t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[(s1 >>> 0) & 0xff] ^ keySchedule[ksRow++];\n            const t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[(s2 >>> 0) & 0xff] ^ keySchedule[ksRow++];\n\n\t\t\t// Update state\n\t\t\ts0 = t0;\n\t\t\ts1 = t1;\n\t\t\ts2 = t2;\n\t\t\ts3 = t3;\n\t\t}\n\n        {\n            // Shift rows, sub bytes, add round key\n            const t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[(s3 >>> 0) & 0xff]) ^ keySchedule[ksRow++];\n            const t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[(s0 >>> 0) & 0xff]) ^ keySchedule[ksRow++];\n            const t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[(s1 >>> 0) & 0xff]) ^ keySchedule[ksRow++];\n            const t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[(s2 >>> 0) & 0xff]) ^ keySchedule[ksRow++];\n\n            // Set output\n            M[offset + 0] = t0;\n            M[offset + 1] = t1;\n            M[offset + 2] = t2;\n            M[offset + 3] = t3;\n        }\n\t}\n}\n\nfunction swap32(v:number) {\n\treturn ((v & 0xFF) << 24) | ((v & 0xFF00) << 8) | ((v >> 8) & 0xFF00) | ((v >> 24) & 0xFF);\n}\n\nfunction uint8array_to_words(key: Uint8Array):Uint32Array {\n    const temp = new Uint32Array(key.buffer, key.byteOffset, key.length / 4);\n    const words = new Uint32Array(key.length / 4);\n    for (let n = 0; n < words.length; n++) words[n] = swap32(temp[n]);\n\treturn words;\n}\n\nfunction words_to_uint8array(words: Uint32Array) {\n    const out = new Uint8Array(words.length * 4);\n    const out2 = new Uint32Array(out.buffer);\n    for (let n = 0; n < words.length; n++) out2[n] = swap32(words[n]);\n\treturn out;\n}\n\nexport function decrypt_aes128_cbc(data: Uint8Array, key: Uint8Array) {\n    const aes = new AES(key);\n    const words = uint8array_to_words(data);\n    const wordsLength = words.length;\n\n    let t0 = 0, t1 = 0, t2 = 0, t3 = 0;\n    let s0 = 0, s1 = 0, s2 = 0, s3 = 0;\n\n    for (let n = 0; n < wordsLength; n += 4) {\n\t\tt0 = words[n + 0];\n\t\tt1 = words[n + 1];\n\t\tt2 = words[n + 2];\n\t\tt3 = words[n + 3];\n\n\t\taes.decryptBlock(words, n);\n\n\t\twords[n + 0] ^= s0;\n\t\twords[n + 1] ^= s1;\n\t\twords[n + 2] ^= s2;\n\t\twords[n + 3] ^= s3;\n\n\t\ts0 = t0;\n\t\ts1 = t1;\n\t\ts2 = t2;\n\t\ts3 = t3;\n\t}\n\treturn words_to_uint8array(words);\n}\n", "\uFEFFimport \"../../emu/global\"\nimport {decrypt_aes128_cbc} from \"./jsaes2\";\n\nfunction cryptoToArray(info: { words:Uint32Array }) {\n    const words = info.words;\n    const wordsLen = words.length;\n    const data = new Uint8Array(wordsLen * 4);\n    let m = 0;\n    for (let n = 0; n < wordsLen; n++) {\n\t\tdata[m++] = (words[n] >>> 24) & 0xFF;\n\t\tdata[m++] = (words[n] >>> 16) & 0xFF;\n\t\tdata[m++] = (words[n] >>>  8) & 0xFF;\n\t\tdata[m++] = (words[n] >>>  0) & 0xFF;\n\t}\n\treturn data;\n}\n\n/*\nfunction fromCryptoArray(uint8View: Uint8Array) {\n\treturn CryptoJS.lib.WordArray.create(uint8View);\n}\n*/\n\nfunction ab2str(buf: Uint8Array) {\n    // @ts-ignore\n\treturn String.fromUint8Array(buf);\n}\n\nfunction ab2hex(buf: Uint8Array) {\n    const parts: string[] = [];\n    for (let n = 0; n < buf.length; n++) {\n        let chunk = buf[n].toString(16);\n        while (chunk.length < 2) chunk = `0${chunk}`;\n\t\tparts.push(chunk);\n\t}\n\treturn parts.join('')\n}\n\nfunction str2ab(str:string) {\n    const bufView = new Uint8Array(str.length);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n\t\tbufView[i] = str.charCodeAt(i);\n\t}\n\treturn bufView;\n}\n\n/*\nexport function md5(data: Uint8Array) {\n\treturn cryptoToArray(CryptoJS.MD5(fromCryptoArray(data)));\n}\n\nexport function sha1(data: Uint8Array) {\n\treturn cryptoToArray(CryptoJS.SHA1(fromCryptoArray(data)));\n}\n\nexport function aes_encrypt(data: Uint8Array, key: Uint8Array, iv?: Uint8Array) {\n\tconst info = { mode: CryptoJS.mode.CFB, padding: CryptoJS.pad.AnsiX923 };\n\tif (iv !== undefined) info['iv'] = fromCryptoArray(iv);\n\treturn cryptoToArray(CryptoJS.AES.encrypt(fromCryptoArray(data), fromCryptoArray(key), info));\n}\n*/\n\nfunction uint8array_to_array32(data: Uint8Array) {\n    const data2 = new Uint32Array(data.buffer);\n    const out = new Array(data2.length / 4);\n    for (let n = 0; n < data2.length; n++) {\n\t\tout[n] = data2[n];\n\t\t//if (out[n] & 0x80) out[n] |= ~0xFF;\n\t}\n\treturn out;\n}\n\nfunction uint8array_to_array8(data: Uint8Array) {\n    const out = new Array(data.length / 4);\n    for (let n = 0; n < data.length; n++) {\n\t\tout[n] = data[n];\n\t\t//if (out[n] & 0x80) out[n] |= ~0xFF;\n\t}\n\treturn out;\n}\n\nfunction array_to_uint8array(data: number[]) {\n    const out = new Uint8Array(data.length);\n    for (let n = 0; n < data.length; n++) out[n] = data[n];\n\treturn out;\n}\n\n\nfunction pad_PKCS7(array: number[], padding: number) {\n    const left = (padding - (array.length % padding)) % padding;\n    for (let n = 0; n < left; n++) array.push(left);\n\treturn array;\n}\n\nfunction pad_Zero(array: number[], padding: number) {\n    const left = (padding - (array.length % padding)) % padding;\n    for (let n = 0; n < left; n++) array.push(0);\n\treturn array;\n}\n\nfunction cbc(data: Uint8Array, iv: Uint8Array) {\n\tfor (let m = 0; m < 16; m++) data[m] ^= iv[m];\n\tfor (let n = 16; n < data.length; n += 16) {\n\t\tfor (let m = 0; m < 16; m++) {\n\t\t\tdata[n + m] ^= data[n + m - 16];\n\t\t}\n\t}\n}\n\nexport function aes_decrypt(data: Uint8Array, key: Uint8Array, iv?: Uint8Array) {\n    const keyLength = key.length;\n\n    if (iv === undefined) iv = new Uint8Array(keyLength);\n\n\t//return jsaes.Decrypt_Blocks_CBC(data, key, iv);\n\treturn decrypt_aes128_cbc(data, key);\n}\n", "\uFEFFimport \"../../emu/global\"\n\nimport {\n    GetStruct,\n    Int32,\n    Struct,\n    StructArray,\n    StructClass,\n    StructEntry,\n    StructInt32, StructStructArray, StructUInt32, StructUInt8,\n    UInt32,\n    UInt8\n} from \"../../global/struct\";\nimport {Stream} from \"../../global/stream\";\nimport {aes_decrypt} from \"./crypto\";\n\nconst kirk1_key = new Uint8Array([0x98, 0xC9, 0x40, 0x97, 0x5C, 0x1D, 0x10, 0xE8, 0x7F, 0xE6, 0x0E, 0xA3, 0xFD, 0x03, 0xA8, 0xBA]);\nconst kirk16_key = new Uint8Array([0x47, 0x5E, 0x09, 0xF4, 0xA2, 0x37, 0xDA, 0x9B, 0xEF, 0xFF, 0x3B, 0xC0, 0x77, 0x14, 0x3D, 0x8A]);\n\nconst kirk7_keys: { [k:number]:Uint8Array } = {\n\t0x02: new Uint8Array([0xB8, 0x13, 0xC3, 0x5E, 0xC6, 0x44, 0x41, 0xE3, 0xDC, 0x3C, 0x16, 0xF5, 0xB4, 0x5E, 0x64, 0x84]), // New from PS3\n\t0x03: new Uint8Array([0x98, 0x02, 0xC4, 0xE6, 0xEC, 0x9E, 0x9E, 0x2F, 0xFC, 0x63, 0x4C, 0xE4, 0x2F, 0xBB, 0x46, 0x68]),\n\t0x04: new Uint8Array([0x99, 0x24, 0x4C, 0xD2, 0x58, 0xF5, 0x1B, 0xCB, 0xB0, 0x61, 0x9C, 0xA7, 0x38, 0x30, 0x07, 0x5F]),\n\t0x05: new Uint8Array([0x02, 0x25, 0xD7, 0xBA, 0x63, 0xEC, 0xB9, 0x4A, 0x9D, 0x23, 0x76, 0x01, 0xB3, 0xF6, 0xAC, 0x17]),\n\t0x07: new Uint8Array([0x76, 0x36, 0x8B, 0x43, 0x8F, 0x77, 0xD8, 0x7E, 0xFE, 0x5F, 0xB6, 0x11, 0x59, 0x39, 0x88, 0x5C]), // New from PS3\n\t0x0C: new Uint8Array([0x84, 0x85, 0xC8, 0x48, 0x75, 0x08, 0x43, 0xBC, 0x9B, 0x9A, 0xEC, 0xA7, 0x9C, 0x7F, 0x60, 0x18]),\n\t0x0D: new Uint8Array([0xB5, 0xB1, 0x6E, 0xDE, 0x23, 0xA9, 0x7B, 0x0E, 0xA1, 0x7C, 0xDB, 0xA2, 0xDC, 0xDE, 0xC4, 0x6E]),\n\t0x0E: new Uint8Array([0xC8, 0x71, 0xFD, 0xB3, 0xBC, 0xC5, 0xD2, 0xF2, 0xE2, 0xD7, 0x72, 0x9D, 0xDF, 0x82, 0x68, 0x82]),\n\t0x0F: new Uint8Array([0x0A, 0xBB, 0x33, 0x6C, 0x96, 0xD4, 0xCD, 0xD8, 0xCB, 0x5F, 0x4B, 0xE0, 0xBA, 0xDB, 0x9E, 0x03]),\n\t0x10: new Uint8Array([0x32, 0x29, 0x5B, 0xD5, 0xEA, 0xF7, 0xA3, 0x42, 0x16, 0xC8, 0x8E, 0x48, 0xFF, 0x50, 0xD3, 0x71]),\n\t0x11: new Uint8Array([0x46, 0xF2, 0x5E, 0x8E, 0x4D, 0x2A, 0xA5, 0x40, 0x73, 0x0B, 0xC4, 0x6E, 0x47, 0xEE, 0x6F, 0x0A]),\n\t0x12: new Uint8Array([0x5D, 0xC7, 0x11, 0x39, 0xD0, 0x19, 0x38, 0xBC, 0x02, 0x7F, 0xDD, 0xDC, 0xB0, 0x83, 0x7D, 0x9D]),\n\t0x38: new Uint8Array([0x12, 0x46, 0x8D, 0x7E, 0x1C, 0x42, 0x20, 0x9B, 0xBA, 0x54, 0x26, 0x83, 0x5E, 0xB0, 0x33, 0x03]),\n\t0x39: new Uint8Array([0xC4, 0x3B, 0xB6, 0xD6, 0x53, 0xEE, 0x67, 0x49, 0x3E, 0xA9, 0x5F, 0xBC, 0x0C, 0xED, 0x6F, 0x8A]),\n\t0x3A: new Uint8Array([0x2C, 0xC3, 0xCF, 0x8C, 0x28, 0x78, 0xA5, 0xA6, 0x63, 0xE2, 0xAF, 0x2D, 0x71, 0x5E, 0x86, 0xBA]),\n\t0x44: new Uint8Array([0x7D, 0xF4, 0x92, 0x65, 0xE3, 0xFA, 0xD6, 0x78, 0xD6, 0xFE, 0x78, 0xAD, 0xBB, 0x3D, 0xFB, 0x63]), // New from PS3\n\t0x4B: new Uint8Array([0x0C, 0xFD, 0x67, 0x9A, 0xF9, 0xB4, 0x72, 0x4F, 0xD7, 0x8D, 0xD6, 0xE9, 0x96, 0x42, 0x28, 0x8B]), // 1.xx game eboot.bin\n\t0x53: new Uint8Array([0xAF, 0xFE, 0x8E, 0xB1, 0x3D, 0xD1, 0x7E, 0xD8, 0x0A, 0x61, 0x24, 0x1C, 0x95, 0x92, 0x56, 0xB6]),\n\t0x57: new Uint8Array([0x1C, 0x9B, 0xC4, 0x90, 0xE3, 0x06, 0x64, 0x81, 0xFA, 0x59, 0xFD, 0xB6, 0x00, 0xBB, 0x28, 0x70]),\n\t0x5D: new Uint8Array([0x11, 0x5A, 0x5D, 0x20, 0xD5, 0x3A, 0x8D, 0xD3, 0x9C, 0xC5, 0xAF, 0x41, 0x0F, 0x0F, 0x18, 0x6F]),\n\t0x63: new Uint8Array([0x9C, 0x9B, 0x13, 0x72, 0xF8, 0xC6, 0x40, 0xCF, 0x1C, 0x62, 0xF5, 0xD5, 0x92, 0xDD, 0xB5, 0x82]),\n\t0x64: new Uint8Array([0x03, 0xB3, 0x02, 0xE8, 0x5F, 0xF3, 0x81, 0xB1, 0x3B, 0x8D, 0xAA, 0x2A, 0x90, 0xFF, 0x5E, 0x61]),\n};\n\n\n// ECC Curves for Kirk 1 and Kirk 0x11\n// Common Curve paramters p and a\nconst ec_p = new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF ]);\nconst ec_a = new Uint8Array([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC ]); // mon\n\n// Kirk 0xC,0xD,0x10,0x11,(likely 0x12)- Unique curve parameters for b, N, and base point G for Kirk 0xC,0xD,0x10,0x11,(likely 0x12) service\n// Since public key is variable, it is not specified here\nconst ec_b2 = new Uint8Array([0xA6, 0x8B, 0xED, 0xC3, 0x34, 0x18, 0x02, 0x9C, 0x1D, 0x3C, 0xE3, 0x3B, 0x9A, 0x32, 0x1F, 0xCC, 0xBB, 0x9E, 0x0F, 0x0B]);// mon\nconst ec_N2 = new Uint8Array([0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xB5, 0xAE, 0x3C, 0x52, 0x3E, 0x63, 0x94, 0x4F, 0x21, 0x27]);\nconst Gx2 = new Uint8Array([0x12, 0x8E, 0xC4, 0x25, 0x64, 0x87, 0xFD, 0x8F, 0xDF, 0x64, 0xE2, 0x43, 0x7B, 0xC0, 0xA1, 0xF6, 0xD5, 0xAF, 0xDE, 0x2C]);\nconst Gy2 = new Uint8Array([0x59, 0x58, 0x55, 0x7E, 0xB1, 0xDB, 0x00, 0x12, 0x60, 0x42, 0x55, 0x24, 0xDB, 0xC3, 0x79, 0xD5, 0xAC, 0x5F, 0x4A, 0xDF ]);\n\n// KIRK 1 - Unique curve parameters for b, N, and base point G\n// Since public key is hard coded, it is also included\n\nconst ec_b1 = new Uint8Array([0x65, 0xD1, 0x48, 0x8C, 0x03, 0x59, 0xE2, 0x34, 0xAD, 0xC9, 0x5B, 0xD3, 0x90, 0x80, 0x14, 0xBD, 0x91, 0xA5, 0x25, 0xF9]);\nconst ec_N1 = new Uint8Array([0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0xB5, 0xC6, 0x17, 0xF2, 0x90, 0xEA, 0xE1, 0xDB, 0xAD, 0x8F]);\nconst Gx1 = new Uint8Array([0x22, 0x59, 0xAC, 0xEE, 0x15, 0x48, 0x9C, 0xB0, 0x96, 0xA8, 0x82, 0xF0, 0xAE, 0x1C, 0xF9, 0xFD, 0x8E, 0xE5, 0xF8, 0xFA]);\nconst Gy1 = new Uint8Array([0x60, 0x43, 0x58, 0x45, 0x6D, 0x0A, 0x1C, 0xB2, 0x90, 0x8D, 0xE9, 0x0F, 0x27, 0xD7, 0x5C, 0x82, 0xBE, 0xC1, 0x08, 0xC0]);\nconst Px1 = new Uint8Array([0xED, 0x9C, 0xE5, 0x82, 0x34, 0xE6, 0x1A, 0x53, 0xC6, 0x85, 0xD6, 0x4D, 0x51, 0xD0, 0x23, 0x6B, 0xC3, 0xB5, 0xD4, 0xB9]);\nconst Py1 = new Uint8Array([0x04, 0x9D, 0xF1, 0xA0, 0x75, 0xC0, 0xE0, 0x4F, 0xB3, 0x44, 0x85, 0x8B, 0x61, 0xB7, 0x9B, 0x69, 0xA6, 0x3D, 0x2C, 0x39 ]);\n\n// ------------------------- KEY VAULT END -------------------------\n\n// ------------------------- INTERNAL STUFF -------------------------\n\nexport class KIRK_AES128CBC_HEADER extends Struct {\n\t@StructInt32 mode = KirkMode.Invalid0;\n    @StructInt32 unk_4 = 0;\n    @StructInt32 unk_8 = 0\n    @StructInt32 keyseed = 0;\n    @StructInt32 data_size = 0;\n}\n\nexport class AES128CMACHeader extends Struct { // SIZE: 0090\n\t@StructStructArray(UInt8, 16) AES_key: number[] = []\n    @StructStructArray(UInt8, 16) CMAC_key: number[] = []\n    @StructStructArray(UInt8, 16) CMAC_header_hash: number[] = []\n    @StructStructArray(UInt8, 16) CMAC_data_hash: number[] = []\n    @StructStructArray(UInt8, 32) Unknown1: number[] = []\n\t@StructUInt8 Mode: KirkMode = 0\n    @StructUInt8 UseECDSAhash: number = 0\n\t@StructStructArray(UInt8, 14) Unknown2: number[] = []\n\t@StructUInt32 DataSize: number = 0\n    @StructUInt32 DataOffset: number = 0\n    @StructStructArray(UInt8, 8) Unknown3: number[] = []\n    @StructStructArray(UInt8, 16) Unknown4: number[] = []\n}\n\n//interface KIRK_CMD1_HEADER\n//{\n//\t/*\n//\tu8  AES_key[16];            //0\n//\tu8  CMAC_key[16];           //10\n//\tu8  CMAC_header_hash[16];   //20\n//\tu8  CMAC_data_hash[16];     //30\n//\tu8  unused[32];             //40\n//\tu32 mode;                   //60\n//\tu8  ecdsa_hash;             //64\n//\tu8  unk3[11];               //65\n//\tu32 data_size;              //70\n//\tu32 data_offset;            //74  \n//\tu8  unk4[8];                //78\n//\tu8  unk5[16];               //80\n//\t//0x90\n//\t*/\n//}\n//\n////typedef struct blah\n////{\n////  u8 fuseid[8]; //0\n////  u8 mesh[0x40];  //0x8\n////} kirk16_data; //0x48\n//// \n////typedef struct header_keys\n////{\n////  u8 AES[16];\n////  u8 CMAC[16];\n////} header_keys;  //small struct for temporary keeping AES & CMAC key from CMD1 header\n////\n////\n////u32 g_fuse90;  // This is to match FuseID HW at BC100090 and BC100094\n////u32 g_fuse94;\n////\n////AES_ctx aes_kirk1; //global\n//const PRNG_DATA = new Uint8Array(0x14);\n//\n//const is_kirk_initialized:number; //\"init\" emulation\n//\n///* ------------------------- INTERNAL STUFF END ------------------------- */\n//\n//\n///* ------------------------- IMPLEMENTATION ------------------------- */\n//\n//function kirk_CMD0(outbuff: Uint8Array, inbuff: Uint8Array, size: number, generate_trash: number)\n//{\n//\tKIRK_CMD1_HEADER * header = (KIRK_CMD1_HEADER*) outbuff;\n//\theader_keys * keys = (header_keys *) outbuff; //0-15 AES key, 16-31 CMAC key\n//\tconst chk_size = 0;\n//\tAES_ctx k1;\n//\tAES_ctx cmac_key;\n//\tu8 cmac_header_hash[16];\n//\tu8 cmac_data_hash[16];\n//\n//\tif (is_kirk_initialized == 0) return KIRK_NOT_INITIALIZED;\n//\n//\tmemcpy(outbuff, inbuff, size);\n//\n//\tif (header- > mode != KIRK_MODE_CMD1) return KIRK_INVALID_MODE;\n//\n//\t//FILL PREDATA WITH RANDOM DATA\n//\tif (generate_trash) kirk_CMD14(outbuff + sizeof(KIRK_CMD1_HEADER), header- > data_offset);\n//\n//\t//Make sure data is 16 aligned\n//\tchk_size = header- > data_size;\n//\tif (chk_size % 16) chk_size += 16 - (chk_size % 16);\n//\n//\t//ENCRYPT DATA\n//\tAES_set_key(&k1, keys- > AES, 128);\n//\tAES_cbc_encrypt(&k1, inbuff + sizeof(KIRK_CMD1_HEADER) + header- > data_offset, (u8*) outbuff + sizeof(KIRK_CMD1_HEADER) + header- > data_offset, chk_size);\n//\n//\t//CMAC HASHES\n//\tAES_set_key(&cmac_key, keys- > CMAC, 128);\n//\tAES_CMAC(&cmac_key, outbuff + 0x60, 0x30, cmac_header_hash);\n//\tAES_CMAC(&cmac_key, outbuff + 0x60, 0x30 + chk_size + header- > data_offset, cmac_data_hash);\n//\n//\tmemcpy(header- > CMAC_header_hash, cmac_header_hash, 16);\n//\tmemcpy(header- > CMAC_data_hash, cmac_data_hash, 16);\n//\n//\t//ENCRYPT KEYS\n//\tAES_cbc_encrypt(&aes_kirk1, inbuff, outbuff, 16 * 2);\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//function kirk_CMD1(u8 * outbuff, u8 * inbuff, int size)\n//{\n//\tKIRK_CMD1_HEADER * header = (KIRK_CMD1_HEADER*) inbuff;\n//  header_keys keys; //0-15 AES key, 16-31 CMAC key\n//  AES_ctx k1;\n//\n//\tif (size < 0x90) return KIRK_INVALID_SIZE;\n//\tif (is_kirk_initialized == 0) return KIRK_NOT_INITIALIZED;\n//\tif (header- > mode != KIRK_MODE_CMD1) return KIRK_INVALID_MODE;\n//\n//\tAES_cbc_decrypt(&aes_kirk1, inbuff, (u8*) & keys, 16 * 2); //decrypt AES & CMAC key to temp buffer\n//\n//\tif (header- > ecdsa_hash == 1) {\n//        SHA_CTX sha;\n//\t\tKIRK_CMD1_ECDSA_HEADER * eheader = (KIRK_CMD1_ECDSA_HEADER*) inbuff;\n//        u8 kirk1_pub[40];\n//        u8 header_hash[20];u8 data_hash[20];\n//\t\tecdsa_set_curve(ec_p, ec_a, ec_b1, ec_N1, Gx1, Gy1);\n//\t\tmemcpy(kirk1_pub, Px1, 20);\n//\t\tmemcpy(kirk1_pub + 20, Py1, 20);\n//\t\tecdsa_set_pub(kirk1_pub);\n//\t\t//Hash the Header\n//\t\tSHAInit(&sha);\n//\t\tSHAUpdate(&sha, (u8*) eheader + 0x60, 0x30);\n//\t\tSHAFinal(header_hash, &sha);\n//\n//\t\tif (!ecdsa_verify(header_hash,eheader- > header_sig_r,eheader- > header_sig_s)) {\n//\t\t\treturn KIRK_HEADER_HASH_INVALID;\n//\t\t}\n//\t\tSHAInit(&sha);\n//\t\tSHAUpdate(&sha, (u8*) eheader + 0x60, size - 0x60);\n//\t\tSHAFinal(data_hash, &sha);\n//\n//\t\tif (!ecdsa_verify(data_hash,eheader- > data_sig_r,eheader- > data_sig_s)) {\n//\t\t\treturn KIRK_DATA_HASH_INVALID;\n//\t\t}\n//\n//\t} else {\n//    int ret = kirk_CMD10(inbuff, size);\n//\t\tif (ret != KIRK_OPERATION_SUCCESS) return ret;\n//\t}\n//\n//\tAES_set_key(&k1, keys.AES, 128);\n//\tAES_cbc_decrypt(&k1, inbuff + sizeof(KIRK_CMD1_HEADER) + header- > data_offset, outbuff, header- > data_size);\n//\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//function kirk_CMD4(u8 * outbuff, u8 * inbuff, int size)\n//{\n//\tKIRK_AES128CBC_HEADER * header = (KIRK_AES128CBC_HEADER*) inbuff;\n//\tu8 * key;\n//  AES_ctx aesKey;\n//\n//\tif (is_kirk_initialized == 0) return KIRK_NOT_INITIALIZED;\n//\tif (header- > mode != KIRK_MODE_ENCRYPT_CBC) return KIRK_INVALID_MODE;\n//\tif (header- > data_size == 0) return KIRK_DATA_SIZE_ZERO;\n//\n//\tkey = kirk_4_7_get_key(header- > keyseed);\n//  if(key == (u8*)KIRK_INVALID_SIZE) return KIRK_INVALID_SIZE;\n//\n//\t//Set the key\n//\tAES_set_key(&aesKey, key, 128);\n//\tAES_cbc_encrypt(&aesKey, inbuff + sizeof(KIRK_AES128CBC_HEADER), outbuff + sizeof(KIRK_AES128CBC_HEADER), size);\n//\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n\n//\n//function kirk_CMD10(u8 * inbuff, int insize)\n//{\n//\tKIRK_CMD1_HEADER * header = (KIRK_CMD1_HEADER*) inbuff;\n//  header_keys keys; //0-15 AES key, 16-31 CMAC key\n//  u8 cmac_header_hash[16];\n//  u8 cmac_data_hash[16];\n//  AES_ctx cmac_key;\n//  int chk_size;\n//\n//\tif (is_kirk_initialized == 0) return KIRK_NOT_INITIALIZED;\n//\tif (!(header- > mode == KIRK_MODE_CMD1 || header- > mode == KIRK_MODE_CMD2 || header- > mode == KIRK_MODE_CMD3)) return KIRK_INVALID_MODE;\n//\tif (header- > data_size == 0) return KIRK_DATA_SIZE_ZERO;\n//\n//\tif (header- > mode == KIRK_MODE_CMD1) {\n//\t\tAES_cbc_decrypt(&aes_kirk1, inbuff, (u8*) & keys, 32); //decrypt AES & CMAC key to temp buffer\n//\t\tAES_set_key(&cmac_key, keys.CMAC, 128);\n//\t\tAES_CMAC(&cmac_key, inbuff + 0x60, 0x30, cmac_header_hash);\n//\n//\t\t//Make sure data is 16 aligned\n//\t\tchk_size = header- > data_size;\n//\t\tif (chk_size % 16) chk_size += 16 - (chk_size % 16);\n//\t\tAES_CMAC(&cmac_key, inbuff + 0x60, 0x30 + chk_size + header- > data_offset, cmac_data_hash);\n//\n//\t\tif (memcmp(cmac_header_hash, header- > CMAC_header_hash, 16) != 0) return KIRK_HEADER_HASH_INVALID;\n//\t\tif (memcmp(cmac_data_hash, header- > CMAC_data_hash, 16) != 0) return KIRK_DATA_HASH_INVALID;\n//\n//\t\treturn KIRK_OPERATION_SUCCESS;\n//\t}\n//\treturn KIRK_SIG_CHECK_INVALID; //Checks for cmd 2 & 3 not included right now\n//}\n//\n//function kirk_CMD11(u8 * outbuff, u8 * inbuff, int size)\n//{\n//\tKIRK_SHA1_HEADER * header = (KIRK_SHA1_HEADER *) inbuff;\n//  SHA_CTX sha;\n//\tif (is_kirk_initialized == 0) return KIRK_NOT_INITIALIZED;\n//\tif (header- > data_size == 0 || size == 0) return KIRK_DATA_SIZE_ZERO;\n//\n//\tSHAInit(&sha);\n//\tSHAUpdate(&sha, inbuff + sizeof(KIRK_SHA1_HEADER), header- > data_size);\n//\tSHAFinal(outbuff, &sha);\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//// Generate an ECDSA Key pair\n//// offset 0 = private key (0x14 len)\n//// offset 0x14 = public key point (0x28 len)\n//function kirk_CMD12(u8 * outbuff, int outsize) {\n//  u8 k[0x15];\n//\tKIRK_CMD12_BUFFER * keypair = (KIRK_CMD12_BUFFER *) outbuff;\n//\n//\tif (outsize != 0x3C) return KIRK_INVALID_SIZE;\n//\tecdsa_set_curve(ec_p, ec_a, ec_b2, ec_N2, Gx2, Gy2);\n//\tk[0] = 0;\n//\tkirk_CMD14(k + 1, 0x14);\n//\tec_priv_to_pub(k, (u8*)keypair- > public_key.x);\n//\tmemcpy(keypair- > private_key, k + 1, 0x14);\n//\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//// Point multiplication\n//// offset 0 = mulitplication value (0x14 len)\n//// offset 0x14 = point to multiply (0x28 len)\n//function kirk_CMD13(u8 * outbuff, int outsize, u8 * inbuff, int insize) {\n//  u8 k[0x15];\n//\tKIRK_CMD13_BUFFER * pointmult = (KIRK_CMD13_BUFFER *) inbuff;\n//\tk[0] = 0;\n//\tif (outsize != 0x28) return KIRK_INVALID_SIZE;\n//\tif (insize != 0x3C) return KIRK_INVALID_SIZE;\n//\tecdsa_set_curve(ec_p, ec_a, ec_b2, ec_N2, Gx2, Gy2);\n//\tecdsa_set_pub((u8*)pointmult- > public_key.x);\n//\tmemcpy(k + 1,pointmult- > multiplier, 0x14);\n//\tec_pub_mult(k, outbuff);\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//function kirk_CMD14(u8 * outbuff, int outsize) {\n//  u8 temp[0x104];\n//\tKIRK_SHA1_HEADER * header = (KIRK_SHA1_HEADER *) temp;\n//\n//  // Some randomly selected data for a \"key\" to add to each randomization\n//  u8 key[0x10] = { 0xA7, 0x2E, 0x4C, 0xB6, 0xC3, 0x34, 0xDF, 0x85, 0x70, 0x01, 0x49, 0xFC, 0xC0, 0x87, 0xC4, 0x77 };\n//  u32 curtime;\n//\t//if(outsize != 0x14) return KIRK_INVALID_SIZE; // Need real error code\n//\tif (outsize <= 0) return KIRK_OPERATION_SUCCESS;\n//\n//\tmemcpy(temp + 4, PRNG_DATA, 0x14);\n//\t// This uses the standard C time function for portability.\n//\tcurtime = (u32) time(0);\n//\ttemp[0x18] = curtime & 0xFF;\n//\ttemp[0x19] = (curtime >> 8) & 0xFF;\n//\ttemp[0x1A] = (curtime >> 16) & 0xFF;\n//\ttemp[0x1B] = (curtime >> 24) & 0xFF;\n//\tmemcpy(&temp[0x1C], key, 0x10);\n//  //This leaves the remainder of the 0x100 bytes in temp to whatever remains on the stack \n//  // in an uninitialized state. This should add unpredicableness to the results as well\n//  header- > data_size = 0x100;\n//\tkirk_CMD11(PRNG_DATA, temp, 0x104);\n//\twhile (outsize) {\n//    int blockrem = outsize % 0x14;\n//    int block = outsize / 0x14;\n//\n//\t\tif (block) {\n//\t\t\tmemcpy(outbuff, PRNG_DATA, 0x14);\n//\t\t\toutbuff += 0x14;\n//\t\t\toutsize -= 0x14;\n//\t\t\tkirk_CMD14(outbuff, outsize);\n//\t\t} else {\n//\t\t\tif (blockrem) {\n//\t\t\t\tmemcpy(outbuff, PRNG_DATA, blockrem);\n//\t\t\t\toutsize -= blockrem;\n//\t\t\t}\n//\t\t}\n//\n//\t}\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//function decrypt_kirk16_private(u8 * dA_out, u8 * dA_enc)\n//{\n//  int i, k;\n//  kirk16_data keydata;\n//  u8 subkey_1[0x10], subkey_2[0x10];\n//  rijndael_ctx aes_ctx;\n//\n//\tkeydata.fuseid[7] = g_fuse90 & 0xFF;\n//\tkeydata.fuseid[6] = (g_fuse90 >> 8) & 0xFF;\n//\tkeydata.fuseid[5] = (g_fuse90 >> 16) & 0xFF;\n//\tkeydata.fuseid[4] = (g_fuse90 >> 24) & 0xFF;\n//\tkeydata.fuseid[3] = g_fuse94 & 0xFF;\n//\tkeydata.fuseid[2] = (g_fuse94 >> 8) & 0xFF;\n//\tkeydata.fuseid[1] = (g_fuse94 >> 16) & 0xFF;\n//\tkeydata.fuseid[0] = (g_fuse94 >> 24) & 0xFF;\n//\n//\t/* set encryption key */\n//\trijndael_set_key(&aes_ctx, kirk16_key, 128);\n//\n//\t/* set the subkeys */\n//\tfor (i = 0; i < 0x10; i++) {\n//\t\t/* set to the fuseid */\n//\t\tsubkey_2[i] = subkey_1[i] = keydata.fuseid[i % 8];\n//\t}\n//\n//\t/* do aes crypto */\n//\tfor (i = 0; i < 3; i++) {\n//\t\t/* encrypt + decrypt */\n//\t\trijndael_encrypt(&aes_ctx, subkey_1, subkey_1);\n//\t\trijndael_decrypt(&aes_ctx, subkey_2, subkey_2);\n//\t}\n//\n//\t/* set new key */\n//\trijndael_set_key(&aes_ctx, subkey_1, 128);\n//\n//\t/* now lets make the key mesh */\n//\tfor (i = 0; i < 3; i++) {\n//\t\t/* do encryption in group of 3 */\n//\t\tfor (k = 0; k < 3; k++) {\n//\t\t\t/* crypto */\n//\t\t\trijndael_encrypt(&aes_ctx, subkey_2, subkey_2);\n//\t\t}\n//\n//\t\t/* copy to out block */\n//\t\tmemcpy(&keydata.mesh[i * 0x10], subkey_2, 0x10);\n//\t}\n//\n//\t/* set the key to the mesh */\n//\trijndael_set_key(&aes_ctx, &keydata.mesh[0x20], 128);\n//\n//\t/* do the encryption routines for the aes key */\n//\tfor (i = 0; i < 2; i++) {\n//\t\t/* encrypt the data */\n//\t\trijndael_encrypt(&aes_ctx, &keydata.mesh[0x10], &keydata.mesh[0x10]);\n//\t}\n//\n//\t/* set the key to that mesh shit */\n//\trijndael_set_key(&aes_ctx, &keydata.mesh[0x10], 128);\n//\n//\t/* cbc decrypt the dA */\n//\tAES_cbc_decrypt((AES_ctx *) & aes_ctx, dA_enc, dA_out, 0x20);\n//}\n//\n//function encrypt_kirk16_private(u8 * dA_out, u8 * dA_dec)\n//{\n//  int i, k;\n//  kirk16_data keydata;\n//  u8 subkey_1[0x10], subkey_2[0x10];\n//  rijndael_ctx aes_ctx;\n//\n//\n//\tkeydata.fuseid[7] = g_fuse90 & 0xFF;\n//\tkeydata.fuseid[6] = (g_fuse90 >> 8) & 0xFF;\n//\tkeydata.fuseid[5] = (g_fuse90 >> 16) & 0xFF;\n//\tkeydata.fuseid[4] = (g_fuse90 >> 24) & 0xFF;\n//\tkeydata.fuseid[3] = g_fuse94 & 0xFF;\n//\tkeydata.fuseid[2] = (g_fuse94 >> 8) & 0xFF;\n//\tkeydata.fuseid[1] = (g_fuse94 >> 16) & 0xFF;\n//\tkeydata.fuseid[0] = (g_fuse94 >> 24) & 0xFF;\n//\t/* set encryption key */\n//\trijndael_set_key(&aes_ctx, kirk16_key, 128);\n//\n//\t/* set the subkeys */\n//\tfor (i = 0; i < 0x10; i++) {\n//\t\t/* set to the fuseid */\n//\t\tsubkey_2[i] = subkey_1[i] = keydata.fuseid[i % 8];\n//\t}\n//\n//\t/* do aes crypto */\n//\tfor (i = 0; i < 3; i++) {\n//\t\t/* encrypt + decrypt */\n//\t\trijndael_encrypt(&aes_ctx, subkey_1, subkey_1);\n//\t\trijndael_decrypt(&aes_ctx, subkey_2, subkey_2);\n//\t}\n//\n//\t/* set new key */\n//\trijndael_set_key(&aes_ctx, subkey_1, 128);\n//\n//\t/* now lets make the key mesh */\n//\tfor (i = 0; i < 3; i++) {\n//\t\t/* do encryption in group of 3 */\n//\t\tfor (k = 0; k < 3; k++) {\n//\t\t\t/* crypto */\n//\t\t\trijndael_encrypt(&aes_ctx, subkey_2, subkey_2);\n//\t\t}\n//\n//\t\t/* copy to out block */\n//\t\tmemcpy(&keydata.mesh[i * 0x10], subkey_2, 0x10);\n//\t}\n//\n//\t/* set the key to the mesh */\n//\trijndael_set_key(&aes_ctx, &keydata.mesh[0x20], 128);\n//\n//\t/* do the encryption routines for the aes key */\n//\tfor (i = 0; i < 2; i++) {\n//\t\t/* encrypt the data */\n//\t\trijndael_encrypt(&aes_ctx, &keydata.mesh[0x10], &keydata.mesh[0x10]);\n//\t}\n//\n//\t/* set the key to that mesh shit */\n//\trijndael_set_key(&aes_ctx, &keydata.mesh[0x10], 128);\n//\n//\t/* cbc encrypt the dA */\n//\tAES_cbc_encrypt((AES_ctx *) & aes_ctx, dA_dec, dA_out, 0x20);\n//}\n//\n//function kirk_CMD16(u8 * outbuff, int outsize, u8 * inbuff, int insize) {\n//        u8 dec_private[0x20];\n//\tKIRK_CMD16_BUFFER * signbuf = (KIRK_CMD16_BUFFER *) inbuff;\n//\tECDSA_SIG * sig = (ECDSA_SIG *) outbuff;\n//\tif (insize != 0x34) return KIRK_INVALID_SIZE;\n//\tif (outsize != 0x28) return KIRK_INVALID_SIZE;\n//\tdecrypt_kirk16_private(dec_private,signbuf- > enc_private);\n//\t// Clear out the padding for safety\n//\tmemset(&dec_private[0x14], 0, 0xC);\n//\tecdsa_set_curve(ec_p, ec_a, ec_b2, ec_N2, Gx2, Gy2);\n//\tecdsa_set_priv(dec_private);\n//\tecdsa_sign(signbuf- > message_hash,sig- > r, sig- > s);\n//\treturn KIRK_OPERATION_SUCCESS;\n//}\n//\n//// ECDSA Verify\n//// inbuff structure:\n//// 00 = public key (0x28 length)\n//// 28 = message hash (0x14 length)\n//// 3C = signature R (0x14 length)\n//// 50 = signature S (0x14 length)\n//function kirk_CMD17(u8 * inbuff, int insize) {\n//\tKIRK_CMD17_BUFFER * sig = (KIRK_CMD17_BUFFER *) inbuff;\n//\tif (insize != 0x64) return KIRK_INVALID_SIZE;\n//\tecdsa_set_curve(ec_p, ec_a, ec_b2, ec_N2, Gx2, Gy2);\n//\tecdsa_set_pub(sig- > public_key.x);\n//\t// ecdsa_verify(u8 *hash, u8 *R, u8 *S)\n//\tif (ecdsa_verify(sig- > message_hash,sig- > signature.r,sig- > signature.s)) {\n//\t\treturn KIRK_OPERATION_SUCCESS;\n//\t} else {\n//\t\treturn KIRK_SIG_CHECK_INVALID;\n//\t}\n//}\n//\n//function kirk_init()\n//{\n//\treturn kirk_init2((u8*) \"Lazy Dev should have initialized!\", 33, 0xBABEF00D, 0xDEADBEEF);;\n//}\n//\n//function kirk_init2(u8 * rnd_seed, u32 seed_size, u32 fuseid_90, u32 fuseid_94) {\n//  u8 temp[0x104];\n//\n//\tKIRK_SHA1_HEADER * header = (KIRK_SHA1_HEADER *) temp;\n//  // Another randomly selected data for a \"key\" to add to each randomization\n//  u8 key[0x10] = {0x07, 0xAB, 0xEF, 0xF8, 0x96, 0x8C, 0xF3, 0xD6, 0x14, 0xE0, 0xEB, 0xB2, 0x9D, 0x8B, 0x4E, 0x74 };\n//  u32 curtime;\n//\n//\t//Set PRNG_DATA initially, otherwise use what ever uninitialized data is in the buffer\n//\tif (seed_size > 0) {\n//\t\tu8 * seedbuf;\n//\t\tKIRK_SHA1_HEADER * seedheader;;\n//\t\tseedbuf = (u8*) malloc(seed_size + 4);\n//\t\tseedheader = (KIRK_SHA1_HEADER *) seedbuf;\n//    seedheader- > data_size = seed_size;\n//\t\tkirk_CMD11(PRNG_DATA, seedbuf, seed_size + 4);\n//\t\tfree(seedbuf);\n//\t}\n//\tmemcpy(temp + 4, PRNG_DATA, 0x14);\n//\t// This uses the standard C time function for portability.\n//\tcurtime = (u32) time(0);\n//\ttemp[0x18] = curtime & 0xFF;\n//\ttemp[0x19] = (curtime >> 8) & 0xFF;\n//\ttemp[0x1A] = (curtime >> 16) & 0xFF;\n//\ttemp[0x1B] = (curtime >> 24) & 0xFF;\n//\tmemcpy(&temp[0x1C], key, 0x10);\n//  //This leaves the remainder of the 0x100 bytes in temp to whatever remains on the stack \n//  // in an uninitialized state. This should add unpredicableness to the results as well\n//  header- > data_size = 0x100;\n//\tkirk_CMD11(PRNG_DATA, temp, 0x104);\n//\n//\t//Set Fuse ID\n//\tg_fuse90 = fuseid_90;\n//\tg_fuse94 = fuseid_94;\n//\n//\t//Set KIRK1 main key\n//\tAES_set_key(&aes_kirk1, kirk1_key, 128);\n//\n//\n//\tis_kirk_initialized = 1;\n//\treturn 0;\n//}\nfunction kirk_4_7_get_key(key_type: number) {\n    const key = kirk7_keys[key_type];\n\tif (!key) throw (new Error(\"Unsupported key '\" + key_type + \"'\"));\n\treturn key; \n}\n\nexport const enum KirkMode {\n\tInvalid0 = 0,\n\tCmd1 = 1,\n\tCmd2 = 2,\n\tCmd3 = 3,\n\tEncryptCbc = 4,\n\tDecryptCbc = 5,\n}\n\nexport enum CommandEnum {\n\tDECRYPT_PRIVATE = 0x1, // Master decryption command, used by firmware modules. Applies CMAC checking. Super-Duper decryption (no inverse) Private Sig + Cipher PSP_KIRK_CMD_DECRYPT_PRIVATE Code: 1, 0x01\n\tENCRYPT_SIGN = 0x2, // Used for key type 3 (blacklisting), encrypts and signs data with a ECDSA signature. Encrypt Operation (inverse of 0x03) Private Sig + Cipher Code: 2, 0x02\n\tDECRYPT_SIGN = 0x3, // Used for key type 3 (blacklisting), decrypts and signs data with a ECDSA signature. Decrypt Operation (inverse of 0x02) Private Sig + Cipher Code: 3, 0x03\n\tENCRYPT_IV_0 = 0x4, // Key table based encryption used for general purposes by several modules. Encrypt Operation (inverse of 0x07) (IV=0) Cipher KIRK_CMD_ENCRYPT_IV_0 Code: 4, 0x04\n\tENCRYPT_IV_FUSE = 0x5, // Fuse ID based encryption used for general purposes by several modules. Encrypt Operation (inverse of 0x08) (IV=FuseID) Cipher KIRK_CMD_ENCRYPT_IV_FUSE Code: 5, 0x05\n\tENCRYPT_IV_USER = 0x6, // User specified ID based encryption used for general purposes by several modules. Encrypt Operation (inverse of 0x09) (IV=UserDefined) Cipher KIRK_CMD_ENCRYPT_IV_USER Code: 6, 0x06\n\tDECRYPT_IV_0  = 0x7, // Key table based decryption used for general purposes by several modules.Decrypt Operation(inverse of 0x04) Cipher KIRK_CMD_DECRYPT_IV_0 Code: 7, 0x07\n\tDECRYPT_IV_FUSE = 0x8, // Fuse ID based decryption used for general purposes by several modules. Decrypt Operation (inverse of 0x05) Cipher KIRK_CMD_DECRYPT_IV_FUSE Code: 8, 0x08\n\tDECRYPT_IV_USER = 0x9, // User specified ID based decryption used for general purposes by several modules. Decrypt Operation (inverse of 0x06) Cipher PSP_KIRK_CMD_DECRYPT_IV_USER Code: 9, 0x09\n\tPRIV_SIG_CHECK = 0xA, // Private signature (SCE) checking command. Private Signature Check (checks for private SCE sig) Sig Gens KIRK_CMD_PRIV_SIG_CHECK Code: 10, 0x0A\n\tSHA1_HASH = 0xB, // SHA1 hash generating command. SHA1 Hash Sig Gens PSP_KIRK_CMD_SHA1_HASH Code: 11, 0x0B\n\tECDSA_GEN_KEYS = 0xC, // ECDSA key generating mul1 command.  Mul1 Sig Gens Code: 12, 0x0C\n\tECDSA_MULTIPLY_POINT = 0xD, // ECDSA key generating mul2 command.  Mul2 Sig Gens Code: 13, 0x0D\n\tPRNG = 0xE, // Random number generating command.  Random Number Gen Sig Gens Code: 14, 0x0E\n\tINIT = 0xF, // KIRK initialization command. (absolutely no idea? could be KIRK initialization) Sig Gens Code: 15, 0x0F\n\tECDSA_SIGN = 0x10, // ECDSA signing command. Signature Gen Code: 16, 0x10\n\tECDSA_VERIFY = 0x11, // ECDSA checking command. Signature Check (checks for generated sigs) Sig Checks Code: 17, 0x11\n\tCERT_VERIFY = 0x12, // Certificate checking command. Certificate Check (idstorage signatures) Sig Checks Code: 18, 0x12\n}\n\n//function kirk_CMD1_ex(outbuff: Uint8Array, inbuff: Uint8Array, size: number, header: KIRK_CMD1_HEADER)\n//{\n//\tconst buffer = new Uint8Array(size);\n//\n//\tmemcpy(buffer, header, sizeof(KIRK_CMD1_HEADER));\n//\tmemcpy(buffer + sizeof(KIRK_CMD1_HEADER), inbuff, header.data_size);\n//\n//\treturn kirk_CMD1(outbuff, buffer, size);\n//}\n//\n//\n\nexport function CMD7(input: Stream) {\n    const header = GetStruct(KIRK_AES128CBC_HEADER).read(input.slice());\n\n\tif (header.mode != KirkMode.DecryptCbc) throw (new Error(\"Kirk Invalid mode '\" + header.mode + \"'\"));\n\tif (header.data_size == 0) throw (new Error(\"Kirk data size == 0\"));\n\n\treturn aes_decrypt(input.sliceFrom(GetStruct(KIRK_AES128CBC_HEADER).length).readAllBytes(), kirk_4_7_get_key(header.keyseed));\n}\n\nfunction kirk_CMD7(output: Stream, input: Stream) {\n    const output2 = Stream.fromUint8Array(CMD7(input.slice()));\n\toutput.slice().writeStream(output2);\n}\n\nfunction kirk_CMD1(output: Stream, input: Stream) {\n\t//console.log(input.sliceWithLength(0, 128).readAllBytes());\n    const header = input.slice().readStruct<AES128CMACHeader>(AES128CMACHeader.struct);\n\tif (header.Mode != KirkMode.Cmd1) throw (new Error(\"Kirk mode != Cmd1\"));\n\n\tconst Keys = aes_decrypt(input.sliceWithLength(0, 16 * 2).readAllBytes(), kirk1_key);\n\tconst KeyAes = Keys.subarray(0, 16);\n\tconst KeyCmac = Keys.subarray(16, 16);\n\n    const PaddedDataSize = (header.DataSize + 15) & -16;\n    const Output = aes_decrypt(input.sliceWithLength(header.DataOffset + AES128CMACHeader.struct.length, PaddedDataSize).readAllBytes(), KeyAes);\n\toutput.slice().writeBytes(Output.subarray(0, header.DataSize));\n}\n\nexport function hleUtilsBufferCopyWithRange(output: Stream, input: Stream, command: CommandEnum) {\n\tswitch (command) {\n\t\tcase CommandEnum.DECRYPT_PRIVATE: return kirk_CMD1(output, input);\n\t\t//case CommandEnum.ENCRYPT_IV_0: return kirk_CMD4(output, input); break;\n\t\tcase CommandEnum.DECRYPT_IV_0: return kirk_CMD7(output, input);\n\t\t//case CommandEnum.PRIV_SIG_CHECK: return kirk_CMD10(input); break;\n\t\t//case CommandEnum.SHA1_HASH: return kirk_CMD11(output, input); break;\n\t\t//case CommandEnum.ECDSA_GEN_KEYS: return kirk_CMD12(output); break;\n\t\t//case CommandEnum.ECDSA_MULTIPLY_POINT: return kirk_CMD13(output, input); break;\n\t\t//case CommandEnum.PRNG: return kirk_CMD14(output, outsize); break;\n\t\t//case CommandEnum.ECDSA_SIGN: return kirk_CMD16(output, input); break;\n\t\t//case CommandEnum.ECDSA_VERIFY: return kirk_CMD17(input); break;\n\t}\n\tthrow new Error(`Not implemented hleUtilsBufferCopyWithRange! with command ${command}: ${CommandEnum[command]}`);\n}\n", "\uFEFFexport interface TagInfo {\n\ttag: number;\n\tikey: Uint32Array;\n\tkey: Uint8Array;\n\tcode: number;\n\tcodeExtra: number;\n}\n\nconst g_key0 = new Uint32Array([0x7b21f3be, 0x299c5e1d, 0x1c9c5e71, 0x96cb4645, 0x3c9b1be0, 0xeb85de3d, 0x4a7f2022, 0xc2206eaa, 0xd50b3265, 0x55770567, 0x3c080840, 0x981d55f2, 0x5fd8f6f3, 0xee8eb0c5, 0x944d8152, 0xf8278651, 0x2705bafa, 0x8420e533, 0x27154ae9, 0x4819aa32, 0x59a3aa40, 0x2cb3cf65, 0xf274466d, 0x3a655605, 0x21b0f88f, 0xc5b18d26, 0x64c19051, 0xd669c94e, 0xe87035f2, 0x9d3a5909, 0x6f4e7102, 0xdca946ce, 0x8416881b, 0xbab097a5, 0x249125c6, 0xb34c0872,]);\nconst g_key2 = new Uint32Array([0xccfda932, 0x51c06f76, 0x046dcccf, 0x49e1821e, 0x7d3b024c, 0x9dda5865, 0xcc8c9825, 0xd1e97db5, 0x6874d8cb, 0x3471c987, 0x72edb3fc, 0x81c8365d, 0xe161e33a, 0xfc92db59, 0x2009b1ec, 0xb1a94ce4, 0x2f03696b, 0x87e236d8, 0x3b2b8ce9, 0x0305e784, 0xf9710883, 0xb039db39, 0x893bea37, 0xe74d6805, 0x2a5c38bd, 0xb08dc813, 0x15b32375, 0x46be4525, 0x0103fd90, 0xa90e87a2, 0x52aba66a, 0x85bf7b80, 0x45e8ce63, 0x4dd716d3, 0xf5e30d2d, 0xaf3ae456,]);\nconst g_key3 = new Uint32Array([0xa6c8f5ca, 0x6d67c080, 0x924f4d3a, 0x047ca06a, 0x08640297, 0x4fd4a758, 0xbd685a87, 0x9b2701c2, 0x83b62a35, 0x726b533c, 0xe522fa0c, 0xc24b06b4, 0x459d1cac, 0xa8c5417b, 0x4fea62a2, 0x0615d742, 0x30628d09, 0xc44fab14, 0x69ff715e, 0xd2d8837d, 0xbeed0b8b, 0x1e6e57ae, 0x61e8c402, 0xbe367a06, 0x543f2b5e, 0xdb3ec058, 0xbe852075, 0x1e7e4dcc, 0x1564ea55, 0xec7825b4, 0xc0538cad, 0x70f72c7f, 0x49e8c3d0, 0xeda97ec5, 0xf492b0a4, 0xe05eb02a,]);\nconst g_key44 = new Uint32Array([0xef80e005, 0x3a54689f, 0x43c99ccd, 0x1b7727be, 0x5cb80038, 0xdd2efe62, 0xf369f92c, 0x160f94c5, 0x29560019, 0xbf3c10c5, 0xf2ce5566, 0xcea2c626, 0xb601816f, 0x64e7481e, 0x0c34debd, 0x98f29cb0, 0x3fc504d7, 0xc8fb39f0, 0x0221b3d8, 0x63f936a2, 0x9a3a4800, 0x6ecc32e3, 0x8e120cfd, 0xb0361623, 0xaee1e689, 0x745502eb, 0xe4a6c61c, 0x74f23eb4, 0xd7fa5813, 0xb01916eb, 0x12328457, 0xd2bc97d2, 0x646425d8, 0x328380a5, 0x43da8ab1, 0x4b122ac9,]);\nconst g_key20 = new Uint32Array([0x33b50800, 0xf32f5fcd, 0x3c14881f, 0x6e8a2a95, 0x29feefd5, 0x1394eae3, 0xbd6bd443, 0x0821c083, 0xfab379d3, 0xe613e165, 0xf5a754d3, 0x108b2952, 0x0a4b1e15, 0x61eadeba, 0x557565df, 0x3b465301, 0xae54ecc3, 0x61423309, 0x70c9ff19, 0x5b0ae5ec, 0x989df126, 0x9d987a5f, 0x55bc750e, 0xc66eba27, 0x2de988e8, 0xf76600da, 0x0382dccb, 0x5569f5f2, 0x8e431262, 0x288fe3d3, 0x656f2187, 0x37d12e9c, 0x2f539eb4, 0xa492998e, 0xed3958f7, 0x39e96523,]);\nconst g_key3A = new Uint32Array([0x67877069, 0x3abd5617, 0xc23ab1dc, 0xab57507d, 0x066a7f40, 0x24def9b9, 0x06f759e4, 0xdcf524b1, 0x13793e5e, 0x0359022d, 0xaae7e1a2, 0x76b9b2fa, 0x9a160340, 0x87822fba, 0x19e28fbb, 0x9e338a02, 0xd8007e9a, 0xea317af1, 0x630671de, 0x0b67ca7c, 0x865192af, 0xea3c3526, 0x2b448c8e, 0x8b599254, 0x4602e9cb, 0x4de16cda, 0xe164d5bb, 0x07ecd88e, 0x99ffe5f8, 0x768800c1, 0x53b091ed, 0x84047434, 0xb426dbbc, 0x36f948bb, 0x46142158, 0x749bb492,]);\n\n// KEYS FROM MESG_LED.PRX (3.52)\nconst g_keyEBOOT1xx = new Uint32Array([0x18CB69EF, 0x158E8912, 0xDEF90EBB, 0x4CB0FB23, 0x3687EE18, 0x868D4A6E, 0x19B5C756, 0xEE16551D, 0xE7CB2D6C, 0x9747C660, 0xCE95143F, 0x2956F477, 0x03824ADE, 0x210C9DF1, 0x5029EB24, 0x81DFE69F, 0x39C89B00, 0xB00C8B91, 0xEF2DF9C2, 0xE13A93FC, 0x8B94A4A8, 0x491DD09D, 0x686A400D, 0xCED4C7E4, 0x96C8B7C9, 0x1EAADC28, 0xA4170B84, 0x505D5DDC, 0x5DA6C3CF, 0x0E5DFA2D, 0x6E7919B5, 0xCE5E29C7, 0xAAACDB94, 0x45F70CDD, 0x62A73725, 0xCCE6563D,]);\nconst g_keyEBOOT2xx = new Uint32Array([0xDA8E36FA, 0x5DD97447, 0x76C19874, 0x97E57EAF, 0x1CAB09BD, 0x9835BAC6, 0x03D39281, 0x03B205CF, 0x2882E734, 0xE714F663, 0xB96E2775, 0xBD8AAFC7, 0x1DD3EC29, 0xECA4A16C, 0x5F69EC87, 0x85981E92, 0x7CFCAE21, 0xBAE9DD16, 0xE6A97804, 0x2EEE02FC, 0x61DF8A3D, 0xDD310564, 0x9697E149, 0xC2453F3B, 0xF91D8456, 0x39DA6BC8, 0xB3E5FEF5, 0x89C593A3, 0xFB5C8ABC, 0x6C0B7212, 0xE10DD3CB, 0x98D0B2A8, 0x5FD61847, 0xF0DC2357, 0x7701166A, 0x0F5C3B68,]);\nconst g_keyUPDATER = new Uint32Array([0xA5603CBF, 0xD7482441, 0xF65764CC, 0x1F90060B, 0x4EA73E45, 0xE551D192, 0xE7B75D8A, 0x465A506E, 0x40FB1022, 0x2C273350, 0x8096DA44, 0x9947198E, 0x278DEE77, 0x745D062E, 0xC148FA45, 0x832582AF, 0x5FDB86DA, 0xCB15C4CE, 0x2524C62F, 0x6C2EC3B1, 0x369BE39E, 0xF7EB1FC4, 0x1E51CE1A, 0xD70536F4, 0xC34D39D8, 0x7418FB13, 0xE3C84DE1, 0xB118F03C, 0xA2018D4E, 0xE6D8770D, 0x5720F390, 0x17F96341, 0x60A4A68F, 0x1327DD28, 0x05944C64, 0x0C2C4C12,]);\nconst g_keyMEIMG250 = new Uint32Array([0xA381FEBC, 0x99B9D5C9, 0x6C560A8D, 0x30309F95, 0x792646CC, 0x82B64E5E, 0x1A3951AD, 0x0A182EC4, 0xC46131B4, 0x77C50C8A, 0x325F16C6, 0x02D1942E, 0x0AA38AC4, 0x2A940AC6, 0x67034726, 0xE52DB133, 0xD2EF2107, 0x85C81E90, 0xC8D164BA, 0xC38DCE1D, 0x948BA275, 0x0DB84603, 0xE2473637, 0xCD74FCDA, 0x588E3D66, 0x6D28E822, 0x891E548B, 0xF53CF56D, 0x0BBDDB66, 0xC4B286AA, 0x2BEBBC4B, 0xFC261FF4, 0x92B8E705, 0xDCEE6952, 0x5E0442E5, 0x8BEB7F21,]);\nconst g_keyMEIMG260 = new Uint32Array([0x11BFD698, 0xD7F9B324, 0xDD524927, 0x16215B86, 0x504AC36D, 0x5843B217, 0xE5A0DA47, 0xBB73A1E7, 0x2915DB35, 0x375CFD3A, 0xBB70A905, 0x272BEFCA, 0x2E960791, 0xEA0799BB, 0xB85AE6C8, 0xC9CAF773, 0x250EE641, 0x06E74A9E, 0x5244895D, 0x466755A5, 0x9A84AF53, 0xE1024174, 0xEEBA031E, 0xED80B9CE, 0xBC315F72, 0x5821067F, 0xE8313058, 0xD2D0E706, 0xE6D8933E, 0xD7D17FB4, 0x505096C4, 0xFDA50B3B, 0x4635AE3D, 0xEB489C8A, 0x422D762D, 0x5A8B3231,]);\nconst g_keyDEMOS27X = new Uint32Array([0x1ABF102F, 0xD596D071, 0x6FC552B2, 0xD4F2531F, 0xF025CDD9, 0xAF9AAF03, 0xE0CF57CF, 0x255494C4, 0x7003675E, 0x907BC884, 0x002D4EE4, 0x0B687A0D, 0x9E3AA44F, 0xF58FDA81, 0xEC26AC8C, 0x3AC9B49D, 0x3471C037, 0xB0F3834D, 0x10DC4411, 0xA232EA31, 0xE2E5FA6B, 0x45594B03, 0xE43A1C87, 0x31DAD9D1, 0x08CD7003, 0xFA9C2FDF, 0x5A891D25, 0x9B5C1934, 0x22F366E5, 0x5F084A32, 0x695516D5, 0x2245BE9F, 0x4F6DD705, 0xC4B8B8A1, 0xBC13A600, 0x77B7FC3B,]);\nconst g_keyUNK1 = new Uint32Array([0x33B50800, 0xF32F5FCD, 0x3C14881F, 0x6E8A2A95, 0x29FEEFD5, 0x1394EAE3, 0xBD6BD443, 0x0821C083, 0xFAB379D3, 0xE613E165, 0xF5A754D3, 0x108B2952, 0x0A4B1E15, 0x61EADEBA, 0x557565DF, 0x3B465301, 0xAE54ECC3, 0x61423309, 0x70C9FF19, 0x5B0AE5EC, 0x989DF126, 0x9D987A5F, 0x55BC750E, 0xC66EBA27, 0x2DE988E8, 0xF76600DA, 0x0382DCCB, 0x5569F5F2, 0x8E431262, 0x288FE3D3, 0x656F2187, 0x37D12E9C, 0x2F539EB4, 0xA492998E, 0xED3958F7, 0x39E96523,]);\nconst g_key_GAMESHARE1xx = new Uint32Array([0x721B53E8, 0xFC3E31C6, 0xF85BA2A2, 0x3CF0AC72, 0x54EEA7AB, 0x5959BFCB, 0x54B8836B, 0xBC431313, 0x989EF2CF, 0xF0CE36B2, 0x98BA4CF8, 0xE971C931, 0xA0375DC8, 0x08E52FA0, 0xAC0DD426, 0x57E4D601, 0xC56E61C7, 0xEF1AB98A, 0xD1D9F8F4, 0x5FE9A708, 0x3EF09D07, 0xFA0C1A8C, 0xA91EEA5C, 0x58F482C5, 0x2C800302, 0x7EE6F6C3, 0xFF6ABBBB, 0x2110D0D0, 0xD3297A88, 0x980012D3, 0xDC59C87B, 0x7FDC5792, 0xDB3F5DA6, 0xFC23B787, 0x22698ED3, 0xB680E812,]);\nconst g_key_GAMESHARE2xx = new Uint32Array([0x94A757C7, 0x9FD39833, 0xF8508371, 0x328B0B29, 0x2CBCB9DA, 0x2918B9C6, 0x944C50BA, 0xF1DCE7D0, 0x640C3966, 0xC90B3D08, 0xF4AD17BA, 0x6CA0F84B, 0xF7767C67, 0xA4D3A55A, 0x4A085C6A, 0x6BB27071, 0xFA8B38FB, 0x3FDB31B8, 0x8B7196F2, 0xDB9BED4A, 0x51625B84, 0x4C1481B4, 0xF684F508, 0x30B44770, 0x93AA8E74, 0x90C579BC, 0x246EC88D, 0x2E051202, 0xC774842E, 0xA185D997, 0x7A2B3ADD, 0xFE835B6D, 0x508F184D, 0xEB4C4F13, 0x0E1993D3, 0xBA96DFD2,]);\nconst g_key_INDEXDAT1xx = new Uint32Array([0x76CB00AF, 0x111CE62F, 0xB7B27E36, 0x6D8DE8F9, 0xD54BF16A, 0xD9E90373, 0x7599D982, 0x51F82B0E, 0x636103AD, 0x8E40BC35, 0x2F332C94, 0xF513AAE9, 0xD22AFEE9, 0x04343987, 0xFC5BB80C, 0x12349D89, 0x14A481BB, 0x25ED3AE8, 0x7D500E4F, 0x43D1B757, 0x7B59FDAD, 0x4CFBBF34, 0xC3D17436, 0xC1DA21DB, 0xA34D8C80, 0x962B235D, 0x3E420548, 0x09CF9FFE, 0xD4883F5C, 0xD90E9CB5, 0x00AEF4E9, 0xF0886DE9, 0x62A58A5B, 0x52A55546, 0x971941B5, 0xF5B79FAC,]);\n\nfunction process(_item: any): TagInfo {\n    const item = <TagInfo>_item;\n    item.key = new Uint8Array((<Uint32Array>_item.ikey).buffer);\n\treturn item;\n}\n\nexport const g_tagInfo = <TagInfo[]>[\n\t// 1.x PRXs\n\tprocess({ tag: 0x00000000, ikey: g_key0, code: 0x42, codeExtra: 0x00 }),\n\tprocess({ tag: 0x02000000, ikey: g_key2, code: 0x45, codeExtra: 0x00 }),\n\tprocess({ tag: 0x03000000, ikey: g_key3, code: 0x46, codeExtra: 0x00 }),\n\n\t// 2.0 PRXs\n\tprocess({ tag: 0x4467415d, ikey: g_key44, code: 0x59, codeExtra: 0x59 }),\n\tprocess({ tag: 0x207bbf2f, ikey: g_key20, code: 0x5A, codeExtra: 0x5A }),\n\tprocess({ tag: 0x3ace4dce, ikey: g_key3A, code: 0x5B, codeExtra: 0x5B }),\n\n\t// misc\n\tprocess({ tag: 0x07000000, ikey: g_key_INDEXDAT1xx, code: 0x4A, codeExtra: 0x00 }),                    // 1.xx index.dat\n\tprocess({ tag: 0x08000000, ikey: g_keyEBOOT1xx, code: 0x4B, codeExtra: 0x00 }),                        // 1.xx game eboot.bin\n\tprocess({ tag: 0xC0CB167C, ikey: g_keyEBOOT2xx, code: 0x5D, codeExtra: 0x5D }),      // 2.xx+ game eboot.bin\n\n\tprocess({ tag: 0x0B000000, ikey: g_keyUPDATER, code: 0x4E, codeExtra: 0x00 }),                         // updater data.psp\n\tprocess({ tag: 0x0C000000, ikey: g_keyDEMOS27X, code: 0x4F, codeExtra: 0x00 }),                        // 2.7x demos\n\tprocess({ tag: 0x0F000000, ikey: g_keyMEIMG250, code: 0x52, codeExtra: 0x00 }),                        // 2.50 meimg and me_sdimg\n\tprocess({ tag: 0x862648D1, ikey: g_keyMEIMG260, code: 0x52, codeExtra: 0x52 }),      // 2.60+ meimg and me_sdimg\n\n\tprocess({ tag: 0x207BBF2F, ikey: g_keyUNK1, code: 0x5A, codeExtra: 0x5A }),\t\t  // unknown\n\n\tprocess({ tag: 0x09000000, ikey: g_key_GAMESHARE1xx, code: 0x4C, codeExtra: 0x00 }),                   // gameshare 1.xx\n\tprocess({ tag: 0xBB67C59F, ikey: g_key_GAMESHARE2xx, code: 0x5E, codeExtra: 0x5E }), // gameshare 2.xx (old)\n];", "\uFEFFconst keys260_0 = new Uint8Array([ 0xC3, 0x24, 0x89, 0xD3, 0x80, 0x87, 0xB2, 0x4E, 0x4C, 0xD7, 0x49, 0xE4, 0x9D, 0x1D, 0x34, 0xD1]); // kernel modules 2.60-2.71\nconst keys260_1 = new Uint8Array([ 0xF3, 0xAC, 0x6E, 0x7C, 0x04, 0x0A, 0x23, 0xE7, 0x0D, 0x33, 0xD8, 0x24, 0x73, 0x39, 0x2B, 0x4A]); // user modules 2.60-2.71\nconst keys260_2 = new Uint8Array([ 0x72, 0xB4, 0x39, 0xFF, 0x34, 0x9B, 0xAE, 0x82, 0x30, 0x34, 0x4A, 0x1D, 0xA2, 0xD8, 0xB4, 0x3C]); // vshmain 2.60-2.71\nconst keys280_0 = new Uint8Array([ 0xCA, 0xFB, 0xBF, 0xC7, 0x50, 0xEA, 0xB4, 0x40, 0x8E, 0x44, 0x5C, 0x63, 0x53, 0xCE, 0x80, 0xB1]); // kernel modules 2.80\nconst keys280_1 = new Uint8Array([ 0x40, 0x9B, 0xC6, 0x9B, 0xA9, 0xFB, 0x84, 0x7F, 0x72, 0x21, 0xD2, 0x36, 0x96, 0x55, 0x09, 0x74]); // user modules 2.80\nconst keys280_2 = new Uint8Array([ 0x03, 0xA7, 0xCC, 0x4A, 0x5B, 0x91, 0xC2, 0x07, 0xFF, 0xFC, 0x26, 0x25, 0x1E, 0x42, 0x4B, 0xB5]); // vshmain executable 2.80\nconst keys300_0 = new Uint8Array([ 0x9F, 0x67, 0x1A, 0x7A, 0x22, 0xF3, 0x59, 0x0B, 0xAA, 0x6D, 0xA4, 0xC6, 0x8B, 0xD0, 0x03, 0x77]); // kernel modules 3.00\nconst keys300_1 = new Uint8Array([ 0x15, 0x07, 0x63, 0x26, 0xDB, 0xE2, 0x69, 0x34, 0x56, 0x08, 0x2A, 0x93, 0x4E, 0x4B, 0x8A, 0xB2]); // user modules 3.00\nconst keys300_2 = new Uint8Array([ 0x56, 0x3B, 0x69, 0xF7, 0x29, 0x88, 0x2F, 0x4C, 0xDB, 0xD5, 0xDE, 0x80, 0xC6, 0x5C, 0xC8, 0x73]); // vshmain 3.00\nconst keys303_0 = new Uint8Array([ 0x7b, 0xa1, 0xe2, 0x5a, 0x91, 0xb9, 0xd3, 0x13, 0x77, 0x65, 0x4a, 0xb7, 0xc2, 0x8a, 0x10, 0xaf]); // kernel modules 3.00\nconst keys310_0 = new Uint8Array([ 0xa2, 0x41, 0xe8, 0x39, 0x66, 0x5b, 0xfa, 0xbb, 0x1b, 0x2d, 0x6e, 0x0e, 0x33, 0xe5, 0xd7, 0x3f]); // kernel modules 3.10\nconst keys310_1 = new Uint8Array([ 0xA4, 0x60, 0x8F, 0xAB, 0xAB, 0xDE, 0xA5, 0x65, 0x5D, 0x43, 0x3A, 0xD1, 0x5E, 0xC3, 0xFF, 0xEA]); // user modules 3.10\nconst keys310_2 = new Uint8Array([ 0xE7, 0x5C, 0x85, 0x7A, 0x59, 0xB4, 0xE3, 0x1D, 0xD0, 0x9E, 0xCE, 0xC2, 0xD6, 0xD4, 0xBD, 0x2B]); // vshmain 3.10\nconst keys310_3 = new Uint8Array([ 0x2E, 0x00, 0xF6, 0xF7, 0x52, 0xCF, 0x95, 0x5A, 0xA1, 0x26, 0xB4, 0x84, 0x9B, 0x58, 0x76, 0x2F]); // reboot.bin 3.10\nconst keys330_0 = new Uint8Array([ 0x3B, 0x9B, 0x1A, 0x56, 0x21, 0x80, 0x14, 0xED, 0x8E, 0x8B, 0x08, 0x42, 0xFA, 0x2C, 0xDC, 0x3A]); // kernel modules 3.30\nconst keys330_1 = new Uint8Array([ 0xE8, 0xBE, 0x2F, 0x06, 0xB1, 0x05, 0x2A, 0xB9, 0x18, 0x18, 0x03, 0xE3, 0xEB, 0x64, 0x7D, 0x26]); // user modules 3.30\nconst keys330_2 = new Uint8Array([ 0xAB, 0x82, 0x25, 0xD7, 0x43, 0x6F, 0x6C, 0xC1, 0x95, 0xC5, 0xF7, 0xF0, 0x63, 0x73, 0x3F, 0xE7]); // vshmain 3.30\nconst keys330_3 = new Uint8Array([ 0xA8, 0xB1, 0x47, 0x77, 0xDC, 0x49, 0x6A, 0x6F, 0x38, 0x4C, 0x4D, 0x96, 0xBD, 0x49, 0xEC, 0x9B]); // reboot.bin 3.30\nconst keys330_4 = new Uint8Array([ 0xEC, 0x3B, 0xD2, 0xC0, 0xFA, 0xC1, 0xEE, 0xB9, 0x9A, 0xBC, 0xFF, 0xA3, 0x89, 0xF2, 0x60, 0x1F]); // stdio.prx 3.30\nconst demokeys_280 = new Uint8Array([ 0x12, 0x99, 0x70, 0x5E, 0x24, 0x07, 0x6C, 0xD0, 0x2D, 0x06, 0xFE, 0x7E, 0xB3, 0x0C, 0x11, 0x26]); // demo data.psp 2.80\nconst demokeys_3XX_1 = new Uint8Array([ 0x47, 0x05, 0xD5, 0xE3, 0x56, 0x1E, 0x81, 0x9B, 0x09, 0x2F, 0x06, 0xDB, 0x6B, 0x12, 0x92, 0xE0]); // demo data.psp 3.XX\nconst demokeys_3XX_2 = new Uint8Array([ 0xF6, 0x62, 0x39, 0x6E, 0x26, 0x22, 0x4D, 0xCA, 0x02, 0x64, 0x16, 0x99, 0x7B, 0x9A, 0xE7, 0xB8]); // demo data.psp 3.XX\nconst ebootbin_271_new = new Uint8Array([ 0xF4, 0xAE, 0xF4, 0xE1, 0x86, 0xDD, 0xD2, 0x9C, 0x7C, 0xC5, 0x42, 0xA6, 0x95, 0xA0, 0x83, 0x88]); // new 2.7X eboot.bin\nconst ebootbin_280_new = new Uint8Array([ 0xB8, 0x8C, 0x45, 0x8B, 0xB6, 0xE7, 0x6E, 0xB8, 0x51, 0x59, 0xA6, 0x53, 0x7C, 0x5E, 0x86, 0x31]); // new 2.8X eboot.bin\nconst ebootbin_300_new = new Uint8Array([ 0xED, 0x10, 0xE0, 0x36, 0xC4, 0xFE, 0x83, 0xF3, 0x75, 0x70, 0x5E, 0xF6, 0xA4, 0x40, 0x05, 0xF7]); // new 3.XX eboot.bin\nconst ebootbin_310_new = new Uint8Array([ 0x5C, 0x77, 0x0C, 0xBB, 0xB4, 0xC2, 0x4F, 0xA2, 0x7E, 0x3B, 0x4E, 0xB4, 0xB4, 0xC8, 0x70, 0xAF]); // new 3.XX eboot.bin\nconst gameshare_260_271 = new Uint8Array([ 0xF9, 0x48, 0x38, 0x0C, 0x96, 0x88, 0xA7, 0x74, 0x4F, 0x65, 0xA0, 0x54, 0xC2, 0x76, 0xD9, 0xB8]); // 2.60-2.71 gameshare\nconst gameshare_280 = new Uint8Array([ 0x2D, 0x86, 0x77, 0x3A, 0x56, 0xA4, 0x4F, 0xDD, 0x3C, 0x16, 0x71, 0x93, 0xAA, 0x8E, 0x11, 0x43]); // 2.80 gameshare\nconst gameshare_300 = new Uint8Array([ 0x78, 0x1A, 0xD2, 0x87, 0x24, 0xBD, 0xA2, 0x96, 0x18, 0x3F, 0x89, 0x36, 0x72, 0x90, 0x92, 0x85]); // 3.00 gameshare\nconst gameshare_310 = new Uint8Array([ 0xC9, 0x7D, 0x3E, 0x0A, 0x54, 0x81, 0x6E, 0xC7, 0x13, 0x74, 0x99, 0x74, 0x62, 0x18, 0xE7, 0xDD]); // 3.10 gameshare\nconst keys360_0 = new Uint8Array([ 0x3C, 0x2B, 0x51, 0xD4, 0x2D, 0x85, 0x47, 0xDA, 0x2D, 0xCA, 0x18, 0xDF, 0xFE, 0x54, 0x09, 0xED]); // 3.60 common kernel modules\nconst keys360_1 = new Uint8Array([ 0x31, 0x1F, 0x98, 0xD5, 0x7B, 0x58, 0x95, 0x45, 0x32, 0xAB, 0x3A, 0xE3, 0x89, 0x32, 0x4B, 0x34]); // 3.60 specific slim kernel modules\nconst keys370_0 = new Uint8Array([ 0x26, 0x38, 0x0A, 0xAC, 0xA5, 0xD8, 0x74, 0xD1, 0x32, 0xB7, 0x2A, 0xBF, 0x79, 0x9E, 0x6D, 0xDB]); // 3.70 common and fat kernel modules\nconst keys370_1 = new Uint8Array([ 0x53, 0xE7, 0xAB, 0xB9, 0xC6, 0x4A, 0x4B, 0x77, 0x92, 0x17, 0xB5, 0x74, 0x0A, 0xDA, 0xA9, 0xEA]); // 3.70 slim specific kernel modules\nconst keys370_2 = new Uint8Array([ 0x71, 0x10, 0xF0, 0xA4, 0x16, 0x14, 0xD5, 0x93, 0x12, 0xFF, 0x74, 0x96, 0xDF, 0x1F, 0xDA, 0x89]); // some 3.70 slim user modules\nconst oneseg_310 = new Uint8Array([ 0xC7, 0x27, 0x72, 0x85, 0xAB, 0xA7, 0xF7, 0xF0, 0x4C, 0xC1, 0x86, 0xCC, 0xE3, 0x7F, 0x17, 0xCA]); // 1SEG.PBP keys\nconst oneseg_300 = new Uint8Array([ 0x76, 0x40, 0x9E, 0x08, 0xDB, 0x9B, 0x3B, 0xA1, 0x47, 0x8A, 0x96, 0x8E, 0xF3, 0xF7, 0x62, 0x92]);\nconst oneseg_280 = new Uint8Array([ 0x23, 0xDC, 0x3B, 0xB5, 0xA9, 0x82, 0xD6, 0xEA, 0x63, 0xA3, 0x6E, 0x2B, 0x2B, 0xE9, 0xE1, 0x54]);\nconst oneseg_260_271 = new Uint8Array([ 0x22, 0x43, 0x57, 0x68, 0x2F, 0x41, 0xCE, 0x65, 0x4C, 0xA3, 0x7C, 0xC6, 0xC4, 0xAC, 0xF3, 0x60]);\nconst oneseg_slim = new Uint8Array([ 0x12, 0x57, 0x0D, 0x8A, 0x16, 0x6D, 0x87, 0x06, 0x03, 0x7D, 0xC8, 0x8B, 0x62, 0xA3, 0x32, 0xA9]);\nconst ms_app_main = new Uint8Array([ 0x1E, 0x2E, 0x38, 0x49, 0xDA, 0xD4, 0x16, 0x08, 0x27, 0x2E, 0xF3, 0xBC, 0x37, 0x75, 0x80, 0x93]);\nconst keys390_0 = new Uint8Array([ 0x45, 0xEF, 0x5C, 0x5D, 0xED, 0x81, 0x99, 0x84, 0x12, 0x94, 0x8F, 0xAB, 0xE8, 0x05, 0x6D, 0x7D]); // 3.90 kernel\nconst keys390_1 = new Uint8Array([ 0x70, 0x1B, 0x08, 0x25, 0x22, 0xA1, 0x4D, 0x3B, 0x69, 0x21, 0xF9, 0x71, 0x0A, 0xA8, 0x41, 0xA9]); // 3.90 slim\nconst keys500_0 = new Uint8Array([ 0xEB, 0x1B, 0x53, 0x0B, 0x62, 0x49, 0x32, 0x58, 0x1F, 0x83, 0x0A, 0xF4, 0x99, 0x3D, 0x75, 0xD0]); // 5.00 kernel\nconst keys500_1 = new Uint8Array([ 0xBA, 0xE2, 0xA3, 0x12, 0x07, 0xFF, 0x04, 0x1B, 0x64, 0xA5, 0x11, 0x85, 0xF7, 0x2F, 0x99, 0x5B]); // 5.00 kernel 2000 specific\nconst keys500_2 = new Uint8Array([ 0x2C, 0x8E, 0xAF, 0x1D, 0xFF, 0x79, 0x73, 0x1A, 0xAD, 0x96, 0xAB, 0x09, 0xEA, 0x35, 0x59, 0x8B]); // 5.00 kernel 3000 specific\nconst keys500_c = new Uint8Array([ 0xA3, 0x5D, 0x51, 0xE6, 0x56, 0xC8, 0x01, 0xCA, 0xE3, 0x77, 0xBF, 0xCD, 0xFF, 0x24, 0xDA, 0x4D]);\nconst keys505_a = new Uint8Array([ 0x7B, 0x94, 0x72, 0x27, 0x4C, 0xCC, 0x54, 0x3B, 0xAE, 0xDF, 0x46, 0x37, 0xAC, 0x01, 0x4D, 0x87]); // 5.05 kernel specific\nconst keys505_0 = new Uint8Array([ 0x2E, 0x8E, 0x97, 0xA2, 0x85, 0x42, 0x70, 0x73, 0x18, 0xDA, 0xA0, 0x8A, 0xF8, 0x62, 0xA2, 0xB0]);\nconst keys505_1 = new Uint8Array([ 0x58, 0x2A, 0x4C, 0x69, 0x19, 0x7B, 0x83, 0x3D, 0xD2, 0x61, 0x61, 0xFE, 0x14, 0xEE, 0xAA, 0x11]);\nconst keys02G_E = new Uint8Array([ 0x9D, 0x09, 0xFD, 0x20, 0xF3, 0x8F, 0x10, 0x69, 0x0D, 0xB2, 0x6F, 0x00, 0xCC, 0xC5, 0x51, 0x2E]); // for psp 2000 file table and ipl pre-decryption\nconst keys03G_E = new Uint8Array([ 0x4F, 0x44, 0x5C, 0x62, 0xB3, 0x53, 0xC4, 0x30, 0xFC, 0x3A, 0xA4, 0x5B, 0xEC, 0xFE, 0x51, 0xEA]); // for psp 3000 file table and ipl pre-decryption\nconst key_D91609F0 = new Uint8Array([ 0xD0, 0x36, 0x12, 0x75, 0x80, 0x56, 0x20, 0x43, 0xC4, 0x30, 0x94, 0x3E, 0x1C, 0x75, 0xD1, 0xBF]);\nconst key_D9160AF0 = new Uint8Array([ 0x10, 0xA9, 0xAC, 0x16, 0xAE, 0x19, 0xC0, 0x7E, 0x3B, 0x60, 0x77, 0x86, 0x01, 0x6F, 0xF2, 0x63]);\nconst key_D9160BF0 = new Uint8Array([ 0x83, 0x83, 0xF1, 0x37, 0x53, 0xD0, 0xBE, 0xFC, 0x8D, 0xA7, 0x32, 0x52, 0x46, 0x0A, 0xC2, 0xC2]);\nconst key_D91611F0 = new Uint8Array([ 0x61, 0xB0, 0xC0, 0x58, 0x71, 0x57, 0xD9, 0xFA, 0x74, 0x67, 0x0E, 0x5C, 0x7E, 0x6E, 0x95, 0xB9]);\nconst key_D91612F0 = new Uint8Array([ 0x9E, 0x20, 0xE1, 0xCD, 0xD7, 0x88, 0xDE, 0xC0, 0x31, 0x9B, 0x10, 0xAF, 0xC5, 0xB8, 0x73, 0x23]); // UMD EBOOT.BIN (OPNSSMP.BIN)\nconst key_D91613F0 = new Uint8Array([ 0xEB, 0xFF, 0x40, 0xD8, 0xB4, 0x1A, 0xE1, 0x66, 0x91, 0x3B, 0x8F, 0x64, 0xB6, 0xFC, 0xB7, 0x12]);\nconst key_2E5E10F0 = new Uint8Array([ 0x9D, 0x5C, 0x5B, 0xAF, 0x8C, 0xD8, 0x69, 0x7E, 0x51, 0x9F, 0x70, 0x96, 0xE6, 0xD5, 0xC4, 0xE8]); // UMD EBOOT.BIN 2 (OPNSSMP.BIN)\nconst key_2E5E12F0 = new Uint8Array([ 0x8A, 0x7B, 0xC9, 0xD6, 0x52, 0x58, 0x88, 0xEA, 0x51, 0x83, 0x60, 0xCA, 0x16, 0x79, 0xE2, 0x07]); // UMD EBOOT.BIN 3 (OPNSSMP.BIN)\nconst key_2E5E13F0 = new Uint8Array([ 0xFF, 0xA4, 0x68, 0xC3, 0x31, 0xCA, 0xB7, 0x4C, 0xF1, 0x23, 0xFF, 0x01, 0x65, 0x3D, 0x26, 0x36]);\nconst keys600_u1_457B0BF0 = new Uint8Array([ 0x7B, 0x94, 0x72, 0x27, 0x4C, 0xCC, 0x54, 0x3B, 0xAE, 0xDF, 0x46, 0x37, 0xAC, 0x01, 0x4D, 0x87]);\nconst keys600_u1_457B0CF0 = new Uint8Array([ 0xAC, 0x34, 0xBA, 0xB1, 0x97, 0x8D, 0xAE, 0x6F, 0xBA, 0xE8, 0xB1, 0xD6, 0xDF, 0xDF, 0xF1, 0xA2]);\nconst keys05G_E = new Uint8Array([ 0x5D, 0xAA, 0x72, 0xF2, 0x26, 0x60, 0x4D, 0x1C, 0xE7, 0x2D, 0xC8, 0xA3, 0x2F, 0x79, 0xC5, 0x54]); // for psp go file table and ipl pre-decryption\nconst keys570_5k = new Uint8Array([ 0x6D, 0x72, 0xA4, 0xBA, 0x7F, 0xBF, 0xD1, 0xF1, 0xA9, 0xF3, 0xBB, 0x07, 0x1B, 0xC0, 0xB3, 0x66]); // 5.70 PSPgo kernel\nconst keys620_0 = new Uint8Array([ 0xD6, 0xBD, 0xCE, 0x1E, 0x12, 0xAF, 0x9A, 0xE6, 0x69, 0x30, 0xDE, 0xDA, 0x88, 0xB8, 0xFF, 0xFB]); // 6.00-6.20 kernel and phat\nconst keys620_1 = new Uint8Array([ 0x1D, 0x13, 0xE9, 0x50, 0x04, 0x73, 0x3D, 0xD2, 0xE1, 0xDA, 0xB9, 0xC1, 0xE6, 0x7B, 0x25, 0xA7]); // 6.00-6.20 slim kernel\nconst keys620_3 = new Uint8Array([ 0xA3, 0x5D, 0x51, 0xE6, 0x56, 0xC8, 0x01, 0xCA, 0xE3, 0x77, 0xBF, 0xCD, 0xFF, 0x24, 0xDA, 0x4D]);\nconst keys620_e = new Uint8Array([ 0xB1, 0xB3, 0x7F, 0x76, 0xC3, 0xFB, 0x88, 0xE6, 0xF8, 0x60, 0xD3, 0x35, 0x3C, 0xA3, 0x4E, 0xF3]);\nconst keys620_5 = new Uint8Array([ 0xF1, 0xBC, 0x17, 0x07, 0xAE, 0xB7, 0xC8, 0x30, 0xD8, 0x34, 0x9D, 0x40, 0x6A, 0x8E, 0xDF, 0x4E]); // PSPgo internal\nconst keys620_5k = new Uint8Array([ 0x41, 0x8A, 0x35, 0x4F, 0x69, 0x3A, 0xDF, 0x04, 0xFD, 0x39, 0x46, 0xA2, 0x5C, 0x2D, 0xF2, 0x21]); // 6.XX PSPgo kernel\nconst keys620_5v = new Uint8Array([0xF2, 0x8F, 0x75, 0xA7, 0x31, 0x91, 0xCE, 0x9E, 0x75, 0xBD, 0x27, 0x26, 0xB4, 0xB4, 0x0C, 0x32]);\n\nexport const g_tagInfo2 = [\n    { tag : 0x380228F0, key : keys620_5v, code : 0x5A }, // -- PSPgo PSPgo 6.XX vshmain\n    { tag : 0x4C942AF0, key : keys620_5k, code : 0x43 }, // PSPgo 6.XX\n    { tag : 0x4C9428F0, key : keys620_5, code : 0x43 }, // PSPgo\n    { tag : 0x4C9429F0, key : keys570_5k, code : 0x43 }, // PSPgo 5.70\n    { tag : 0x4C941DF0, key : keys620_1, code : 0x43 }, // -- 6.00-6.20\n    { tag : 0x4C941CF0, key : keys620_0, code : 0x43 },\n    { tag : 0x457B1EF0, key : keys620_3, code : 0x5B }, // pops_04g.prx\n    { tag : 0x457B0BF0, key : keys600_u1_457B0BF0, code : 0x5B }, // -- 5.55 user modules\n    { tag : 0x457B0CF0, key : keys600_u1_457B0CF0, code : 0x5B },\n    { tag : 0x4C9419F0, key : keys500_1, code : 0x43 }, // -- 5.00 - 5.50\n    { tag : 0x4C9418F0, key : keys500_0, code : 0x43 },\n    { tag : 0x4C941FF0, key : keys500_2, code : 0x43 },\n    { tag : 0x4C9417F0, key : keys500_1, code : 0x43 },\n    { tag : 0x4C9416F0, key : keys500_0, code : 0x43 },\n    { tag : 0x4C9414F0, key : keys390_0, code : 0x43 }, // -- 3.90 keys\n    { tag : 0x4C9415F0, key : keys390_1, code : 0x43 },\n    { tag : 0xD82310F0, key : keys02G_E, code : 0x51 }, // -- ipl and file tables\n    { tag : 0xD8231EF0, key : keys03G_E, code : 0x51 },\n    { tag : 0xD82328F0, key : keys05G_E, code : 0x51 },\n    { tag : 0x4C9412F0, key : keys370_0, code : 0x43 }, // -- 3.60-3.7X keys\n    { tag : 0x4C9413F0, key : keys370_1, code : 0x43 },\n    { tag : 0x457B10F0, key : keys370_2, code : 0x5B },\n    { tag : 0x4C940DF0, key : keys360_0, code : 0x43 },\n    { tag : 0x4C9410F0, key : keys360_1, code : 0x43 },\n    { tag : 0x4C940BF0, key : keys330_0, code : 0x43 }, // -- 3.30-3.51\n    { tag : 0x457B0AF0, key : keys330_1, code : 0x5B },\n    { tag : 0x38020AF0, key : keys330_2, code : 0x5A },\n    { tag : 0x4C940AF0, key : keys330_3, code : 0x43 },\n    { tag : 0x4C940CF0, key : keys330_4, code : 0x43 },\n    { tag : 0xcfef09f0, key : keys310_0, code : 0x62 }, // -- 3.10\n    { tag : 0x457b08f0, key : keys310_1, code : 0x5B },\n    { tag : 0x380208F0, key : keys310_2, code : 0x5A },\n    { tag : 0xcfef08f0, key : keys310_3, code : 0x62 },\n    { tag : 0xCFEF07F0, key : keys303_0, code : 0x62 }, // -- 2.60-3.03\n    { tag : 0xCFEF06F0, key : keys300_0, code : 0x62 },\n    { tag : 0x457B06F0, key : keys300_1, code : 0x5B },\n    { tag : 0x380206F0, key : keys300_2, code : 0x5A },\n    { tag : 0xCFEF05F0, key : keys280_0, code : 0x62 },\n    { tag : 0x457B05F0, key : keys280_1, code : 0x5B },\n    { tag : 0x380205F0, key : keys280_2, code : 0x5A },\n    { tag : 0x16D59E03, key : keys260_0, code : 0x62 },\n    { tag : 0x76202403, key : keys260_1, code : 0x5B },\n    { tag : 0x0F037303, key : keys260_2, code : 0x5A },\n    { tag : 0x457B28F0, key : keys620_e, code : 0x5B },\t// -- misc ?\n    { tag : 0xADF305F0, key : demokeys_280, code : 0x60 }, \t// 2.80 demos data.psp\n    { tag : 0xADF306F0, key : demokeys_3XX_1, code : 0x60 },\t// 3.XX demos 1\n    { tag : 0xADF308F0, key : demokeys_3XX_2, code : 0x60 },\t// 3.XX demos 2\n    { tag : 0x8004FD03, key : ebootbin_271_new, code : 0x5D },\t// 2.71 eboot.bin\n    { tag : 0xD91605F0, key : ebootbin_280_new, code : 0x5D },\t// 2.80 eboot.bin\n    { tag : 0xD91606F0, key : ebootbin_300_new, code : 0x5D },\t// 3.00 eboot.bin\n    { tag : 0xD91608F0, key : ebootbin_310_new, code : 0x5D },\t// 3.10 eboot.bin\n    { tag : 0xD91609F0, key : key_D91609F0, code : 0x5D },\t// 5.00 eboot.bin\n    { tag : 0x2E5E10F0, key : key_2E5E10F0, code : 0x48 },\t// 6.XX eboot.bin\n    { tag : 0x2E5E12F0, key : key_2E5E12F0, code : 0x48 },\t// 6.XX eboot.bin\n    { tag : 0x2E5E12F0, key : key_2E5E13F0, code : 0x48 },\t// 6.XX eboot.bin\n    { tag : 0xD9160AF0, key : key_D9160AF0, code : 0x5D },\n    { tag : 0xD9160BF0, key : key_D9160BF0, code : 0x5D },\n    { tag : 0xD91611F0, key : key_D91611F0, code : 0x5D },\n    { tag : 0xD91612F0, key : key_D91612F0, code : 0x5D },\n    { tag : 0xD91613F0, key : key_D91613F0, code : 0x5D },\n    { tag : 0x0A35EA03, key : gameshare_260_271, code : 0x5E }, // 2.60-2.71 gameshare\n    { tag : 0x7B0505F0, key : gameshare_280, code : 0x5E },\t // 2.80 gameshare\n    { tag : 0x7B0506F0, key : gameshare_300, code : 0x5E },\t // 3.00 gameshare\n    { tag : 0x7B0508F0, key : gameshare_310, code : 0x5E },\t // 3.10+ gameshare\n    { tag : 0x279D08F0, key : oneseg_310, code : 0x61 },\t // 3.10 1SEG\n    { tag : 0x279D06F0, key : oneseg_300, code : 0x61 },\t // 3.00 1SEG\n    { tag : 0x279D05F0, key : oneseg_280, code : 0x61 },\t // 2.80 1SEG\n    { tag : 0xD66DF703, key : oneseg_260_271, code : 0x61 },\t // 2.60-2.71 1SEG\n    { tag : 0x279D10F0, key : oneseg_slim, code : 0x61 },\t // 02g 1SEG\n    { tag : 0x3C2A08F0, key : ms_app_main, code : 0x67 },\t // 1seg ms_application_main.prx\n];\n", "\uFEFFimport {\n    GetStruct,\n    Struct,\n    StructStructArray, StructStructStringz, StructUInt16,\n    StructUInt32, StructUInt8,\n    UInt16,\n    UInt32,\n    UInt8\n} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\nimport {CommandEnum, hleUtilsBufferCopyWithRange, KIRK_AES128CBC_HEADER, KirkMode} from \"../core/kirk/kirk\";\nimport {g_tagInfo} from \"./elf_crypted_prx_keys_144\";\nimport {g_tagInfo2} from \"./elf_crypted_prx_keys_16\";\n\nclass Header extends Struct{\n\t@StructUInt32 magic: number = 0;\n\t@StructUInt16 modAttr: number = 0;\n\t@StructUInt16 compModAttr: number = 0;\n\t@StructUInt8 modVerLo: number = 0;\n\t@StructUInt8 modVerHi: number = 0;\n\t@StructStructStringz(28) moduleName: string = '';\n\t@StructUInt8 modVersion: number = 0;\n\t@StructUInt8 nsegments: number = 0;\n\t@StructUInt32 elfSize: number = 0;\n\t@StructUInt32 pspSize: number = 0;\n\t@StructUInt32 bootEntry: number = 0;\n\t@StructUInt32 modInfoOffset: number = 0;\n\t@StructUInt32 bssSize: number = 0;\n\t@StructStructArray(UInt16, 4) segAlign: number[] = [];\n\t@StructStructArray(UInt32, 4) segAddress: number[] = [];\n\t@StructStructArray(UInt32, 4) segSize: number[] = [];\n\t@StructStructArray(UInt32, 5) reserved: number[] = [];\n\t@StructUInt32 devkitVersion: number = 0;\n\t@StructUInt8 decMode: number = 0;\n\t@StructUInt8 pad: number = 0;\n\t@StructUInt16 overlapSize: number = 0;\n\t@StructStructArray(UInt8, 16) aesKey: number[] = [];\n\t@StructStructArray(UInt8, 16) cmacKey: number[] = [];\n\t@StructStructArray(UInt8, 16) cmacHeaderHash: number[] = [];\n\t@StructUInt32 compressedSize: number = 0;\n\t@StructUInt32 compressedOffset: number = 0;\n\t@StructUInt32 unk1: number = 0;\n\t@StructUInt32 unk2: number = 0;\n\t@StructStructArray(UInt8, 16) cmacDataHash: number[] = [];\n\t@StructUInt32 tag: number = 0;\n\t@StructStructArray(UInt8, 88) sigcheck: number[] = [];\n\t@StructStructArray(UInt8, 20) sha1Hash: number[] = [];\n\t@StructStructArray(UInt8, 16) keyData: number[] = [];\n\n}\n\nfunction getTagInfo(checkTag: number) {\n\treturn g_tagInfo.first((item) => item.tag == checkTag);\n}\n\nfunction getTagInfo2(checkTag: number) {\n\treturn g_tagInfo2.first((item) => item.tag == checkTag);\n}\n\nfunction copyFromTo(from: Uint8Array, fromOffset: number, to: Uint8Array, toOffset: number, count: number) {\n\tfor (let n = 0; n < count; n++) {\n\t\tto[toOffset + n] = from[fromOffset + n];\n\t}\n}\n\nfunction memset(array: Uint8Array, offset: number, count: number, value: number) {\n\tfor (let n = 0; n < count; n++) array[offset + n] = value;\n}\n\nfunction decrypt1(pbIn: Stream) {\n    const cbTotal = pbIn.length;\n    const _pbOut = new Uint8Array(cbTotal);\n    const pbOut = Stream.fromUint8Array(_pbOut);\n    pbOut.slice().writeStream(pbIn);\n\n    const header = Header.struct.read(pbIn.slice());\n    const pti = getTagInfo(header.tag);\n    if (!pti) throw(new Error(\"Can't find tag \" + header.tag));\n\n\t// build conversion into pbOut\n\tpbOut.slice().writeStream(pbIn);\n\tpbOut.slice().writeByteRepeated(0x00, 0x150);\n\tpbOut.slice().writeByteRepeated(0x55, 0x40);\n\n\t// step3 demangle in place\n\t//kirk.KIRK_AES128CBC_HEADER.struct.write();\n    const h7_header = new (KIRK_AES128CBC_HEADER)();\n    h7_header.mode = KirkMode.DecryptCbc;\n\th7_header.unk_4 = 0;\n\th7_header.unk_8 = 0;\n\th7_header.keyseed = pti.code; // initial seed for PRX\n\th7_header.data_size = 0x70; // size\n\n\tGetStruct(KIRK_AES128CBC_HEADER).write(pbOut.sliceFrom(0x2C), h7_header);\n\n\t// redo part of the SIG check (step2)\n    const buffer1 = Stream.fromSize(0x150);\n    buffer1.sliceWithLength(0x00).writeStream(pbIn.sliceWithLength(0xD0, 0x80));\n\tbuffer1.sliceWithLength(0x80).writeStream(pbIn.sliceWithLength(0x80, 0x50));\n\tbuffer1.sliceWithLength(0xD0).writeStream(pbIn.sliceWithLength(0x00, 0x80));\n\n\t//console.log('buffer1', buffer1.slice().readAllBytes());\n\n\tif (pti.codeExtra != 0) {\n        const buffer2 = Stream.fromSize(20 + 0xA0);\n\n        buffer2.slice()\n\t\t\t// KIRK_AES128CBC_HEADER\n\t\t\t.writeUInt32(5)\n\t\t\t.writeUInt32(0)\n\t\t\t.writeUInt32(0)\n\t\t\t.writeUInt32(pti.codeExtra)\n\t\t\t.writeUInt32(0xA0)\n\n\t\t\t.writeStream(buffer1.sliceWithLength(0x10, 0xA0))\n\t\t;\n\n\t\thleUtilsBufferCopyWithRange(\n\t\t\tbuffer2.sliceWithLength(0, 20 + 0xA0),\n\t\t\tbuffer2.sliceWithLength(0, 20 + 0xA0),\n\t\t\tCommandEnum.DECRYPT_IV_0\n        );\n\n\t\t// copy result back\n\t\tbuffer1.slice().writeStream(buffer2.sliceWithLength(0, 0xA0));\n\t}\n\n\tpbOut.sliceFrom(0x40).writeStream(buffer1.sliceWithLength(0x40, 0x40));\n\n\tfor (let iXOR = 0; iXOR < 0x70; iXOR++) pbOut.set(0x40 + iXOR, ((pbOut.get(0x40 + iXOR) ^ pti.key[0x14 + iXOR]) & 0xFF));\n\n\thleUtilsBufferCopyWithRange(\n\t\tpbOut.sliceWithLength(0x2C, 20 + 0x70),\n\t\tpbOut.sliceWithLength(0x2C, 20 + 0x70),\n\t\tCommandEnum.DECRYPT_IV_0\n    );\n\n\tfor (let iXOR = 0x6F; iXOR >= 0; iXOR--) pbOut.set(0x40 + iXOR, ((pbOut.get(0x2C + iXOR) ^ pti.key[0x20 + iXOR]) & 0xFF));\n\n\tpbOut.sliceFrom(0x80).writeByteRepeated(0, 0x30);\n\t\n\tpbOut.set(0xA0, 1);\n\t// copy unscrambled parts from header\n\tpbOut.sliceFrom(0xB0).writeStream(pbIn.sliceWithLength(0xB0, 0x20)); // file size + lots of zeros\n\tpbOut.sliceFrom(0xD0).writeStream(pbIn.sliceWithLength(0x00, 0x80)); // ~PSP header\n\n\t// step4: do the actual decryption of code block\n\t//  point 0x40 bytes into the buffer to key info\n\thleUtilsBufferCopyWithRange(\n\t\tpbOut.sliceWithLength(0x00, cbTotal),\n\t\tpbOut.sliceWithLength(0x40, cbTotal - 0x40),\n\t\tCommandEnum.DECRYPT_PRIVATE\n\t);\n\n\t//File.WriteAllBytes(\"../../../TestInput/temp.bin\", _pbOut);\n\n    const outputSize = pbIn.sliceFrom(0xB0).readUInt32();\n\n    return pbOut.sliceWithLength(0, outputSize);\n}\n\n/*\nfunction Scramble(buf: Stream, code: number) {\n\tbuf[0] = 5;\n\tbuf[1] = buf[2] = 0;\n\tbuf[3] = (uint) code;\n\tbuf[4] = (uint) size;\n\n\tif (Kirk.hleUtilsBufferCopyWithRange((byte*) buf, size + 0x14, (byte *) buf, size + 0x14, Kirk.CommandEnum.PSP_KIRK_CMD_DECRYPT) != Kirk.ResultEnum.OK) {\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n\nfunction decrypt2(input: Stream) {\n\tconst size = input.length;\n\tlet _pbOut = new Uint8Array(size);\n\t_pbIn.CopyTo(_pbOut, 0);\n\n\tlet _tmp1 = new Uint8Array(0x150);\n\tlet _tmp2 = new Uint8Array(0x90 + 0x14);\n\tlet _tmp3 = new Uint8Array(0x60 + 0x14);\n\n\tlet HeaderPointer = (HeaderStruct*) inbuf;\n\tthis.Header = * (HeaderStruct*) inbuf;\n\tlet pti = GetTagInfo2(this.Header.Tag);\n\tConsole.WriteLine(\"{0}\", pti);\n\n\t\t\t\tint retsize = * (int *) & inbuf[0xB0];\n\n\tPointerUtils.Memset(_tmp1, 0, 0x150);\n\tPointerUtils.Memset(_tmp2, 0, 0x90 + 0x14);\n\tPointerUtils.Memset(_tmp3, 0, 0x60 + 0x14);\n\n\tPointerUtils.Memcpy(outbuf, inbuf, size);\n\n\tif (size < 0x160) {\n\t\tthrow (new InvalidDataException(\"buffer not big enough, \"));\n\t}\n\n\tif ((size - 0x150) < retsize) {\n\t\tthrow (new InvalidDataException(\"not enough data, \"));\n\t}\n\n\tPointerUtils.Memcpy(tmp1, outbuf, 0x150);\n\n\tfor (let i = 0; i < 9; i++) {\n\t\tfor (let j = 0; j < 0x10; j++) {\n\t\t\t_tmp2[0x14 + (i << 4) + j] = pti.key[j];\n\t\t}\n\n\t\t_tmp2[0x14 + (i << 4)] = (byte) i;\n\t}\n\n\tif (Scramble((uint *) tmp2, 0x90, pti.code) < 0) {\n\t\tthrow (new InvalidDataException(\"error in Scramble#1, \"));\n\t}\n\n\tPointerUtils.Memcpy(outbuf, tmp1 + 0xD0, 0x5C);\n\tPointerUtils.Memcpy(outbuf + 0x5C, tmp1 + 0x140, 0x10);\n\tPointerUtils.Memcpy(outbuf + 0x6C, tmp1 + 0x12C, 0x14);\n\tPointerUtils.Memcpy(outbuf + 0x80, tmp1 + 0x080, 0x30);\n\tPointerUtils.Memcpy(outbuf + 0xB0, tmp1 + 0x0C0, 0x10);\n\tPointerUtils.Memcpy(outbuf + 0xC0, tmp1 + 0x0B0, 0x10);\n\tPointerUtils.Memcpy(outbuf + 0xD0, tmp1 + 0x000, 0x80);\n\n\tPointerUtils.Memcpy(tmp3 + 0x14, outbuf + 0x5C, 0x60);\n\n\tif (Scramble((uint *) tmp3, 0x60, pti.code) < 0) {\n\t\tthrow (new InvalidDataException(\"error in Scramble#2, \"));\n\t}\n\n\tPointerUtils.Memcpy(outbuf + 0x5C, tmp3, 0x60);\n\tPointerUtils.Memcpy(tmp3, outbuf + 0x6C, 0x14);\n\tPointerUtils.Memcpy(outbuf + 0x70, outbuf + 0x5C, 0x10);\n\tPointerUtils.Memset(outbuf + 0x18, 0, 0x58);\n\tPointerUtils.Memcpy(outbuf + 0x04, outbuf, 0x04);\n\n\t\t\t\t*((uint *)outbuf) = 0x014C;\n\tPointerUtils.Memcpy(outbuf + 0x08, tmp2, 0x10);\n\n\t// sha-1\n\tif (Kirk.hleUtilsBufferCopyWithRange(outbuf, 3000000, outbuf, 3000000, Core.Crypto.Kirk.CommandEnum.PSP_KIRK_CMD_SHA1_HASH) != Core.Crypto.Kirk.ResultEnum.OK) {\n\t\tthrow (new InvalidDataException(\"error in sceUtilsBufferCopyWithRange 0xB, \"));\n\t}\n\n\tif (PointerUtils.Memcmp(outbuf, tmp3, 0x14) != 0) {\n\t\tthrow (new InvalidDataException(\"WARNING (SHA-1 incorrect), \"));\n\t}\n\t\n\tfor (let iXOR = 0; iXOR < 0x40; iXOR++) {\n\t\ttmp3[iXOR + 0x14] = (byte)(outbuf[iXOR + 0x80] ^ _tmp2[iXOR + 0x10]);\n\t}\n\n\tif (Scramble((uint *) tmp3, 0x40, pti.code) != 0) {\n\t\tthrow (new InvalidDataException(\"error in Scramble#3, \"));\n\t}\n\n\tfor (let iXOR = 0x3F; iXOR >= 0; iXOR--) {\n\t\toutbuf[iXOR + 0x40] = (byte)(_tmp3[iXOR] ^ _tmp2[iXOR + 0x50]); // uns 8\n\t}\n\n\tPointerUtils.Memset(outbuf + 0x80, 0, 0x30);\n\t*(uint *) & outbuf[0xA0] = 1;\n\n\tPointerUtils.Memcpy(outbuf + 0xB0, outbuf + 0xC0, 0x10);\n\tPointerUtils.Memset(outbuf + 0xC0, 0, 0x10);\n\n\t// the real decryption\n\tlet ret = Kirk.hleUtilsBufferCopyWithRange(outbuf, size, outbuf + 0x40, size - 0x40, Core.Crypto.Kirk.CommandEnum.PSP_KIRK_CMD_DECRYPT_PRIVATE);\n\tif (ret != 0) {\n\t\tthrow (new InvalidDataException(String.Format(\"error in sceUtilsBufferCopyWithRange 0x1 (0x{0:X}), \", ret)));\n\t}\n\n\tif (retsize < 0x150) {\n\t\t// Fill with 0\n\t\tPointerUtils.Memset(outbuf + retsize, 0, 0x150 - retsize);\n\t}\n\n\treturn _pbOut.Slice(0, retsize).ToArray();\n}\n*/\n\nexport function decrypt(input: Stream) {\n\treturn decrypt1(input.slice());\n}\n", "\uFEFFimport \"../emu/global\"\n\nimport {AsyncStream, Stream} from \"../global/stream\";\nimport {\n    StringWithSize,\n    Struct,\n    StructArray,\n    StructMember,\n    StructUInt16,\n    StructUInt32\n} from \"../global/struct\";\nimport {ArrayBufferUtils, PromiseFast, StringDictionary} from \"../global/utils\";\nimport {BitUtils} from \"../global/math\";\nimport {zlib_inflate_raw} from \"./zlib\";\n\nexport class ZipEntry {\n\tprivate children: StringDictionary<ZipEntry> = {};\n\t// @ts-ignore\n    zipDirEntry: ZipDirEntry;\n\tnormalizedName: string;\n\tisDirectory: boolean = false\n    // @ts-ignore\n\tcompressedData: Uint8Array;\n    // @ts-ignore\n\tuncompressedData: Uint8Array;\n\n\tget size() {\n\t\treturn this.uncompressedSize;\n\t}\n\n\tgetChildList() {\n        const list: ZipEntry[] = [];\n        for (const key in this.children) list.push(this.children[key]);\n\t\treturn list;\n\t}\n\n\tget date() {\n        const dosDate = this.zipDirEntry.dosDate;\n        const dosTime = this.zipDirEntry.dosTime;\n\n        const seconds = BitUtils.extract(dosTime, 0, 5) * 2;\n        const minutes = BitUtils.extract(dosTime, 5, 6);\n        const hours = BitUtils.extract(dosTime, 11, 6);\n        const day = BitUtils.extract(dosDate, 0, 5);\n        const month = BitUtils.extract(dosDate, 5, 4);\n        const year = BitUtils.extract(dosDate, 9, 7) + 1980;\n\n        return new Date(year, month - 1, day, hours, minutes, seconds);\n\t}\n\n\tget compressedSize() {\n\t\treturn this.zipDirEntry.compressedSize;\n\t}\n\n\tget uncompressedSize() {\n\t\treturn this.zipDirEntry.uncompressedSize;\n\t}\n\n\tget compressionType() {\n\t\treturn this.zipDirEntry.compType;\n\t}\n\n\tconstructor(private zip: Zip, public name: string, private parent: ZipEntry|null) {\n\t\tthis.normalizedName = ZipEntry.normalizeString(name);\n\t}\n\n\tprivate static normalizeString(string: string) {\n\t\treturn string.toUpperCase();\n\t}\n\n\treadRawCompressedAsync():PromiseFast<Uint8Array> {\n\t\tif (this.compressedData) return PromiseFast.resolve(this.compressedData);\n\t\treturn this.zip.zipStream.readChunkAsync(this.zipDirEntry.headerOffset, this.zipDirEntry.compressedSize + 1024).thenFast((data) => {\n            const stream = Stream.fromArrayBuffer(data);\n            const zipFileRecord = ZipFileRecord.struct.read(stream);\n            return this.compressedData = stream.readBytes(zipFileRecord.compressedSize);\n\t\t});\n\t}\n\n\treadChunkAsync(offset: number, length: number) {\n\t\treturn this.readAsync().thenFast((data) => {\n\t\t\treturn ArrayBufferUtils.fromUInt8Array(data.subarray(offset, offset + length));\n\t\t});\n\t}\n\t\n\treadAsync() {\n\t\tif (this.uncompressedData) return PromiseFast.resolve(this.uncompressedData);\n\t\treturn this.readRawCompressedAsync().thenFast((data:Uint8Array) => {\n\t\t\tswitch (this.compressionType) {\n\t\t\t\tcase ZipCompressionType.DEFLATE:\n\t\t\t\t\treturn zlib_inflate_raw(data);\n\t\t\t\tcase ZipCompressionType.STORED:\n\t\t\t\t\treturn data;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow (new Error(\"Unsupported compression type '\" + this.compressionType + \"'\"));\n\t\t\t}\n\t\t}).thenFast((data) => {\n\t\t\treturn this.uncompressedData = <Uint8Array>data;\n\t\t});\n\t}\n\n\taccess(path: string, create: boolean = false, fullPath: string = path): ZipEntry {\n\t\tif (path == '') return this;\n\t\tif (path == '.') return this;\n\t\tif (path == '..') return this.parent || this;\n\n        const pathIndex = path.indexOf('/');\n        // Single component\n\t\tif (pathIndex < 0) {\n            const normalizedName = ZipEntry.normalizeString(path);\n            let child = this.children[normalizedName];\n            if (!child) {\n\t\t\t\tif (!create) {\n\t\t\t\t\tthrow (new Error(\"ZIP: Can't access to path '\" + fullPath + \"'\"));\n\t\t\t\t} else {\n\t\t\t\t\tchild = this.children[normalizedName] = new ZipEntry(this.zip, path, this);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn child;\n\t\t} else {\n\t\t\treturn this.access(path.substr(0, pathIndex), create, fullPath).access(path.substr(pathIndex + 1), create, fullPath);\n\t\t}\n\t}\n}\n\nexport class Zip {\n\tprivate root = new ZipEntry(this, '', null);\n\n\tconstructor(public zipStream: AsyncStream, private zipDirEntries: ZipDirEntry[]) {\n\t\tzipDirEntries.forEach((zipDirEntry) => {\n            const item = this.root.access(zipDirEntry.fileName, true);\n            item.isDirectory = (zipDirEntry.fileName.substr(-1, 1) == '/');\n\t\t\titem.zipDirEntry = zipDirEntry;\n\t\t});\n\t\t//console.log(this.root);\n\t}\n\n\tget(path: string): ZipEntry {\n\t\treturn this.root.access(path);\n\t}\n\n\thas(path: string) {\n\t\ttry {\n\t\t\tthis.root.access(path);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstatic async fromStreamAsync(zipStream: AsyncStream) {\n\t\t//console.info('zipStream', zipStream);\n\n        const data = await zipStream.readChunkAsync(zipStream.size - ZipEndLocator.struct.length, ZipEndLocator.struct.length);\n        const zipEndLocator = ZipEndLocator.struct.read(Stream.fromArrayBuffer(data));\n\n        //console.log('zipEndLocator', zipEndLocator);\n\n        const data2 = await zipStream.readChunkAsync(zipEndLocator.directoryOffset, zipEndLocator.directorySize)\n        const dirEntries = StructArray<ZipDirEntry>(ZipDirEntry.struct, zipEndLocator.entriesInDirectory).read(Stream.fromArrayBuffer(data2));\n        return new Zip(zipStream, dirEntries);\n\t}\n}\n\nexport const enum ZipCompressionType {\n\tSTORED = 0,\n\tSHRUNK = 1,\n\tREDUCED1 = 2,\n\tREDUCED2 = 3,\n\tREDUCED3 = 4,\n\tREDUCED4 = 5,\n\tIMPLODED = 6,\n\tTOKEN = 7,\n\tDEFLATE = 8,\n\tDEFLATE64 = 9    \n}\n\nexport class ZipEndLocator extends Struct {\n\t@StructUInt32 magic: number = 0\n    @StructUInt16 currentDiskNumber: number = 0\n    @StructUInt16 startDiskNumber: number = 0\n    @StructUInt16 entriesOnDisk: number = 0\n    @StructUInt16 entriesInDirectory: number = 0\n    @StructUInt32 directorySize: number = 0\n    @StructUInt32 directoryOffset: number = 0\n    @StructUInt16 commentLength: number = 0\n}\n\nexport class ZipFileRecord extends Struct {\n\t@StructUInt32 magic: number = 0\n    @StructUInt16 version: number = 0\n    @StructUInt16 flags: number = 0\n    @StructUInt16 compType: ZipCompressionType = ZipCompressionType.STORED\n    @StructUInt16 dosTime: number = 0\n    @StructUInt16 dosDate: number = 0\n    @StructUInt32 crc32: number = 0\n    @StructUInt32 compressedSize: number = 0\n    @StructUInt32 uncompressedSize: number = 0\n    @StructUInt16 fileNameLength: number = 0\n    @StructUInt16 extraFieldLength: number = 0\n\t@StructMember(StringWithSize((context: ZipFileRecord) => context.fileNameLength)) fileName: string = ''\n    @StructMember(StringWithSize((context: ZipFileRecord) => context.extraFieldLength)) extraField: string = ''\n}\n\nexport class ZipDirEntry extends Struct {\n\t@StructUInt32 magic: number = 0\n\t@StructUInt16 versionMadeBy: number = 0\n    @StructUInt16 versionToExtract: number = 0\n    @StructUInt16 flags: number = 0\n    @StructUInt16 compType: ZipCompressionType = ZipCompressionType.STORED\n    @StructUInt16 dosTime: number = 0\n    @StructUInt16 dosDate: number = 0\n    @StructUInt32 crc32: number = 0\n    @StructUInt32 compressedSize: number = 0\n    @StructUInt32 uncompressedSize: number = 0\n    @StructUInt16 fileNameLength: number = 0\n    @StructUInt16 extraFieldLength: number = 0\n    @StructUInt16 fileCommentsLength: number = 0\n    @StructUInt16 diskNumberStart: number = 0\n    @StructUInt16 internalAttributes: number = 0\n    @StructUInt32 externalAttributes: number = 0\n    @StructUInt32 headerOffset: number = 0\n\t@StructMember(StringWithSize((context: ZipDirEntry) => context.fileNameLength)) fileName: string = ''\n    @StructMember(StringWithSize((context: ZipDirEntry) => context.extraFieldLength)) extraField: string = ''\n    @StructMember(StringWithSize((context: ZipDirEntry) => context.fileCommentsLength)) fileComments: string = ''\n}\n", "import \"../emu/global\"\nimport {AsyncStream, BaseAsyncStream, BufferedAsyncStream, Stream} from \"../global/stream\";\nimport {PromiseFast, PromiseGenerator, PromiseUtils, StringDictionary} from \"../global/utils\";\nimport {\n    GetStruct,\n    Int64,\n    Stringz,\n    Struct,\n    StructArray,\n    StructClass,\n    StructEntry,\n    StructMember,\n    StructStructArray,\n    StructStructStringz,\n    StructUInt16_2lb,\n    StructUInt32,\n    StructUInt32_2lb,\n    StructUInt8,\n    UInt16_2lb,\n    UInt32,\n    UInt32_2lb,\n    UInt8\n} from \"../global/struct\";\nimport {MathUtils, parseIntFormat} from \"../global/math\";\n\nconst SECTOR_SIZE = 0x800;\n\nclass DirectoryRecordDate extends Struct {\n\t@StructUInt8 year = 2004;\n    @StructUInt8 month = 1;\n    @StructUInt8 day = 1;\n    @StructUInt8 hour = 0;\n    @StructUInt8 minute = 0;\n    @StructUInt8 second = 0;\n    @StructUInt8 offset = 0;\n\n    get date() {\n        return new Date(this.year, this.month, this.day, this.hour, this.minute, this.second);\n    }\n}\n\nclass IsoStringDate extends Struct {\n    // 2009032214540800\n    @StructStructStringz(17) data: string = ''\n\n    get year() { return parseInt(this.data.substr(0, 4)); }\n    get month() { return parseInt(this.data.substr(4, 2)); }\n    get day() { return parseInt(this.data.substr(6, 2)); }\n    get hour() { return parseInt(this.data.substr(8, 2)); }\n    get minute() { return parseInt(this.data.substr(10, 2)); }\n    get second() { return parseInt(this.data.substr(12, 2)); }\n    get hsecond() { return parseInt(this.data.substr(14, 2)); }\n    get offset() { return parseInt(this.data.substr(16, 1)); }\n}\n\nenum VolumeDescriptorHeaderType { // : byte\n\tBootRecord = 0x00,\n\tVolumePartitionSetTerminator = 0xFF,\n\tPrimaryVolumeDescriptor = 0x01,\n\tSupplementaryVolumeDescriptor = 0x02,\n\tVolumePartitionDescriptor = 0x03,\n}\n\nclass VolumeDescriptorHeader extends Struct {\n\t@StructUInt8 type: VolumeDescriptorHeaderType = VolumeDescriptorHeaderType.BootRecord\n\t@StructStructStringz(5) id: string = ''\n\t@StructUInt8 version: number = 0\n}\n\nenum DirectoryRecordFlags {// : byte\n    Unknown1 = 1 << 0,\n    Directory = 1 << 1,\n    Unknown2 = 1 << 2,\n    Unknown3 = 1 << 3,\n    Unknown4 = 1 << 4,\n    Unknown5 = 1 << 5,\n}\n\n\nclass DirectoryRecord extends Struct {\n\t@StructUInt8 length = 0;\n    @StructUInt8 extendedAttributeLength = 0;\n    @StructUInt32_2lb extent = 0;\n    @StructUInt32_2lb size = 0;\n\t@StructMember(DirectoryRecordDate.struct) date = new DirectoryRecordDate();\n    @StructUInt8 flags = DirectoryRecordFlags.Directory;\n    @StructUInt8 fileUnitSize = 0;\n    @StructUInt8 interleave = 0;\n    @StructUInt16_2lb volumeSequenceNumber = 0;\n    @StructUInt8 nameLength = 0;\n    name = '';\n    get offset() { return this.extent * SECTOR_SIZE; }\n    get isDirectory() { return (this.flags & DirectoryRecordFlags.Directory) != 0; }\n}\n\nclass PrimaryVolumeDescriptor extends Struct {\n\t// @ts-ignore\n    @StructMember(VolumeDescriptorHeader.struct) header: VolumeDescriptorHeader;\n    @StructUInt8 _pad1: number = 0\n\t@StructStructStringz(0x20) systemId: string = ''\n    @StructStructStringz(0x20) volumeId: string = ''\n    @StructMember(Int64) _pad2: number = 0\n    @StructUInt32_2lb volumeSpaceSize: number = 0\n    @StructMember(StructArray(Int64, 4)) _pad3: any = null\n    @StructUInt32 volumeSetSize: number = 0\n    @StructUInt32 volumeSequenceNumber: number = 0\n    @StructUInt16_2lb logicalBlockSize: number = 0\n    @StructUInt32_2lb pathTableSize: number = 0\n    @StructUInt32 typeLPathTable: number = 0\n    @StructUInt32 optType1PathTable: number = 0\n    @StructUInt32 typeMPathTable: number = 0\n    @StructUInt32 optTypeMPathTable: number = 0\n\n    // @ts-ignore\n    @StructMember(DirectoryRecord.struct) directoryRecord: DirectoryRecord;\n\n    @StructUInt8 _pad4: number = 0\n\n    @StructStructStringz(0x80) volumeSetId: string = ''\n    @StructStructStringz(0x80) publisherId: string = ''\n    @StructStructStringz(0x80) preparerId: string = ''\n    @StructStructStringz(0x80) applicationId: string = ''\n    @StructStructStringz(37) copyrightFileId: string = ''\n    @StructStructStringz(37) abstractFileId: string = ''\n    @StructStructStringz(37) bibliographicFileId: string = ''\n\n    // @ts-ignore\n    @StructMember(IsoStringDate.struct) creationDate: IsoStringDate\n    // @ts-ignore\n    @StructMember(IsoStringDate.struct) modificationDate: IsoStringDate\n    // @ts-ignore\n    @StructMember(IsoStringDate.struct) expirationDate: IsoStringDate\n    // @ts-ignore\n    @StructMember(IsoStringDate.struct) effectiveDate: IsoStringDate\n\n    @StructUInt8 fileStructureVersion: number = 0\n    @StructUInt8 pad5: number = 0\n\n\t@StructStructArray(UInt8, 0x200) pad6: number = 0\n    @StructStructArray(UInt8, 653) pad7: number[] = []\n\n    applicationData: number[] = []\n}\n\nexport interface IIsoNode {\n\treadChunkAsync(offset: number, length: number):PromiseFast<ArrayBuffer>\n    childs: IIsoNode[];\n    childsByName: StringDictionary<IIsoNode>;\n    path: string;\n    name: string;\n\tsize: number;\n\textent: number;\n    isDirectory: boolean;\n    date: Date;\n}\n\nclass IsoNode implements IIsoNode {\n    childs: IsoNode[] = [];\n    childsByName: StringDictionary<IsoNode> = {};\n\n    constructor(private iso: Iso, public directoryRecord: DirectoryRecord, public parent: IsoNode|null = null) {\n    }\n\n    get isRoot() { return this.parent == null; }\n    get size() { return this.directoryRecord.size; }\n    get path():string { return (this.parent && !this.parent.isRoot) ? (`${this.parent.path}/${this.name}`) : this.name; }\n    get name() { return this.directoryRecord.name;  }\n    get isDirectory() { return this.directoryRecord.isDirectory; }\n\tget date() { return this.directoryRecord.date.date; }\n\tget extent() { return this.directoryRecord.extent; }\n\n\treadChunkAsync(offset: number, count: number): PromiseFast<ArrayBuffer> {\n        const fileBaseLow = this.directoryRecord.offset;\n        const low = fileBaseLow + offset;\n        const high = Math.min(low + count, fileBaseLow + this.size);\n        return this.iso.readChunkAsync(low, high - low);\n\t}\n\n    addChild(child: IsoNode) {\n        this.childs.push(child);\n        this.childsByName[child.name] = child;\n    }\n\n    toString() {\n        return `IsoNode(${this.path}, ${this.size})`;\n    }\n}\n\nexport class Iso extends BaseAsyncStream {\n    // @ts-ignore\n    private asyncStream: AsyncStream;\n    // @ts-ignore\n    private _root: IsoNode;\n    // @ts-ignore\n    private _children: IsoNode[];\n    // @ts-ignore\n    private _childrenByPath: StringDictionary<IsoNode>;\n\n\tdate: Date = new Date();\n\tget name() { return this.asyncStream.name; }\n    get root(): IIsoNode { return this._root; }\n    get childrenByPath(): StringDictionary<IIsoNode> { return this._childrenByPath; }\n    get children(): IIsoNode[]{ return this._children.slice(0); }\n\n    static fromStreamAsync(asyncStream: AsyncStream) {\n        return new Iso().loadAsync(asyncStream);\n        //return new Iso().loadAsync(asyncStream);\n\t}\n\n\tget(path: string): IIsoNode {\n\t\tpath = path.replace(/^\\/+/, '');\n\n        const sce_file = path.match(/^sce_lbn(0x[0-9a-f]+|\\d+)_size(0x[0-9a-f]+|\\d+)$/i);\n        if (sce_file) {\n            const lba = parseIntFormat(sce_file[1]);\n            const size = parseIntFormat(sce_file[2]);\n            const dr = new DirectoryRecord();\n            dr.extent = lba;\n\t\t\tdr.size = size;\n\t\t\tdr.name = '';\n\t\t\t//console.log(dr);\n\t\t\treturn new IsoNode(this, dr, null);\n\t\t}\n\n\t\tif (path == '') return this.root;\n        const node = this._childrenByPath[path];\n        if (!node) {\n\t\t\t//console.info(this);\n\t\t\tthrow (new Error(`Can't find node '${path}'`));\n\t\t}\n\t\treturn node;\n\t}\n\n\tget size() { return this.asyncStream.size; }\n\n\treadChunkPromiseAsync(offset: number, count: number) {\n\t\treturn this.asyncStream.readChunkPromiseAsync(offset, count);\n\t}\n\n    async loadAsync(asyncStream: AsyncStream) {\n\t\tthis.asyncStream = asyncStream;\n\t\tthis.date = asyncStream.date;\n\n        if (PrimaryVolumeDescriptor.struct.length != SECTOR_SIZE) throw `Invalid PrimaryVolumeDescriptor.struct size ${PrimaryVolumeDescriptor.struct.length} != ${SECTOR_SIZE}`;\n\n        const arrayBuffer = await asyncStream.readChunkAsync(SECTOR_SIZE * 0x10, 0x800)\n\n        const stream = Stream.fromArrayBuffer(arrayBuffer);\n        const pvd = PrimaryVolumeDescriptor.struct.read(stream);\n        if (pvd.header.type != VolumeDescriptorHeaderType.PrimaryVolumeDescriptor) throw `Not an ISO file`;\n        if (pvd.header.id != 'CD001') throw `Not an ISO file`;\n\n        this._children = [];\n        this._childrenByPath = {};\n        this._root = new IsoNode(this, pvd.directoryRecord);\n\n        await this.processDirectoryRecordAsync(this._root)\n\n        return this\n    }\n\n    private async processDirectoryRecordAsync(parentIsoNode: IsoNode) {\n        const directoryStart = parentIsoNode.directoryRecord.extent * SECTOR_SIZE;\n        const directoryLength = parentIsoNode.directoryRecord.size;\n\n        //const start = performance.now()\n        const data = await this.asyncStream.readChunkAsync(directoryStart, directoryLength)\n        //const end = performance.now()\n        //console.warn(end - start)\n        const directoryStream = Stream.fromArrayBuffer(data);\n\n        while (directoryStream.available) {\n            const directoryRecordSize = directoryStream.readUInt8();\n\n            // Even if a directory spans multiple sectors, the directory entries are not permitted to cross the sector boundary (unlike the path table).\n            // Where there is not enough space to record an entire directory entry at the end of a sector, that sector is zero-padded and the next\n            // consecutive sector is used.\n            if (directoryRecordSize == 0) {\n                directoryStream.position = MathUtils.nextAligned(directoryStream.position, SECTOR_SIZE);\n                //Console.WriteLine(\"AlignedTo: {0:X}\", DirectoryStream.Position);\n                continue;\n            }\n\n            directoryStream.position = directoryStream.position - 1;\n\n            //Console.WriteLine(\"[{0}:{1:X}-{2:X}]\", DirectoryRecordSize, DirectoryStream.Position, DirectoryStream.Position + DirectoryRecordSize);\n\n            const directoryRecordStream = directoryStream.readStream(directoryRecordSize);\n            const directoryRecord = GetStruct(DirectoryRecord).read(directoryRecordStream);\n            directoryRecord.name = directoryRecordStream.readStringz(directoryRecordStream.available);\n\n\n            //Console.WriteLine(\"{0}\", name); Console.ReadKey();\n\n            if (directoryRecord.name == \"\" || directoryRecord.name == \"\\x01\") continue;\n\n            //console.log(directoryRecord);\n\n            //writefln(\"   %s\", name);\n\n            const child = new IsoNode(this, directoryRecord, parentIsoNode);\n            parentIsoNode.addChild(child);\n            this._children.push(child);\n            this._childrenByPath[child.path] = child;\n        }\n\n        for (const child of parentIsoNode.childs) {\n            if (child.isDirectory) {\n                await this.processDirectoryRecordAsync(child)\n            }\n        }\n    }\n}\n", "\uFEFFimport \"../emu/global\"\nimport {logger, StringDictionary} from \"../global/utils\";\nimport {\n    Int8, Struct,\n    StructArray,\n    StructInt16, StructInt32, StructInt8,\n    StructStructArray, StructStructStringn, StructUInt16, StructUInt32\n} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\nimport {Memory} from \"../core/memory\";\n\nconst console = logger.named('elf');\n\nexport class ElfHeader extends Struct {\n    @StructStructStringn(4) magic: string = ''\n\t@StructInt8 class: number = 0\n\t@StructInt8 data: number = 0\n\t@StructInt8 idVersion: number = 0\n\t@StructStructArray(Int8, 9) _padding: number[] = []\n\t@StructUInt16 type: ElfType = 0\n\t@StructInt16 machine: ElfMachine = 0\n\t@StructInt32 version: number = 0\n\t@StructInt32 entryPoint: number = 0\n\t@StructInt32 programHeaderOffset: number = 0\n\t@StructInt32 sectionHeaderOffset: number = 0\n\t@StructInt32 flags: number = 0\n\t@StructInt16 elfHeaderSize: number = 0\n\t@StructInt16 programHeaderEntrySize: number = 0\n\t@StructInt16 programHeaderCount: number = 0\n\t@StructInt16 sectionHeaderEntrySize: number = 0\n\t@StructInt16 sectionHeaderCount: number = 0\n\t@StructInt16 sectionHeaderStringTable: number = 0\n\n\tget hasValidMagic() {\n\t\treturn this.magic == '\\u007FELF';\n\t}\n\n\tget hasValidMachine() {\n\t\treturn this.machine == ElfMachine.ALLEGREX;\n\t}\n\n\tget hasValidType() {\n\t\treturn [ElfType.Executable, ElfType.Prx].indexOf(this.type) >= 0;\n\t}\n}\n\nexport class ElfProgramHeader extends Struct {\n\t@StructUInt32 type: ElfProgramHeaderType = ElfProgramHeaderType.NoLoad\n    @StructUInt32 offset: number = 0\n    @StructUInt32 virtualAddress: number = 0\n    @StructUInt32 psysicalAddress: number = 0\n    @StructUInt32 fileSize: number = 0\n    @StructUInt32 memorySize: number = 0\n    @StructUInt32 flags: ElfProgramHeaderFlags = ElfProgramHeaderFlags.Executable\n    @StructUInt32 alignment: number = 0\n}\n\nexport class ElfSectionHeader extends Struct {\n    @StructUInt32 nameOffset: number = 0\n    @StructUInt32 type: ElfSectionHeaderType = ElfSectionHeaderType.Null\n    @StructUInt32 flags: ElfSectionHeaderFlags = ElfSectionHeaderFlags.None\n    @StructUInt32 address: number = 0\n    @StructUInt32 offset: number = 0\n    @StructUInt32 size: number = 0\n    @StructUInt32 link: number = 0\n    @StructUInt32 info: number = 0\n    @StructUInt32 addressAlign: number = 0\n    @StructUInt32 entitySize: number = 0\n\n    name: string = ''\n    // @ts-ignore\n    stream: Stream\n}\n\nexport const enum ElfProgramHeaderType {\n\tNoLoad = 0,\n\tLoad = 1,\n\tReloc1 = 0x700000A0,\n\tReloc2 = 0x700000A1,\n}\n\nexport const enum ElfSectionHeaderType {\n\tNull = 0,\n\tProgramBits = 1,\n\tSYMTAB = 2,\n\tSTRTAB = 3,\n\tRELA = 4,\n\tHASH = 5,\n\tDYNAMIC = 6,\n\tNOTE = 7,\n\tNoBits = 8,\n\tRelocation = 9,\n\tSHLIB = 10,\n\tDYNSYM = 11,\n\n\tLOPROC = 0x70000000, HIPROC = 0x7FFFFFFF,\n\tLOUSER = 0x80000000, HIUSER = 0xFFFFFFFF,\n\n\tPrxRelocation = (LOPROC | 0xA0),\n\tPrxRelocation_FW5 = (LOPROC | 0xA1),\n}\n\nexport const enum ElfSectionHeaderFlags {\n\tNone = 0,\n\tWrite = 1,\n\tAllocate = 2,\n\tExecute = 4\n}\n\nexport const enum ElfProgramHeaderFlags {\n\tExecutable = 0x1,\n\t// Note: demo PRX's were found to be not writable\n\tWritable = 0x2,\n\tReadable = 0x4,\n}\n\nexport const enum ElfType {\n\tExecutable = 0x0002,\n\tPrx = 0xFFA0,\n}\n\nexport const enum ElfMachine {\n\tALLEGREX = 8,\n}\n\nexport const enum ElfPspModuleFlags // ushort\n{\n\tUser = 0x0000,\n\tKernel = 0x1000,\n}\n\nexport const enum ElfPspLibFlags // ushort\n{\n\tDirectJump = 0x0001,\n\tSyscall = 0x4000,\n\tSysLib = 0x8000,\n}\n\nexport const enum ElfPspModuleNids // uint\n{\n\tMODULE_INFO = 0xF01D73A7,\n\tMODULE_BOOTSTART = 0xD3744BE0,\n\tMODULE_REBOOT_BEFORE = 0x2F064FA6,\n\tMODULE_START = 0xD632ACDB,\n\tMODULE_START_THREAD_PARAMETER = 0x0F7C276C,\n\tMODULE_STOP = 0xCEE8593C,\n\tMODULE_STOP_THREAD_PARAMETER = 0xCF0CC697,\n}\n\n\t\nexport const enum ElfRelocType {\n\tNone = 0,\n\tMips16 = 1,\n\tMips32 = 2,\n\tMipsRel32 = 3,\n\tMips26 = 4,\n\tMipsHi16 = 5,\n\tMipsLo16 = 6,\n\tMipsGpRel16 = 7,\n\tMipsLiteral = 8,\n\tMipsGot16 = 9,\n\tMipsPc16 = 10,\n\tMipsCall16 = 11,\n\tMipsGpRel32 = 12,\n\tStopRelocation = 0xFF,\n}\n\nexport class ElfReloc extends Struct {\n\t@StructUInt32 pointerAddress: number = 0\n    @StructUInt32 info: number = 0\n\n\tget pointeeSectionHeaderBase() { return (this.info >> 16) & 0xFF; }\n\tget pointerSectionHeaderBase() { return (this.info >> 8) & 0xFF; }\n\tget type() { return <ElfRelocType>((this.info >> 0) & 0xFF); }\n}\n\n\nexport class ElfLoader {\n\t// @ts-ignore\n    public header: ElfHeader;\n    // @ts-ignore\n\tstream: Stream;\n\tpublic programHeaders: ElfProgramHeader[] = []\n\tpublic sectionHeaders: ElfSectionHeader[] = []\n\t// @ts-ignore\n    public sectionHeadersByName: StringDictionary<ElfSectionHeader>;\n    // @ts-ignore\n\tprivate sectionHeaderStringTable: ElfSectionHeader;\n    // @ts-ignore\n\tprivate stringTableStream: Stream;\n\n\tconstructor() {\n\t}\n\n\tload(stream: Stream) {\n\t\tthis.stream = stream;\n\t\tthis.readAndCheckHeaders(stream);\n\n        const programHeadersStream = stream.sliceWithLength(this.header.programHeaderOffset, this.header.programHeaderCount * this.header.programHeaderEntrySize);\n        const sectionHeadersStream = stream.sliceWithLength(this.header.sectionHeaderOffset, this.header.sectionHeaderCount * this.header.sectionHeaderEntrySize);\n\n        this.programHeaders = StructArray<ElfProgramHeader>(ElfProgramHeader.struct, this.header.programHeaderCount).read(programHeadersStream);\n\t\tthis.sectionHeaders = StructArray<ElfSectionHeader>(ElfSectionHeader.struct, this.header.sectionHeaderCount).read(sectionHeadersStream);\n\n\t\tthis.sectionHeaderStringTable = this.sectionHeaders[this.header.sectionHeaderStringTable];\n\t\tthis.stringTableStream = this.getSectionHeaderFileStream(this.sectionHeaderStringTable);\n\n\t\tthis.sectionHeadersByName = {};\n\t\tthis.sectionHeaders.forEach((sectionHeader) => {\n            const name = this.getStringFromStringTable(sectionHeader.nameOffset);\n            sectionHeader.name = name;\n\t\t\tif (sectionHeader.type != ElfSectionHeaderType.Null) {\n\t\t\t\tsectionHeader.stream = this.getSectionHeaderFileStream(sectionHeader);\n\t\t\t}\n\t\t\tthis.sectionHeadersByName[name] = sectionHeader;\n\t\t});\n\n\t\tconsole.log(this.sectionHeadersByName);\n\t}\n\n\tprivate readAndCheckHeaders(stream: Stream) {\n\t\tthis.stream = stream;\n        const header = this.header = ElfHeader.struct.read(stream);\n        if (!header.hasValidMagic) throw new Error('Not an ELF file')\n\t\tif (!header.hasValidMachine) throw new Error('Not a PSP ELF file')\n\t\tif (!header.hasValidType) throw new Error(`Not a executable or a Prx but has type ${header.type}`)\n\t}\n\n\tprivate getStringFromStringTable(index: number) {\n\t\tthis.stringTableStream.position = index;\n\t\treturn this.stringTableStream.readStringz();\n\t}\n\n\tprivate getSectionHeaderFileStream(sectionHeader: ElfSectionHeader) {\n\t\t//console.log(`::${sectionHeader.type} ; ${sectionHeader.offset} ; ${sectionHeader.size}`);\n\t\tswitch (sectionHeader.type) {\n\t\t\tcase ElfSectionHeaderType.NoBits: case ElfSectionHeaderType.Null:\n\t\t\t\treturn this.stream!.sliceWithLength(0, 0);\n\t\t\tdefault:\n\t\t\t\treturn this.stream!.sliceWithLength(sectionHeader.offset, sectionHeader.size);\n\t\t}\n\t}\n\n\tstatic fromStream(stream: Stream) {\n        const elf = new ElfLoader();\n        elf.load(stream);\n\t\treturn elf;\n\t}\n\n\tget isPrx() { return (this.header.type & ElfType.Prx) != 0; }\n\tget needsRelocation() { return this.isPrx || (this.header.entryPoint < Memory.MAIN_OFFSET); }\n}\n", "\uFEFFimport \"../emu/global\"\n\nimport {addressToHex, logger} from \"../global/utils\";\nimport {\n    Int8,\n    IType,\n    StringzVariable,\n    Struct,\n    StructArray,\n    StructClass, StructInt8, StructMember, StructStructStringzVariable, StructUInt16, StructUInt32, StructUInt8,\n    UInt16,\n    UInt32,\n    UInt8\n} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\nimport {BitUtils} from \"../global/math\";\nimport {ElfLoader} from \"./elf\";\nimport {ISymbol} from \"../emu/context\";\n\nconst console = logger.named('elf.dwarf');\n\n// https://github.com/soywiz/pspemu/blob/master/src/pspemu/hle/elf/ElfDwarf.d\n\nclass Uleb128Class implements IType<number> {\n\tread(stream: Stream): number {\n        let val = 0;\n        let b = 0x80;\n\n        for (let shift = 0; ((stream.available) > 0 && (b & 0x80)); shift += 7) {\n\t\t\tb = stream.readUInt8();\n\t\t\tval |= (b & 0x7F) << shift;\n\t\t}\n\n\t\treturn val;\n\t}\n\twrite(stream: Stream, value: number): void {\n\t\tthrow(new Error(\"Not implemented\"));\n\t}\n\tget length() { return 0; }\n}\n\nconst Uleb128 = new Uleb128Class();\nexport const StructUleb128: any = StructMember(Uleb128)\n\nclass ElfDwarfHeader extends Struct {\n\t@StructUInt32 total_length: number = 0\n\t@StructUInt16 version: number = 0\n\t@StructUInt32 prologue_length: number = 0\n    @StructUInt8 minimum_instruction_length: number = 0\n    @StructUInt8 default_is_stmt: number = 0\n    @StructInt8 line_base: number = 0\n    @StructInt8 line_range: number = 0\n    @StructInt8 opcode_base: number = 0\n\n\tget total_length_real() { return this.total_length + 4; }\n}\n\nenum DW_LNS {\n\textended_op = 0,\n\tcopy = 1,\n\tadvance_pc = 2,\n\tadvance_line = 3,\n\tset_file = 4,\n\tset_column = 5,\n\tnegate_stmt = 6,\n\tset_basic_block = 7,\n\tconst_add_pc = 8,\n\tfixed_advance_pc = 9,\n}\n\nenum DW_LNE {\n\tend_sequence = 1,\n\tset_address = 2,\n\tdefine_file = 3,\n}\n\n// 6.2.2 State Machine Registers\n/*\nclass State {\n\tuint address = 0;\n\tuint file = 1;\n\tuint line = 1;\n\tuint column = 0;\n\tbool is_stmt = false; // Must be setted by the header.\n\tbool basic_block = false;\n\tbool end_sequence = false;\n\tFileEntry * file_entry;\n\n\tstring file_full_path() { return file_entry.full_path; }\n\n\t//writefln(\"DW_LNS_copy: %08X, %s/%s:%d\", state.address, directories[files[state.file].directory_index], files[state.file].name, state.line);\n\tstring toString() {\n\t\t//return std.string.format(\"%08X: is_stmt(%d) basic_block(%d) end_sequence(%d) '%s':%d:%d \", address, is_stmt, basic_block, end_sequence, file_entry.full_path, line, column);\n\t\treturn std.string.format(\"%08X: '%s':%d:%d \", address, file_entry.full_path, line, column);\n\t}\n}\n*/\n\nclass FileEntry extends Struct {\n\t@StructStructStringzVariable name: string = '';\n\t@StructUleb128 directory_index: number = 0;\n    @StructUleb128 time_mod: number = 0;\n    @StructUleb128 size: number = 0;\n\n    directory: string = '';\n\n    full_path() {\n\t\tif (this.directory.length) {\n\t\t\treturn this.directory + \"/\" + this.name;\n\t\t} else {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nexport class ElfSymbol extends Struct {\n\t@StructUInt32 nameIndex: number = 0;\n\t@StructUInt32 value: number = 0;\n\t@StructUInt32 size: number = 0;\n\t@StructUInt8 info: number = 0;\n\t@StructUInt8 other: number = 0;\n\t@StructUInt16 shndx: number = 0;\n\n    name: string = '';\n    index: number = -1;\n\n    get type() { return <SymInfoType>BitUtils.extract(this.info, 0, 4); }\n\tget bind() { return <SymInfoBind>BitUtils.extract(this.info, 4, 4); }\n\n\tget typeName(): string { return SymInfoType[this.type]; }\n\tget bindName(): string { return SymInfoBind[this.bind]; }\n\n\tget address() { return this.value; }\n\tget low() { return this.value; }\n\tget high() { return this.value + this.size; }\n\n\ttoString() {\n\t\treturn `ElfSymbol(\"${this.name}\", ${addressToHex(this.low)}-${addressToHex(this.high)}`;\n\t}\n\n\tcontains(address: number) {\n\t\treturn (address >= this.low) && (address < (this.high));\n\t}\n}\n\nexport enum SymInfoBind {\n\tLOCAL = 0,\n\tGLOBAL = 1,\n\tWEAK = 2,\n\tOS_1 = 10,\n\tOS_2 = 11,\n\tOS_3 = 12,\n\tPROC_1 = 13,\n\tPROC_2 = 14,\n\tPROC_3 = 15\n}\n\nexport enum SymInfoType {\n\tNOTYPE = 0,\n\tOBJECT = 1,\n\tFUNC = 2,\n\tSECTION = 3,\n\tFILE = 4,\n\tOS_1 = 10,\n\tOS_2 = 11,\n\tOS_3 = 12,\n\tPROC_1 = 13,\n\tPROC_2 = 14,\n\tPROC_3 = 15\n}\n\nexport class ElfDwarfLoader {\n\tprivate symbolEntries: ElfSymbol[] = [];\n\n\tconstructor() {\n\t}\n\n\tparseElfLoader(elf: ElfLoader) {\n\t\t//this.parseDebugLine(elf);\n\t\tthis.parseSymtab(elf);\n\t}\n\n\tprivate parseSymtab(elf: ElfLoader) {\n\t\tconsole.log('ElfDwarfLoader.parseSymtab');\n        const symtabHeader = elf.sectionHeadersByName[\".symtab\"];\n        if (!symtabHeader) return;\n\n        const nameSection = elf.sectionHeaders[symtabHeader.link];\n\n        const nameStream = nameSection.stream!.sliceWithLength(0);\n        const stream = symtabHeader.stream!.sliceWithLength(0);\n\n        let n = 0;\n        try {\n\t\t\twhile (stream.available > 0) {\n                const entry = ElfSymbol.struct.read(stream);\n                entry.name = nameStream.sliceWithLength(entry.nameIndex).readStringz();\n\t\t\t\tentry.index = n;\n\t\t\t\tthis.symbolEntries.push(entry);\n\t\t\t\tn++;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t}\n\n\t\tthis.symbolEntries.sortBy(item => item.value);\n\t}\n\n\tgetSymbolAt(address: number): ISymbol | null {\n\t\t//console.log(`this.symbolEntries: ${this.symbolEntries.length}`);\n\t\tfor (let n = 0; n < this.symbolEntries.length; n++) {\n            const entry = this.symbolEntries[n];\n            if (entry.contains(address)) return entry;\n\t\t}\n\t\t/*\n\t\treturn this.symbolEntries.binarySearchValue((item) => {\n\t\t\tif (address < item.value) return +1;\n\t\t\tif (address >= item.value + item.size) return -1;\n\t\t\treturn 0;\n\t\t});\n\t\t*/\n\t\treturn null;\n\t}\n\n\tprivate parseDebugLine(elf: ElfLoader) {\n\t\tconsole.log('ElfDwarfLoader.parseDebugLine');\n        const sectionHeader = elf.sectionHeadersByName[\".debug_line\"];\n        console.log(sectionHeader);\n        const stream = sectionHeader.stream!.sliceWithLength(0);\n        const header = ElfDwarfHeader.struct.read(stream);\n        console.log(header);\n        const opcodes = StructArray<number>(Uleb128, header.opcode_base).read(stream);\n        console.log(opcodes);\n\t\twhile (stream.available > 0) {\n\t\t\tconsole.log('item:');\n            const item = StringzVariable.read(stream);\n            if (!item.length) break;\n\t\t\tconsole.log(item);\n\t\t}\n\n\t\twhile (stream.available > 0) {\n            const entry = FileEntry.struct.read(stream);\n            console.log(entry);\n\t\t\tif (!entry.name.length) break;\n\t\t}\n\t}\n}\n", "export const ModuleKnownFunctionNamesDatabase: any = {\n    \"sceAmctrl_driver\": {\n        \"0x0785C974\": \"sceDrmBBCipherUpdate\",\n        \"0x1CCB66D2\": \"sceDrmBBCipherInit\",\n        \"0x525B8218\": \"sceDrmBBMacInit\",\n        \"0x58163FBE\": \"sceDrmBBMacUpdate\",\n        \"0x9951C50F\": \"sceDrmBBCipherFinal\",\n        \"0xEF95A213\": \"sceDrmBBMacFinal\",\n        \"0xF5186D8E\": \"sceDrmBBMacFinal2\"\n    },\n    \"sceAta_driver\": {\n        \"0x110D3739\": \"sceAtaSetDriveStat\",\n        \"0x12805193\": \"sceAtaAhbSetupBus\",\n        \"0x3AA3FA39\": \"sceAtaSelectDevice\",\n        \"0x68DEA2FF\": \"sceAtaClearIntrStateFlag\",\n        \"0x6C58F096\": \"sceAtaWaitBusBusy1\",\n        \"0x6E639701\": \"sceAtaScanDevice\",\n        \"0x7BBA095C\": \"sceAtaClearDriveStat\",\n        \"0xAC800B1D\": \"sceAtaDisableClkIo\",\n        \"0xC74F04B7\": \"sceAtaExecPacketCmd\",\n        \"0xD1E6E175\": \"sceAtaEnableClkIo\"\n    },\n    \"sceAudio_driver\": {},\n    \"sceAudio\": {\n        \"0x01562BA3\": \"sceAudioOutput2Reserve\",\n        \"0x086E5895\": \"sceAudioInputBlocking\",\n        \"0x136CAF51\": \"sceAudioOutputBlocking\",\n        \"0x13F592BC\": \"sceAudioOutputPannedBlocking\",\n        \"0x2D53F36E\": \"sceAudioOutput2OutputBlocking\",\n        \"0x38553111\": \"sceAudioSRCChReserve\",\n        \"0x41EFADE7\": \"sceAudioOneshotOutput\",\n        \"0x43196845\": \"sceAudioOutput2Release\",\n        \"0x5C37C0AE\": \"sceAudioSRCChRelease\",\n        \"0x5EC81C55\": \"sceAudioChReserve\",\n        \"0x63F2889C\": \"sceAudioOutput2ChangeLength\",\n        \"0x647CEF33\": \"sceAudioOutput2GetRestSample\",\n        \"0x6D4BEC68\": \"sceAudioInput\",\n        \"0x6FC46853\": \"sceAudioChRelease\",\n        \"0x7DE61688\": \"sceAudioInputInit\",\n        \"0x87B2E651\": \"sceAudioWaitInputEnd\",\n        \"0x8C1009B2\": \"sceAudioOutput\",\n        \"0x95FD0C2D\": \"sceAudioChangeChannelConfig\",\n        \"0xA633048E\": \"sceAudioPollInputEnd\",\n        \"0xA708C6A6\": \"sceAudioGetInputLength\",\n        \"0xB011922F\": \"sceAudioGetChannelRestLength\",\n        \"0xB7E1D8E7\": \"sceAudioChangeChannelVolume\",\n        \"0xCB2E439E\": \"sceAudioSetChannelDataLen\",\n        \"0xE0727056\": \"sceAudioSRCOutputBlocking\",\n        \"0xE2D56B2D\": \"sceAudioOutputPanned\",\n        \"0xE926D3FB\": \"sceAudioInputInitEx\",\n        \"0xE9D97901\": \"sceAudioGetChannelRestLen\"\n    },\n    \"sceAudiocodec\": {\n        \"0x29681260\": \"sceAudiocodecReleaseEDRAM\",\n        \"0x3A20A200\": \"sceAudiocodecGetEDRAM\",\n        \"0x5B37EB1D\": \"sceAudiocodecInit\",\n        \"0x70A703F8\": \"sceAudiocodecDecode\",\n        \"0x8ACA11D5\": \"sceAudiocodecGetInfo\",\n        \"0x9D3F790C\": \"sceAudiocodecCheckNeedMem\"\n    },\n    \"sceAvcodec_driver\": {\"0x4A0592C7\": \"sceAvcodecStartEntry\", \"0xC692C906\": \"sceAvcodecEndEntry\"},\n    \"sceVideocodec\": {\n        \"0x17099F0A\": \"sceVideocodecInit\",\n        \"0x26927D19\": \"sceVideocodecGetVersion\",\n        \"0x2D31F5B1\": \"sceVideocodecGetEDRAM\",\n        \"0x2F385E7F\": \"sceVideocodecScanHeader\",\n        \"0x307E6E1C\": \"sceVideocodecDelete\",\n        \"0x4F160BF4\": \"sceVideocodecReleaseEDRAM\",\n        \"0x627B7D42\": \"sceVideocodecGetSEI\",\n        \"0x745A7B7A\": \"sceVideocodecSetMemory\",\n        \"0xA2F0564E\": \"sceVideocodecStop\",\n        \"0xC01EC829\": \"sceVideocodecOpen\",\n        \"0xDBA273FA\": \"sceVideocodecDecode\"\n    },\n    \"sceMpegbase\": {\n        \"0x304882E1\": \"sceMpegBaseCscAvcRange\",\n        \"0x492B5E4B\": \"sceMpegBaseCscInit\",\n        \"0x7AC0321A\": \"sceMpegBaseYCrCbCopy\",\n        \"0x91929A21\": \"sceMpegBaseCscAvc\",\n        \"0xBE45C284\": \"sceMpegBaseYCrCbCopyVme\",\n        \"0xCE8EB837\": \"sceMpegBaseCscVme\"\n    },\n    \"sceMpegbase_driver\": {\n        \"0x27A2982F\": \"sceMpegBaseInit\",\n        \"0x304882E1\": \"sceMpegBaseCscAvcRange\",\n        \"0x492B5E4B\": \"sceMpegBaseCscInit\",\n        \"0x7AC0321A\": \"sceMpegBaseYCrCbCopy\",\n        \"0x91929A21\": \"sceMpegBaseCscAvc\",\n        \"0xBE45C284\": \"sceMpegBaseYCrCbCopyVme\",\n        \"0xCE8EB837\": \"sceMpegBaseCscVme\"\n    },\n    \"sceJpeg\": {\n        \"0x0425B986\": \"sceJpegDecompressAllImage\",\n        \"0x04B5AE02\": \"sceJpegMJpegCsc\",\n        \"0x04B93CEF\": \"sceJpegDecodeMJpeg\",\n        \"0x227662D7\": \"sceJpegDecodeMJpegYCbCrSuccessively\",\n        \"0x48B602B7\": \"sceJpegDeleteMJpeg\",\n        \"0x64B6F978\": \"sceJpegDecodeMJpegSuccessively\",\n        \"0x67F0ED84\": \"sceJpegCsc\",\n        \"0x7D2F3D7F\": \"sceJpegFinishMJpeg\",\n        \"0x8F2BB012\": \"sceJpegGetOutputInfo\",\n        \"0x91EED83C\": \"sceJpegDecodeMJpegYCbCr\",\n        \"0x9D47469C\": \"sceJpegCreateMJpeg\",\n        \"0xAC9E70E6\": \"sceJpegInitMJpeg\"\n    },\n    \"sceCertLoader_driver\": {\"0x11391041\": \"sceLoadCertInit\", \"0xE86A7DC1\": \"sceLoadCertEnd\"},\n    \"sceCertLoader\": {\"0xDD629A24\": \"sceLoadCertFromFlash\"},\n    \"sceChkreg_driver\": {\"0x54495B19\": \"sceChkregCheckRegion\", \"0x59F8491D\": \"sceChkregGetPsCode\"},\n    \"sceChnnlsv\": {\n        \"0x850A7FA1\": \"sceSdSetMember\",\n        \"0xABFDFC8B\": \"sceSdCreateList\",\n        \"0xC4C494F8\": \"sceSdGetLastIndex\",\n        \"0xE7833020\": \"sceSdSetIndex\",\n        \"0xF21A1FCA\": \"sceSdRemoveValue\"\n    },\n    \"sceChnnlsv_driver\": {\n        \"0x850A7FA1\": \"sceSdSetMember\",\n        \"0xABFDFC8B\": \"sceSdCreateList\",\n        \"0xC4C494F8\": \"sceSdGetLastIndex\",\n        \"0xE7833020\": \"sceSdSetIndex\",\n        \"0xF21A1FCA\": \"sceSdRemoveValue\"\n    },\n    \"sceClockgen_driver\": {\n        \"0x29160F5D\": \"sceClockgenInit\",\n        \"0x36F9B49D\": \"sceClockgenEnd\",\n        \"0x7FF82F6F\": \"sceClockgenLeptonClkEnable\",\n        \"0xDBE5F283\": \"sceClockgenLeptonClkDisable\"\n    },\n    \"sceCodec_driver\": {\n        \"0x02133959\": \"sceCodecStopEntry\",\n        \"0x261C6EE8\": \"sceCodecSetOutputVolume\",\n        \"0x359C2B9F\": \"sceCodecOutputDisable\",\n        \"0x856E7487\": \"sceCodecOutputEnable\",\n        \"0xBD8E0977\": \"sceCodecInitEntry\"\n    },\n    \"sceVshCommonGui\": {},\n    \"sceVshCommonUtil\": {},\n    \"content_browser\": {},\n    \"sceCtrl\": {\n        \"0x02BAAD91\": \"sceCtrlGetSamplingCycle\",\n        \"0x0B588501\": \"sceCtrlReadLatch\",\n        \"0x1F4011E6\": \"sceCtrlSetSamplingMode\",\n        \"0x1F803938\": \"sceCtrlReadBufferPositive\",\n        \"0x3A622550\": \"sceCtrlPeekBufferPositive\",\n        \"0x60B81F86\": \"sceCtrlReadBufferNegative\",\n        \"0x6841BE1A\": \"sceCtrlSetRapidFire\",\n        \"0x687660FA\": \"sceCtrlGetIdleCancelThreshold\",\n        \"0x6A2774F3\": \"sceCtrlSetSamplingCycle\",\n        \"0xA68FD260\": \"sceCtrlClearRapidFire\",\n        \"0xA7144800\": \"sceCtrlSetIdleCancelThreshold\",\n        \"0xB1D0E5CD\": \"sceCtrlPeekLatch\",\n        \"0xC152080A\": \"sceCtrlPeekBufferNegative\",\n        \"0xDA6B76A1\": \"sceCtrlGetSamplingMode\"\n    },\n    \"sceCtrl_driver\": {},\n    \"sceDisplay\": {\n        \"0x0E20F177\": \"sceDisplaySetMode\",\n        \"0x21038913\": \"sceDisplayIsVsync\",\n        \"0x210EAB3A\": \"sceDisplayGetAccumulatedHcount\",\n        \"0x289D82FE\": \"sceDisplaySetFrameBuf\",\n        \"0x31C4BAA8\": \"sceDisplayGetBrightness\",\n        \"0x36CDFADE\": \"sceDisplayWaitVblank\",\n        \"0x46F186C3\": \"sceDisplayWaitVblankStartCB\",\n        \"0x4D4E10EC\": \"sceDisplayIsVblank\",\n        \"0x69B53541\": \"sceDisplayGetVblankRest\",\n        \"0x773DD3A3\": \"sceDisplayGetCurrentHcount\",\n        \"0x7ED59BC4\": \"sceDisplaySetHoldMode\",\n        \"0x8EB9EC49\": \"sceDisplayWaitVblankCB\",\n        \"0x984C27E7\": \"sceDisplayWaitVblankStart\",\n        \"0x9C6EAAD7\": \"sceDisplayGetVcount\",\n        \"0xA544C486\": \"sceDisplaySetResumeMode\",\n        \"0xA83EF139\": \"sceDisplayAdjustAccumulatedHcount\",\n        \"0xB4F378FA\": \"sceDisplayIsForeground\",\n        \"0xBF79F646\": \"sceDisplayGetResumeMode\",\n        \"0xDBA6C4C4\": \"sceDisplayGetFramePerSec\",\n        \"0xDEA197D4\": \"sceDisplayGetMode\",\n        \"0xEEDA2E54\": \"sceDisplayGetFrameBuf\"\n    },\n    \"sceDisplay_driver\": {\n        \"0x0E20F177\": \"sceDisplaySetMode\",\n        \"0x206276C2\": \"sceDisplayInit\",\n        \"0x7A10289D\": \"sceDisplayEnd\",\n        \"0x96CFAC38\": \"sceDisplayGetBacklightSel\",\n        \"0xDEA197D4\": \"sceDisplayGetMode\",\n        \"0xE55F0D50\": \"sceDisplaySetBacklightSel\"\n    },\n    \"sceHibari_driver\": {},\n    \"sceDve_driver\": {},\n    \"DmacManForKernel\": {\n        \"0x1C46158A\": \"sceKernelDmaExit\",\n        \"0x2E3BC333\": \"sceKernelDmaChReserve\",\n        \"0x3BDEA96C\": \"sceKernelDmaOpEnQueue\",\n        \"0x3FAD5844\": \"sceKernelDmaOpSetupMemcpy\",\n        \"0x59615199\": \"sceKernelDmaOpAlloc\",\n        \"0x5AF32783\": \"sceKernelDmaOpQuit\",\n        \"0x745E19EF\": \"sceKernelDmaOpFree\",\n        \"0x7B9634E1\": \"sceKernelDmaSoftRequest\",\n        \"0x7D21A2EF\": \"sceKernelDmaOpSetupLink\",\n        \"0x904110FC\": \"sceKernelDmaOpAssignMultiple\",\n        \"0x92700CCD\": \"sceKernelDmaOpDeQueue\",\n        \"0xA84B084B\": \"sceKernelDmaOpAllCancel\",\n        \"0xA893DA2C\": \"sceKernelDmaOpFreeLink\",\n        \"0xCE467D9B\": \"sceKernelDmaOpSetupNormal\",\n        \"0xD0358BE9\": \"sceKernelDmaOpSetCallback\",\n        \"0xD3F62265\": \"sceKernelDmaOnDebugMode\",\n        \"0xD8BC3120\": \"sceKernelDmaChExclude\",\n        \"0xDB286D65\": \"sceKernelDmaOpSync\",\n        \"0xF64BAB99\": \"sceKernelDmaOpAssign\"\n    },\n    \"ExceptionManagerForKernel\": {\n        \"0x15ADC862\": \"sceKernelRegisterNmiHandler\",\n        \"0xB15357C9\": \"sceKernelReleaseNmiHandler\"\n    },\n    \"sceFileParserBase\": {},\n    \"sceG729_driver\": {\n        \"0x13F1028A\": \"sceG729DecodeExit\",\n        \"0x17C11696\": \"sceG729DecodeInitResource\",\n        \"0x3489D1F3\": \"sceG729DecodeCore\",\n        \"0x55E14F75\": \"sceG729DecodeInit\",\n        \"0x5A409D1B\": \"sceG729EncodeExit\",\n        \"0x74804D93\": \"sceG729DecodeReset\",\n        \"0x890B86AE\": \"sceG729DecodeTermResource\",\n        \"0x8C87A2CA\": \"sceG729EncodeReset\",\n        \"0x94714D50\": \"sceG729EncodeTermResource\",\n        \"0xAA1E5462\": \"sceG729EncodeInitResource\",\n        \"0xCFCD367C\": \"sceG729EncodeInit\",\n        \"0xDB7259D5\": \"sceG729EncodeCore\"\n    },\n    \"sceG729\": {\n        \"0x13F1028A\": \"sceG729DecodeExit\",\n        \"0x17C11696\": \"sceG729DecodeInitResource\",\n        \"0x3489D1F3\": \"sceG729DecodeCore\",\n        \"0x55E14F75\": \"sceG729DecodeInit\",\n        \"0x5A409D1B\": \"sceG729EncodeExit\",\n        \"0x74804D93\": \"sceG729DecodeReset\",\n        \"0x890B86AE\": \"sceG729DecodeTermResource\",\n        \"0x8C87A2CA\": \"sceG729EncodeReset\",\n        \"0x94714D50\": \"sceG729EncodeTermResource\",\n        \"0xAA1E5462\": \"sceG729EncodeInitResource\",\n        \"0xCFCD367C\": \"sceG729EncodeInit\",\n        \"0xDB7259D5\": \"sceG729EncodeCore\"\n    },\n    \"sceGe_driver\": {},\n    \"sceGe_user\": {\n        \"0x03444EB4\": \"sceGeListSync\",\n        \"0x05DB22CE\": \"sceGeUnsetCallback\",\n        \"0x0BF608FB\": \"sceGeRestoreContext\",\n        \"0x1C0D95A6\": \"sceGeListEnQueueHead\",\n        \"0x1F6752AD\": \"sceGeEdramGetSize\",\n        \"0x438A385A\": \"sceGeSaveContext\",\n        \"0x4C06E472\": \"sceGeContinue\",\n        \"0x57C8945B\": \"sceGeGetMtx\",\n        \"0x5FB86AB0\": \"sceGeListDeQueue\",\n        \"0xA4FC06A4\": \"sceGeSetCallback\",\n        \"0xAB49E76A\": \"sceGeListEnQueue\",\n        \"0xB287BD61\": \"sceGeDrawSync\",\n        \"0xB448EC0D\": \"sceGeBreak\",\n        \"0xB77905EA\": \"sceGeEdramSetAddrTranslation\",\n        \"0xDC93CFEF\": \"sceGeGetCmd\",\n        \"0xE0D68148\": \"sceGeListUpdateStallAddr\",\n        \"0xE47E40E4\": \"sceGeEdramGetAddr\",\n        \"0xE66CB92E\": \"sceGeGetStack\"\n    },\n    \"sceHprm\": {\n        \"0x1910B327\": \"sceHprmPeekCurrentKey\",\n        \"0x208DB1BD\": \"sceHprmIsRemoteExist\",\n        \"0x219C58F1\": \"sceHprmIsMicrophoneExist\",\n        \"0x2BCEC83E\": \"sceHprmPeekLatch\",\n        \"0x40D2F9F0\": \"sceHprmReadLatch\",\n        \"0x444ED0B7\": \"sceHprmUnregitserCallback\",\n        \"0x71B5FB67\": \"sceHprmGetHpDetect\",\n        \"0x7E69EDA4\": \"sceHprmIsHeadphoneExist\",\n        \"0xC7154136\": \"sceHprmRegisterCallback\"\n    },\n    \"sceHprm_driver\": {\n        \"0x1910B327\": \"sceHprmPeekCurrentKey\",\n        \"0x1C5BC5A0\": \"sceHprmInit\",\n        \"0x2C7B8B05\": \"sceHprmResume\",\n        \"0x526BB7F4\": \"sceHprmSuspend\",\n        \"0x588845DA\": \"sceHprmEnd\"\n    },\n    \"sceHtmlViewerHelper\": {},\n    \"sceHVUI_Module\": {},\n    \"sceHttpStorage_driver\": {\n        \"0x24AA94F4\": \"sceHttpStorageWrite\",\n        \"0x2D8DAE58\": \"sceHttpStorageGetstat\",\n        \"0x700AAD44\": \"sceHttpStorageOpen\",\n        \"0xB33389CE\": \"sceHttpStorageLseek\",\n        \"0xC59AC98A\": \"sceHttpStorageEnd\",\n        \"0xCDA3D8F6\": \"sceHttpStorageClose\",\n        \"0xCDDF1103\": \"sceHttpStorageRead\"\n    },\n    \"sceHttpStorage\": {\n        \"0x24AA94F4\": \"sceHttpStorageWrite\",\n        \"0x2D8DAE58\": \"sceHttpStorageGetstat\",\n        \"0x700AAD44\": \"sceHttpStorageOpen\",\n        \"0xB33389CE\": \"sceHttpStorageLseek\",\n        \"0xCDA3D8F6\": \"sceHttpStorageClose\",\n        \"0xCDDF1103\": \"sceHttpStorageRead\"\n    },\n    \"sceHttpStorage_bridge\": {},\n    \"sceHVAuth\": {\"0x5E335DF6\": \"sceHVAuthOpen\", \"0x816A5F92\": \"sceHVAuthAuth\", \"0x9DB7DE7C\": \"sceHVAuthClose\"},\n    \"sceIdMgr_driver\": {\"0xF464F91C\": \"sceIdMgrRegisterCallback\"},\n    \"sceIdStorage_driver\": {\n        \"0x08A471A6\": \"sceIdStorageCreateLeaf\",\n        \"0x1FA4D135\": \"sceIdStorageWriteLeaf\",\n        \"0x2C97AB36\": \"sceIdStorageDeleteLeaf\",\n        \"0x2CE0BE69\": \"sceIdStorageEnd\",\n        \"0x2D633688\": \"sceIdStorageIsReadOnly\",\n        \"0x31E08AFB\": \"sceIdStorageEnumId\",\n        \"0x37833CB8\": \"sceIdStorageGetFreeLeaves\",\n        \"0x3AD32523\": \"sceIdStorageFlush\",\n        \"0x683AAC10\": \"sceIdStorageUpdate\",\n        \"0x6FE062D1\": \"sceIdStorageLookup\",\n        \"0x958089DB\": \"sceIdStorageFormat\",\n        \"0x99ACCB71\": \"sceIdStorageCreateAtomicLeaves\",\n        \"0xAB129D20\": \"sceIdStorageInit\",\n        \"0xB9069BAD\": \"sceIdStorageIsDirty\",\n        \"0xEB00C509\": \"sceIdStorageReadLeaf\",\n        \"0xEB830733\": \"sceIdStorageGetLeafSize\",\n        \"0xF4BCB3EE\": \"sceIdStorageUnformat\",\n        \"0xF77565B6\": \"sceIdStorageSuspend\",\n        \"0xFE51173D\": \"sceIdStorageResume\",\n        \"0xFEFA40C2\": \"sceIdStorageIsFormatted\"\n    },\n    \"sceNetIfhandle\": {\"0xC80181A2\": \"sceNetGetDropRate\", \"0xFD8585E1\": \"sceNetSetDropRate\"},\n    \"sceNetIfhandle_lib\": {\n        \"0x0296C7D6\": \"sceNetIfhandleIfIoctl\",\n        \"0x1560F143\": \"sceNetMCopyback\",\n        \"0x15CFE3C0\": \"sceNetMallocInternal\",\n        \"0x2162EE67\": \"sceNetIfhandlePollSema\",\n        \"0x30602CE9\": \"sceNetIfhandleSignalSema\",\n        \"0x30F69334\": \"sceNetIfhandleInit\",\n        \"0x3E8DD3F8\": \"sceNetMCat\",\n        \"0x456E3146\": \"sceNetMCopym\",\n        \"0x49EDBB18\": \"sceNetMPullup\",\n        \"0x4C2886CB\": \"sceNetGetMallocStatInternal\",\n        \"0x4CF15C43\": \"sceNetMGethdr\",\n        \"0x4FB43BCE\": \"sceNetIfhandleGetDetachEther\",\n        \"0x59F0D619\": \"sceNetMGetclr\",\n        \"0x6AB53C27\": \"sceNetMDup\",\n        \"0x76BAD213\": \"sceNetFreeInternal\",\n        \"0x8FCB05A1\": \"sceNetIfhandleIfUp\",\n        \"0x9A6261EC\": \"sceNetMCopydata\",\n        \"0xA493AA5F\": \"sceNetMGet\",\n        \"0xB1F5BB87\": \"sceNetIfhandleIfStart\",\n        \"0xB8188F96\": \"sceNetIfhandleGetAttachEther\",\n        \"0xB9096E48\": \"sceNetIfhandleTerm\",\n        \"0xBFF3CEA5\": \"sceNetMAdj\",\n        \"0xC3325FDC\": \"sceNetMPrepend\",\n        \"0xD5DA7B3C\": \"sceNetIfhandleWaitSema\",\n        \"0xE440A7D8\": \"sceNetIfhandleIfDequeue\",\n        \"0xE80F00A4\": \"sceNetMPulldown\",\n        \"0xEAD3A759\": \"sceNetIfhandleIfDown\",\n        \"0xF56FAC82\": \"sceNetMFreem\",\n        \"0xF8825DC4\": \"sceNetMFree\"\n    },\n    \"sceNetIfhandle_driver\": {\n        \"0x0296C7D6\": \"sceNetIfhandleIfIoctl\",\n        \"0x1560F143\": \"sceNetMCopyback\",\n        \"0x15CFE3C0\": \"sceNetMallocInternal\",\n        \"0x16042084\": \"sceNetCreateIfhandleEther\",\n        \"0x16246B99\": \"sceNetIfPrepend\",\n        \"0x2162EE67\": \"sceNetIfhandlePollSema\",\n        \"0x263767F6\": \"sceNetFlagIfEvent\",\n        \"0x30602CE9\": \"sceNetIfhandleSignalSema\",\n        \"0x30F69334\": \"sceNetIfhandleInit\",\n        \"0x3E8DD3F8\": \"sceNetMCat\",\n        \"0x456E3146\": \"sceNetMCopym\",\n        \"0x49EDBB18\": \"sceNetMPullup\",\n        \"0x4C2886CB\": \"sceNetGetMallocStatInternal\",\n        \"0x4CF15C43\": \"sceNetMGethdr\",\n        \"0x4FB43BCE\": \"sceNetIfhandleGetDetachEther\",\n        \"0x54D1AEA1\": \"sceNetDetachIfhandleEther\",\n        \"0x59F0D619\": \"sceNetMGetclr\",\n        \"0x6AB53C27\": \"sceNetMDup\",\n        \"0x76BAD213\": \"sceNetFreeInternal\",\n        \"0x8FCB05A1\": \"sceNetIfhandleIfUp\",\n        \"0x9A6261EC\": \"sceNetMCopydata\",\n        \"0xA493AA5F\": \"sceNetMGet\",\n        \"0xAE81C0CB\": \"sceNetAttachIfhandleEther\",\n        \"0xB1F5BB87\": \"sceNetIfhandleIfStart\",\n        \"0xB8188F96\": \"sceNetIfhandleGetAttachEther\",\n        \"0xB9096E48\": \"sceNetIfhandleTerm\",\n        \"0xBFF3CEA5\": \"sceNetMAdj\",\n        \"0xC28F6FF2\": \"sceNetIfEnqueue\",\n        \"0xC3325FDC\": \"sceNetMPrepend\",\n        \"0xC80181A2\": \"sceNetGetDropRate\",\n        \"0xC9344A59\": \"sceNetDestroyIfhandleEther\",\n        \"0xD5DA7B3C\": \"sceNetIfhandleWaitSema\",\n        \"0xE2F4F1C9\": \"sceNetIfDequeue\",\n        \"0xE440A7D8\": \"sceNetIfhandleIfDequeue\",\n        \"0xE80F00A4\": \"sceNetMPulldown\",\n        \"0xEAD3A759\": \"sceNetIfhandleIfDown\",\n        \"0xF56FAC82\": \"sceNetMFreem\",\n        \"0xF8825DC4\": \"sceNetMFree\",\n        \"0xF94BAF52\": \"sceNetSendIfEvent\",\n        \"0xFD8585E1\": \"sceNetSetDropRate\"\n    },\n    \"sceImpose\": {\n        \"0x0F341BE4\": \"sceImposeGetHomePopup\",\n        \"0x24FD7BCF\": \"sceImposeGetLanguageMode\",\n        \"0x36AA6E91\": \"sceImposeSetLanguageMode\",\n        \"0x381BD9E7\": \"sceImposeHomeButton\",\n        \"0x5595A71A\": \"sceImposeSetHomePopup\",\n        \"0x72189C48\": \"sceImposeSetUMDPopup\",\n        \"0x8C943191\": \"sceImposeGetBatteryIconStatus\",\n        \"0x8F6E3518\": \"sceImposeGetBacklightOffTime\",\n        \"0x967F6D4A\": \"sceImposeSetBacklightOffTime\",\n        \"0xE0887BC8\": \"sceImposeGetUMDPopup\"\n    },\n    \"sceImpose_driver\": {},\n    \"sceAudioRouting\": {\n        \"0x28235C56\": \"sceAudioRoutingGetVolumeMode\",\n        \"0x36FD8AA9\": \"sceAudioRoutingSetMode\",\n        \"0x39240E7D\": \"sceAudioRoutingGetMode\",\n        \"0xBB548475\": \"sceAudioRoutingSetVolumeMode\"\n    },\n    \"sceAudioRouting_driver\": {},\n    \"InitForKernel\": {\n        \"0x1D3256BA\": \"sceKernelRegisterChunk\",\n        \"0x27932388\": \"sceKernelBootFrom\",\n        \"0x2C6E9FE9\": \"sceKernelGetChunk\",\n        \"0x7233B5BC\": \"sceKernelApplicationType\",\n        \"0x7A2333AD\": \"sceKernelInitApitype\",\n        \"0x9F9AE99C\": \"sceKernelSetInitCallback\",\n        \"0xA6E71B93\": \"sceKernelInitFileName\",\n        \"0xCE88E870\": \"sceKernelReleaseChunk\"\n    },\n    \"InterruptManagerForKernel\": {\n        \"0x02314986\": \"sceKernelCpuEnableIntr\",\n        \"0x092968F4\": \"sceKernelCpuSuspendIntr\",\n        \"0x30C08374\": \"sceKernelGetCpuClockCounter\",\n        \"0x3B84732D\": \"sceKernelCpuResumeIntrWithSync\",\n        \"0x4D6E7305\": \"sceKernelEnableIntr\",\n        \"0x58DD8978\": \"sceKernelRegisterIntrHandler\",\n        \"0x5F10D406\": \"sceKernelCpuResumeIntr\",\n        \"0xD61E6961\": \"sceKernelReleaseSubIntrHandler\",\n        \"0xD774BA45\": \"sceKernelDisableIntr\",\n        \"0xF987B1F0\": \"sceKernelReleaseIntrHandler\",\n        \"0xFB8E22EC\": \"sceKernelEnableSubIntr\",\n        \"0xFE28C6D9\": \"sceKernelIsIntrContext\"\n    },\n    \"InterruptManager\": {\n        \"0x5CB5A78B\": \"sceKernelSuspendSubIntr\",\n        \"0x7860E0DC\": \"sceKernelResumeSubIntr\",\n        \"0x8A389411\": \"sceKernelDisableSubIntr\",\n        \"0xCA04A2B9\": \"sceKernelRegisterSubIntrHandler\",\n        \"0xD2E8363F\": \"QueryIntrHandlerInfo\",\n        \"0xD61E6961\": \"sceKernelReleaseSubIntrHandler\",\n        \"0xEEE43F47\": \"sceKernelRegisterUserSpaceIntrStack\",\n        \"0xFB8E22EC\": \"sceKernelEnableSubIntr\",\n        \"0xFC4374B8\": \"sceKernelIsSubInterruptOccurred\"\n    },\n    \"StdioForUser\": {\n        \"0x0CBB0571\": \"sceKernelStdioLseek\",\n        \"0x172D316E\": \"sceKernelStdin\",\n        \"0x3054D478\": \"sceKernelStdioRead\",\n        \"0x432D8F5C\": \"sceKernelRegisterStdoutPipe\",\n        \"0x6F797E03\": \"sceKernelRegisterStderrPipe\",\n        \"0x924ABA61\": \"sceKernelStdioOpen\",\n        \"0x9D061C19\": \"sceKernelStdioClose\",\n        \"0xA3B931DB\": \"sceKernelStdioWrite\",\n        \"0xA46785C9\": \"sceKernelStdioSendChar\",\n        \"0xA6BAB2E9\": \"sceKernelStdout\",\n        \"0xF78BA90A\": \"sceKernelStderr\"\n    },\n    \"StdioForKernel\": {\n        \"0x11A5127A\": \"fdgets\",\n        \"0x172D316E\": \"sceKernelStdin\",\n        \"0x2CCF071A\": \"fdprintf\",\n        \"0x2D8551AB\": \"sceKernelStdoutReset\",\n        \"0x36B23B8B\": \"fdputs\",\n        \"0x432D8F5C\": \"sceKernelRegisterStdoutPipe\",\n        \"0x4F78930A\": \"fdputc\",\n        \"0x6F797E03\": \"sceKernelRegisterStderrPipe\",\n        \"0x7E338487\": \"getchar\",\n        \"0x9662BF86\": \"sceKernelStderrReset\",\n        \"0x98220F3E\": \"sceKernelStdoutReopen\",\n        \"0xA6BAB2E9\": \"sceKernelStdout\",\n        \"0xBFF7E760\": \"gets\",\n        \"0xCAB439DF\": \"printf\",\n        \"0xD2B2A2A7\": \"fdgetc\",\n        \"0xD768752A\": \"putchar\",\n        \"0xD97C8CB9\": \"puts\",\n        \"0xF78BA90A\": \"sceKernelStderr\",\n        \"0xFB5380C5\": \"sceKernelStderrReopen\"\n    },\n    \"IoFileMgrForUser\": {\n        \"0x06A70004\": \"sceIoMkdir\",\n        \"0x08BD7374\": \"sceIoGetDevType\",\n        \"0x0FACAB19\": \"sceIoWriteAsync\",\n        \"0x109F50BC\": \"sceIoOpen\",\n        \"0x1117C65F\": \"sceIoRmdir\",\n        \"0x1B385D8F\": \"sceIoLseek32Async\",\n        \"0x27EB27B8\": \"sceIoLseek\",\n        \"0x3251EA56\": \"sceIoPollAsync\",\n        \"0x35DBD746\": \"sceIoWaitAsyncCB\",\n        \"0x42EC03AC\": \"sceIoWrite\",\n        \"0x54F5FB11\": \"sceIoDevctl\",\n        \"0x55F4717D\": \"sceIoChdir\",\n        \"0x5C2BE2CC\": \"sceIoGetFdList\",\n        \"0x63632449\": \"sceIoIoctl\",\n        \"0x68963324\": \"sceIoLseek32\",\n        \"0x6A638D83\": \"sceIoRead\",\n        \"0x6D08A871\": \"sceIoUnassign\",\n        \"0x71B19E77\": \"sceIoLseekAsync\",\n        \"0x779103A0\": \"sceIoRename\",\n        \"0x810C4BC3\": \"sceIoClose\",\n        \"0x89AA9906\": \"sceIoOpenAsync\",\n        \"0xA0B5A7C2\": \"sceIoReadAsync\",\n        \"0xA12A0514\": \"sceIoSetAsyncCallback\",\n        \"0xAB96437F\": \"sceIoSync\",\n        \"0xACE946E8\": \"sceIoGetstat\",\n        \"0xB293727F\": \"sceIoChangeAsyncPriority\",\n        \"0xB29DDF9C\": \"sceIoDopen\",\n        \"0xB2A628C1\": \"sceIoAssign\",\n        \"0xB8A740F4\": \"sceIoChstat\",\n        \"0xCB05F8D6\": \"sceIoGetAsyncStat\",\n        \"0xE23EEC33\": \"sceIoWaitAsync\",\n        \"0xE3EB004C\": \"sceIoDread\",\n        \"0xE8BC6571\": \"sceIoCancel\",\n        \"0xE95A012B\": \"sceIoIoctlAsync\",\n        \"0xEB092469\": \"sceIoDclose\",\n        \"0xF27A9C51\": \"sceIoRemove\",\n        \"0xFF5940B6\": \"sceIoCloseAsync\"\n    },\n    \"IoFileMgrForKernel\": {\n        \"0x06A70004\": \"sceIoMkdir\",\n        \"0x08BD7374\": \"sceIoGetDevType\",\n        \"0x0FACAB19\": \"sceIoWriteAsync\",\n        \"0x109F50BC\": \"sceIoOpen\",\n        \"0x1117C65F\": \"sceIoRmdir\",\n        \"0x1B385D8F\": \"sceIoLseek32Async\",\n        \"0x27EB27B8\": \"sceIoLseek\",\n        \"0x3251EA56\": \"sceIoPollAsync\",\n        \"0x35DBD746\": \"sceIoWaitAsyncCB\",\n        \"0x42EC03AC\": \"sceIoWrite\",\n        \"0x54F5FB11\": \"sceIoDevctl\",\n        \"0x55F4717D\": \"sceIoChdir\",\n        \"0x5C2BE2CC\": \"sceIoGetFdList\",\n        \"0x63632449\": \"sceIoIoctl\",\n        \"0x68963324\": \"sceIoLseek32\",\n        \"0x6A638D83\": \"sceIoRead\",\n        \"0x6D08A871\": \"sceIoUnassign\",\n        \"0x71B19E77\": \"sceIoLseekAsync\",\n        \"0x779103A0\": \"sceIoRename\",\n        \"0x810C4BC3\": \"sceIoClose\",\n        \"0x89AA9906\": \"sceIoOpenAsync\",\n        \"0x8E982A74\": \"sceIoAddDrv\",\n        \"0xA0B5A7C2\": \"sceIoReadAsync\",\n        \"0xA12A0514\": \"sceIoSetAsyncCallback\",\n        \"0xAB96437F\": \"sceIoSync\",\n        \"0xACE946E8\": \"sceIoGetstat\",\n        \"0xB293727F\": \"sceIoChangeAsyncPriority\",\n        \"0xB29DDF9C\": \"sceIoDopen\",\n        \"0xB2A628C1\": \"sceIoAssign\",\n        \"0xB8A740F4\": \"sceIoChstat\",\n        \"0xC7F35804\": \"sceIoDelDrv\",\n        \"0xCB05F8D6\": \"sceIoGetAsyncStat\",\n        \"0xE23EEC33\": \"sceIoWaitAsync\",\n        \"0xE3EB004C\": \"sceIoDread\",\n        \"0xE8BC6571\": \"sceIoCancel\",\n        \"0xE95A012B\": \"sceIoIoctlAsync\",\n        \"0xEB092469\": \"sceIoDclose\",\n        \"0xF27A9C51\": \"sceIoRemove\",\n        \"0xFF5940B6\": \"sceIoCloseAsync\"\n    },\n    \"sceLed_driver\": {\n        \"0xA13B3D38\": \"sceLedResume\",\n        \"0xA8542C48\": \"sceLedEnd\",\n        \"0xB0B6A883\": \"sceLedInit\",\n        \"0xDE91D3A4\": \"sceLedSuspend\",\n        \"0xEA24BE03\": \"sceLedSetMode\"\n    },\n    \"sceLFatFs_driver\": {\"0x8F0560E0\": \"sceLfatfsStop\", \"0x933F6E29\": \"sceLfatfsWaitReady\"},\n    \"LflashFatfmt\": {\"0xB7A424A4\": \"sceLflashFatfmtStartFatfmt\"},\n    \"sceVshLftvMw\": {\n        \"0x0DA3EB39\": \"eventMgrCallbackDetach\",\n        \"0x3B433436\": \"sysInfoWriteMAC\",\n        \"0x7535F226\": \"eventMgrCallbackAttach\",\n        \"0x7CA858EC\": \"sysInfoWriteUniqueId\",\n        \"0xD60D6F2D\": \"lfxReleaseFrameBuffer\",\n        \"0xE16F62EC\": \"sysInfoWriteModelInfo\",\n        \"0xE6A8CAC0\": \"lfxGetNextFrame\"\n    },\n    \"sceAac\": {\n        \"0x02098C69\": \"sceAacGetInfoToAddStreamData\",\n        \"0x23D35CAE\": \"sceAacTermResource\",\n        \"0x33B8C009\": \"sceAacExit\",\n        \"0x506BF66C\": \"sceAacGetSumDecodedSample\",\n        \"0x523347D9\": \"sceAacGetLoopNum\",\n        \"0x5CFFC57C\": \"sceAacInitResource\",\n        \"0x61AA43C9\": \"sceAacEndEntry\",\n        \"0x6C05813B\": \"sceAacStartEntry\",\n        \"0x6DC7758A\": \"sceAacGetMaxOutputSample\",\n        \"0x7E4CFEE4\": \"sceAacDecode\",\n        \"0xAC6DCBE3\": \"sceAacNotifyAddStreamData\",\n        \"0xBBDD6403\": \"sceAacSetLoopNum\",\n        \"0xD2DA2BBA\": \"sceAacResetPlayPosition\",\n        \"0xD7C51541\": \"sceAacCheckStreamDataNeeded\",\n        \"0xE0C89ACA\": \"sceAacInit\"\n    },\n    \"sceAsfParser\": {\n        \"0x2CB147F7\": \"sceAsfGetFrameData\",\n        \"0x3CAAC462\": \"sceAsfReadData\",\n        \"0x6B3AE857\": \"sceAsfSeekTime\",\n        \"0x91B11F3A\": \"sceAsfInitParser\",\n        \"0x95AD7B34\": \"sceAsfCheckNeedMem\"\n    },\n    \"sceAtrac3plus\": {\n        \"0x0E2A73AB\": \"sceAtracSetData\",\n        \"0x0FAE370E\": \"sceAtracSetHalfwayBufferAndGetID\",\n        \"0x132F1ECA\": \"sceAtracReinit\",\n        \"0x31668BAA\": \"sceAtracGetChannel\",\n        \"0x36FAABFB\": \"sceAtracGetNextSample\",\n        \"0x3F6E26B5\": \"sceAtracSetHalfwayBuffer\",\n        \"0x5622B7C1\": \"sceAtracSetAA3DataAndGetID\",\n        \"0x5CF9D852\": \"sceAtracSetMOutHalfwayBuffer\",\n        \"0x5D268707\": \"sceAtracGetStreamDataInfo\",\n        \"0x5DD66588\": \"sceAtracSetAA3HalfwayBufferAndGetID\",\n        \"0x61EB33F5\": \"sceAtracReleaseAtracID\",\n        \"0x644E5607\": \"sceAtracResetPlayPosition\",\n        \"0x6A8C3CD5\": \"sceAtracDecodeData\",\n        \"0x780F88D1\": \"sceAtracGetAtracID\",\n        \"0x7A20E7AF\": \"sceAtracSetDataAndGetID\",\n        \"0x7DB31251\": \"sceAtracAddStreamData\",\n        \"0x83BF7AFD\": \"sceAtracSetSecondBuffer\",\n        \"0x83E85EA0\": \"sceAtracGetSecondBufferInfo\",\n        \"0x868120B5\": \"sceAtracSetLoopNum\",\n        \"0x9AE849A7\": \"sceAtracGetRemainFrame\",\n        \"0x9CD7DE03\": \"sceAtracSetMOutHalfwayBufferAndGetID\",\n        \"0xA2BBA8BE\": \"sceAtracGetSoundSample\",\n        \"0xA554A158\": \"sceAtracGetBitrate\",\n        \"0xB3B5D042\": \"sceAtracGetOutputChannel\",\n        \"0xCA3CA3D2\": \"sceAtracGetBufferInfoForReseting\",\n        \"0xD1F59FDB\": \"sceAtracStartEntry\",\n        \"0xD5C28CC0\": \"sceAtracEndEntry\",\n        \"0xD6A5F2F7\": \"sceAtracGetMaxSample\",\n        \"0xE23E3A35\": \"sceAtracGetNextDecodePosition\",\n        \"0xE88F759B\": \"sceAtracGetInternalErrorInfo\",\n        \"0xECA32A99\": \"sceAtracIsSecondBufferNeeded\",\n        \"0xFAA4F89B\": \"sceAtracGetLoopStatus\"\n    },\n    \"sceAudiocodec2\": {\n        \"0x21D5A83F\": \"sceAudiocodec2Decode\",\n        \"0xAA2ED267\": \"sceAudiocodec2CheckNeedMem\",\n        \"0xE063D402\": \"sceAudiocodec2Init\"\n    },\n    \"sceDNAS_lib\": {\n        \"0x0D560144\": \"sceDNASInit\",\n        \"0x45C1AAF5\": \"sceDNASGetEventFlag\",\n        \"0x6929100C\": \"sceDNASGetProductCode\",\n        \"0x9FF48DD3\": \"sceDNASStop\",\n        \"0xA646E771\": \"sceDNASGetState\",\n        \"0xBE0998D7\": \"sceDNASTerm\",\n        \"0xCA8B8909\": \"sceDNASNetStart\",\n        \"0xF3787AD8\": \"sceDNASInternalStart\"\n    },\n    \"sceDNASCore_lib\": {\n        \"0x15096ECD\": \"sceDNASCoreGetHostname\",\n        \"0x2370130E\": \"sceDNASCoreCheckProxyResponse\",\n        \"0x26E1E2BD\": \"sceDNASCoreSetChallenge\",\n        \"0x2B6C67EA\": \"sceDNASCoreCheckGameInfoFlag\",\n        \"0x4108128B\": \"sceDNASCoreMakeConnect\",\n        \"0x80CEC43A\": \"sceDNASCoreMakeResponse\",\n        \"0x822357BB\": \"sceDNASCoreGetResponse\",\n        \"0x8309549E\": \"sceDNASCoreSetResult\",\n        \"0xB6C76A14\": \"sceDNASCoreCheckChallenge\",\n        \"0xBA0A32CA\": \"sceDNASCoreCheckResult\",\n        \"0xBF6A7475\": \"sceDNASCoreGetProductCode\",\n        \"0xC54657B7\": \"sceDNASCoreSetProxyResponse\",\n        \"0xD5E80301\": \"sceDNASCoreTerm\",\n        \"0xDA5939B4\": \"sceDNASCoreGetProxyRequest\",\n        \"0xF0EB4367\": \"sceDNASCoreGetConnect\",\n        \"0xF479F616\": \"sceDNASCoreGetHostnameBase\",\n        \"0xFA571A75\": \"sceDNASCoreInit\"\n    },\n    \"sceLibFont_ARIB\": {},\n    \"sceLibFont_HV\": {\n        \"0x02D7F94B\": \"sceFontFlush\",\n        \"0x099EF33C\": \"sceFontFindOptimumFont\",\n        \"0x0DA7535E\": \"sceFontGetFontInfo\",\n        \"0x27F6E642\": \"sceFontGetNumFontList\",\n        \"0x2F67356A\": \"sceFontCalcMemorySize\",\n        \"0x3AEA8CB6\": \"sceFontClose\",\n        \"0x3C4B7E82\": \"sceFontPointToPixelV\",\n        \"0x472694CD\": \"sceFontPointToPixelH\",\n        \"0x48293280\": \"sceFontSetResolution\",\n        \"0x48B06520\": \"sceFontGetShadowImageRect\",\n        \"0x5333322D\": \"sceFontGetFontInfoByIndexNumber\",\n        \"0x568BE516\": \"sceFontGetShadowGlyphImage\",\n        \"0x574B6FBC\": \"sceFontDoneLib\",\n        \"0x57FCB733\": \"sceFontOpenUserFile\",\n        \"0x5C3E4A9E\": \"sceFontGetCharImageRect\",\n        \"0x5DCF6858\": \"sceFontGetShadowGlyphImage_Clip\",\n        \"0x67F17ED7\": \"sceFontNewLib\",\n        \"0x681E61A7\": \"sceFontFindFont\",\n        \"0x74B21701\": \"sceFontPixelToPointH\",\n        \"0x980F4895\": \"sceFontGetCharGlyphImage\",\n        \"0xA834319D\": \"sceFontOpen\",\n        \"0xAA3DE7B5\": \"sceFontGetShadowInfo\",\n        \"0xBB8E7FE6\": \"sceFontOpenUserMemory\",\n        \"0xBC75D85B\": \"sceFontGetFontList\",\n        \"0xCA1E6945\": \"sceFontGetCharGlyphImage_Clip\",\n        \"0xDCC80C2F\": \"sceFontGetCharInfo\",\n        \"0xEE232411\": \"sceFontSetAltCharacterCode\",\n        \"0xF8F0752E\": \"sceFontPixelToPointV\"\n    },\n    \"sceHttp\": {\n        \"0x0282A3BD\": \"sceHttpGetContentLength\",\n        \"0x03D9526F\": \"sceHttpSetResolveRetry\",\n        \"0x06488A1C\": \"sceHttpSetCookieSendCallback\",\n        \"0x0809C831\": \"sceHttpEnableRedirect\",\n        \"0x0B12ABFB\": \"sceHttpDisableCookie\",\n        \"0x0DAFA58F\": \"sceHttpEnableCookie\",\n        \"0x15540184\": \"sceHttpDeleteHeader\",\n        \"0x1A0EBB69\": \"sceHttpDisableRedirect\",\n        \"0x1CEDB9D4\": \"sceHttpFlushCache\",\n        \"0x1F0FC3E3\": \"sceHttpSetRecvTimeOut\",\n        \"0x2255551E\": \"sceHttpGetNetworkPspError\",\n        \"0x267618F4\": \"sceHttpSetAuthInfoCallback\",\n        \"0x2A6C3296\": \"sceHttpSetAuthInfoCB\",\n        \"0x2C3C82CF\": \"sceHttpFlushAuthList\",\n        \"0x3A67F306\": \"sceHttpSetCookieRecvCallback\",\n        \"0x3EABA285\": \"sceHttpAddExtraHeader\",\n        \"0x47347B50\": \"sceHttpCreateRequest\",\n        \"0x47940436\": \"sceHttpSetResolveTimeOut\",\n        \"0x4CC7D78F\": \"sceHttpGetStatusCode\",\n        \"0x5152773B\": \"sceHttpDeleteConnection\",\n        \"0x54E7DF75\": \"sceHttpIsRequestInCache\",\n        \"0x569A1481\": \"sceHttpsSetSslCallback\",\n        \"0x59E6D16F\": \"sceHttpEnableCache\",\n        \"0x68AB0F86\": \"sceHttpsInitWithPath\",\n        \"0x76D1363B\": \"sceHttpSaveSystemCookie\",\n        \"0x7774BF4C\": \"sceHttpAddCookie\",\n        \"0x77EE5319\": \"sceHttpLoadAuthList\",\n        \"0x78A0D3EC\": \"sceHttpEnableKeepAlive\",\n        \"0x78B54C09\": \"sceHttpEndCache\",\n        \"0x87797BDD\": \"sceHttpsLoadDefaultCert\",\n        \"0x8ACD1F73\": \"sceHttpSetConnectTimeOut\",\n        \"0x8EEFD953\": \"sceHttpCreateConnection\",\n        \"0x951D310E\": \"sceHttpDisableProxyAuth\",\n        \"0x9668864C\": \"sceHttpSetRecvBlockSize\",\n        \"0x96F16D3E\": \"sceHttpGetCookie\",\n        \"0x9988172D\": \"sceHttpSetSendTimeOut\",\n        \"0x9AFC98B2\": \"sceHttpSendRequestInCacheFirstMode\",\n        \"0x9B1F1F36\": \"sceHttpCreateTemplate\",\n        \"0x9FC5F10D\": \"sceHttpEnableAuth\",\n        \"0xA4496DE5\": \"sceHttpSetRedirectCallback\",\n        \"0xA5512E01\": \"sceHttpDeleteRequest\",\n        \"0xA6800C34\": \"sceHttpInitCache\",\n        \"0xAB1540D5\": \"sceHttpsGetSslError\",\n        \"0xAB1ABE07\": \"sceHttpInit\",\n        \"0xAE948FEE\": \"sceHttpDisableAuth\",\n        \"0xB0C34B1D\": \"sceHttpSetCacheContentLengthMaxSize\",\n        \"0xB3FAF831\": \"sceHttpsDisableOption\",\n        \"0xB509B09E\": \"sceHttpCreateRequestWithURL\",\n        \"0xBAC31BF1\": \"sceHttpsEnableOption\",\n        \"0xBB70706F\": \"sceHttpSendRequest\",\n        \"0xC10B6BD9\": \"sceHttpAbortRequest\",\n        \"0xC6330B0D\": \"sceHttpChangeHttpVersion\",\n        \"0xC7EF2559\": \"sceHttpDisableKeepAlive\",\n        \"0xC98CBBA7\": \"sceHttpSetResHeaderMaxSize\",\n        \"0xCCBD167A\": \"sceHttpDisableCache\",\n        \"0xCDB0DC58\": \"sceHttpEnableProxyAuth\",\n        \"0xCDF8ECB9\": \"sceHttpCreateConnectionWithURL\",\n        \"0xD081EC8F\": \"sceHttpGetNetworkErrno\",\n        \"0xD11DAB01\": \"sceHttpsGetCaList\",\n        \"0xD1C8945E\": \"sceHttpEnd\",\n        \"0xD70D4847\": \"sceHttpGetProxy\",\n        \"0xDB266CCF\": \"sceHttpGetAllHeader\",\n        \"0xDD6E7857\": \"sceHttpSaveAuthList\",\n        \"0xE4D21302\": \"sceHttpsInit\",\n        \"0xEDEEB999\": \"sceHttpReadData\",\n        \"0xF0F46C62\": \"sceHttpSetProxy\",\n        \"0xF1657B22\": \"sceHttpLoadSystemCookie\",\n        \"0xF49934F6\": \"sceHttpSetMallocFunction\",\n        \"0xF9D8EB63\": \"sceHttpsEnd\",\n        \"0xFCF8C055\": \"sceHttpDeleteTemplate\"\n    },\n    \"sceMp3\": {\n        \"0x07EC321A\": \"sceMp3ReserveMp3Handle\",\n        \"0x0DB149F4\": \"sceMp3NotifyAddStreamData\",\n        \"0x2A368661\": \"sceMp3ResetPlayPosition\",\n        \"0x354D27EA\": \"sceMp3GetSumDecodedSample\",\n        \"0x35750070\": \"sceMp3InitResource\",\n        \"0x3C2FA058\": \"sceMp3TermResource\",\n        \"0x3CEF484F\": \"sceMp3SetLoopNum\",\n        \"0x44E07129\": \"sceMp3Init\",\n        \"0x732B042A\": \"sceMp3EndEntry\",\n        \"0x7F696782\": \"sceMp3GetMp3ChannelNum\",\n        \"0x87677E40\": \"sceMp3GetBitRate\",\n        \"0x87C263D1\": \"sceMp3GetMaxOutputSample\",\n        \"0x8AB81558\": \"sceMp3StartEntry\",\n        \"0x8F450998\": \"sceMp3GetSamplingRate\",\n        \"0xA703FE0F\": \"sceMp3GetInfoToAddStreamData\",\n        \"0xD021C0FB\": \"sceMp3Decode\",\n        \"0xD0A56296\": \"sceMp3CheckStreamDataNeeded\",\n        \"0xD8F54A51\": \"sceMp3GetLoopNum\",\n        \"0xF5478233\": \"sceMp3ReleaseMp3Handle\"\n    },\n    \"sceParseHttp\": {\"0x8077A433\": \"sceParseHttpStatusLine\", \"0xAD7BFDEF\": \"sceParseHttpResponseHeader\"},\n    \"sceParseUri\": {\n        \"0x062BB07E\": \"sceUriUnescape\",\n        \"0x49E950EC\": \"sceUriEscape\",\n        \"0x568518C9\": \"sceUriParse\",\n        \"0x7EE318AF\": \"sceUriBuild\",\n        \"0x8885A782\": \"sceUriSweepPath\",\n        \"0x8AA55D17\": \"sceUriMerge\"\n    },\n    \"pspvmc\": {},\n    \"sceHVSlim_Library\": {},\n    \"sceSsl\": {\n        \"0x058D21C0\": \"sceSslGetNameEntryCount\",\n        \"0x0EB43B06\": \"sceSslGetUsedMemoryCurrent\",\n        \"0x17A10DCC\": \"sceSslGetNotBefore\",\n        \"0x191CDEFF\": \"sceSslEnd\",\n        \"0x1B7C8191\": \"sceSslGetIssuerName\",\n        \"0x3DD5E023\": \"sceSslGetSubjectName\",\n        \"0x5BFB6B61\": \"sceSslGetNotAfter\",\n        \"0x957ECBE2\": \"sceSslInit\",\n        \"0xB99EDE6A\": \"sceSslGetUsedMemoryMax\",\n        \"0xCC0919B0\": \"sceSslGetSerialNumber\",\n        \"0xD6D097B4\": \"sceSslGetNameEntryInfo\"\n    },\n    \"sceSsl_lib\": {\n        \"0x0217E73C\": \"PEM_ASN1_read_bio\",\n        \"0x047AB6BB\": \"CRYPTO_time_cmp\",\n        \"0x04E677AF\": \"ERR_clear_error\",\n        \"0x064F5DF3\": \"CRYPTO_get_locked_mem_functions\",\n        \"0x067173A8\": \"BIO_set_retry_write\",\n        \"0x0861D934\": \"CRYPTO_malloc\",\n        \"0x089FF1F1\": \"BIO_should_write\",\n        \"0x09C45275\": \"EVP_PKEY_new\",\n        \"0x0FD2F220\": \"BIO_method_name\",\n        \"0x101D418A\": \"ERR_free_strings\",\n        \"0x104F749D\": \"SSL_state\",\n        \"0x19A0DB42\": \"BIO_method_type\",\n        \"0x1BCA32E3\": \"BIO_retry_type\",\n        \"0x1C2728A5\": \"RAND_set_rand_method\",\n        \"0x1EC64594\": \"BIO_push\",\n        \"0x21F2A35C\": \"RAND_bytes\",\n        \"0x26A7CF72\": \"BIO_set_cb\",\n        \"0x28B4DE33\": \"BIO_new_socket\",\n        \"0x2E2E2B09\": \"SSL_get_rbio\",\n        \"0x2FE7BB42\": \"CRYPTO_get_time_cb\",\n        \"0x3454E622\": \"BIO_printf\",\n        \"0x3E040FD4\": \"BIO_free\",\n        \"0x3E3133D6\": \"SSL_shutdown\",\n        \"0x4214B7AF\": \"SSL_CTX_set_timeout\",\n        \"0x42DF4592\": \"SSL_CTX_set_quiet_shutdown\",\n        \"0x47F7B97F\": \"ERR_peek_error\",\n        \"0x4A6078CF\": \"BIO_get_retry_reason\",\n        \"0x4AE72675\": \"RAND_get_rand_method\",\n        \"0x4AF959E3\": \"SSL_set_quiet_shutdown\",\n        \"0x4E0F2CCC\": \"SSL_CTX_flush_sessions\",\n        \"0x54A7D8F3\": \"SSL_clear\",\n        \"0x558CAA41\": \"BIO_get_cb\",\n        \"0x5605C9FE\": \"SSL_set_verify_result\",\n        \"0x56E19CEB\": \"RAND_cleanup\",\n        \"0x57F2E960\": \"SSL_version\",\n        \"0x58352068\": \"BIO_new_mem\",\n        \"0x588F2FE8\": \"SSL_CTX_free\",\n        \"0x5AD14F0B\": \"CRYPTO_set_id_cb\",\n        \"0x5DED429A\": \"BIO_new\",\n        \"0x5E5C873A\": \"CRYPTO_free\",\n        \"0x6053B79C\": \"CRYPTO_malloc_locked\",\n        \"0x624CB314\": \"BIO_copy_next_retry\",\n        \"0x665D02F6\": \"CRYPTO_time_offset\",\n        \"0x675AC5AA\": \"BIO_read\",\n        \"0x69F1B678\": \"SSL_set_session\",\n        \"0x6A19E0AA\": \"SSL_get_quiet_shutdown\",\n        \"0x6CDEB823\": \"CRYPTO_get_id_cb\",\n        \"0x7317C1BC\": \"EVP_PKEY_free\",\n        \"0x732F4E44\": \"BIO_pop\",\n        \"0x795B9EDF\": \"SSL_CTX_get_timeout\",\n        \"0x80608663\": \"SSL_set_connect_state\",\n        \"0x8390B321\": \"SSL_use_PrivateKey\",\n        \"0x84833472\": \"SSL_free\",\n        \"0x868C15DF\": \"SSL_get_wbio\",\n        \"0x86D4034D\": \"SSL_set_shutdown\",\n        \"0x88897D26\": \"SSL_get_current_cipher\",\n        \"0x88A96ED0\": \"BIO_clear_retry_flags\",\n        \"0x8A2F6963\": \"BIO_set_retry_read\",\n        \"0x9052D21A\": \"BIO_should_retry\",\n        \"0x9274BFE3\": \"SSL_library_init_custom\",\n        \"0x9566709F\": \"BIO_ctrl\",\n        \"0x959557F5\": \"BIO_free_all\",\n        \"0x95E346AB\": \"SSL_get_info_cb\",\n        \"0x9CDCA0D7\": \"ERR_put_error\",\n        \"0x9D8A385E\": \"CRYPTO_thread_id\",\n        \"0x9EF66756\": \"CRYPTO_time_export\",\n        \"0xA1C3AB31\": \"RAND_default_method\",\n        \"0xA2619268\": \"CRYPTO_set_mem_functions\",\n        \"0xA2CE8DCD\": \"SSL_CIPHER_get_name\",\n        \"0xA7BED83B\": \"CRYPTO_time\",\n        \"0xA8F0AD39\": \"SSL_reuse\",\n        \"0xA920B39E\": \"d2i_PrivateKey\",\n        \"0xAA3B27CF\": \"SSL_get_verify_result\",\n        \"0xABCD28B8\": \"BIO_should_io_special\",\n        \"0xAEBF278B\": \"SSL_CTX_set_verify\",\n        \"0xAFD1D124\": \"BIO_gets\",\n        \"0xB0B90785\": \"CRYPTO_get_mem_functions\",\n        \"0xB3B04C58\": \"SSL_get_error\",\n        \"0xB40D11EA\": \"SSLv3_client_method\",\n        \"0xB4D78E98\": \"SSL_CTX_ctrl\",\n        \"0xB7CA8717\": \"SSL_write\",\n        \"0xB81AD643\": \"SSL_CTX_remove_session\",\n        \"0xB9C8CCE6\": \"SSL_set_bio\",\n        \"0xBB1564A3\": \"SSL_get_ex_data_X509_STORE_CTX_idx\",\n        \"0xBDAD0841\": \"SSL_SESSION_free\",\n        \"0xBE5FF9F1\": \"PEM_do_header\",\n        \"0xBF55C31C\": \"SSL_CTX_set_client_cert_cb\",\n        \"0xC0ABBB57\": \"SSL_use_certificate\",\n        \"0xC270B3A8\": \"SSL_set_info_cb\",\n        \"0xC97D0510\": \"SSL_want\",\n        \"0xCA6A3C74\": \"BIO_get_retry_flags\",\n        \"0xCED07EAE\": \"BIO_write\",\n        \"0xCF78BEFB\": \"SSL_library_cleanup\",\n        \"0xD1205C58\": \"SSL_get_shutdown\",\n        \"0xD49A570C\": \"SSL_get_default_timeout\",\n        \"0xD84E2411\": \"CRYPTO_lock\",\n        \"0xD8C05497\": \"ERR_remove_state\",\n        \"0xDEA6EDB2\": \"RAND_seed\",\n        \"0xE14101E4\": \"SSL_CTX_get_quiet_shutdown\",\n        \"0xE3C30923\": \"BIO_should_read\",\n        \"0xE5FC4992\": \"CRYPTO_free_locked\",\n        \"0xE78AD94D\": \"ERR_get_error\",\n        \"0xE7BFC0EF\": \"CRYPTO_time_import\",\n        \"0xE7C29542\": \"SSL_read\",\n        \"0xE92302C5\": \"SSL_get_SSL_CTX\",\n        \"0xEBFB0E3C\": \"SSL_new\",\n        \"0xEE624680\": \"BIO_set_retry_special\",\n        \"0xEF5A4BD4\": \"SSL_get_session\",\n        \"0xFB8273FE\": \"SSL_CTX_new\"\n    },\n    \"sceLibUpdateDL\": {\n        \"0x4F49C9C1\": \"sceUpdateDownloadAbort\",\n        \"0xB5DB018D\": \"sceUpdateDownloadSetServerRegion\",\n        \"0xC1AF1076\": \"sceUpdateDownloadSetVersion\",\n        \"0xD6A09757\": \"sceUpdateDownloadEnd\",\n        \"0xF6690A9A\": \"sceUpdateDownloadInitEx\",\n        \"0xFA9AA797\": \"sceUpdateDownloadReadData\",\n        \"0xFC1AB540\": \"sceUpdateDownloadInit\",\n        \"0xFD675E8D\": \"sceUpdateDownloadConnectServer\"\n    },\n    \"sceHVWWW_Library\": {},\n    \"LoadCoreForKernel\": {},\n    \"LoadExecForKernel\": {},\n    \"LoadExecForUser\": {\n        \"0x05572A5F\": \"sceKernelExitGame\",\n        \"0x2AC9954B\": \"sceKernelExitGameWithStatus\",\n        \"0x4AC57943\": \"sceKernelRegisterExitCallback\",\n        \"0xBD2F1094\": \"sceKernelLoadExec\"\n    },\n    \"sceSysreg_driver\": {\n        \"0x16909002\": \"sceSysregAtaBusClockEnable\",\n        \"0x1C4C4C7A\": \"sceSysregEmcsmIoDisable\",\n        \"0x20388C9E\": \"sceSysregSircsClkDisable\",\n        \"0x26FA0928\": \"sceSysregSircsIoDisable\",\n        \"0x2D0F7755\": \"sceSysregEmcsmBusClockDisable\",\n        \"0x4C49A8BC\": \"sceSysregSircsIoEnable\",\n        \"0x4F46EEDE\": \"sceSysregGetFuseId\",\n        \"0x6417CDD6\": \"sceSysregSircsClkEnable\",\n        \"0x7725CA08\": \"sceSysregUartClkEnable\",\n        \"0x7FD7A631\": \"sceSysregUartIoEnable\",\n        \"0x8835D1E1\": \"sceSysregSpiClkEnable\",\n        \"0x8B90B8B5\": \"sceSysregSpiClkDisable\",\n        \"0x8C5C53DE\": \"sceSysregSpiIoEnable\",\n        \"0x8F4F4E96\": \"sceSysregGetFuseConfig\",\n        \"0x9C863542\": \"sceSysregInit\",\n        \"0x9DD1F821\": \"sceSysregEmcsmIoEnable\",\n        \"0xA16E55F4\": \"sceSysregSpiIoDisable\",\n        \"0xA3E4154C\": \"sceSysregUartClkDisable\",\n        \"0xB6C10DF0\": \"sceSysregAtaBusClockDisable\",\n        \"0xBB823481\": \"sceSysregUartIoDisable\",\n        \"0xD6628A48\": \"sceSysregSpiClkSelect\",\n        \"0xE2A5D1EE\": \"sceSysregGetTachyonVersion\",\n        \"0xF2DEAA14\": \"sceSysregEnd\",\n        \"0xF97D9D73\": \"sceSysregEmcsmBusClockEnable\"\n    },\n    \"sceGpio_driver\": {\n        \"0x103C3EB2\": \"sceGpioPortClear\",\n        \"0x17DAA8C2\": \"sceGpioSuspend\",\n        \"0x310F0CCF\": \"sceGpioPortSet\",\n        \"0x317D9D2C\": \"sceGpioSetPortMode\",\n        \"0x4A992B24\": \"sceGpioEnd\",\n        \"0x64CD4536\": \"sceGpioResume\",\n        \"0x95D7F3B8\": \"sceGpioDisableIntr\",\n        \"0xEABDB328\": \"sceGpioInit\"\n    },\n    \"scePwm_driver\": {},\n    \"sceI2c_driver\": {},\n    \"sceDmac\": {\"0x617F3FE6\": \"sceDmacMemcpy\", \"0xD97F94D8\": \"sceDmacTryMemcpy\"},\n    \"sceDmacplus_driver\": {},\n    \"sceLcdc_driver\": {},\n    \"sceNand_driver\": {\n        \"0x01F09203\": \"sceNandIsBadBlock\",\n        \"0x0ADC8686\": \"sceNandWriteAccess\",\n        \"0x0BEE8F36\": \"sceNandSetScramble\",\n        \"0x0F9BBBBD\": \"sceNandResume\",\n        \"0x18B78661\": \"sceNandVerifyEcc\",\n        \"0x2674CFFE\": \"sceNandEraseAllBlock\",\n        \"0x2FF6081B\": \"sceNandDetectChipMakersBBM\",\n        \"0x3F76BC21\": \"sceNandDumpWearBBMSize\",\n        \"0x41FFA822\": \"sceNandUnlock\",\n        \"0x5182C394\": \"sceNandReadExtraOnly\",\n        \"0x5AC02755\": \"sceNandVerifyBlockWithRetry\",\n        \"0x716CD2B2\": \"sceNandWriteBlock\",\n        \"0x73A68408\": \"sceNandSuspend\",\n        \"0x766756EF\": \"sceNandReadAccess\",\n        \"0x7AF7B77A\": \"sceNandReset\",\n        \"0x84EE5D76\": \"sceNandSetWriteProtect\",\n        \"0x88CC9F72\": \"sceNandCorrectEcc\",\n        \"0x8932166A\": \"sceNandWritePagesRawExtra\",\n        \"0x8933B2E0\": \"sceNandEraseBlockWithRetry\",\n        \"0x89BDCA08\": \"sceNandReadPages\",\n        \"0x8AF0AB9F\": \"sceNandWritePages\",\n        \"0x9B2AC433\": \"sceNandTestBlock\",\n        \"0xA513BB12\": \"sceNandInit\",\n        \"0xAE4438C7\": \"sceNandLock\",\n        \"0xB07C41D4\": \"sceNandGetPagesPerBlock\",\n        \"0xB2B021E5\": \"sceNandWriteBlockWithVerify\",\n        \"0xB795D2ED\": \"sceNandCollectEcc\",\n        \"0xBADD5D46\": \"sceNandWritePagesRawAll\",\n        \"0xC1376222\": \"sceNandGetTotalBlocks\",\n        \"0xC29DA136\": \"sceNandDoMarkAsBadBlock\",\n        \"0xC32EA051\": \"sceNandReadBlockWithRetry\",\n        \"0xC478C1DE\": \"sceNandReadPagesRawAll\",\n        \"0xCE9843E6\": \"sceNandGetPageSize\",\n        \"0xD305870E\": \"sceNandEnd\",\n        \"0xD897C343\": \"sceNandDetectChip\",\n        \"0xE05AE88D\": \"sceNandReadPagesRawExtra\",\n        \"0xE41A11DE\": \"sceNandReadStatus\",\n        \"0xEB0A0022\": \"sceNandEraseBlock\",\n        \"0xEBA0E6C6\": \"sceNandCountChipMakersBBM\",\n        \"0xEF55F193\": \"sceNandCalcEcc\",\n        \"0xFCDF7610\": \"sceNandReadId\"\n    },\n    \"sceDdr_driver\": {\n        \"0x17D39E17\": \"sceDdrInit\",\n        \"0x623A233F\": \"sceDdrSuspend\",\n        \"0x8698F5DA\": \"sceDdrEnd\",\n        \"0x87D86769\": \"sceDdrFlush\",\n        \"0x92289EC0\": \"sceDdrResume\"\n    },\n    \"sceMcctrl\": {},\n    \"mcore\": {},\n    \"sceMeWrapper_driver\": {},\n    \"sceMeVideo_driver\": {},\n    \"sceMeAudio_driver\": {},\n    \"sceMeMemory_driver\": {},\n    \"sceMeCore_driver\": {},\n    \"sceMePower_driver\": {},\n    \"sceUmd\": {\"0x8EF08FCE\": \"sceUmdWaitDriveStat\", \"0xC6183D47\": \"sceUmdActivate\", \"0xE83742BA\": \"sceUmdDeactivate\"},\n    \"sceUmdUser\": {\n        \"0x20628E6F\": \"sceUmdGetErrorStat\",\n        \"0x340B7686\": \"sceUmdGetDiscInfo\",\n        \"0x46EBB729\": \"sceUmdCheckMedium\",\n        \"0x4A9E5E29\": \"sceUmdWaitDriveStatCB\",\n        \"0x56202973\": \"sceUmdWaitDriveStatWithTimer\",\n        \"0x6AF9B50A\": \"sceUmdCancelWaitDriveStat\",\n        \"0x6B4A146C\": \"sceUmdGetDriveStat\",\n        \"0x87533940\": \"sceUmdReplaceProhibit\",\n        \"0x8EF08FCE\": \"sceUmdWaitDriveStat\",\n        \"0xAEE7404D\": \"sceUmdRegisterUMDCallBack\",\n        \"0xBD2BDE07\": \"sceUmdUnRegisterUMDCallBack\",\n        \"0xC6183D47\": \"sceUmdActivate\",\n        \"0xCBE9F02A\": \"sceUmdReplacePermit\",\n        \"0xE83742BA\": \"sceUmdDeactivate\"\n    },\n    \"sceMemab_driver\": {},\n    \"memlmd\": {},\n    \"semaphore\": {\n        \"0x00EEC06A\": \"sceUtilsBufferCopy\",\n        \"0x4C537C72\": \"sceUtilsBufferCopyWithRange\",\n        \"0x77E97079\": \"sceUtilsBufferCopyByPollingWithRange\",\n        \"0x8EEB7BF2\": \"sceUtilsBufferCopyByPolling\"\n    },\n    \"sceMesgLed_driver\": {},\n    \"sceResmap_driver\": {\"0x4434E59F\": \"sceResmapPrepareByPolling\", \"0xE5659590\": \"sceResmapPrepare\"},\n    \"sceDbman_driver\": {\"0x34B53D46\": \"sceDbmanSelectByPolling\", \"0xB2B8C3F9\": \"sceDbmanSelect\"},\n    \"sceNwman_driver\": {},\n    \"sceResmgr_driver\": {},\n    \"sceResmgr\": {},\n    \"sceMesgd_driver\": {},\n    \"sceWmd_driver\": {},\n    \"sceDbsvr_driver\": {\"0x94561901\": \"sceDbsvrGetData\"},\n    \"sceMesgIns_driver\": {},\n    \"scePauth_driver\": {},\n    \"scePauth\": {},\n    \"sceMgMemoryStick_driver\": {},\n    \"sceMgr_driver\": {},\n    \"sceMgVideo_driver\": {},\n    \"sceMlnBridge_driver\": {},\n    \"sceMlnBridge\": {\n        \"0x13E68009\": \"sceMlnBridgeAesEcbEncrypt\",\n        \"0x3505ECCE\": \"sceMlnBridgeHMAC\",\n        \"0x54EDC552\": \"sceMlnBridgeSHA1\",\n        \"0x7770FC23\": \"sceMlnBridgeAesCbcDecrypt\",\n        \"0x8D7E61DD\": \"sceMlnBridgeAesEcbDecrypt\",\n        \"0xDE730A46\": \"sceMlnBridgeAesCbcEncrypt\"\n    },\n    \"mlnusb\": {},\n    \"sceHVFlash_Module\": {},\n    \"ModuleMgrForUser\": {\n        \"0x1196472E\": \"sceKernelLoadModuleBufferMs\",\n        \"0x24EC0641\": \"sceKernelLoadModuleBufferApp\",\n        \"0x2E0911AA\": \"sceKernelUnloadModule\",\n        \"0x50F0C1EC\": \"sceKernelStartModule\",\n        \"0x644395E2\": \"sceKernelGetModuleIdList\",\n        \"0x710F61B5\": \"sceKernelLoadModuleMs\",\n        \"0x748CBED9\": \"sceKernelQueryModuleInfo\",\n        \"0x977DE386\": \"sceKernelLoadModule\",\n        \"0xB7F46618\": \"sceKernelLoadModuleByID\",\n        \"0xCC1D3699\": \"sceKernelStopUnloadSelfModule\",\n        \"0xD1FF982A\": \"sceKernelStopModule\",\n        \"0xD2FBC957\": \"sceKernelGetModuleGPByAddress\",\n        \"0xD675EBB8\": \"sceKernelSelfStopUnloadModule\",\n        \"0xD8B73127\": \"sceKernelGetModuleIdByAddress\",\n        \"0xF0A26395\": \"sceKernelGetModuleId\",\n        \"0xF9275D98\": \"sceKernelLoadModuleBufferUsbWlan\"\n    },\n    \"ModuleMgrForKernel\": {\n        \"0x1CF0B794\": \"sceKernelLoadModuleBufferBootInitBtcnf\",\n        \"0x253AA17C\": \"sceKernelLoadModuleBufferForExitVSHKernel\",\n        \"0x2F3F9B6A\": \"sceKernelLoadModuleBufferForLoadExecBufferVSHUsbWlan\",\n        \"0x4E38EA1D\": \"sceKernelLoadModuleBufferForRebootKernel\",\n        \"0x4E62C48A\": \"sceKernelLoadModuleBufferForKernel\",\n        \"0x61E3EC69\": \"sceKernelLoadModuleBufferForExitGame\",\n        \"0x9236B422\": \"sceKernelLoadModuleBufferForExitVSHVSH\",\n        \"0xC13E2DE5\": \"sceKernelLoadModuleBufferForLoadExecBufferVSHUsbWlanDebug\",\n        \"0xC6DE0B9C\": \"sceKernelLoadModuleBufferVSH\"\n    },\n    \"sceMpeg\": {\n        \"0x01977054\": \"sceMpegQueryUserdataEsSize\",\n        \"0x0E3C2E9D\": \"sceMpegAvcDecode\",\n        \"0x0F6C18D7\": \"sceMpegAvcDecodeDetail\",\n        \"0x11F95CF1\": \"sceMpegGetAvcNalAu\",\n        \"0x13407F13\": \"sceMpegRingbufferDestruct\",\n        \"0x167AFD9E\": \"sceMpegInitAu\",\n        \"0x211A057C\": \"sceMpegAvcQueryYCbCrSize\",\n        \"0x21FF80E4\": \"sceMpegQueryStreamOffset\",\n        \"0x234586AE\": \"sceMpegChangeGetAvcAuMode\",\n        \"0x31BD0272\": \"sceMpegAvcCsc\",\n        \"0x37295ED8\": \"sceMpegRingbufferConstruct\",\n        \"0x3C37A7A6\": \"sceMpegNextAvcRpAu\",\n        \"0x42560F23\": \"sceMpegRegistStream\",\n        \"0x4571CC64\": \"sceMpegAvcDecodeFlush\",\n        \"0x500F0429\": \"sceMpegFlushStream\",\n        \"0x591A4AA2\": \"sceMpegUnRegistStream\",\n        \"0x606A4649\": \"sceMpegDelete\",\n        \"0x611E9E11\": \"sceMpegQueryStreamSize\",\n        \"0x67179B1B\": \"sceMpegAvcInitYCbCr\",\n        \"0x682A619B\": \"sceMpegInit\",\n        \"0x6F314410\": \"sceMpegAvcDecodeGetDecodeSEI\",\n        \"0x707B7629\": \"sceMpegFlushAllStream\",\n        \"0x740FCCD1\": \"sceMpegAvcDecodeStop\",\n        \"0x769BEBB6\": \"sceMpegRingbufferQueryPackNum\",\n        \"0x800C44DF\": \"sceMpegAtracDecode\",\n        \"0x874624D6\": \"sceMpegFinish\",\n        \"0x8C1E027D\": \"sceMpegGetPcmAu\",\n        \"0x921FCCCF\": \"sceMpegGetAvcEsAu\",\n        \"0x9DCFB7EA\": \"sceMpegChangeGetAuMode\",\n        \"0xA11C7026\": \"sceMpegAvcDecodeMode\",\n        \"0xA780CF7E\": \"sceMpegMallocAvcEsBuf\",\n        \"0xB240A59E\": \"sceMpegRingbufferPut\",\n        \"0xB5F6DC87\": \"sceMpegRingbufferAvailableSize\",\n        \"0xC02CF6B5\": \"sceMpegQueryPcmEsSize\",\n        \"0xC132E22F\": \"sceMpegQueryMemSize\",\n        \"0xC45C99CC\": \"sceMpegQueryUserdataEsSize\",\n        \"0xCEB870B1\": \"sceMpegFreeAvcEsBuf\",\n        \"0xCF3547A2\": \"sceMpegAvcDecodeDetail2\",\n        \"0xD1CE4950\": \"sceMpegAvcCscMode\",\n        \"0xD7A29F46\": \"sceMpegRingbufferQueryMemSize\",\n        \"0xD8C5F121\": \"sceMpegCreate\",\n        \"0xDBB60658\": \"sceMpegFlushAu\",\n        \"0xE1CE83A7\": \"sceMpegGetAtracAu\",\n        \"0xE95838F6\": \"sceMpegAvcCscInfo\",\n        \"0xF0EB1125\": \"sceMpegAvcDecodeYCbCr\",\n        \"0xF2930C9C\": \"sceMpegAvcDecodeStopYCbCr\",\n        \"0xF8DCB679\": \"sceMpegQueryAtracEsSize\",\n        \"0xFE246728\": \"sceMpegGetAvcAu\"\n    },\n    \"sceMSAudio_driver\": {},\n    \"sceMSstor_driver\": {\"0x6FC1E8AE\": \"sceMSstorEntry\", \"0x714782D6\": \"sceMSstorRegisterCLDMSelf\"},\n    \"sceMScm_driver\": {\n        \"0x0128147B\": \"sceMScmWriteMSReg\",\n        \"0x0A054CDA\": \"sceMScmHCLastStatus\",\n        \"0x21183216\": \"sceMScmWriteDataPIO\",\n        \"0x2AD0A649\": \"sceMScmGetSlotState\",\n        \"0x2D7C40FA\": \"sceMScmWaitHCIntr\",\n        \"0x907D7766\": \"sceMScmSendTPC\",\n        \"0xBE455B5D\": \"sceMScmReadDataPIO\",\n        \"0xF82AF926\": \"sceMScmTPCSetCmd\",\n        \"0xFF6C50D8\": \"sceMScmTPCGetInt\"\n    },\n    \"sceMsVideo\": {},\n    \"sceMsVideoPluginHeap\": {},\n    \"music_browser\": {},\n    \"music_parser\": {},\n    \"music_player\": {},\n    \"sceVshNetconf\": {},\n    \"sceVshNetconfAoss\": {},\n    \"sceVshNetconfRaku\": {},\n    \"sceHVNetfront_Module\": {\n        \"0x18CB51AB\": \"inflateInit_\",\n        \"0x216D1BF1\": \"inflate\",\n        \"0x461C7724\": \"inflateEnd\",\n        \"0x85C2B45D\": \"uncompress\"\n    },\n    \"sceNp\": {},\n    \"sceUmdMan_driver\": {\n        \"0x0D3EA203\": \"sceUmdManTerm\",\n        \"0x0DC8D26D\": \"sceUmdManWaitSema\",\n        \"0x14D3381C\": \"sceUmdExecTestCmd\",\n        \"0x1B19A313\": \"sceUmdExecInquiryCmd\",\n        \"0x1F9AFFF4\": \"sceUmdManMediaPresent\",\n        \"0x2CBE959B\": \"sceUmdExecReqSenseCmd\",\n        \"0x47E2B6D8\": \"sceUmdManGetUmdDrive\",\n        \"0x4FB913A3\": \"sceUmdManGetIntrStateFlag\",\n        \"0x8CFED611\": \"sceUmdManStart\",\n        \"0x9F106F73\": \"sceUmdManPollSema\",\n        \"0xB0A43DA7\": \"sceUmdManSignalSema\",\n        \"0xCAD31025\": \"sceUmdManStop\",\n        \"0xE779ECEF\": \"sceUmdManGetInquiry\"\n    },\n    \"sceUmd9660_driver\": {},\n    \"sceNpAuth\": {},\n    \"sceNpCommerce2\": {},\n    \"sceNpCommerce2RegCam\": {},\n    \"sceNpCommerce2Store\": {},\n    \"sceNpCore\": {},\n    \"sceNpInstall_driver\": {},\n    \"sceNpInstall_user\": {},\n    \"sceNpMatching2\": {},\n    \"sceNpService\": {},\n    \"scePspNpDrm_driver\": {\n        \"0x00AD67F8\": \"sceNpDrmGetFixedKey\",\n        \"0x08D98894\": \"sceNpDrmEdataSetupKey\",\n        \"0x0F9547E6\": \"sceNpDrmGetVersionKey\",\n        \"0x17E3F4BB\": \"sceNpDrmVerifyAct\",\n        \"0x219EF5CC\": \"sceNpDrmEdataGetDataSize\",\n        \"0x275987D1\": \"sceNpDrmRenameCheck\",\n        \"0x37B9B10D\": \"sceNpDrmVerifyRif\",\n        \"0x5667B7B9\": \"sceNpDrmGetContentKey\",\n        \"0x9B745542\": \"sceNpDrmClearLicenseeKey\",\n        \"0xA1336091\": \"sceNpDrmSetLicenseeKey\",\n        \"0xD36B4E6D\": \"sceNpDrmGetModuleKey\"\n    },\n    \"scePspNpDrm_user\": {\n        \"0x08D98894\": \"sceNpDrmEdataSetupKey\",\n        \"0x219EF5CC\": \"sceNpDrmEdataGetDataSize\",\n        \"0x275987D1\": \"sceNpDrmRenameCheck\",\n        \"0x9B745542\": \"sceNpDrmClearLicenseeKey\",\n        \"0xA1336091\": \"sceNpDrmSetLicenseeKey\"\n    },\n    \"scePspNpDrmVideoKey_driver\": {},\n    \"onesegCore\": {},\n    \"onesegHalToolbox\": {},\n    \"sceOnesegLnch\": {},\n    \"onesegSal\": {},\n    \"onesegSdk\": {},\n    \"onesegSdkCore\": {},\n    \"sceOpenPSID\": {\"0xC69BEBCE\": \"sceOpenPSIDGetOpenPSID\"},\n    \"sceOpenPSID_driver\": {\"0x19D579F0\": \"sceOpenPSIDGetPSID\", \"0xC69BEBCE\": \"sceOpenPSIDGetOpenPSID\"},\n    \"sceDdrdb_driver\": {\n        \"0x05D50F41\": \"sceDdrdbEncrypt\",\n        \"0x370F456A\": \"sceDdrdbCertvry\",\n        \"0x40CB752A\": \"sceDdrdbHash\",\n        \"0xB24E1391\": \"sceDdrdbSiggen\",\n        \"0xB33ACB44\": \"sceDdrdbDecrypt\",\n        \"0xB8218473\": \"sceDdrdbPrngen\",\n        \"0xE27CE4CB\": \"sceDdrdbSigvry\",\n        \"0xEC05300A\": \"sceDdrdbMul2\",\n        \"0xF970D54E\": \"sceDdrdbMul1\"\n    },\n    \"scePcact_driver\": {\"0x08BB9677\": \"scePcactAuth2BB\", \"0xF9ECFDDD\": \"scePcactAuth1BB\"},\n    \"sceMlnpsnl_driver\": {\"0x6885F392\": \"sceMlnpsnlAuth2BB\", \"0x8523E178\": \"sceMlnpsnlAuth1BB\"},\n    \"sceDdrdb\": {},\n    \"scePaf\": {},\n    \"photo_browser\": {},\n    \"photo_player\": {},\n    \"scePopsMan\": {\"0x0090B2C8\": \"scePopsManExitVSHKernel\", \"0x29B3FB24\": \"scePopsManLoadModule\"},\n    \"sceMeAudio\": {},\n    \"scePower\": {\n        \"0x0074EF9B\": \"scePowerGetResumeCount\",\n        \"0x0442D852\": \"scePowerRequestColdReset\",\n        \"0x04B7766E\": \"scePowerRegisterCallback\",\n        \"0x0AFD0D8B\": \"scePowerIsBatteryExist\",\n        \"0x0CD21B1F\": \"scePowerSetPowerSwMode\",\n        \"0x165CE085\": \"scePowerGetPowerSwMode\",\n        \"0x1E490401\": \"scePowerIsBatteryCharging\",\n        \"0x2085D15D\": \"scePowerGetBatteryLifePercent\",\n        \"0x23436A4A\": \"scePowerGetInnerTemp\",\n        \"0x23C31FFE\": \"scePowerVolatileMemLock\",\n        \"0x27F3292C\": \"scePowerBatteryUpdateInfo\",\n        \"0x28E12023\": \"scePowerGetBatteryTemp\",\n        \"0x2B7C7CF4\": \"scePowerRequestStandby\",\n        \"0x34F9C463\": \"scePowerGetPllClockFrequencyInt\",\n        \"0x3951AF53\": \"scePowerWaitRequestCompletion\",\n        \"0x442BFBAC\": \"scePowerGetBacklightMaximum\",\n        \"0x478FE6F5\": \"scePowerGetBusClockFrequency\",\n        \"0x483CE86B\": \"scePowerGetBatteryVolt\",\n        \"0x737486F2\": \"scePowerSetClockFrequency\",\n        \"0x78A1A796\": \"scePowerIsSuspendRequired\",\n        \"0x7F30B3B1\": \"scePowerIdleTimerEnable\",\n        \"0x7FA406DD\": \"scePowerIsRequest\",\n        \"0x843FBF43\": \"scePowerSetCpuClockFrequency\",\n        \"0x862AE1A6\": \"scePowerGetBatteryElec\",\n        \"0x87440F5E\": \"scePowerIsPowerOnline\",\n        \"0x8EFB3FA2\": \"scePowerGetBatteryLifeTime\",\n        \"0x94F5A53F\": \"scePowerGetBatteryRemainCapacity\",\n        \"0x972CE941\": \"scePowerIdleTimerDisable\",\n        \"0x9BADB3EB\": \"scePowerGetBusClockFrequencyFloat\",\n        \"0xA9D22232\": \"scePowerSetCallbackMode\",\n        \"0xAC32C9CC\": \"scePowerRequestSuspend\",\n        \"0xB1A52C83\": \"scePowerGetCpuClockFrequencyFloat\",\n        \"0xB3EDD801\": \"scePowerVolatileMemUnlock\",\n        \"0xB4432BC8\": \"scePowerGetBatteryChargingStatus\",\n        \"0xB8D7B3FB\": \"scePowerSetBusClockFrequency\",\n        \"0xB999184C\": \"scePowerGetLowBatteryCapacity\",\n        \"0xBAFA3DF0\": \"scePowerGetCallbackMode\",\n        \"0xBD681969\": \"scePowerGetBusClockFrequencyInt\",\n        \"0xCA3D34C1\": \"scePowerUnlock\",\n        \"0xCB49F5CE\": \"scePowerGetBatteryChargeCycle\",\n        \"0xD3075926\": \"scePowerIsLowBattery\",\n        \"0xD6D016EF\": \"scePowerLock\",\n        \"0xDB62C9CF\": \"scePowerCancelRequest\",\n        \"0xDB9D28DD\": \"scePowerUnregitserCallback\",\n        \"0xDFA8BAF8\": \"scePowerUnregisterCallback\",\n        \"0xEA382A27\": \"scePowerGetPllClockFrequencyFloat\",\n        \"0xEDC13FE5\": \"scePowerGetIdleTimer\",\n        \"0xEFD3C963\": \"scePowerTick\",\n        \"0xFA97A599\": \"scePowerVolatileMemTryLock\",\n        \"0xFD18A0FF\": \"scePowerGetBatteryFullCapacity\",\n        \"0xFDB5BFE9\": \"scePowerGetCpuClockFrequencyInt\",\n        \"0xFEE03A2F\": \"scePowerGetCpuClockFrequency\"\n    },\n    \"scePower_driver\": {\n        \"0x1BA2FCAE\": \"scePowerSetIdleCallback\",\n        \"0x9CE06934\": \"scePowerInit\",\n        \"0xAD5BB433\": \"scePowerEnd\",\n        \"0xDB62C9CF\": \"scePowerCancelRequest\",\n        \"0xFDB5BFE9\": \"scePowerGetCpuClockFrequencyInt\"\n    },\n    \"scePsheet\": {\n        \"0x15355B0E\": \"sceDRMInstallGetPkgInfo\",\n        \"0x226D9099\": \"sceDRMInstallAbort\",\n        \"0x302AB4B8\": \"sceDRMInstallInit\",\n        \"0x34E68A41\": \"sceDRMInstallGetFileInfo\",\n        \"0x3CEC4078\": \"sceDRMInstallEnd\",\n        \"0xE16F3A48\": \"sceDRMInstallInstall\"\n    },\n    \"scePsheet_driver\": {\n        \"0x15355B0E\": \"sceDRMInstallGetPkgInfo\",\n        \"0x226D9099\": \"sceDRMInstallAbort\",\n        \"0x302AB4B8\": \"sceDRMInstallInit\",\n        \"0x34E68A41\": \"sceDRMInstallGetFileInfo\",\n        \"0x3CEC4078\": \"sceDRMInstallEnd\",\n        \"0xE16F3A48\": \"sceDRMInstallInstall\"\n    },\n    \"sceNet\": {\n        \"0x0BF0A3AE\": \"sceNetGetLocalEtherAddr\",\n        \"0x281928A9\": \"sceNetTerm\",\n        \"0x39AF39A6\": \"sceNetInit\",\n        \"0x50647530\": \"sceNetFreeThreadinfo\",\n        \"0x89360950\": \"sceNetEtherNtostr\",\n        \"0xAD6844C6\": \"sceNetThreadAbort\",\n        \"0xCC393E48\": \"sceNetGetMallocStat\",\n        \"0xD27961C9\": \"sceNetEtherStrton\"\n    },\n    \"sceNet_lib\": {\n        \"0x13A8B98A\": \"_sce_pspnet_ifioctl\",\n        \"0x1858883D\": \"sceNetRand\",\n        \"0x1D10419C\": \"_sce_pspnet_ifunit\",\n        \"0x1FB2FDDD\": \"sceNetAtoi\",\n        \"0x205E8D17\": \"_sce_pspnet_tsleep\",\n        \"0x25CC373A\": \"_sce_pspnet_callout_init\",\n        \"0x2A73ADDC\": \"sceNetStrtoul\",\n        \"0x2F305274\": \"sceNetBcopy\",\n        \"0x41FD8B5C\": \"_sce_pspnet_hashdone\",\n        \"0x435843CB\": \"_sce_pspnet_get_thread_errno\",\n        \"0x45452B7B\": \"_sce_pspnet_thread_busycount\",\n        \"0x4753D878\": \"sceNetMemmove\",\n        \"0x4BF83CF4\": \"sceNetBcmp\",\n        \"0x515B2F33\": \"_sce_pspnet_splunlock\",\n        \"0x5216CBF5\": \"sceNetConfigUpInterface\",\n        \"0x522A971B\": \"_sce_pspnet_if_exist\",\n        \"0x5705F6F9\": \"sceNetStrcat\",\n        \"0x57CC57DA\": \"sceNetMemset\",\n        \"0x6D5D42D7\": \"_sce_pspnet_lock_threadinfo\",\n        \"0x701DDDC3\": \"_sce_pspnet_if_attach\",\n        \"0x710BD467\": \"_sce_pspnet_get_ifindex\",\n        \"0x750F705D\": \"sceNetLook_ctype_table\",\n        \"0x7574FDA1\": \"_sce_pspnet_wakeup\",\n        \"0x75D9985C\": \"sceNetGetSystemClockSec\",\n        \"0x7C86FBA4\": \"_sce_pspnet_callout_reset\",\n        \"0x80C9F02A\": \"sceNetStrcpy\",\n        \"0x80E1933E\": \"sceNetConfigGetIfEventFlag\",\n        \"0x8687B5AB\": \"sceNetVsprintf\",\n        \"0x8B615F52\": \"sceNetBzero\",\n        \"0x8D33C11D\": \"sceNetConfigGetEtherAddr\",\n        \"0x8E798A2F\": \"sceNetMemchr\",\n        \"0x94B44F26\": \"_sce_pspnet_spllock\",\n        \"0x94DCA9F0\": \"sceNetStrncmp\",\n        \"0x96EF9DA1\": \"sceNetTolower\",\n        \"0x976AB1E9\": \"sceNetEnablePSPWlanReset\",\n        \"0x9CFBC7E3\": \"sceNetStrcasecmp\",\n        \"0xA0F16ABD\": \"sceNetStrcmp\",\n        \"0xA93A93E9\": \"_sce_pspnet_callout_stop\",\n        \"0xAB7DD9A5\": \"sceNetConfigSetIfEventFlag\",\n        \"0xB5CE388A\": \"sceNetStrncpy\",\n        \"0xB8C4A858\": \"_sce_pspnet_tiwakeup\",\n        \"0xB9085A96\": \"sceNetStrncasecmp\",\n        \"0xB9C780C7\": \"_sce_pspnet_selwakeup\",\n        \"0xBB2B3DDB\": \"_sce_pspnet_get_threadinfo\",\n        \"0xBCBE14CF\": \"sceNetStrchr\",\n        \"0xC21E18B2\": \"_sce_pspnet_unlock_threadinfo\",\n        \"0xC4261339\": \"_sce_pspnet_hashinit\",\n        \"0xC9C97945\": \"_sce_pspnet_tabort\",\n        \"0xCA3CF5EB\": \"_sce_pspnet_thread_enter\",\n        \"0xCF705E46\": \"sceNetSprintf\",\n        \"0xD1BE2CE9\": \"sceNetConfigGetIfEvent\",\n        \"0xD2422E4D\": \"sceNetConfigDownInterface\",\n        \"0xD5A03BC0\": \"_sce_pspnet_if_detach\",\n        \"0xD861EF33\": \"_sce_pspnet_set_thread_errno\",\n        \"0xD8722983\": \"sceNetStrlen\",\n        \"0xE0A81C7C\": \"sceNetMemcmp\",\n        \"0xEA42B353\": \"_sce_pspnet_ifioctl_sync\",\n        \"0xEDB11CB4\": \"_sce_pspnet_if_down\",\n        \"0xEF097716\": \"sceNetMemcpy\",\n        \"0xF48963C6\": \"sceNetStrrchr\",\n        \"0xFA6DE6A6\": \"_sce_pspnet_if_up\"\n    },\n    \"sceNetAdhoc\": {\n        \"0x0B2228E9\": \"sceNetAdhocGameModeDeleteReplica\",\n        \"0x157E6225\": \"sceNetAdhocPtpClose\",\n        \"0x3278AB0C\": \"sceNetAdhocGameModeCreateReplica\",\n        \"0x4D2CE199\": \"sceNetAdhocGetSocketAlert\",\n        \"0x4DA4C788\": \"sceNetAdhocPtpSend\",\n        \"0x6F92741B\": \"sceNetAdhocPdpCreate\",\n        \"0x73BFD52D\": \"sceNetAdhocSetSocketAlert\",\n        \"0x7A662D6B\": \"sceNetAdhocPollSocket\",\n        \"0x7F27BB5E\": \"sceNetAdhocPdpDelete\",\n        \"0x7F75C338\": \"sceNetAdhocGameModeCreateMaster\",\n        \"0x877F6D66\": \"sceNetAdhocPtpOpen\",\n        \"0x8BEA2B3E\": \"sceNetAdhocPtpRecv\",\n        \"0x98C204C8\": \"sceNetAdhocGameModeUpdateMaster\",\n        \"0x9AC2EEAC\": \"sceNetAdhocPtpFlush\",\n        \"0x9DF81198\": \"sceNetAdhocPtpAccept\",\n        \"0xA0229362\": \"sceNetAdhocGameModeDeleteMaster\",\n        \"0xA62C6F57\": \"sceNetAdhocTerm\",\n        \"0xABED3790\": \"sceNetAdhocPdpSend\",\n        \"0xB9685118\": \"sceNetAdhocGetPtpStat\",\n        \"0xC7C1FC57\": \"sceNetAdhocGetPdpStat\",\n        \"0xDFE53E03\": \"sceNetAdhocPdpRecv\",\n        \"0xE08BDAC1\": \"sceNetAdhocPtpListen\",\n        \"0xE1D621D7\": \"sceNetAdhocInit\",\n        \"0xFA324B4E\": \"sceNetAdhocGameModeUpdateReplica\",\n        \"0xFC6FC07B\": \"sceNetAdhocPtpConnect\"\n    },\n    \"sceNetAdhoc_lib\": {\"0xAF6DFB15\": \"sceNetAdhocGameModeUpdateReplicaInternal\"},\n    \"sceNetAdhocAuth_lib\": {\"0x6074D8F1\": \"sceNetAdhocAuthTerm\", \"0x86004235\": \"sceNetAdhocAuthInit\"},\n    \"sceNetAdhocAuth_driver\": {\"0x6074D8F1\": \"sceNetAdhocAuthTerm\", \"0x86004235\": \"sceNetAdhocAuthInit\"},\n    \"sceNetAdhocDiscover\": {\n        \"0x52DE1B97\": \"sceNetAdhocDiscoverUpdate\",\n        \"0x941B3877\": \"sceNetAdhocDiscoverInitStart\",\n        \"0x944DDBC6\": \"sceNetAdhocDiscoverGetStatus\",\n        \"0xA2246614\": \"sceNetAdhocDiscoverTerm\",\n        \"0xA423A21B\": \"sceNetAdhocDiscoverRequestSuspend\",\n        \"0xF7D13214\": \"sceNetAdhocDiscoverStop\"\n    },\n    \"sceNetAdhocDownload\": {\n        \"0x117CA01A\": \"sceNetAdhocDownloadTermServer\",\n        \"0x13DAB550\": \"sceNetAdhocDownloadCreateServer\",\n        \"0x1AD5CC88\": \"sceNetAdhocDownloadAbortRecv\",\n        \"0x22C2BCC6\": \"sceNetAdhocDownloadGetServerList\",\n        \"0x2B6FB0DA\": \"sceNetAdhocDownloadStartServer\",\n        \"0x3082F4E2\": \"sceNetAdhocDownloadInitClient\",\n        \"0x314ED31E\": \"sceNetAdhocDownloadStartClient\",\n        \"0x378D4311\": \"sceNetAdhocDownloadDeleteClient\",\n        \"0x469F6B83\": \"sceNetAdhocDownloadStopClient\",\n        \"0x4E6029F1\": \"sceNetAdhocDownloadRequestSession\",\n        \"0x57A51DD0\": \"sceNetAdhocDownloadCreateClient\",\n        \"0x7A483F9E\": \"sceNetAdhocDownloadDeleteServer\",\n        \"0x8846D2B0\": \"sceNetAdhocDownloadRecv\",\n        \"0x8A5500E0\": \"sceNetAdhocDownloadAbortRequestSession\",\n        \"0xA21FEF45\": \"sceNetAdhocDownloadInitServer\",\n        \"0xA70FDFBE\": \"sceNetAdhocDownloadAbortSend\",\n        \"0xBF1433F0\": \"sceNetAdhocDownloadTermClient\",\n        \"0xC421875C\": \"sceNetAdhocDownloadAbortReplySession\",\n        \"0xD0189004\": \"sceNetAdhocDownloadSend\",\n        \"0xF76147B1\": \"sceNetAdhocDownloadStopServer\",\n        \"0xF8FC359E\": \"sceNetAdhocDownloadReplySession\"\n    },\n    \"sceNetAdhocMatching\": {\n        \"0x2A2A1E07\": \"sceNetAdhocMatchingInit\",\n        \"0x32B156B3\": \"sceNetAdhocMatchingStop\",\n        \"0x40F8F435\": \"sceNetAdhocMatchingGetPoolMaxAlloc\",\n        \"0x5E3D4B79\": \"sceNetAdhocMatchingSelectTarget\",\n        \"0x7945ECDA\": \"sceNetAdhocMatchingTerm\",\n        \"0x8F58BEDF\": \"sceNetAdhocMatchingCancelTargetWithOpt\",\n        \"0x93EF3843\": \"sceNetAdhocMatchingStart\",\n        \"0x9C5CFB7D\": \"sceNetAdhocMatchingGetPoolStat\",\n        \"0xB58E61B7\": \"sceNetAdhocMatchingSetHelloOpt\",\n        \"0xB5D96C2A\": \"sceNetAdhocMatchingGetHelloOpt\",\n        \"0xC58BCD9E\": \"sceNetAdhocMatchingGetMembers\",\n        \"0xCA5EDA6F\": \"sceNetAdhocMatchingCreate\",\n        \"0xEA3C6108\": \"sceNetAdhocMatchingCancelTarget\",\n        \"0xEC19337D\": \"sceNetAdhocMatchingAbortSendData\",\n        \"0xF16EAF4F\": \"sceNetAdhocMatchingDelete\",\n        \"0xF79472D7\": \"sceNetAdhocMatchingSendData\"\n    },\n    \"sceNetAdhocTransInt\": {\n        \"0x0B1F77E1\": \"sceNetAdhocTransferSocketAbortParent\",\n        \"0x0CAE4A7B\": \"sceNetAdhocTransferRequestSession\",\n        \"0x24F04EF8\": \"sceNetAdhocTransferDeleteChild\",\n        \"0x40D77905\": \"sceNetAdhocTransferGetChildRequest\",\n        \"0x48381015\": \"sceNetAdhocTransferAbortRequestSession\",\n        \"0x541E3EAB\": \"sceNetAdhocTransferTermChild\",\n        \"0x552E0C4F\": \"sceNetAdhocTransferInitParent\",\n        \"0x645E312A\": \"sceNetAdhocTransferStopChild\",\n        \"0x658833CC\": \"sceNetAdhocTransferStartParent\",\n        \"0x69F19666\": \"sceNetAdhocTransferCreateParent\",\n        \"0x6D8B0D00\": \"sceNetAdhocTransferRecvParent\",\n        \"0x6F595DFA\": \"sceNetAdhocTransferSocketAbortChild\",\n        \"0x75DAEB6B\": \"sceNetAdhocTransferInitChild\",\n        \"0x7CFB68C9\": \"sceNetAdhocTransferGetMallocStatChild\",\n        \"0x83FA2BBA\": \"sceNetAdhocTransferAbortReplySession\",\n        \"0x8897358A\": \"sceNetAdhocTransferGetParentList\",\n        \"0x97D389A3\": \"sceNetAdhocTransferSendChild\",\n        \"0x9C6EE447\": \"sceNetAdhocTransferSendParent\",\n        \"0xA64B28F7\": \"sceNetAdhocTransferStartChil\",\n        \"0xA735B9B2\": \"sceNetAdhocTransferTermParent\",\n        \"0xAD0E88C6\": \"sceNetAdhocTransferReplySession\",\n        \"0xB0975880\": \"sceNetAdhocTransferGetMallocStatParent\",\n        \"0xCD469448\": \"sceNetAdhocTransferStopParent\",\n        \"0xCD9F1D46\": \"sceNetAdhocTransferCreateChild\",\n        \"0xD438691D\": \"sceNetAdhocTransferRecvChild\",\n        \"0xE3707672\": \"sceNetAdhocTransferDeleteParent\"\n    },\n    \"sceNetAdhocctl\": {\n        \"0x08FFF7A0\": \"sceNetAdhocctlScan\",\n        \"0x0AD043ED\": \"sceNetAdhocctlConnect\",\n        \"0x1FF89745\": \"sceNetAdhocctlJoinEnterGameMode\",\n        \"0x20B317A0\": \"sceNetAdhocctlAddHandler\",\n        \"0x34401D65\": \"sceNetAdhocctlDisconnect\",\n        \"0x362CBE8F\": \"sceNetAdhocctlGetAdhocId\",\n        \"0x5A014CE0\": \"sceNetAdhocctlGetGameModeInfo\",\n        \"0x5E7F79C9\": \"sceNetAdhocctlJoin\",\n        \"0x6402490B\": \"sceNetAdhocctlDelHandler\",\n        \"0x75ECD386\": \"sceNetAdhocctlGetState\",\n        \"0x81AEE1BE\": \"sceNetAdhocctlGetScanInfo\",\n        \"0x8916C003\": \"sceNetAdhocctlGetNameByAddr\",\n        \"0x8DB83FDC\": \"sceNetAdhocctlGetPeerInfo\",\n        \"0x99560ABE\": \"sceNetAdhocctlGetAddrByName\",\n        \"0x9D689E13\": \"sceNetAdhocctlTerm\",\n        \"0xA5C055CE\": \"sceNetAdhocctlCreateEnterGameMode\",\n        \"0xCF8E084D\": \"sceNetAdhocctlExitGameMode\",\n        \"0xDED9D28E\": \"sceNetAdhocctlGetParameter\",\n        \"0xE162CB14\": \"sceNetAdhocctlGetPeerList\",\n        \"0xE26F226E\": \"sceNetAdhocctlInit\",\n        \"0xEC0635C1\": \"sceNetAdhocctlCreate\"\n    },\n    \"sceNetAdhocctl_lib\": {\"0x1593C05D\": \"sceNetThreadExitDeleteEventFlag\", \"0x1C679240\": \"LinkDiscoverSkip\"},\n    \"sceNetApctl\": {\n        \"0x04776994\": \"sceNetApctlGetBSSDescEntryUser\",\n        \"0x24FE91A1\": \"sceNetApctlDisconnect\",\n        \"0x2935C45B\": \"sceNetApctlGetBSSDescEntry2\",\n        \"0x2BEFDF23\": \"sceNetApctlGetInfo\",\n        \"0x5963991B\": \"sceNetApctlDelHandler\",\n        \"0x5DEAC81B\": \"sceNetApctlGetState\",\n        \"0x6BDDCB8C\": \"sceNetApctlGetBSSDescIDListUser\",\n        \"0x8ABADD51\": \"sceNetApctlAddHandler\",\n        \"0xA3E77E13\": \"sceNetApctlScanSSID2\",\n        \"0xB3EDD0EC\": \"sceNetApctlTerm\",\n        \"0xCFB957C6\": \"sceNetApctlConnect\",\n        \"0xE2F91F9B\": \"sceNetApctlInit\",\n        \"0xE9B2E5E6\": \"sceNetApctlScanUser\",\n        \"0xF25A5006\": \"sceNetApctlGetBSSDescIDList2\"\n    },\n    \"sceNetApctl_lib\": {\n        \"0x0C7FFA5C\": \"sceNetApctlGetBSSDescIDList\",\n        \"0x7CFAB990\": \"sceNetApctlAddInternalHandler\",\n        \"0x96BEB231\": \"sceNetApctlGetBSSDescEntry\",\n        \"0xA9721D11\": \"sceNetApctlScanSSID\",\n        \"0xB3CF6849\": \"sceNetApctlScan\",\n        \"0xE11BAFAB\": \"sceNetApctlDelInternalHandler\"\n    },\n    \"sceNetApctl_internal_user\": {\n        \"0x04776994\": \"sceNetApctlGetBSSDescEntryUser\",\n        \"0x6BDDCB8C\": \"sceNetApctlGetBSSDescIDListUser\",\n        \"0xE9B2E5E6\": \"sceNetApctlScanUser\"\n    },\n    \"sceNetApctl_lib2\": {},\n    \"sceNetInet\": {\n        \"0x05038FC7\": \"sceNetInetSendto\",\n        \"0x162E6FD5\": \"sceNetInetGetsockname\",\n        \"0x17943399\": \"sceNetInetInit\",\n        \"0x1A33F9AE\": \"sceNetInetBind\",\n        \"0x1BDF5D13\": \"sceNetInetInetAton\",\n        \"0x2FE71FE7\": \"sceNetInetSetsockopt\",\n        \"0x39B0C7D3\": \"sceNetInetGetUdpcbstat\",\n        \"0x410B34AA\": \"sceNetInetConnect\",\n        \"0x4A114C7C\": \"sceNetInetGetsockopt\",\n        \"0x4CFE4E56\": \"sceNetInetShutdown\",\n        \"0x5BE8D595\": \"sceNetInetSelect\",\n        \"0x774E36F4\": \"sceNetInetSendmsg\",\n        \"0x7AA671BC\": \"sceNetInetSend\",\n        \"0x805502DD\": \"sceNetInetCloseWithRST\",\n        \"0x80A21ABD\": \"sceNetInetSocketAbort\",\n        \"0x8B7B220F\": \"sceNetInetSocket\",\n        \"0x8CA3A97E\": \"sceNetInetGetPspError\",\n        \"0x8D7284EA\": \"sceNetInetClose\",\n        \"0xA9ED66B9\": \"sceNetInetTerm\",\n        \"0xB3888AD4\": \"sceNetInetGetTcpcbstat\",\n        \"0xB75D5B0A\": \"sceNetInetInetAddr\",\n        \"0xC91142E4\": \"sceNetInetRecvfrom\",\n        \"0xCDA85C99\": \"sceNetInetRecv\",\n        \"0xD0792666\": \"sceNetInetInetNtop\",\n        \"0xD10A1A7A\": \"sceNetInetListen\",\n        \"0xDB094E1B\": \"sceNetInetAccept\",\n        \"0xE247B6D6\": \"sceNetInetGetpeername\",\n        \"0xE30B8C19\": \"sceNetInetInetPton\",\n        \"0xEECE61D2\": \"sceNetInetRecvmsg\",\n        \"0xFAABB1DD\": \"sceNetInetPoll\",\n        \"0xFBABE411\": \"sceNetInetGetErrno\"\n    },\n    \"sceNetInet_lib\": {},\n    \"sceNetResolver\": {\n        \"0x12748EB9\": \"sceNetResolverWaitAsync\",\n        \"0x14C17EF9\": \"sceNetResolverStartNtoAAsync\",\n        \"0x224C5F44\": \"sceNetResolverStartNtoA\",\n        \"0x244172AF\": \"sceNetResolverCreate\",\n        \"0x4EE99358\": \"sceNetResolverPollAsync\",\n        \"0x6138194A\": \"sceNetResolverTerm\",\n        \"0x629E2FB7\": \"sceNetResolverStartAtoN\",\n        \"0x808F6063\": \"sceNetResolverStop\",\n        \"0x94523E09\": \"sceNetResolverDelete\",\n        \"0xAAC09184\": \"sceNetResolverStartAtoNAsync\",\n        \"0xF3370E61\": \"sceNetResolverInit\"\n    },\n    \"sceNetStun\": {},\n    \"sceNetUpnp\": {},\n    \"sceNetWispr\": {\n        \"0x19235F8C\": \"sceNetWisprStart\",\n        \"0x757BDC9F\": \"sceNetWisprStop\",\n        \"0xBC05EC73\": \"sceNetWisprTerm\",\n        \"0xBD745B6D\": \"sceNetWisprInit\"\n    },\n    \"sceReg\": {\n        \"0x0CAE832B\": \"sceRegCloseCategory\",\n        \"0x0D69BF40\": \"sceRegFlushCategory\",\n        \"0x17768E14\": \"sceRegSetKeyValue\",\n        \"0x1D8A762E\": \"sceRegOpenCategory\",\n        \"0x28A8E98A\": \"sceRegGetKeyValue\",\n        \"0x2C0DB9DD\": \"sceRegGetKeysNum\",\n        \"0x2D211135\": \"sceRegGetKeys\",\n        \"0x30BE0259\": \"sceRegGetKeyValueByName\",\n        \"0x3615BC87\": \"sceRegRemoveKey\",\n        \"0x39461B4D\": \"sceRegFlushRegistry\",\n        \"0x4CA16893\": \"sceRegRemoveCategory\",\n        \"0x57641A81\": \"sceRegCreateKey\",\n        \"0x92E41280\": \"sceRegOpenRegistry\",\n        \"0x9B25EDF1\": \"sceRegExit\",\n        \"0xC5768D02\": \"sceRegGetKeyInfoByName\",\n        \"0xD4475AA8\": \"sceRegGetKeyInfo\",\n        \"0xDEDA92BF\": \"sceRegRemoveRegistry\",\n        \"0xFA8A5739\": \"sceRegCloseRegistry\"\n    },\n    \"sceReg_driver\": {},\n    \"rss_browser\": {},\n    \"rss_common\": {},\n    \"rss_downloader\": {},\n    \"sceRtc\": {\n        \"0x011F03C1\": \"sceRtcGetAccumulativeTime\",\n        \"0x029CA3B3\": \"sceRtcGetAccumlativeTime\",\n        \"0x0498FB3C\": \"sceRtcFormatRFC3339\",\n        \"0x05EF322C\": \"sceRtcGetDaysInMonth\",\n        \"0x1909C99B\": \"sceRtcSetTime64_t\",\n        \"0x203CEB0D\": \"sceRtcGetLastReincarnatedTime\",\n        \"0x26D25A5D\": \"sceRtcTickAddMicroseconds\",\n        \"0x26D7A24A\": \"sceRtcTickAddHours\",\n        \"0x27C4594C\": \"sceRtcGetTime_t\",\n        \"0x27F98543\": \"sceRtcFormatRFC3339LocalTime\",\n        \"0x28E1E988\": \"sceRtcParseRFC3339\",\n        \"0x34885E0D\": \"sceRtcConvertUtcToLocalTime\",\n        \"0x36075567\": \"sceRtcGetDosTime\",\n        \"0x3A807CC8\": \"sceRtcSetTime_t\",\n        \"0x3F7AD767\": \"sceRtcGetCurrentTick\",\n        \"0x42307A17\": \"sceRtcIsLeapYear\",\n        \"0x42842C77\": \"sceRtcTickAddYears\",\n        \"0x44F45E05\": \"sceRtcTickAddTicks\",\n        \"0x4B1B5E82\": \"sceRtcCheckValid\",\n        \"0x4CFA57B0\": \"sceRtcGetCurrentClock\",\n        \"0x57726BC1\": \"sceRtcGetDayOfWeek\",\n        \"0x62685E98\": \"sceRtcGetLastAdjustedTime\",\n        \"0x6A676D2D\": \"sceRtcUnregisterCallback\",\n        \"0x6FF40ACC\": \"sceRtcGetTick\",\n        \"0x779242A2\": \"sceRtcConvertLocalTimeToUTC\",\n        \"0x7ACE4C04\": \"sceRtcSetWin32FileTime\",\n        \"0x7DE6711B\": \"sceRtcFormatRFC2822LocalTime\",\n        \"0x7ED29E40\": \"sceRtcSetTick\",\n        \"0x81FCDA34\": \"sceRtcIsAlarmed\",\n        \"0x9ED0AE87\": \"sceRtcCompareTick\",\n        \"0xC41C2853\": \"sceRtcGetTickResolution\",\n        \"0xC663B3B9\": \"sceRtcFormatRFC2822\",\n        \"0xCF3A2CA8\": \"sceRtcTickAddWeeks\",\n        \"0xCF561893\": \"sceRtcGetWin32FileTime\",\n        \"0xDBF74F1B\": \"sceRtcTickAddMonths\",\n        \"0xDFBC5F16\": \"sceRtcParseDateTime\",\n        \"0xE1C93E47\": \"sceRtcGetTime64_t\",\n        \"0xE51B4B7A\": \"sceRtcTickAddDays\",\n        \"0xE6605BCA\": \"sceRtcTickAddMinutes\",\n        \"0xE7C27D1B\": \"sceRtcGetCurrentClockLocalTime\",\n        \"0xF006F264\": \"sceRtcSetDosTime\",\n        \"0xF2A4AFE5\": \"sceRtcTickAddSeconds\",\n        \"0xFB3B18CD\": \"sceRtcRegisterCallback\"\n    },\n    \"sceRtc_driver\": {\n        \"0x011F03C1\": \"sceRtcGetAccumulativeTime\",\n        \"0x17C26C00\": \"sceRtcSetCurrentSecureTick\",\n        \"0x3F7AD767\": \"sceRtcGetCurrentTick\",\n        \"0x44F45E05\": \"sceRtcTickAddTicks\",\n        \"0x48D07D70\": \"sceRtcResume\",\n        \"0x4B1B5E82\": \"sceRtcCheckValid\",\n        \"0x4CFA57B0\": \"sceRtcGetCurrentClock\",\n        \"0x6FF40ACC\": \"sceRtcGetTick\",\n        \"0x7ED29E40\": \"sceRtcSetTick\",\n        \"0x912BEE56\": \"sceRtcInit\",\n        \"0x9763C138\": \"sceRtcSetCurrentTick\",\n        \"0x9CC2797E\": \"sceRtcSuspend\",\n        \"0xB44BDAED\": \"sceRtcGetCurrentSecureTick\",\n        \"0xC41C2853\": \"sceRtcGetTickResolution\",\n        \"0xCE27DE2F\": \"sceRtcEnd\",\n        \"0xF2A4AFE5\": \"sceRtcTickAddSeconds\"\n    },\n    \"sceSasCore_driver\": {\"0xB0F9F98F\": \"sceSasCoreInit\", \"0xE143A1EA\": \"sceSasCoreExit\"},\n    \"sceSasCore\": {\n        \"0x019B25EB\": \"__sceSasSetADSR\",\n        \"0x07F58C24\": \"__sceSasGetAllEnvelopeHeights\",\n        \"0x267A6DD2\": \"__sceSasRevParam\",\n        \"0x2C8E6AB3\": \"__sceSasGetPauseFlag\",\n        \"0x33D4AB37\": \"__sceSasRevType\",\n        \"0x42778A9F\": \"__sceSasInit\",\n        \"0x440CA7D8\": \"__sceSasSetVolume\",\n        \"0x50A14DFC\": \"__sceSasCoreWithMix\",\n        \"0x5F9529F6\": \"__sceSasSetSL\",\n        \"0x68A46B95\": \"__sceSasGetEndFlag\",\n        \"0x74AE582A\": \"__sceSasGetEnvelopeHeight\",\n        \"0x76F01ACA\": \"__sceSasSetKeyOn\",\n        \"0x787D04D5\": \"__sceSasSetPause\",\n        \"0x99944089\": \"__sceSasSetVoice\",\n        \"0x9EC3676A\": \"__sceSasSetADSRmode\",\n        \"0xA0CF2FA4\": \"__sceSasSetKeyOff\",\n        \"0xA232CBE6\": \"__sceSasSetTrianglarWave\",\n        \"0xA3589D81\": \"__sceSasCore\",\n        \"0xAD84D37F\": \"__sceSasSetPitch\",\n        \"0xB7660A23\": \"__sceSasSetNoise\",\n        \"0xBD11B7C2\": \"__sceSasGetGrain\",\n        \"0xCBCD4F79\": \"__sceSasSetSimpleADSR\",\n        \"0xD1E0A01E\": \"__sceSasSetGrain\",\n        \"0xD5A229C9\": \"__sceSasRevEVOL\",\n        \"0xD5EBBBCD\": \"__sceSasSetSteepWave\",\n        \"0xE175EF66\": \"__sceSasGetOutputmode\",\n        \"0xE1CD9561\": \"__sceSasSetVoicePCM\",\n        \"0xE855BF76\": \"__sceSasSetOutputmode\",\n        \"0xF983B186\": \"__sceSasRevVON\"\n    },\n    \"sceP3da_driver\": {\"0x374500A5\": \"sceP3daBridgeInit\", \"0x43F756A2\": \"sceP3daBridgeExit\"},\n    \"sceP3da\": {\n        \"0x013016F3\": \"sceP3daBridgeCore\",\n        \"0x374500A5\": \"sceP3daBridgeInit\",\n        \"0x43F756A2\": \"sceP3daBridgeExit\"\n    },\n    \"sceSemawm\": {},\n    \"sceSircs\": {\"0x71EEF62D\": \"sceSircsSend\", \"0x83381633\": \"sceSircsReceive\"},\n    \"sceSircs_driver\": {\n        \"0x19155A2F\": \"sceSircsEnd\",\n        \"0x62411801\": \"sceSircsInit\",\n        \"0x71EEF62D\": \"sceSircsSend\",\n        \"0x83381633\": \"sceSircsReceive\"\n    },\n    \"sceVe\": {},\n    \"sceSyscon_driver\": {\n        \"0x081826B4\": \"sceSysconSuspend\",\n        \"0x08234E6D\": \"sceSysconReceiveSetParam\",\n        \"0x0A771482\": \"sceSysconInit\",\n        \"0x138747DE\": \"sceSysconGetUmdSwitch\",\n        \"0x1602ED0D\": \"sceSysconCmdCancel\",\n        \"0x18BFBE65\": \"sceSysconCtrlLED\",\n        \"0x204F23FF\": \"sceSysconGetBaryonStatus2\",\n        \"0x3AC3D2A4\": \"sceSysconCmdExecAsync\",\n        \"0x3DE38336\": \"sceSysconReadPommelReg\",\n        \"0x56931095\": \"sceSysconResume\",\n        \"0x5B9ACC97\": \"sceSysconCmdExec\",\n        \"0x5EE92F3C\": \"sceSysconSetDebugHandlers\",\n        \"0x7BCC5EAE\": \"sceSysconGetTimeStamp\",\n        \"0x7EC5A957\": \"sceSysconGetBaryonVersion\",\n        \"0x86D4CAD8\": \"sceSysconGetBaryonStatus\",\n        \"0x8A4519F5\": \"sceSysconCtrlLeptonPower\",\n        \"0x8CBC7987\": \"sceSysconResetDevice\",\n        \"0x92D16FC7\": \"sceSysconEnd\",\n        \"0x992C22C2\": \"sceSysconSendSetParam\",\n        \"0xD1B501E8\": \"sceSysconWritePommelReg\",\n        \"0xE6B74CB9\": \"sceSysconNop\",\n        \"0xE7E87741\": \"sceSysconGetPommelVersion\",\n        \"0xF350F666\": \"sceSysconCmdSync\"\n    },\n    \"SysMemForKernel\": {},\n    \"SysMemUserForUser\": {\n        \"0x13A5ABEF\": \"sceKernelPrintf\",\n        \"0x237DBD4F\": \"sceKernelAllocPartitionMemory\",\n        \"0x2A3E5280\": \"sceKernelQueryMemoryInfo\",\n        \"0x3FC9AE6A\": \"sceKernelDevkitVersion\",\n        \"0x7591C7DB\": \"sceKernelSetCompiledSdkVersion\",\n        \"0x9D9A5BA1\": \"sceKernelGetBlockHeadAddr\",\n        \"0xA291F107\": \"sceKernelMaxFreeMemSize\",\n        \"0xB6D61D02\": \"sceKernelFreePartitionMemory\",\n        \"0xF77D77CB\": \"sceKernelSetCompilerVersion\",\n        \"0xF919F628\": \"sceKernelTotalFreeMemSize\",\n        \"0xFC114573\": \"sceKernelGetCompiledSdkVersion\"\n    },\n    \"SysclibForKernel\": {\n        \"0x097049BD\": \"bcopy\",\n        \"0x0D188658\": \"strstr\",\n        \"0x0DFB7B6C\": \"strpbrk\",\n        \"0x10F3BB61\": \"memset\",\n        \"0x1493EBD9\": \"wmemset\",\n        \"0x18FE80DB\": \"longjmp\",\n        \"0x1AB53A58\": \"strtok_r\",\n        \"0x1D83F344\": \"atob\",\n        \"0x243665ED\": \"rindex\",\n        \"0x279F9A12\": \"wmemclear\",\n        \"0x32C767F2\": \"look_ctype_table\",\n        \"0x3EC5BBF6\": \"tolower\",\n        \"0x476FD94A\": \"strcat\",\n        \"0x47DD934D\": \"strtol\",\n        \"0x4C0E0274\": \"strrchr\",\n        \"0x52DF196C\": \"strlen\",\n        \"0x62AE052F\": \"strspn\",\n        \"0x68A78817\": \"memchr\",\n        \"0x6A7900E1\": \"strtoul\",\n        \"0x7661E728\": \"sprintf\",\n        \"0x7AB35214\": \"strncmp\",\n        \"0x7F8A6F23\": \"bcmp\",\n        \"0x81D0D1F7\": \"memcmp\",\n        \"0x86FEFCE9\": \"bzero\",\n        \"0x87C78FB6\": \"prnt\",\n        \"0x87F8D2DA\": \"strtok\",\n        \"0x89B79CB1\": \"strcspn\",\n        \"0x909C228B\": \"setjmp\",\n        \"0x90C5573D\": \"strnlen\",\n        \"0xA48D2592\": \"memmove\",\n        \"0xAB7592FF\": \"memcpy\",\n        \"0xB1DC2AE8\": \"strchr\",\n        \"0xB49A7697\": \"strncpy\",\n        \"0xC0AB8932\": \"strcmp\",\n        \"0xCE2F7487\": \"toupper\",\n        \"0xD1CD40E5\": \"index\",\n        \"0xD887CACD\": \"get_ctype_table\",\n        \"0xEC6F1CF2\": \"strcpy\"\n    },\n    \"sceSysEventForKernel\": {\n        \"0x36331294\": \"sceKernelSysEventDispatch\",\n        \"0x68D55505\": \"sceKernelReferSysEventHandler\",\n        \"0xAEB300AE\": \"sceKernelIsRegisterSysEventHandler\",\n        \"0xCD9E4BB5\": \"sceKernelRegisterSysEventHandler\",\n        \"0xD7D3FDCD\": \"sceKernelUnregisterSysEventHandler\"\n    },\n    \"sceSuspendForKernel\": {\n        \"0x090CCB3F\": \"sceKernelPowerTick\",\n        \"0x0AB0C6F3\": \"sceKernelDispatchResumeHandlers\",\n        \"0x3AEE7261\": \"sceKernelPowerUnlock\",\n        \"0x3E0271D3\": \"sceKernelVolatileMemLock\",\n        \"0x8F58B1EC\": \"sceKernelDispatchSuspendHandlers\",\n        \"0x91A77137\": \"sceKernelRegisterSuspendHandler\",\n        \"0x98A1D061\": \"sceKernelPowerRebootStart\",\n        \"0xA14F40B2\": \"sceKernelVolatileMemTryLock\",\n        \"0xA569E425\": \"sceKernelVolatileMemUnlock\",\n        \"0xB43D1A8C\": \"sceKernelRegisterResumeHandler\",\n        \"0xB53B2147\": \"sceKernelPowerLockForUser\",\n        \"0xBDE686CD\": \"sceKernelRegisterPowerHandlers\",\n        \"0xC7C928C7\": \"sceKernelPowerUnlockForUser\",\n        \"0xEADB1BD7\": \"sceKernelPowerLock\"\n    },\n    \"sceSuspendForUser\": {\n        \"0x090CCB3F\": \"sceKernelPowerTick\",\n        \"0x3AEE7261\": \"sceKernelPowerUnlock\",\n        \"0x3E0271D3\": \"sceKernelVolatileMemLock\",\n        \"0xA14F40B2\": \"sceKernelVolatileMemTryLock\",\n        \"0xA569E425\": \"sceKernelVolatileMemUnlock\",\n        \"0xEADB1BD7\": \"sceKernelPowerLock\"\n    },\n    \"UtilsForUser\": {\n        \"0x06FB8A63\": \"sceKernelUtilsMt19937UInt\",\n        \"0x16641D70\": \"sceKernelDcacheReadTag\",\n        \"0x27CC57F0\": \"sceKernelLibcTime\",\n        \"0x346F6DA8\": \"sceKernelUtilsSha1BlockUpdate\",\n        \"0x34B9FA9E\": \"sceKernelDcacheWritebackInvalidateRange\",\n        \"0x37FB5C42\": \"sceKernelGetGPI\",\n        \"0x3EE30821\": \"sceKernelDcacheWritebackRange\",\n        \"0x4FD31C9D\": \"sceKernelIcacheProbe\",\n        \"0x585F1C09\": \"sceKernelUtilsSha1BlockResult\",\n        \"0x61E1E525\": \"sceKernelUtilsMd5BlockUpdate\",\n        \"0x6AD345D7\": \"sceKernelSetGPO\",\n        \"0x71EC4271\": \"sceKernelLibcGettimeofday\",\n        \"0x77DFF087\": \"sceKernelDcacheProbeRange\",\n        \"0x79D1C3FA\": \"sceKernelDcacheWritebackAll\",\n        \"0x80001C4C\": \"sceKernelDcacheProbe\",\n        \"0x840259F1\": \"sceKernelUtilsSha1Digest\",\n        \"0x87E81561\": \"sceKernelPutUserLog\",\n        \"0x91E4F6A7\": \"sceKernelLibcClock\",\n        \"0x920F104A\": \"sceKernelIcacheInvalidateAll\",\n        \"0x9E5C5086\": \"sceKernelUtilsMd5BlockInit\",\n        \"0xB435DEC5\": \"sceKernelDcacheWritebackInvalidateAll\",\n        \"0xB8D24E78\": \"sceKernelUtilsMd5BlockResult\",\n        \"0xBFA98062\": \"sceKernelDcacheInvalidateRange\",\n        \"0xC2DF770E\": \"sceKernelIcacheInvalidateRange\",\n        \"0xC8186A58\": \"sceKernelUtilsMd5Digest\",\n        \"0xE860E75E\": \"sceKernelUtilsMt19937Init\",\n        \"0xF8FCD5BA\": \"sceKernelUtilsSha1BlockInit\",\n        \"0xFB05FAD0\": \"sceKernelIcacheReadTag\"\n    },\n    \"UtilsForKernel\": {\n        \"0x06FB8A63\": \"sceKernelUtilsMt19937UInt\",\n        \"0x136F2419\": \"sceKernelSetPTRIGMask\",\n        \"0x16641D70\": \"sceKernelDcacheReadTag\",\n        \"0x193D4036\": \"sceKernelSetGPIMask\",\n        \"0x23A0C5BA\": \"sceKernelRegisterRtcFunc\",\n        \"0x23FFC828\": \"sceKernelGzipGetCompressedData\",\n        \"0x27CC57F0\": \"sceKernelLibcTime\",\n        \"0x346F6DA8\": \"sceKernelUtilsSha1BlockUpdate\",\n        \"0x34B9FA9E\": \"sceKernelDcacheWritebackInvalidateRange\",\n        \"0x37FB5C42\": \"sceKernelGetGPI\",\n        \"0x39F49610\": \"sceKernelGetPTRIG\",\n        \"0x3EE30821\": \"sceKernelDcacheWritebackRange\",\n        \"0x41887EF4\": \"sceKernelReleaseRtcFunc\",\n        \"0x4FD31C9D\": \"sceKernelIcacheProbe\",\n        \"0x585F1C09\": \"sceKernelUtilsSha1BlockResult\",\n        \"0x61E1E525\": \"sceKernelUtilsMd5BlockUpdate\",\n        \"0x6231A71D\": \"sceKernelSetPTRIG\",\n        \"0x6AD345D7\": \"sceKernelSetGPO\",\n        \"0x71EC4271\": \"sceKernelLibcGettimeofday\",\n        \"0x77DFF087\": \"sceKernelDcacheProbeRange\",\n        \"0x78934841\": \"sceKernelGzipDecompress\",\n        \"0x79D1C3FA\": \"sceKernelDcacheWritebackAll\",\n        \"0x80001C4C\": \"sceKernelDcacheProbe\",\n        \"0x840259F1\": \"sceKernelUtilsSha1Digest\",\n        \"0x864A9D72\": \"sceKernelDcacheInvalidateAll\",\n        \"0x87E81561\": \"sceKernelPutUserLog\",\n        \"0x8C1FBE04\": \"sceKernelGzipGetComment\",\n        \"0x91E4F6A7\": \"sceKernelLibcClock\",\n        \"0x920F104A\": \"sceKernelIcacheInvalidateAll\",\n        \"0x92282A47\": \"sceKernelRegisterUserLogHandler\",\n        \"0x95035FEF\": \"sceKernelSetGPOMask\",\n        \"0x9E5C5086\": \"sceKernelUtilsMd5BlockInit\",\n        \"0xAF3616C0\": \"sceKernelGetGPO\",\n        \"0xB0E9C31F\": \"sceKernelGzipGetInfo\",\n        \"0xB435DEC5\": \"sceKernelDcacheWritebackInvalidateAll\",\n        \"0xB8D24E78\": \"sceKernelUtilsMd5BlockResult\",\n        \"0xBDBFCA89\": \"sceKernelRtcGetTick\",\n        \"0xBFA98062\": \"sceKernelDcacheInvalidateRange\",\n        \"0xC2DF770E\": \"sceKernelIcacheInvalidateRange\",\n        \"0xC8186A58\": \"sceKernelUtilsMd5Digest\",\n        \"0xE0CE3E29\": \"sceKernelGzipIsValid\",\n        \"0xE0E6BA96\": \"sceKernelGzipGetName\",\n        \"0xE860E75E\": \"sceKernelUtilsMt19937Init\",\n        \"0xE8DB3CE6\": \"sceKernelDeflateDecompress\",\n        \"0xF8FCD5BA\": \"sceKernelUtilsSha1BlockInit\",\n        \"0xFB05FAD0\": \"sceKernelIcacheReadTag\"\n    },\n    \"KDebugForKernel\": {\"0x84F370BC\": \"Kprintf\", \"0xD636B827\": \"sceKernelDipswAll\"},\n    \"SysTimerForKernel\": {},\n    \"ThreadManForUser\": {\n        \"0x034A921F\": \"sceKernelGetVTimerTime\",\n        \"0x0C106E53\": \"sceKernelRegisterThreadEventHandler\",\n        \"0x0D81716A\": \"sceKernelPollMbx\",\n        \"0x0DDCD2C9\": \"sceKernelTryLockMutex\",\n        \"0x0E927AED\": \"_sceKernelReturnFromTimerHandler\",\n        \"0x110DEC9A\": \"sceKernelUSec2SysClock\",\n        \"0x1181E963\": \"sceKernelDelaySysClockThreadCB\",\n        \"0x17C1684E\": \"sceKernelReferThreadStatus\",\n        \"0x18260574\": \"sceKernelReceiveMbx\",\n        \"0x19CFF145\": \"sceKernelCreateLwMutex\",\n        \"0x1AF94D03\": \"sceKernelDonateWakeupThread\",\n        \"0x1D371B8A\": \"sceKernelCancelVpl\",\n        \"0x1FB15A32\": \"sceKernelSetEventFlag\",\n        \"0x20FFF560\": \"sceKernelCreateVTimer\",\n        \"0x278C0DF5\": \"sceKernelWaitThreadEnd\",\n        \"0x27E22EC2\": \"sceKernelResumeDispatchThread\",\n        \"0x28B6489C\": \"sceKernelDeleteSema\",\n        \"0x293B45B8\": \"sceKernelGetThreadId\",\n        \"0x2A3D44FF\": \"sceKernelGetCallbackCount\",\n        \"0x2C34E053\": \"sceKernelReleaseWaitThread\",\n        \"0x30FD48F0\": \"sceKernelPollEventFlag\",\n        \"0x328C546A\": \"sceKernelWaitEventFlagCB\",\n        \"0x328F9E52\": \"sceKernelDeleteVTimer\",\n        \"0x33BE4024\": \"sceKernelReferMsgPipeStatus\",\n        \"0x349B864D\": \"sceKernelCancelMsgPipe\",\n        \"0x349D6D6C\": \"sceKernelCheckCallback\",\n        \"0x369ED59D\": \"sceKernelGetSystemTimeLow\",\n        \"0x369EEB6B\": \"sceKernelReferThreadEventHandlerStatus\",\n        \"0x383F7BCC\": \"sceKernelTerminateDeleteThread\",\n        \"0x39810265\": \"sceKernelReferVplStatus\",\n        \"0x3AD58B8C\": \"sceKernelSuspendDispatchThread\",\n        \"0x3B183E26\": \"sceKernelGetThreadExitStatus\",\n        \"0x3F53E640\": \"sceKernelSignalSema\",\n        \"0x402FCF22\": \"sceKernelWaitEventFlag\",\n        \"0x446D8DE6\": \"sceKernelCreateThread\",\n        \"0x4C145944\": \"sceKernelReferLwMutexStatusByID\",\n        \"0x4E3A1105\": \"sceKernelWaitSema\",\n        \"0x52089CA1\": \"sceKernelGetThreadStackFreeSize\",\n        \"0x532A522E\": \"_sceKernelExitThread\",\n        \"0x53B00E9A\": \"sceKernelSetVTimerHandlerWide\",\n        \"0x542AD630\": \"sceKernelSetVTimerTime\",\n        \"0x55C20A00\": \"sceKernelCreateEventFlag\",\n        \"0x56C039B5\": \"sceKernelCreateVpl\",\n        \"0x57CF62DD\": \"sceKernelGetThreadmanIdType\",\n        \"0x58B1F937\": \"sceKernelPollSema\",\n        \"0x5BF4DD27\": \"sceKernelLockMutexCB\",\n        \"0x5F32BEAA\": \"sceKernelReferVTimerStatus\",\n        \"0x60107536\": \"sceKernelDeleteLwMutex\",\n        \"0x616403BA\": \"sceKernelTerminateThread\",\n        \"0x623AE665\": \"sceKernelTryAllocateFpl\",\n        \"0x627E6F3A\": \"sceKernelReferSystemStatus\",\n        \"0x64D4540E\": \"sceKernelReferThreadProfiler\",\n        \"0x6652B8CA\": \"sceKernelSetAlarm\",\n        \"0x68DA9E36\": \"sceKernelDelayThreadCB\",\n        \"0x6B30100F\": \"sceKernelUnlockMutex\",\n        \"0x6D212BAC\": \"sceKernelWaitSemaCB\",\n        \"0x6E9EA350\": \"_sceKernelReturnFromCallback\",\n        \"0x71BC9871\": \"sceKernelChangeThreadPriority\",\n        \"0x72F3C145\": \"sceKernelReleaseThreadEventHandler\",\n        \"0x730ED8BC\": \"sceKernelReferCallbackStatus\",\n        \"0x74829B76\": \"sceKernelReceiveMsgPipe\",\n        \"0x75156E8F\": \"sceKernelResumeThread\",\n        \"0x7C0DC2A0\": \"sceKernelCreateMsgPipe\",\n        \"0x7C41F2C2\": \"sceKernelSendMsgPipeCB\",\n        \"0x7E65B999\": \"sceKernelCancelAlarm\",\n        \"0x809CE29B\": \"sceKernelExitDeleteThread\",\n        \"0x812346E4\": \"sceKernelClearEventFlag\",\n        \"0x8125221D\": \"sceKernelCreateMbx\",\n        \"0x8218B4DD\": \"sceKernelReferGlobalProfiler\",\n        \"0x82826F70\": \"sceKernelSleepThreadCB\",\n        \"0x82BC5777\": \"sceKernelGetSystemTimeWide\",\n        \"0x840E8133\": \"sceKernelWaitThreadEndCB\",\n        \"0x86255ADA\": \"sceKernelDeleteMbx\",\n        \"0x876DBFAD\": \"sceKernelSendMsgPipe\",\n        \"0x87D4DD36\": \"sceKernelCancelReceiveMbx\",\n        \"0x87D9223C\": \"sceKernelCancelMutex\",\n        \"0x884C9F90\": \"sceKernelTrySendMsgPipe\",\n        \"0x89B3D48C\": \"sceKernelDeleteVpl\",\n        \"0x8FFDF9A2\": \"sceKernelCancelSema\",\n        \"0x912354A7\": \"sceKernelRotateThreadReadyQueue\",\n        \"0x94416130\": \"sceKernelGetThreadmanIdList\",\n        \"0x94AA61EE\": \"sceKernelGetThreadCurrentPriority\",\n        \"0x9944F31F\": \"sceKernelSuspendThread\",\n        \"0x9ACE131E\": \"sceKernelSleepThread\",\n        \"0x9FA03CD3\": \"sceKernelDeleteThread\",\n        \"0xA66B0120\": \"sceKernelReferEventFlagStatus\",\n        \"0xA8AA591F\": \"sceKernelCancelFpl\",\n        \"0xA8E8C846\": \"sceKernelReferMbxStatus\",\n        \"0xA9C2CB9A\": \"sceKernelReferMutexStatus\",\n        \"0xAA73C935\": \"sceKernelExitThread\",\n        \"0xAF36D708\": \"sceKernelTryAllocateVpl\",\n        \"0xB011B11F\": \"sceKernelLockMutex\",\n        \"0xB2C25152\": \"sceKernelSetSysClockAlarm\",\n        \"0xB3A59970\": \"sceKernelGetVTimerBase\",\n        \"0xB736E9FF\": \"sceKernelFreeVpl\",\n        \"0xB7C18B77\": \"sceKernelGetVTimerBaseWide\",\n        \"0xB7D098C6\": \"sceKernelCreateMutex\",\n        \"0xBA4051D6\": \"sceKernelCancelCallback\",\n        \"0xBA6B92E2\": \"sceKernelSysClock2USec\",\n        \"0xBC6FEBC5\": \"sceKernelReferSemaStatus\",\n        \"0xBD123D9E\": \"sceKernelDelaySysClockThread\",\n        \"0xBED27435\": \"sceKernelAllocateVpl\",\n        \"0xC07BB470\": \"sceKernelCreateFpl\",\n        \"0xC0B3FFD2\": \"sceKernelGetVTimerTimeWide\",\n        \"0xC11BA8C4\": \"sceKernelNotifyCallback\",\n        \"0xC68D9437\": \"sceKernelStartVTimer\",\n        \"0xC8CD158C\": \"sceKernelUSec2SysClockWide\",\n        \"0xCD203292\": \"sceKernelCancelEventFlag\",\n        \"0xCEADEB47\": \"sceKernelDelayThread\",\n        \"0xD0AEEE87\": \"sceKernelStopVTimer\",\n        \"0xD13BDE95\": \"sceKernelCheckThreadStack\",\n        \"0xD2D615EF\": \"sceKernelCancelVTimerHandler\",\n        \"0xD59EAD2F\": \"sceKernelWakeupThread\",\n        \"0xD6DA4BA1\": \"sceKernelCreateSema\",\n        \"0xD8199E4C\": \"sceKernelReferFplStatus\",\n        \"0xD8B299AE\": \"sceKernelSetVTimerHandler\",\n        \"0xD979E9BF\": \"sceKernelAllocateFpl\",\n        \"0xDAA3F564\": \"sceKernelReferAlarmStatus\",\n        \"0xDB738F35\": \"sceKernelGetSystemTime\",\n        \"0xDF52098F\": \"sceKernelTryReceiveMsgPipe\",\n        \"0xE1619D7C\": \"sceKernelSysClock2USecWide\",\n        \"0xE7282CB6\": \"sceKernelAllocateFplCB\",\n        \"0xE81CAF8F\": \"sceKernelCreateCallback\",\n        \"0xE9B3061E\": \"sceKernelSendMbx\",\n        \"0xEA748E31\": \"sceKernelChangeCurrentThreadAttr\",\n        \"0xEC0A693F\": \"sceKernelAllocateVplCB\",\n        \"0xED1410E0\": \"sceKernelDeleteFpl\",\n        \"0xEDBA5844\": \"sceKernelDeleteCallback\",\n        \"0xEF9E4C70\": \"sceKernelDeleteEventFlag\",\n        \"0xF0B7DA1C\": \"sceKernelDeleteMsgPipe\",\n        \"0xF3986382\": \"sceKernelReceiveMbxCB\",\n        \"0xF475845D\": \"sceKernelStartThread\",\n        \"0xF6414A71\": \"sceKernelFreeFpl\",\n        \"0xF8170FBE\": \"sceKernelDeleteMutex\",\n        \"0xFB6425C3\": \"sceKernelSetVTimerTimeWide\",\n        \"0xFBFA697D\": \"sceKernelReceiveMsgPipeCB\",\n        \"0xFCCFAD26\": \"sceKernelCancelWakeupThread\",\n        \"0xFFC36A14\": \"sceKernelReferThreadRunStatus\"\n    },\n    \"ThreadManForKernel\": {\n        \"0x034A921F\": \"sceKernelGetVTimerTime\",\n        \"0x04E72261\": \"sceKernelAllocateKTLS\",\n        \"0x0C106E53\": \"sceKernelRegisterThreadEventHandler\",\n        \"0x0D81716A\": \"sceKernelPollMbx\",\n        \"0x0DDCD2C9\": \"sceKernelTryLockMutex\",\n        \"0x110DEC9A\": \"sceKernelUSec2SysClock\",\n        \"0x1181E963\": \"sceKernelDelaySysClockThreadCB\",\n        \"0x17C1684E\": \"sceKernelReferThreadStatus\",\n        \"0x18260574\": \"sceKernelReceiveMbx\",\n        \"0x1AF94D03\": \"sceKernelDonateWakeupThread\",\n        \"0x1D371B8A\": \"sceKernelCancelVpl\",\n        \"0x1FB15A32\": \"sceKernelSetEventFlag\",\n        \"0x20FFF560\": \"sceKernelCreateVTimer\",\n        \"0x278C0DF5\": \"sceKernelWaitThreadEnd\",\n        \"0x27E22EC2\": \"sceKernelResumeDispatchThread\",\n        \"0x28B6489C\": \"sceKernelDeleteSema\",\n        \"0x293B45B8\": \"sceKernelGetThreadId\",\n        \"0x2A3D44FF\": \"sceKernelGetCallbackCount\",\n        \"0x2C34E053\": \"sceKernelReleaseWaitThread\",\n        \"0x30FD48F0\": \"sceKernelPollEventFlag\",\n        \"0x328C546A\": \"sceKernelWaitEventFlagCB\",\n        \"0x328F9E52\": \"sceKernelDeleteVTimer\",\n        \"0x33BE4024\": \"sceKernelReferMsgPipeStatus\",\n        \"0x349B864D\": \"sceKernelCancelMsgPipe\",\n        \"0x349D6D6C\": \"sceKernelCheckCallback\",\n        \"0x369ED59D\": \"sceKernelGetSystemTimeLow\",\n        \"0x369EEB6B\": \"sceKernelReferThreadEventHandlerStatus\",\n        \"0x383F7BCC\": \"sceKernelTerminateDeleteThread\",\n        \"0x39810265\": \"sceKernelReferVplStatus\",\n        \"0x3AD58B8C\": \"sceKernelSuspendDispatchThread\",\n        \"0x3AD875C3\": \"sceKernelGetThreadKTLS\",\n        \"0x3B183E26\": \"sceKernelGetThreadExitStatus\",\n        \"0x3F53E640\": \"sceKernelSignalSema\",\n        \"0x402FCF22\": \"sceKernelWaitEventFlag\",\n        \"0x446D8DE6\": \"sceKernelCreateThread\",\n        \"0x4C145944\": \"sceKernelReferLwMutexStatusByID\",\n        \"0x4E3A1105\": \"sceKernelWaitSema\",\n        \"0x4FE44D5E\": \"sceKernelCheckThreadKernelStack\",\n        \"0x52089CA1\": \"sceKernelGetThreadStackFreeSize\",\n        \"0x53B00E9A\": \"sceKernelSetVTimerHandlerWide\",\n        \"0x542AD630\": \"sceKernelSetVTimerTime\",\n        \"0x55C20A00\": \"sceKernelCreateEventFlag\",\n        \"0x56C039B5\": \"sceKernelCreateVpl\",\n        \"0x57CF62DD\": \"sceKernelGetThreadmanIdType\",\n        \"0x58B1F937\": \"sceKernelPollSema\",\n        \"0x5BF4DD27\": \"sceKernelLockMutexCB\",\n        \"0x5F32BEAA\": \"sceKernelReferVTimerStatus\",\n        \"0x616403BA\": \"sceKernelTerminateThread\",\n        \"0x623AE665\": \"sceKernelTryAllocateFpl\",\n        \"0x627E6F3A\": \"sceKernelReferSystemStatus\",\n        \"0x6652B8CA\": \"sceKernelSetAlarm\",\n        \"0x68DA9E36\": \"sceKernelDelayThreadCB\",\n        \"0x6B30100F\": \"sceKernelUnlockMutex\",\n        \"0x6D212BAC\": \"sceKernelWaitSemaCB\",\n        \"0x71BC9871\": \"sceKernelChangeThreadPriority\",\n        \"0x72F3C145\": \"sceKernelReleaseThreadEventHandler\",\n        \"0x730ED8BC\": \"sceKernelReferCallbackStatus\",\n        \"0x74829B76\": \"sceKernelReceiveMsgPipe\",\n        \"0x75156E8F\": \"sceKernelResumeThread\",\n        \"0x7C0DC2A0\": \"sceKernelCreateMsgPipe\",\n        \"0x7C41F2C2\": \"sceKernelSendMsgPipeCB\",\n        \"0x7E65B999\": \"sceKernelCancelAlarm\",\n        \"0x809CE29B\": \"sceKernelExitDeleteThread\",\n        \"0x812346E4\": \"sceKernelClearEventFlag\",\n        \"0x8125221D\": \"sceKernelCreateMbx\",\n        \"0x82826F70\": \"sceKernelSleepThreadCB\",\n        \"0x82BC5777\": \"sceKernelGetSystemTimeWide\",\n        \"0x840E8133\": \"sceKernelWaitThreadEndCB\",\n        \"0x85A2A5BF\": \"sceKernelIsUserModeThread\",\n        \"0x86255ADA\": \"sceKernelDeleteMbx\",\n        \"0x876DBFAD\": \"sceKernelSendMsgPipe\",\n        \"0x87D4DD36\": \"sceKernelCancelReceiveMbx\",\n        \"0x87D9223C\": \"sceKernelCancelMutex\",\n        \"0x884C9F90\": \"sceKernelTrySendMsgPipe\",\n        \"0x89B3D48C\": \"sceKernelDeleteVpl\",\n        \"0x8FD9F70C\": \"sceKernelSuspendAllUserThreads\",\n        \"0x8FFDF9A2\": \"sceKernelCancelSema\",\n        \"0x912354A7\": \"sceKernelRotateThreadReadyQueue\",\n        \"0x94416130\": \"sceKernelGetThreadmanIdList\",\n        \"0x94AA61EE\": \"sceKernelGetThreadCurrentPriority\",\n        \"0x9944F31F\": \"sceKernelSuspendThread\",\n        \"0x9ACE131E\": \"sceKernelSleepThread\",\n        \"0x9FA03CD3\": \"sceKernelDeleteThread\",\n        \"0xA249EAAE\": \"sceKernelGetKTLS\",\n        \"0xA66B0120\": \"sceKernelReferEventFlagStatus\",\n        \"0xA8AA591F\": \"sceKernelCancelFpl\",\n        \"0xA8E8C846\": \"sceKernelReferMbxStatus\",\n        \"0xA9C2CB9A\": \"sceKernelReferMutexStatus\",\n        \"0xAA73C935\": \"sceKernelExitThread\",\n        \"0xAF36D708\": \"sceKernelTryAllocateVpl\",\n        \"0xB011B11F\": \"sceKernelLockMutex\",\n        \"0xB2C25152\": \"sceKernelSetSysClockAlarm\",\n        \"0xB3A59970\": \"sceKernelGetVTimerBase\",\n        \"0xB736E9FF\": \"sceKernelFreeVpl\",\n        \"0xB7C18B77\": \"sceKernelGetVTimerBaseWide\",\n        \"0xB7D098C6\": \"sceKernelCreateMutex\",\n        \"0xBA4051D6\": \"sceKernelCancelCallback\",\n        \"0xBA6B92E2\": \"sceKernelSysClock2USec\",\n        \"0xBC31C1B9\": \"sceKernelExtendKernelStack\",\n        \"0xBC6FEBC5\": \"sceKernelReferSemaStatus\",\n        \"0xBD123D9E\": \"sceKernelDelaySysClockThread\",\n        \"0xBED27435\": \"sceKernelAllocateVpl\",\n        \"0xC07BB470\": \"sceKernelCreateFpl\",\n        \"0xC0B3FFD2\": \"sceKernelGetVTimerTimeWide\",\n        \"0xC11BA8C4\": \"sceKernelNotifyCallback\",\n        \"0xC68D9437\": \"sceKernelStartVTimer\",\n        \"0xC8CD158C\": \"sceKernelUSec2SysClockWide\",\n        \"0xCD203292\": \"sceKernelCancelEventFlag\",\n        \"0xCEADEB47\": \"sceKernelDelayThread\",\n        \"0xD0AEEE87\": \"sceKernelStopVTimer\",\n        \"0xD13BDE95\": \"sceKernelCheckThreadStack\",\n        \"0xD198B811\": \"sceKernelFreeKTLS\",\n        \"0xD2D615EF\": \"sceKernelCancelVTimerHandler\",\n        \"0xD59EAD2F\": \"sceKernelWakeupThread\",\n        \"0xD6DA4BA1\": \"sceKernelCreateSema\",\n        \"0xD8199E4C\": \"sceKernelReferFplStatus\",\n        \"0xD890B370\": \"sceKernelGetThreadKernelStackFreeSize\",\n        \"0xD8B299AE\": \"sceKernelSetVTimerHandler\",\n        \"0xD979E9BF\": \"sceKernelAllocateFpl\",\n        \"0xDAA3F564\": \"sceKernelReferAlarmStatus\",\n        \"0xDB738F35\": \"sceKernelGetSystemTime\",\n        \"0xDF52098F\": \"sceKernelTryReceiveMsgPipe\",\n        \"0xE1619D7C\": \"sceKernelSysClock2USecWide\",\n        \"0xE7282CB6\": \"sceKernelAllocateFplCB\",\n        \"0xE81CAF8F\": \"sceKernelCreateCallback\",\n        \"0xE9B3061E\": \"sceKernelSendMbx\",\n        \"0xEA748E31\": \"sceKernelChangeCurrentThreadAttr\",\n        \"0xEC0A693F\": \"sceKernelAllocateVplCB\",\n        \"0xED1410E0\": \"sceKernelDeleteFpl\",\n        \"0xEDBA5844\": \"sceKernelDeleteCallback\",\n        \"0xEF9E4C70\": \"sceKernelDeleteEventFlag\",\n        \"0xF0B7DA1C\": \"sceKernelDeleteMsgPipe\",\n        \"0xF3986382\": \"sceKernelReceiveMbxCB\",\n        \"0xF475845D\": \"sceKernelStartThread\",\n        \"0xF6414A71\": \"sceKernelFreeFpl\",\n        \"0xF6427665\": \"sceKernelGetUserLevel\",\n        \"0xF8170FBE\": \"sceKernelDeleteMutex\",\n        \"0xFB6425C3\": \"sceKernelSetVTimerTimeWide\",\n        \"0xFBFA697D\": \"sceKernelReceiveMsgPipeCB\",\n        \"0xFCB5EB49\": \"sceKernelGetSystemStatusFlag\",\n        \"0xFCCFAD26\": \"sceKernelCancelWakeupThread\",\n        \"0xFFC36A14\": \"sceKernelReferThreadRunStatus\"\n    },\n    \"sceUmdCache_driver\": {},\n    \"sceUmdCacheUser\": {\"0x03D67340\": \"sceUmdCacheGetCacheParam\", \"0x86B3196A\": \"sceUmdCacheGetCacheNum\"},\n    \"sceUsb\": {\n        \"0x112CC951\": \"sceUsbGetDrvState\",\n        \"0x1C360735\": \"sceUsbWaitCancel\",\n        \"0x4E537366\": \"sceUsbGetDrvList\",\n        \"0x586DB82C\": \"sceUsbActivate\",\n        \"0x5BE0E002\": \"sceUsbWaitState\",\n        \"0x616F2B61\": \"sceUsbWaitStateCB\",\n        \"0xAE5DE6AF\": \"sceUsbStart\",\n        \"0xC21645A4\": \"sceUsbGetState\",\n        \"0xC2464FA0\": \"sceUsbStop\",\n        \"0xC572A9C8\": \"sceUsbDeactivate\",\n        \"0xE20B23A6\": \"sceUsbActivateWithCharging\"\n    },\n    \"sceUsb_driver\": {\n        \"0x112CC951\": \"sceUsbGetDrvState\",\n        \"0x1C360735\": \"sceUsbWaitCancel\",\n        \"0x4E537366\": \"sceUsbGetDrvList\",\n        \"0x586DB82C\": \"sceUsbActivate\",\n        \"0x5BE0E002\": \"sceUsbWaitState\",\n        \"0x616F2B61\": \"sceUsbWaitStateCB\",\n        \"0xAE5DE6AF\": \"sceUsbStart\",\n        \"0xC21645A4\": \"sceUsbGetState\",\n        \"0xC2464FA0\": \"sceUsbStop\",\n        \"0xC572A9C8\": \"sceUsbDeactivate\",\n        \"0xE20B23A6\": \"sceUsbActivateWithCharging\",\n        \"0xEDA8A020\": \"sceUsbRestart\"\n    },\n    \"sceUsbBus_driver\": {\n        \"0x23E51D8F\": \"sceUsbbdReqSend\",\n        \"0x913EC15D\": \"sceUsbbdReqRecv\",\n        \"0x951A24CC\": \"sceUsbbdClearFIFO\",\n        \"0xB1644BE7\": \"sceUsbbdRegister\",\n        \"0xC1E2A540\": \"sceUsbbdUnregister\",\n        \"0xC21645A4\": \"sceUsbGetState\",\n        \"0xC5E53685\": \"sceUsbbdReqCancelAll\",\n        \"0xCC57EC9D\": \"sceUsbbdReqCancel\",\n        \"0xE65441C1\": \"sceUsbbdStall\",\n        \"0xEDA8A020\": \"sceUsbRestart\"\n    },\n    \"sceUsb1Seg\": {},\n    \"sceUsb1Seg_driver\": {},\n    \"sceUsbAcc_internal\": {\n        \"0x0CD7D4AA\": \"sceUsbAccGetInfo\",\n        \"0x18B04C82\": \"sceUsbAccUnregisterType\",\n        \"0x2E251404\": \"sceUsbAccRegisterType\",\n        \"0x79A1C743\": \"sceUsbAccGetAuthStat\"\n    },\n    \"sceUsbAcc\": {\"0x0CD7D4AA\": \"sceUsbAccGetInfo\", \"0x79A1C743\": \"sceUsbAccGetAuthStat\"},\n    \"sceUsbAcc_driver\": {\"0x0CD7D4AA\": \"sceUsbAccGetInfo\", \"0x79A1C743\": \"sceUsbAccGetAuthStat\"},\n    \"sceUsbCam\": {\n        \"0x03ED7A82\": \"sceUsbCamSetupMic\",\n        \"0x08AEE98A\": \"sceUsbCamSetMicGain\",\n        \"0x09C26C7E\": \"sceUsbCamSetContrast\",\n        \"0x0A41A298\": \"sceUsbCamSetupStillEx\",\n        \"0x11A1F128\": \"sceUsbCamGetAutoImageReverseState\",\n        \"0x17F7B2FB\": \"sceUsbCamSetupVideo\",\n        \"0x1A46CFE7\": \"sceUsbCamStillPollInputEnd\",\n        \"0x1D686870\": \"sceUsbCamSetEvLevel\",\n        \"0x1E958148\": \"sceUsbCamIoctl\",\n        \"0x2BCD50C0\": \"sceUsbCamGetEvLevel\",\n        \"0x2E930264\": \"sceUsbCamSetupMicEx\",\n        \"0x36636925\": \"sceUsbCamReadMicBlocking\",\n        \"0x383E9FA8\": \"sceUsbCamGetSaturation\",\n        \"0x3DC0088E\": \"sceUsbCamReadMic\",\n        \"0x3F0CF289\": \"sceUsbCamSetupStill\",\n        \"0x41E73E95\": \"sceUsbCamPollReadVideoFrameEnd\",\n        \"0x41EE8797\": \"sceUsbCamUnregisterLensRotationCallback\",\n        \"0x4C34F553\": \"sceUsbCamGetLensDirection\",\n        \"0x4F3D84D5\": \"sceUsbCamSetBrightness\",\n        \"0x5145868A\": \"sceUsbCamStopMic\",\n        \"0x574A8C3F\": \"sceUsbCamStartVideo\",\n        \"0x5778B452\": \"sceUsbCamGetMicDataLength\",\n        \"0x61BE5CAC\": \"sceUsbCamStillInputBlocking\",\n        \"0x622F83CC\": \"sceUsbCamSetSharpness\",\n        \"0x6784E6A8\": \"sceUsbCamSetAntiFlicker\",\n        \"0x6CF32CB9\": \"sceUsbCamStopVideo\",\n        \"0x6E205974\": \"sceUsbCamSetSaturation\",\n        \"0x70F522C5\": \"sceUsbCamGetBrightness\",\n        \"0x7563AFA1\": \"sceUsbCamStillWaitInputEnd\",\n        \"0x7DAC0C71\": \"sceUsbCamReadVideoFrameBlocking\",\n        \"0x82A64030\": \"sceUsbCamStartMic\",\n        \"0x951BEDF5\": \"sceUsbCamSetReverseMode\",\n        \"0x95F8901E\": \"sceUsbCamGetFwUpdateResult\",\n        \"0x994471E0\": \"sceUsbCamGetImageEffectMode\",\n        \"0x99D86281\": \"sceUsbCamReadVideoFrame\",\n        \"0x9E8AAF8D\": \"sceUsbCamGetZoom\",\n        \"0xA063A957\": \"sceUsbCamGetContrast\",\n        \"0xA720937C\": \"sceUsbCamStillCancelInput\",\n        \"0xAA7D94BA\": \"sceUsbCamGetAntiFlicker\",\n        \"0xB048A67D\": \"sceUsbCamWaitReadMicEnd\",\n        \"0xC484901F\": \"sceUsbCamSetZoom\",\n        \"0xC72ED6D3\": \"sceUsbCamEnterFwUpdateMode\",\n        \"0xCFE9E999\": \"sceUsbCamSetupVideoEx\",\n        \"0xD293A100\": \"sceUsbCamRegisterLensRotationCallback\",\n        \"0xD4876173\": \"sceUsbCamSetImageEffectMode\",\n        \"0xD5279339\": \"sceUsbCamGetReverseMode\",\n        \"0xD865997B\": \"sceUsbCamSetResolution\",\n        \"0xDF9D0C92\": \"sceUsbCamGetReadVideoFrameSize\",\n        \"0xE5959C36\": \"sceUsbCamStillGetInputLength\",\n        \"0xF8847F60\": \"sceUsbCamPollReadMicEnd\",\n        \"0xF90B2293\": \"sceUsbCamWaitReadVideoFrameEnd\",\n        \"0xF93C4669\": \"sceUsbCamAutoImageReverseSW\",\n        \"0xFB0A6C5D\": \"sceUsbCamStillInput\",\n        \"0xFDB68C23\": \"sceUsbCamGetSharpness\"\n    },\n    \"sceUsbCam_driver\": {\n        \"0x03ED7A82\": \"sceUsbCamSetupMic\",\n        \"0x08AEE98A\": \"sceUsbCamSetMicGain\",\n        \"0x09C26C7E\": \"sceUsbCamSetContrast\",\n        \"0x0A41A298\": \"sceUsbCamSetupStillEx\",\n        \"0x11A1F128\": \"sceUsbCamGetAutoImageReverseState\",\n        \"0x17F7B2FB\": \"sceUsbCamSetupVideo\",\n        \"0x1A46CFE7\": \"sceUsbCamStillPollInputEnd\",\n        \"0x1D686870\": \"sceUsbCamSetEvLevel\",\n        \"0x1E958148\": \"sceUsbCamIoctl\",\n        \"0x2BCD50C0\": \"sceUsbCamGetEvLevel\",\n        \"0x2E930264\": \"sceUsbCamSetupMicEx\",\n        \"0x36636925\": \"sceUsbCamReadMicBlocking\",\n        \"0x383E9FA8\": \"sceUsbCamGetSaturation\",\n        \"0x3DC0088E\": \"sceUsbCamReadMic\",\n        \"0x3F0CF289\": \"sceUsbCamSetupStill\",\n        \"0x41EE8797\": \"sceUsbCamUnregisterLensRotationCallback\",\n        \"0x4C34F553\": \"sceUsbCamGetLensDirection\",\n        \"0x4F3D84D5\": \"sceUsbCamSetBrightness\",\n        \"0x5145868A\": \"sceUsbCamStopMic\",\n        \"0x574A8C3F\": \"sceUsbCamStartVideo\",\n        \"0x5778B452\": \"sceUsbCamGetMicDataLength\",\n        \"0x61BE5CAC\": \"sceUsbCamStillInputBlocking\",\n        \"0x622F83CC\": \"sceUsbCamSetSharpness\",\n        \"0x6784E6A8\": \"sceUsbCamSetAntiFlicker\",\n        \"0x6CF32CB9\": \"sceUsbCamStopVideo\",\n        \"0x6E205974\": \"sceUsbCamSetSaturation\",\n        \"0x70F522C5\": \"sceUsbCamGetBrightness\",\n        \"0x7563AFA1\": \"sceUsbCamStillWaitInputEnd\",\n        \"0x7DAC0C71\": \"sceUsbCamReadVideoFrameBlocking\",\n        \"0x82A64030\": \"sceUsbCamStartMic\",\n        \"0x951BEDF5\": \"sceUsbCamSetReverseMode\",\n        \"0x95F8901E\": \"sceUsbCamGetFwUpdateResult\",\n        \"0x994471E0\": \"sceUsbCamGetImageEffectMode\",\n        \"0x99D86281\": \"sceUsbCamReadVideoFrame\",\n        \"0x9E8AAF8D\": \"sceUsbCamGetZoom\",\n        \"0xA063A957\": \"sceUsbCamGetContrast\",\n        \"0xA720937C\": \"sceUsbCamStillCancelInput\",\n        \"0xAA7D94BA\": \"sceUsbCamGetAntiFlicker\",\n        \"0xB048A67D\": \"sceUsbCamWaitReadMicEnd\",\n        \"0xC484901F\": \"sceUsbCamSetZoom\",\n        \"0xC72ED6D3\": \"sceUsbCamEnterFwUpdateMode\",\n        \"0xCFE9E999\": \"sceUsbCamSetupVideoEx\",\n        \"0xD293A100\": \"sceUsbCamRegisterLensRotationCallback\",\n        \"0xD4876173\": \"sceUsbCamSetImageEffectMode\",\n        \"0xD5279339\": \"sceUsbCamGetReverseMode\",\n        \"0xD865997B\": \"sceUsbCamSetResolution\",\n        \"0xDF9D0C92\": \"sceUsbCamGetReadVideoFrameSize\",\n        \"0xE5959C36\": \"sceUsbCamStillGetInputLength\",\n        \"0xF8847F60\": \"sceUsbCamPollReadMicEnd\",\n        \"0xF90B2293\": \"sceUsbCamWaitReadVideoFrameEnd\",\n        \"0xF93C4669\": \"sceUsbCamAutoImageReverseSW\",\n        \"0xFB0A6C5D\": \"sceUsbCamStillInput\",\n        \"0xFDB68C23\": \"sceUsbCamGetSharpness\"\n    },\n    \"sceUsbDmb\": {},\n    \"sceUsbDmb_driver\": {},\n    \"sceUsbGps\": {\n        \"0x268F95CA\": \"sceUsbGpsSetInitDataLocation\",\n        \"0x31F95CDE\": \"sceUsbGpsGetPowerSaveMode\",\n        \"0x54D26AA4\": \"sceUsbGpsGetInitDataLocation\",\n        \"0x63D1F89D\": \"sceUsbGpsResetInitialPosition\",\n        \"0x69E4AAA8\": \"sceUsbGpsSaveInitData\",\n        \"0x6EED4811\": \"sceUsbGpsClose\",\n        \"0x7C16AC3A\": \"sceUsbGpsGetState\",\n        \"0x934EC2B2\": \"sceUsbGpsGetData\",\n        \"0x9D8F99E8\": \"sceUsbGpsSetPowerSaveMode\",\n        \"0x9F267D34\": \"sceUsbGpsOpen\",\n        \"0xA259CD67\": \"sceUsbGpsReset\"\n    },\n    \"sceUsbGps_driver\": {\n        \"0x268F95CA\": \"sceUsbGpsSetInitDataLocation\",\n        \"0x31F95CDE\": \"sceUsbGpsGetPowerSaveMode\",\n        \"0x54D26AA4\": \"sceUsbGpsGetInitDataLocation\",\n        \"0x69E4AAA8\": \"sceUsbGpsSaveInitData\",\n        \"0x6EED4811\": \"sceUsbGpsClose\",\n        \"0x7C16AC3A\": \"sceUsbGpsGetState\",\n        \"0x934EC2B2\": \"sceUsbGpsGetData\",\n        \"0x9D8F99E8\": \"sceUsbGpsSetPowerSaveMode\",\n        \"0x9F267D34\": \"sceUsbGpsOpen\",\n        \"0xA259CD67\": \"sceUsbGpsReset\"\n    },\n    \"sceUsbMic\": {\n        \"0x06128E42\": \"sceUsbMicPollInputEnd\",\n        \"0x2E6DCDCD\": \"sceUsbMicInputBlocking\",\n        \"0x45310F07\": \"sceUsbMicInputInitEx\",\n        \"0x5F7F368D\": \"sceUsbMicInput\",\n        \"0x63400E20\": \"sceUsbMicGetInputLength\",\n        \"0xB8E536EB\": \"sceUsbMicInputInit\",\n        \"0xF899001C\": \"sceUsbMicWaitInputEnd\"\n    },\n    \"sceUsbMic_driver\": {\n        \"0x06128E42\": \"sceUsbMicPollInputEnd\",\n        \"0x2E6DCDCD\": \"sceUsbMicInputBlocking\",\n        \"0x45310F07\": \"sceUsbMicInputInitEx\",\n        \"0x5F7F368D\": \"sceUsbMicInput\",\n        \"0x63400E20\": \"sceUsbMicGetInputLength\",\n        \"0xB8E536EB\": \"sceUsbMicInputInit\",\n        \"0xF899001C\": \"sceUsbMicWaitInputEnd\"\n    },\n    \"sceUsbstor\": {\"0x60066CFE\": \"sceUsbstorGetStatus\"},\n    \"sceUsbstor_driver\": {\"0x60066CFE\": \"sceUsbstorGetStatus\"},\n    \"sceUsbstor_internal\": {\n        \"0x50F99EAD\": \"sceUsbstorGetString\",\n        \"0xDC1A5833\": \"sceUsbstorSendData\",\n        \"0xEC57ED1D\": \"sceUsbstorGetSubClass\",\n        \"0xF03FCB48\": \"sceUsbstorSetSubClass\",\n        \"0xFC4D0080\": \"sceUsbstorRecvData\"\n    },\n    \"sceUsbstormln_driver\": {},\n    \"sceUsbstormln\": {\n        \"0x1F4AC19C\": \"sceUsbstormlnGetCommand\",\n        \"0x25B6F372\": \"sceUsbstormlnUnregisterBuffer\",\n        \"0x382898DE\": \"sceUsbstormlnRegisterBuffer\",\n        \"0x5821060D\": \"sceUsbstormlnNotifyResponse\",\n        \"0xDEC0FE8C\": \"sceUsbstormlnWaitStatus\",\n        \"0xE11DEFDF\": \"sceUsbstormlnCancelWaitStatus\"\n    },\n    \"sceUSB_Stor_Ms_driver\": {\n        \"0x16173D42\": \"sceUsbstorMsSetNickname\",\n        \"0x2241C828\": \"sceUsbstorMsGetVSHInfo\",\n        \"0x4B10A7F5\": \"sceUsbstorMsRegisterEventFlag\",\n        \"0x576E7F6F\": \"sceUsbstorMsSetProductInfo\",\n        \"0x762F7FDF\": \"sceUsbstorMsNotifyEventDone\",\n        \"0x7B810720\": \"sceUsbstorMsSetWorkBuf\",\n        \"0x9569F268\": \"sceUsbstorMsSetVSHInfo\",\n        \"0xABE9F2C7\": \"sceUsbstorMsGetApInfo\",\n        \"0xCF2AF7B3\": \"sceUsbstorMsGetNickname\",\n        \"0xFF0C3873\": \"sceUsbstorMsUnregisterEventFlag\"\n    },\n    \"Kernel_Library\": {\n        \"0x092968F4\": \"sceKernelCpuSuspendIntr\",\n        \"0x15B6446B\": \"sceKernelUnlockLwMutex\",\n        \"0x1FC64E09\": \"sceKernelLockLwMutexCB\",\n        \"0x3B84732D\": \"sceKernelCpuResumeIntrWithSync\",\n        \"0x47A0B729\": \"sceKernelIsCpuIntrSuspended\",\n        \"0x5F10D406\": \"sceKernelCpuResumeIntr\",\n        \"0xB55249D2\": \"sceKernelIsCpuIntrEnable\",\n        \"0xBEA46419\": \"sceKernelLockLwMutex\",\n        \"0xC1734599\": \"sceKernelReferLwMutexStatus\",\n        \"0xDC692EE3\": \"sceKernelTryLockLwMutex\"\n    },\n    \"sceGe_lazy\": {},\n    \"sceUtility_driver\": {\"0x20C68C34\": \"sceUtilityEnd\", \"0xF062AEA6\": \"sceUtilityInit\"},\n    \"sceUtility\": {\n        \"0x05AFB9E4\": \"sceUtilityHtmlViewerUpdate\",\n        \"0x0D5BC6D2\": \"sceUtilityLoadUsbModule\",\n        \"0x1281DA8E\": \"sceUtilityInstallInitStart\",\n        \"0x1579A159\": \"sceUtilityLoadNetModule\",\n        \"0x2A2B3DE0\": \"sceUtilityLoadModule\",\n        \"0x2AD8E239\": \"sceUtilityMsgDialogInitStart\",\n        \"0x34B78343\": \"sceUtilityGetSystemParamString\",\n        \"0x3AD50AE7\": \"sceNetplayDialogInitStart\",\n        \"0x3DFAEBA9\": \"sceUtilityOskShutdownStart\",\n        \"0x417BED54\": \"sceNetplayDialogUpdate\",\n        \"0x41E30674\": \"sceUtilitySetSystemParamString\",\n        \"0x434D4B3A\": \"sceUtilityGetNetParam\",\n        \"0x45C18506\": \"sceUtilitySetSystemParamInt\",\n        \"0x4928BD96\": \"sceUtilityMsgDialogAbort\",\n        \"0x4B85C861\": \"sceUtilityOskUpdate\",\n        \"0x4DB1E739\": \"sceUtilityNetconfInitStart\",\n        \"0x4FED24D8\": \"sceUtilityGetNetParamLatestID\",\n        \"0x50C4CD57\": \"sceUtilitySavedataInitStart\",\n        \"0x5EEE6548\": \"sceUtilityCheckNetParam\",\n        \"0x5EF1C24A\": \"sceUtilityInstallShutdownStart\",\n        \"0x6332AA39\": \"sceUtilityNetconfGetStatus\",\n        \"0x64D50C56\": \"sceUtilityUnloadNetModule\",\n        \"0x67AF3428\": \"sceUtilityMsgDialogShutdownStart\",\n        \"0x7853182D\": \"sceUtilityGameSharingUpdate\",\n        \"0x8874DBE0\": \"sceUtilitySavedataGetStatus\",\n        \"0x91E70E35\": \"sceUtilityNetconfUpdate\",\n        \"0x946963F3\": \"sceUtilityGameSharingGetStatus\",\n        \"0x95FC253B\": \"sceUtilityMsgDialogUpdate\",\n        \"0x9790B33C\": \"sceUtilitySavedataShutdownStart\",\n        \"0x9A1C91D7\": \"sceUtilityMsgDialogGetStatus\",\n        \"0xA03D29BA\": \"sceUtilityInstallUpdate\",\n        \"0xA5DA2406\": \"sceUtilityGetSystemParamInt\",\n        \"0xB6CEE597\": \"sceNetplayDialogGetStatus\",\n        \"0xBC6B6296\": \"sceNetplayDialogShutdownStart\",\n        \"0xBDA7D894\": \"sceUtilityHtmlViewerGetStatus\",\n        \"0xC4700FA3\": \"sceUtilityInstallGetStatus\",\n        \"0xC492F751\": \"sceUtilityGameSharingInitStart\",\n        \"0xC629AF26\": \"sceUtilityLoadAvModule\",\n        \"0xCDC3AA41\": \"sceUtilityHtmlViewerInitStart\",\n        \"0xD4B95FFB\": \"sceUtilitySavedataUpdate\",\n        \"0xE49BFE92\": \"sceUtilityUnloadModule\",\n        \"0xEFC6F80F\": \"sceUtilityGameSharingShutdownStart\",\n        \"0xF3F76017\": \"sceUtilityOskGetStatus\",\n        \"0xF5CE1134\": \"sceUtilityHtmlViewerShutdownStart\",\n        \"0xF6269B82\": \"sceUtilityOskInitStart\",\n        \"0xF64910F0\": \"sceUtilityUnloadUsbModule\",\n        \"0xF7D8D092\": \"sceUtilityUnloadAvModule\",\n        \"0xF88155F6\": \"sceUtilityNetconfShutdownStart\"\n    },\n    \"sceUtility_private\": {},\n    \"sceUtility_netparam_internal\": {},\n    \"sceVaudio_driver\": {\n        \"0x03B6807D\": \"sceVaudioChReserve\",\n        \"0x67585DFD\": \"sceVaudioChRelease\",\n        \"0x8986295E\": \"sceVaudioOutputBlocking\",\n        \"0xCBD4AC51\": \"sceVaudioSetAlcMode\"\n    },\n    \"sceVaudio\": {\n        \"0x03B6807D\": \"sceVaudioChReserve\",\n        \"0x67585DFD\": \"sceVaudioChRelease\",\n        \"0x8986295E\": \"sceVaudioOutputBlocking\"\n    },\n    \"sceVideo\": {},\n    \"sceVideocodec_driver\": {\"0xCB3312D1\": \"sceVideocodecEndEntry\"},\n    \"sceVshBridge_driver\": {\"0x39B14120\": \"_vshVshBridgeStart\", \"0x92A3B940\": \"_vshVshBridgeStop\"},\n    \"sceVshBridge\": {\n        \"0x2380DC08\": \"vshIoDevctl\",\n        \"0x41C54ADF\": \"vshKernelLoadModuleVSHByID\",\n        \"0x4A596D2D\": \"vshImposeSetParam\",\n        \"0x4DB43867\": \"vshIdStorageLookup\",\n        \"0x4E4E4DA3\": \"vshImposeSetStatus\",\n        \"0x53BFD101\": \"vshMSAudioCheckICV\",\n        \"0x5894C339\": \"vshImposeChanges\",\n        \"0x5C2983C2\": \"vshChkregCheckRegion\",\n        \"0x61001D64\": \"vshChkregGetPsCode\",\n        \"0x639C3CB3\": \"vshImposeGetParam\",\n        \"0x6CAEB765\": \"vshMSAudioAuth\",\n        \"0x74DA9D25\": \"vshLflashFatfmtStartFatfmt\",\n        \"0x7EA32357\": \"vshMSAudioDeauth\",\n        \"0xA5628F0D\": \"vshKernelLoadModuleVSH\",\n        \"0xC6395C03\": \"vshCtrlReadBufferPositive\",\n        \"0xC949966C\": \"vshPowerSetWakeupCondition\",\n        \"0xC9626587\": \"vshKernelLoadModuleBufferVSH\",\n        \"0xCA719C34\": \"vshImposeGetStatus\",\n        \"0xCE32CBEF\": \"vshMSAudioInit\",\n        \"0xE174218C\": \"vshMSAudioCheckICVn\",\n        \"0xE5DA5E95\": \"vshMSAudioEnd\"\n    },\n    \"vsh\": {},\n    \"sceWlanDrv\": {\n        \"0x0C622081\": \"sceWlanGetEtherAddr\",\n        \"0x93440B11\": \"sceWlanDevIsPowerOn\",\n        \"0xD7763699\": \"sceWlanGetSwitchState\"\n    },\n    \"sceWlanDrv_lib\": {\n        \"0x05FE320C\": \"sceWlanDevGetStateGPIO\",\n        \"0x19E51F54\": \"sceWlanDevGetMacAddr\",\n        \"0x44A99F9D\": \"sceWlanGetDropRate\",\n        \"0x482CAE9A\": \"sceWlanDevAttach\",\n        \"0x4C7F62E0\": \"sceWlanGPUnRegisterCallback\",\n        \"0x5E7C8D94\": \"sceWlanDevIsGameMode\",\n        \"0x5ED4049A\": \"sceWlanGPPrevEstablishActive\",\n        \"0x749B813A\": \"sceWlanSetHostDiscover\",\n        \"0x7FF54BD2\": \"sceWlanDevSetGPIO\",\n        \"0x9658C9F7\": \"sceWlanGPRegisterCallback\",\n        \"0xA447103A\": \"sceWlanGPRecv\",\n        \"0xB4D7CB74\": \"sceWlanGPSend\",\n        \"0xC9A8CAB7\": \"sceWlanDevDetach\",\n        \"0xEB3235B5\": \"sceWlanSetDropRate\",\n        \"0xFBD385FB\": \"sceWlanDropCheck\",\n        \"0xFE8A0B46\": \"sceWlanSetWakeUp\"\n    },\n    \"sceWlanDrv_driver\": {\"0x19E51F54\": \"sceWlanDevGetMacAddr\"}\n};\n", "\uFEFFimport {logger, ProgramExitException, sprintf} from \"../global/utils\";\nimport {\n    Struct,\n    StructArray,\n    StructStructStringz,\n    StructUInt16, StructUInt32, StructUInt8\n} from \"../global/struct\";\nimport {Stream} from \"../global/stream\";\nimport {MathUtils} from \"../global/math\";\nimport {Memory} from \"../core/memory\";\nimport {\n    ElfLoader,\n    ElfProgramHeaderType, ElfReloc, ElfRelocType,\n    ElfSectionHeader,\n    ElfSectionHeaderFlags,\n    ElfSectionHeaderType\n} from \"../format/elf\";\nimport {MipsAssembler} from \"../core/cpu/cpu_assembler\";\nimport {ElfDwarfLoader} from \"../format/elf_dwarf\";\nimport {MemoryManager, MemoryPartition} from \"./manager/memory\";\nimport {ModuleManager} from \"./manager/module\";\nimport {NativeFunction, SyscallManager} from \"../core/cpu/cpu_core\";\nimport {Instruction} from \"../core/cpu/cpu_instruction\";\nimport {ModuleKnownFunctionNamesDatabase} from \"./pspmodules_database\";\nimport {ISymbol, ISymbolLookup} from \"../emu/context\";\n\nconst console = logger.named('elf.psp');\n\n// http://hitmen.c02.at/files/yapspd/psp_doc/chap26.html\n// 26.2.2.8\nexport class ElfPspModuleInfo extends Struct {\n\t@StructUInt16 moduleAtributes: number = 0\n    @StructUInt16 moduleVersion: number = 0\n\t@StructStructStringz(28) name: string = ''\n\t@StructUInt32 gp: number = 0\n    @StructUInt32 exportsStart: number = 0\n    @StructUInt32 exportsEnd: number = 0\n    @StructUInt32 importsStart: number = 0\n    @StructUInt32 importsEnd: number = 0\n    pc: number = 0\n}\n\nexport class ElfPspModuleImport extends Struct {\n\t@StructUInt32 nameOffset: number = 0\n    @StructUInt16 version: number = 0\n    @StructUInt16 flags: number = 0\n    @StructUInt8 entrySize: number = 0\n    @StructUInt8 variableCount: number = 0\n    @StructUInt16 functionCount: number = 0\n    @StructUInt32 nidAddress: number = 0\n    @StructUInt32 callAddress: number = 0\n\n    name: string = ''\n}\n\nexport class ElfPspModuleExport extends Struct {\n    @StructUInt32 nameOffset: number = 0\n\t@StructUInt16 version: number = 0\n\t@StructUInt16 flags: number = 0\n\t@StructUInt8 entrySize: number = 0\n    @StructUInt8 variableCount: number = 0\n    @StructUInt16 functionCount: number = 0\n    @StructUInt32 exports: number = 0\n\n    name: string = ''\n}\n\nexport const enum ElfPspModuleInfoAtributesEnum {\n\tUserMode = 0x0000,\n\tKernelMode = 0x100,\n}\n\t\nclass InstructionReader {\n\tconstructor(private memory: Memory) {\n\t}\n\n\tread(address: number) {\n\t\treturn new Instruction(address, this.memory.readUInt32(address));\n\t}\n\n\twrite(address: number, instruction: Instruction) {\n\t\tthis.memory.writeInt32(address, instruction.IDATA);\n\t}\n}\n\nexport class PspElfLoader implements ISymbolLookup {\n    // @ts-ignore\n    private elfLoader: ElfLoader;\n    // @ts-ignore\n    moduleInfo: ElfPspModuleInfo;\n\tassembler = new MipsAssembler();\n\tbaseAddress: number = 0;\n    // @ts-ignore\n\tpartition: MemoryPartition;\n    // @ts-ignore\n\telfDwarfLoader: ElfDwarfLoader;\n\n\tconstructor(private memory: Memory, private memoryManager: MemoryManager, private moduleManager: ModuleManager, private syscallManager: SyscallManager) {\n    }\n\n\tload(stream: Stream) {\n\t\t//console.warn('PspElfLoader.load');\n\t\tthis.elfLoader = ElfLoader.fromStream(stream);\n\n\t\t//ElfSectionHeaderFlags.Allocate\n\n\t\tthis.allocateMemory();\n\t\tthis.writeToMemory();\n\t\tthis.relocateFromHeaders();\n\t\tthis.readModuleInfo();\n\t\tthis.updateModuleImports();\n\n\t\tthis.elfDwarfLoader = new ElfDwarfLoader();\n\t\tthis.elfDwarfLoader.parseElfLoader(this.elfLoader);\n\n\t\t//this.memory.dump(); debugger;\n\n\t\t//this.elfDwarfLoader.getSymbolAt();\n\n\t\t//logger.log(this.moduleInfo);\n\t}\n\n\tgetSymbolAt(address: number): ISymbol | null {\n\t\treturn this.elfDwarfLoader.getSymbolAt(address);\n\t}\n\n\tprivate getSectionHeaderMemoryStream(sectionHeader: ElfSectionHeader) {\n\t\treturn this.memory.getPointerStream(this.baseAddress + sectionHeader.address, sectionHeader.size)!;\n\t}\n\n\tprivate readModuleInfo() {\n\t\tthis.moduleInfo = ElfPspModuleInfo.struct.read(this.getSectionHeaderMemoryStream(this.elfLoader.sectionHeadersByName['.rodata.sceModuleInfo']));\n\t\tthis.moduleInfo.pc = this.baseAddress + this.elfLoader.header.entryPoint;\n\t}\n\n\tprivate allocateMemory() {\n\t\tthis.baseAddress = 0;\n\n\t\tif (this.elfLoader.needsRelocation) {\n\t\t\tthis.baseAddress = this.memoryManager.userPartition.childPartitions.sortBy(partition => partition.size).reverse().first()!.low;\n\t\t\tthis.baseAddress = MathUtils.nextAligned(this.baseAddress, 0x1000);\n\t\t\t//this.baseAddress = 0x08800000 + 0x4000;\n\t\t\t\n\t\t}\n\n        let lowest = 0xFFFFFFFF;\n        let highest = 0;\n        this.elfLoader.sectionHeaders.filter(section => ((section.flags & ElfSectionHeaderFlags.Allocate) != 0)).forEach(section => {\n\t\t\tlowest = Math.min(lowest, (this.baseAddress + section.address));\n\t\t\thighest = Math.max(highest, (this.baseAddress + section.address + section.size));\n\t\t});\n\n\t\tthis.elfLoader.programHeaders.forEach(program => {\n\t\t\tlowest = Math.min(lowest, (this.baseAddress + program.virtualAddress));\n\t\t\thighest = Math.max(highest, (this.baseAddress + program.virtualAddress + program.memorySize));\n\t\t});\n\n        const memorySegment = this.memoryManager.userPartition.allocateSet(highest - lowest, lowest, 'Elf');\n    }\n\n\tprivate relocateFromHeaders() {\n        const RelocProgramIndex = 0;\n        this.elfLoader.programHeaders.forEach((programHeader) => {\n\t\t\tswitch (programHeader.type) {\n\t\t\t\tcase ElfProgramHeaderType.Reloc1:\n\t\t\t\t\tconsole.warn(\"SKIPPING Elf.ProgramHeader.TypeEnum.Reloc1!\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase ElfProgramHeaderType.Reloc2:\n\t\t\t\t\tthrow (\"Not implemented\");\n\t\t\t}\n\t\t});\n\n        const RelocSectionIndex = 0;\n        this.elfLoader.sectionHeaders.forEach((sectionHeader) => {\n\t\t\t//RelocOutput.WriteLine(\"Section Header: %d : %s\".Sprintf(RelocSectionIndex++, SectionHeader.ToString()));\n\t\t\t//console.info(sprintf('Section Header: '));\n\n\t\t\tswitch (sectionHeader.type) {\n\t\t\t\tcase ElfSectionHeaderType.Relocation:\n\t\t\t\t\tconsole.log(sectionHeader);\n\t\t\t\t\tconsole.error(\"Not implemented ElfSectionHeaderType.Relocation\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ElfSectionHeaderType.PrxRelocation:\n                    const relocs = StructArray<ElfReloc>(ElfReloc.struct, sectionHeader.stream.length / ElfReloc.struct.length).read(sectionHeader.stream);\n                    this.relocateRelocs(relocs);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ElfSectionHeaderType.PrxRelocation_FW5:\n\t\t\t\t\tthrow (\"Not implemented ElfSectionHeader.Type.PrxRelocation_FW5\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate relocateRelocs(relocs: ElfReloc[]) {\n\t\tconst baseAddress = this.baseAddress;\n\t\tlet hiValue: number = 0;\n\t\tlet deferredHi16: number[] = [];\n\t\tconst instructionReader = new InstructionReader(this.memory);\n\n\t\tfor (let index = 0; index < relocs.length; index++) {\n\t\t\tconst reloc = relocs[index];\n\t\t\tif (reloc.type == ElfRelocType.StopRelocation) break;\n\n\t\t\tconst pointerBaseOffset = this.elfLoader.programHeaders[reloc.pointerSectionHeaderBase].virtualAddress;\n\t\t\tconst pointeeBaseOffset = this.elfLoader.programHeaders[reloc.pointeeSectionHeaderBase].virtualAddress;\n\n\t\t\t// Address of data to relocate\n            const RelocatedPointerAddress = (baseAddress + reloc.pointerAddress + pointerBaseOffset);\n\n\t\t\t// Value of data to relocate\n            const instruction = instructionReader.read(RelocatedPointerAddress);\n\n\t\t\tconst S = baseAddress + pointeeBaseOffset;\n\t\t\tconst GP_ADDR = (baseAddress + reloc.pointerAddress);\n\t\t\tconst GP_OFFSET = GP_ADDR - (baseAddress & 0xFFFF0000);\n\n\t\t\tswitch (reloc.type) {\n\t\t\t\tcase ElfRelocType.None: break;\n\t\t\t\tcase ElfRelocType.Mips16: instruction.u_imm16 += S; break;\n\t\t\t\tcase ElfRelocType.Mips32: instruction.IDATA += S; break;\n\t\t\t\tcase ElfRelocType.MipsRel32: throw (\"Not implemented MipsRel32\"); \n\t\t\t\tcase ElfRelocType.Mips26: instruction.jump_real = instruction.jump_real + S; break;\n\t\t\t\tcase ElfRelocType.MipsHi16: hiValue = instruction.u_imm16; deferredHi16.push(RelocatedPointerAddress); break;\n\t\t\t\tcase ElfRelocType.MipsLo16:\n                    const A = instruction.u_imm16;\n\n\t\t\t\t\tinstruction.u_imm16 = ((hiValue << 16) | (A & 0x0000FFFF)) + S;\n\n\t\t\t\t\tdeferredHi16.forEach(data_addr2 => {\n\t\t\t\t\t\tconst data2 = instructionReader.read(data_addr2);\n\t\t\t\t\t\tlet result = ((data2.IDATA & 0x0000FFFF) << 16) + A + S;\n\t\t\t\t\t\tif ((A & 0x8000) != 0) result -= 0x10000;\n                        if ((result & 0x8000) != 0) result += 0x10000;\n                        data2.u_imm16 = (result >>> 16);\n\t\t\t\t\t\tinstructionReader.write(data_addr2, data2);\n\t\t\t\t\t});\n\n\t\t\t\t\tdeferredHi16 = [];\n\t\t\t\t\tbreak;\n\t\t\t\tcase ElfRelocType.MipsGpRel16:\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: throw (new Error(sprintf(\"RelocType %d not implemented\", reloc.type)));\n\t\t\t}\n\n\t\t\tinstructionReader.write(RelocatedPointerAddress, instruction);\n\t\t}\n\t}\n\n    private writeToMemory() {\n        const needsRelocate = this.elfLoader.needsRelocation;\n\n        //const loadAddress = this.elfLoader.programHeaders[0].psysicalAddress;\n        const loadAddress = this.baseAddress;\n\n        console.info(sprintf(\"PspElfLoader: needsRelocate=%s, loadAddress=%08X\", needsRelocate, loadAddress));\n\t\t//console.log(moduleInfo);\n\n\t\tthis.elfLoader.programHeaders.filter(programHeader => (programHeader.type == 1)).forEach(programHeader => {\n\t\t\tconst fileOffset = programHeader.offset\n\t\t\tconst memOffset = this.baseAddress + programHeader.virtualAddress\n\t\t\tconst fileSize = programHeader.fileSize\n\t\t\tconst memSize = programHeader.memorySize\n\n\t\t\tthis.elfLoader.stream.sliceWithLength(fileOffset, fileSize).copyTo(this.memory.getPointerStream(memOffset, fileSize)!)\n\t\t\tthis.memory.memset(memOffset + fileSize, 0, memSize - fileSize)\n\n\t\t\t//this.getSectionHeaderMemoryStream\n\t\t\tconsole.info('Program Header: ', sprintf(\"%08X:%08X, %08X:%08X\", fileOffset, fileSize, memOffset, memSize))\n\t\t});\n\n\t\tthis.elfLoader.sectionHeaders.filter(sectionHeader => ((sectionHeader.flags & ElfSectionHeaderFlags.Allocate) != 0)).forEach(sectionHeader => {\n\t\t\tconst low = loadAddress + sectionHeader.address;\n\n\t\t\tconsole.info('Section Header: ', sectionHeader, sprintf('LOW:%08X, SIZE:%08X', low, sectionHeader.size));\n\n            //console.log(sectionHeader);\n            switch (sectionHeader.type) {\n\t\t\t\tcase ElfSectionHeaderType.NoBits:\n\t\t\t\t\tfor (let n = 0; n < sectionHeader.size; n++) this.memory.writeInt8(low + n, 0);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//console.log(sprintf('low: %08X type: %08X', low, sectionHeader.type));\n\t\t\t\t\tbreak;\n                case ElfSectionHeaderType.ProgramBits:\n                    const stream = sectionHeader.stream;\n                    const length = stream.length;\n\t\t\t\t\t//console.log(sprintf('low: %08X, %08X, size: %08X', sectionHeader.address, low, stream.length));\n                    this.memory.writeStream(low, stream);\n\n                    break;\n            }\n\t\t});\n\n    }\n\n    private updateModuleImports() {\n        const moduleInfo = this.moduleInfo;\n        console.log(moduleInfo);\n        const importsBytesSize = moduleInfo.importsEnd - moduleInfo.importsStart;\n        const importsStream = this.memory.sliceWithBounds(moduleInfo.importsStart, moduleInfo.importsEnd);\n        const importsCount = importsBytesSize / ElfPspModuleImport.struct.length;\n        const imports = StructArray<ElfPspModuleImport>(ElfPspModuleImport.struct, importsCount).read(importsStream);\n        imports.forEach(_import => {\n            _import.name = this.memory.readStringz(_import.nameOffset)!\n            const imported = this.updateModuleFunctions(_import);\n            this.updateModuleVars(_import);\n\t\t\tconsole.info('Imported: ', imported.name, imported.registeredNativeFunctions.map(i => i.name));\n        });\n        //console.log(imports);\n    }\n\n    private updateModuleFunctions(moduleImport: ElfPspModuleImport) {\n        const _module = this.moduleManager.getByName(moduleImport.name);\n        const nidsStream = this.memory.sliceWithSize(moduleImport.nidAddress, moduleImport.functionCount * 4);\n        const callStream = this.memory.sliceWithSize(moduleImport.callAddress, moduleImport.functionCount * 8);\n        const registeredNativeFunctions = <NativeFunction[]>[];\n        const unknownFunctions:string[] = []\n\n        const registerN = (nid: number, n: number) => {\n            let nfunc: NativeFunction;\n            nfunc = _module.getByNid(nid);\n\n\t\t\tif (!nfunc) {\n\t\t\t    const nidHex = sprintf(\"0x%08X\", nid)\n\t\t\t\tunknownFunctions.push(sprintf(\"'%s':%s\", _module.moduleName, nidHex));\n\t\t\t    const knownModule = ModuleKnownFunctionNamesDatabase?.[_module.moduleName]\n                const knownFuncName = knownModule?.[nidHex]\n\n\t\t\t\tnfunc = new NativeFunction();\n\t\t\t    if (knownFuncName) {\n                    nfunc.name = sprintf(\"%s:%s:0x%08X\", _module.moduleName, knownFuncName, nid)\n                } else {\n                    nfunc.name = sprintf(\"%s:0x%08X\", moduleImport.name, nid);\n                }\n                nfunc.nid = nid;\n\t\t\t\tnfunc.firmwareVersion = 150;\n                nfunc.nativeCall = () => {\n\t\t\t\t    const errorString = `updateModuleFunctions: Not implemented '${nfunc.name}'`\n\t\t\t\t\tconsole.info(_module);\n\t\t\t\t\tconsole.error(errorString);\n\t\t\t\t\tdebugger;\n\t\t\t\t\tthrow new ProgramExitException(errorString);\n\t\t\t\t};\n\t\t\t\tnfunc.call = (context, state) => {\n\t\t\t\t\tnfunc.nativeCall();\n\t\t\t\t};\n            }\n\n\t\t\tregisteredNativeFunctions.push(nfunc);\n\n            //printf(\"%s:%08X -> %s\", moduleImport.name, nid, syscallId);\n            return this.syscallManager.register(nfunc)\n        };\n\n        for (let n = 0; n < moduleImport.functionCount; n++) {\n            const nid = nidsStream.readUInt32();\n            const syscall = registerN(nid, n);\n\n            callStream.writeInt32(this.assembler.assemble(0, sprintf('jr $31'))[0].IDATA);\n            callStream.writeInt32(this.assembler.assemble(0, sprintf('syscall %d', syscall))[0].IDATA);\n\t\t}\n\n\t\tif (unknownFunctions.length > 0) {\n\t\t\tconsole.warn(\"Can't find functions\", unknownFunctions);\n\t\t}\n\n\t\treturn {\n\t\t\tname : moduleImport.name,\n\t\t\tregisteredNativeFunctions : registeredNativeFunctions,\n\t\t};\n    }\n\n    private updateModuleVars(moduleImport: ElfPspModuleImport) {\n    }\n}\n", "\uFEFFimport \"../../global/utils\"\nimport {Stream} from \"../../global/stream\";\nimport {PromiseFast, sprintf, StringDictionary} from \"../../global/utils\";\nimport {Integer64} from \"../../global/int64\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"../vfs/vfs\";\n\nexport class Device {\n\tcwd: string = '';\n\n\tconstructor(public name: string, public vfs: Vfs) {\n\t}\n\n\tdevctlAsync(command: number, input: Stream, output: Stream) {\n\t\treturn this.vfs.devctlAsync(command, input, output);\n\t}\n\n\topenAsync(uri: Uri, flags: FileOpenFlags, mode: FileMode) {\n\t\treturn this.vfs.openAsync(uri.pathWithoutDevice, flags, mode);\n\t}\n\n\topenDirectoryAsync(uri: Uri) {\n\t\treturn this.vfs.openDirectoryAsync(uri.pathWithoutDevice);\n\t}\n\n\tgetStatAsync(uri: Uri) {\n\t\treturn this.vfs.getStatAsync(uri.pathWithoutDevice);\n\t}\n\n    getStatPromiseAsync(uri: Uri) {\n        return this.vfs.getStatPromiseAsync(uri.pathWithoutDevice);\n    }\n}\n\nexport class HleFile {\n\tcursor = 0;\n\n\tprivate _asyncResult: Integer64|null = null;\n\tprivate _asyncPromise: PromiseFast<Integer64>|null = null;\n\n\tconstructor(public entry: VfsEntry) {\n\t}\n\n\tget asyncResult() { return this._asyncResult; }\n\n\tget asyncOperation() {\n\t\treturn this._asyncPromise;\n\t}\n\n\tstartAsyncOperation() {\n\t\tthis._asyncResult = null;\n\t}\n\n\tsetAsyncOperation(operation: Integer64 | PromiseFast<Integer64> | Promise<Integer64>) {\n\t\tthis._asyncResult = null;\n\t\tthis._asyncPromise = PromiseFast.ensure(operation).thenFast((value) => {\n\t\t\tthis._asyncResult = value;\n\t\t\treturn value;\n\t\t});\n\t}\n\n\tsetAsyncOperationNow(value: Integer64) {\n\t\tthis._asyncResult = value;\n\t\tthis._asyncPromise = PromiseFast.resolve(value);\n\t}\n\n\tclose() {\n\t\tthis.entry.close();\n\t}\n}\n\nexport class HleDirectory {\n\tcursor = 0;\n\n\tconstructor(public childs: VfsStat[]) {\n\t}\n\n\tread() {\n\t\treturn this.childs[this.cursor++];\n\t}\n\n\tget left() {\n\t\treturn this.childs.length - this.cursor;\n\t}\n\n\tclose() {\n\t}\n}\n\nexport class Uri {\n\tconstructor(public path: string) {\n\t}\n\n\tget device() {\n\t\treturn (this.path.split(':'))[0];\n\t}\n\n\tget pathWithoutDevice() {\n\t\treturn (this.path.split(':'))[1];\n\t}\n\n\tget isAbsolute() {\n\t\treturn this.path.indexOf(':') >= 0;\n\t}\n\n\tappend(that: Uri) {\n\t\tif (that.isAbsolute) return that;\n\t\treturn new Uri(`${this.path}/${that.path}`);\n\t}\n}\n\nexport class FileManager {\n\tprivate devices: StringDictionary<Device> = {};\n\tcwd: Uri = new Uri('ms0:/');\n\n\tchdir(cwd:string) {\n\t\tthis.cwd = new Uri(cwd);\n\t}\n\n\tgetDevice(name: string) {\n\t\tname = name.replace(/:$/, '');\n        const device = this.devices[name];\n        if (!device) throw(new Error(sprintf(\"Can't find device '%s'\", name)));\n\t\treturn device;\n\t}\n\n\topenAsync(name: string, flags: FileOpenFlags, mode: FileMode) {\n        const uri = this.cwd.append(new Uri(name));\n        return this.getDevice(uri.device).openAsync(uri, flags, mode).thenFast(entry => new HleFile(entry));\n\t}\n\n\tdevctlAsync(deviceName: string, command: number, input: Stream, output: Stream) {\n\t\treturn this.getDevice(deviceName).devctlAsync(command, input, output);\n\t}\n\n\topenDirectoryAsync(name: string) {\n        const uri = this.cwd.append(new Uri(name));\n        return this.getDevice(uri.device).openDirectoryAsync(uri).thenFast(entry => {\n\t\t\treturn entry.enumerateAsync().thenFast((items) => {\n\t\t\t\tentry.close();\n\t\t\t\treturn new HleDirectory(items);\n\t\t\t});\n\t\t});\n\t}\n\n\tgetStatAsync(name:string) {\n        const uri = this.cwd.append(new Uri(name));\n        return this.getDevice(uri.device).getStatAsync(uri);\n\t}\n\n\tmount(device: string, vfs: Vfs) {\n\t\tthis.devices[device] = new Device(device, vfs);\n\t\treturn this\n\t}\n}\n", "\uFEFFimport {mac2string, NumberDictionary, Signal0, Signal1, string2mac} from \"../../global/utils\";\nimport {Stream} from \"../../global/stream\";\n\nexport interface NetPacket {\n\tport: number;\n\ttype: string;\n\tmac: Uint8Array;\n\tpayload: Uint8Array;\n}\n\nexport class NetManager {\n\tconnected = false;\n\tprivate ws: WebSocket|null = null;\n\tprivate _onmessageSignals = <NumberDictionary<Signal1<NetPacket>>>{};\n\tonopen = new Signal0();\n\tonclose = new Signal0();\n\tmac = new Uint8Array(6);\n\n\tonmessage(port: number) {\n\t\tif (!this._onmessageSignals[port]) this._onmessageSignals[port] = new Signal1<NetPacket>();\n\t\treturn this._onmessageSignals[port];\n\t}\n\n\tconnectOnce() {\n\t\tif (this.ws) return;\n\t\tthis.ws = new WebSocket(`ws://${location.host}/adhoc`, 'adhoc');\n\n\t\tthis.ws.onopen = (e) => {\n\t\t};\n\t\tthis.ws.onclose = (e) => {\n\t\t\tthis.connected = false;\n\t\t\tthis.onclose.dispatch();\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.ws = null;\n\t\t\t\tthis.connectOnce();\n\t\t\t}, 5000);\n\t\t};\n\t\tthis.ws.onmessage = (e) => {\n            const info = JSON.parse(e.data);\n            if (info.from == 'ff:ff:ff:ff:ff:ff') {\n\t\t\t\tconsole.info('NetManager: from_server:', info);\n\t\t\t\tswitch (info.type) {\n\t\t\t\t\tcase 'setid':\n\t\t\t\t\t\tthis.mac = string2mac(info.payload);\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\tthis.onopen.dispatch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n                const packet = {\n                    port: info.port,\n                    type: info.type,\n                    mac: string2mac(info.from),\n                    payload: Stream.fromBase64(info.payload).toUInt8Array(),\n                };\n                //console.info('NetManager: from_user:', { port: info.port, type: info.type, mac: info.from, payload: Stream.fromBase64(info.payload).toStringAll() });\n\t\t\t\tthis.onmessage(info.port).dispatch(packet);\n\t\t\t}\n\t\t};\n\t\tthis.ws.onerror = (e) => {\n\t\t\tthis.connected = false;\n\t\t\tconsole.error(e);\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.connectOnce();\n\t\t\t\tthis.ws = null;\n\t\t\t}, 10000);\n\t\t};\n\t}\n\n\tsend(port: number, type: string, toMac: Uint8Array, data: Uint8Array) {\n\t\tthis.connectOnce();\n\t\t//console.info('NetManager: send:', { type: type, port: port, to: mac2string(toMac), payload: Stream.fromUint8Array(data).toStringAll() });\n\t\tthis.ws!.send(JSON.stringify({ type: type, port: port, to: mac2string(toMac), payload: Stream.fromUint8Array(data).toBase64() }));\n\t}\n}", "\uFEFFimport {NumberDictionary, StringDictionary} from \"../../global/utils\";\nimport {NativeFunction} from \"../../core/cpu/cpu_core\";\n\nexport class ModuleWrapper {\n    private names: StringDictionary<NativeFunction> = {};\n\tprivate nids: NumberDictionary<NativeFunction> = {};\n\n\tconstructor(public moduleName: string, private _modules: any[]) {\n\t\t_modules.forEach((_module) => {\n\t\t\tif (typeof _module.natives != 'undefined') {\n                const natives: any[] = _module.natives;\n                for (let nativeGenerator of natives) {\n\t\t\t\t\t//console.error('Registered native', native.name);\n\t\t\t\t\tthis.registerNative(nativeGenerator(_module));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const key in _module) {\n\t\t\t\tif (key == 'natives') continue;\n                const item: any = _module[key];\n                if (item && item instanceof NativeFunction) {\n                    const nativeFunction: NativeFunction = item;\n                    nativeFunction.name = key;\n\t\t\t\t\tthis.registerNative(nativeFunction);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n    }\n\t\n\tprivate registerNative(nf:NativeFunction) {\n\t\tthis.nids[nf.nid] = nf;\n\t\tthis.names[nf.name] = nf;\n\t}\n\n\tgetByName(name: string): NativeFunction {\n\t\treturn this.names[name];\n    }\n\n\tgetByNid(nid: number): NativeFunction {\n        const result = this.nids[nid];\n        //if (!result) throw (new Error(sprintf(\"Can't find function '%s':0x%08X\", this.moduleName, nid)));\n        return result;\n    }\n}\n\nexport class ModuleManager {\n\tprivate names: StringDictionary<any[]> = {};\n    private moduleWrappers: StringDictionary<any> = {};\n\n\tconstructor(public context:any) {\n\t}\n\n\tregisterClass(clazz: any) {\n        this.add(clazz.name, clazz);\n    }\n\t\n\tregisterModule(_module: any) {\n\t\tfor (const key in _module) {\n\t\t\tif (key == 'createNativeFunction') continue;\n\t\t\tif (key == 'natives') continue;\n            const _class = _module[key];\n            this.add(key, _class);\n\t\t}\n\t}\n\t\n\t/*\n\tgetByClass<T>(clazz: Class<T>):T {\n\t\treturn null;\n\t}\n\t*/\n\n    getByName(name: string): ModuleWrapper {\n        const _moduleWrapper = this.moduleWrappers[name];\n        if (_moduleWrapper) return _moduleWrapper;\n\n        const _classes = this.names[name];\n        if (!_classes) throw (new Error(\"Can't find module '\" + name + \"'\"));\n\n        const _modules = _classes.map((_class) => new _class(this.context));\n\n        return this.moduleWrappers[name] = new ModuleWrapper(name, _modules);\n    }\n\n    private add(name: string, _class: any) {\n\t\tif (!_class) throw (new Error(\"Can't find module '\" + name + \"'\"));\n\t\tif (!this.names[name]) this.names[name] = [];\n        this.names[name].push(_class);\n    }\n}\n", "\uFEFFimport {logger, PromiseFast, StringDictionary} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\n\nconst console = logger.named(\"memory_vfs\")\n\nexport class MemoryVfs extends Vfs {\n\tprivate files: StringDictionary<MemoryVfsEntry> = {};\n\n\taddFile(name: string, data: ArrayBuffer) {\n\t\tthis.files[name] = new MemoryVfsEntry(name, data);\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode) {\n\t\tif (flags & FileOpenFlags.Write) {\n\t\t\tif (!this.files[path]) {\n\t\t\t\tthis.addFile(path, new ArrayBuffer(0));\n\t\t\t}\n\t\t}\n\t\tif (flags & FileOpenFlags.Truncate) {\n\t\t\tthis.addFile(path, new ArrayBuffer(0));\n\t\t}\n        const file = this.files[path];\n\t\tif (!file) {\n            throw new Error(`MemoryVfs: Can't find '${path}'`);\n\t\t} else {\n\t\t\treturn file\n\t\t}\n\t}\n}\n\nexport class MemoryVfsEntry extends VfsEntry {\n\tconstructor(private name:string, private data: ArrayBuffer) {\n\t\tsuper();\n\t}\n\n\tget isDirectory() { return false; }\n\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> {\n\t\treturn PromiseFast.resolve(this.data.slice(offset, offset + length));\n\t}\n\n\twriteChunkAsync(offset: number, data: ArrayBuffer): PromiseFast<number> {\n        const newData = new ArrayBuffer(Math.max(this.data.byteLength, offset + data.byteLength));\n        const newDataArray = new Uint8Array(newData);\n\t\tnewDataArray.set(new Uint8Array(this.data), 0);\n\t\tnewDataArray.set(new Uint8Array(data), offset);\n\t\tthis.data = newData;\n\t\treturn PromiseFast.resolve(data.byteLength);\n\t}\n\n\tstat(): VfsStat {\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tsize: this.data.byteLength,\n\t\t\tisDirectory: false,\n\t\t\ttimeCreation: new Date(),\n\t\t\ttimeLastAccess: new Date(),\n\t\t\ttimeLastModification: new Date(),\n\t\t};\n\t}\n\tclose() { }\n\n\tenumerateAsync() {\n\t\treturn PromiseFast.resolve([]);\n\t}\n}\n", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\nimport {MemoryVfsEntry} from \"./vfs_memory\";\n\nexport class MountableVfs extends Vfs {\n\tprivate mounts: MountableEntry[] = [];\n\n\tmountVfs(path: string, vfs: Vfs) {\n\t\tthis.mounts.unshift(new MountableEntry(this.normalizePath(path), vfs, null as any));\n\t\treturn this\n\t}\n\n\tmountFileData(path: string, data: ArrayBuffer) {\n\t\tthis.mounts.unshift(new MountableEntry(this.normalizePath(path), null as any, new MemoryVfsEntry(path, data)));\n\t}\n\n\tprivate normalizePath(path: string) {\n\t\treturn path.replace(/\\\\/g, '/').replace(/^\\/+/, '').replace(/\\/+$/, '');\n\t}\n\n\tprivate transformPath(path: string) {\n\t\tpath = this.normalizePath(path);\n\n\t\tfor (let n = 0; n < this.mounts.length; n++) {\n            const mount = this.mounts[n];\n            //console.log(`${mount.path} -- ${path}`);\n\t\t\tif (path.startsWith(mount.path)) {\n                const part = path.substr(mount.path.length);\n\t\t\t\treturn { mount: mount, part: part };\n\t\t\t}\n\t\t}\n\t\tconsole.info(this.mounts);\n\t\tthrow (new Error(\"MountableVfs: Can't find file '\" + path + \"'\"));\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<VfsEntry> {\n        const info = this.transformPath(path);\n\n        if (info.mount.file) {\n\t\t\treturn info.mount.file;\n\t\t} else {\n\t\t\treturn await info.mount.vfs.openAsync(info.part, flags, mode);\n\t\t}\n\t}\n\n\topenDirectoryAsync(path: string) {\n        const info = this.transformPath(path);\n\n        if (info.mount.file) {\n\t\t\treturn PromiseFast.resolve(info.mount.file);\n\t\t} else {\n\t\t\treturn info.mount.vfs.openDirectoryAsync(info.part);\n\t\t}\n\t}\n\n\tasync getStatPromiseAsync(path: string): Promise<VfsStat> {\n        const info = this.transformPath(path);\n\n        if (info.mount.file) {\n\t\t\treturn info.mount.file.stat()\n\t\t} else {\n\t\t\treturn await info.mount.vfs.getStatPromiseAsync(info.part);\n\t\t}\n\t}\n\t\n\tdeleteAsync(path: string): PromiseFast<void> {\n        const info = this.transformPath(path);\n        return info.mount.vfs.deleteAsync(info.part);\n\t}\n}\n\nclass MountableEntry {\n\tconstructor(public path: string, public vfs: Vfs, public file: VfsEntry) {\n\t}\n}\n\n//window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n//window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;\n//window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n\n//export class IndexedDbVfs extends Vfs {\n//\tinitAsync() {\n//\t\tconst request = indexedDB.open(\"mydatabase\");\n//\n//\t\trequest.onsuccess = (e) => {\n//\t\t\tconst db = <IDBDatabase>request.result;\n//\n//\t\t\tconst trans = db.transaction([\"objectstore1\", \"objectstore2\", READ_WRITE);\n//\t\t\ttrans.objectStore(\"objectstore1\").put(myblob, \"somekey\");\n//\t\t\ttrans.objectStore(\"objectstore2\").put(myblob, \"otherkey\");\n//\t\t};\n//\t\trequest.onerror = (e) => {\n//\t\t};\n//\t}\n//}\n", "\uFEFFimport {CpuSpecialAddresses, CpuState} from \"../../core/cpu/cpu_core\";\nimport {CpuExecutor} from \"../../core/cpu/cpu_executor\";\n\nexport class Interop {\n\texecute(state: CpuState, address: number, gprArray: number[]) {\n\t\tstate.preserveRegisters(() => {\n\t\t\tstate.setRA(CpuSpecialAddresses.EXIT_INTERRUPT);\n\t\t\tfor (let n = 0; n < gprArray.length; n++) {\n\t\t\t\tstate.setGPR(4 + n, gprArray[n]);\n\t\t\t}\n\n\t\t\tstate.setPC(address);\n\t\t\tCpuExecutor.executeAtPCAsync(state)\n\n\t\t\t//state.PC = address;\n\t\t\t//state.executeAtPC();\n\t\t});\n\t}\n} ", "\uFEFFimport {logger, StringDictionary} from \"../../global/utils\";\n\nconst console = logger.named('indexeddb');\n\n//declare const indexedDB: any;\ndeclare const IDBKeyRange: IDBKeyRange;\n\nexport interface MyStorage {\n\tputAsync(key: string, value: any): Promise<void>;\n\tdeleteAsync(key: string): Promise<void>;\n\thasAsync(key: string): Promise<boolean>;\n\tgetAsync(key: string): Promise<any>;\n}\n\nclass MyStorageIndexedDb implements MyStorage {\n\tconstructor(private db: IDBDatabase) {\n\t}\n\n\tstatic async openAsync(name: string) {\n\t\tconsole.info(`MyStorageIndexedDb.openAsync(\"${name}\")`)\n\t\treturn new Promise<MyStorage>((resolve, reject) => {\n            const request = indexedDB.open(name, 1);\n            request.onupgradeneeded = function (e) {\n                const db = request.result;\n\n                // A versionchange transaction is started automatically.\n\t\t\t\t//request.transaction.onerror = html5rocks.indexedDB.onerror;\n\t\t\t\tconsole.log('upgrade!');\n\n\t\t\t\tif (db.objectStoreNames.contains('items')) db.deleteObjectStore('items');\n\t\t\t\tdb.createObjectStore('items', { keyPath: \"key\" });\n\t\t\t};\n\t\t\trequest.onerror = (event) => {\n\t\t\t\treject(new Error(\"Can't open indexedDB\"));\n\t\t\t};\n\t\t\trequest.onsuccess = (event) => {\n\t\t\t\tresolve(new MyStorageIndexedDb(request.result));\n\t\t\t};\n\t\t});\n\t}\n\n\tgetItemsStore() {\n\t\treturn this.db.transaction(['items'], \"readwrite\").objectStore('items');\n\t}\n\n    async putAsync(key: string, value: any): Promise<void> {\n\t\tconsole.log('putAsync', key, value);\n        const store = this.getItemsStore();\n        return new Promise<void>((resolve, reject) => {\n            const request = store.put({key: key, value: value});\n            request.onsuccess = function (e) {\n\t\t\t\tresolve();\n\t\t\t};\n\t\t\trequest.onerror = function (e:any) {\n\t\t\t\treject(e['value']);\n\t\t\t};\n\t\t});\n\t}\n\n    async deleteAsync(key: string): Promise<void> {\n\t\tconsole.log('deleteAsync', key);\n        const store = this.getItemsStore();\n        return new Promise<void>((resolve, reject) => {\n            const request = store.delete(key);\n\n            request.onsuccess = function (e) {\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\trequest.onerror = function (e:any) {\n\t\t\t\treject(e['value']);\n\t\t\t};\n\t\t});\n\t}\n\n    async hasAsync(key: string): Promise<boolean> {\n\t\tconsole.log('hasAsync', key);\n\t\ttry {\n            await this.getAsync(key)\n            return true\n        } catch (e) {\n\t\t    return false\n        }\n\t}\n\n    async getAsync(key: string): Promise<any> {\n        const store = this.getItemsStore();\n        return new Promise((resolve, reject) => {\n\t\t\t//console.log('rr');\n\t\t\t//const keyRange = IDBKeyRange.only(key);\n\t\t\t//const keyRange = IDBKeyRange.lowerBound(0);\n\n            const request = store.get(key);\n\n            request.onsuccess = (e:any) => {\n                const result = e.target['result'];\n                if (!result) {\n\t\t\t\t\tconsole.log('getAsync', key, undefined);\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('getAsync', key, result.value);\n\t\t\t\t\tresolve(result.value);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.onerror = (e:any) => {\n\t\t\t\tconsole.log('getAsync', key, e);\n\t\t\t\treject(e['value']);\n\t\t\t};\n\t\t});\n\t}\n}\n\nclass MyStorageFake implements MyStorage {\n\tprivate items: StringDictionary<string> = {};\n\n\tconstructor(private name: string) {\n\t\t//console.log(`new MyStorageFake(${name})`);\n\t}\n\n\tputAsync(key: string, value: any): Promise<void> {\n\t\tconsole.log('putAsync', key, value);\n\t\tthis.items[key] = value;\n\t\treturn Promise.resolve();\n\t}\n\n\tdeleteAsync(key: string): Promise<void> {\n\t\tconsole.log('deleteAsync', key);\n\t\tdelete this.items[key];\n\t\treturn Promise.resolve();\n\t}\n\n\thasAsync(key: string): Promise<boolean> {\n        const value = this.items[key] !== undefined;\n        console.log('hasAsync', key, value);\n\t\treturn Promise.resolve(value);\n\t}\n\n\tgetAsync(key: string): Promise<any> {\n        const result = this.items[key];\n        console.log('getAsync', key, result);\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nexport async function indexedDbOpenAsync(name: string, version: number, stores: string[]): Promise<MyStorage> {\n\tif (typeof indexedDB == \"undefined\") {\n\t\treturn new MyStorageFake(name);\n\t} else {\n\t\treturn await MyStorageIndexedDb.openAsync(name + '_v2');\n\t}\n}\n", "\uFEFFimport {logger, PromiseFast} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\nimport {MyStorage, indexedDbOpenAsync} from \"./indexeddb\";\n\nconst console = logger.named('vfs.storage');\n\nexport class StorageVfs extends Vfs {\n    private db?: MyStorage;\n    private openDbPromise?: Promise<StorageVfs>;\n\n\n\tconstructor(private key: string) {\n\t\tsuper();\n\t}\n\n\tinitializeOnceAsync() {\n\t\tif (!this.openDbPromise) {\n\t\t\tthis.openDbPromise = (async () => {\n                const db = await indexedDbOpenAsync(this.key, 3, ['files'])\n                this.db = db;\n                return this;\n            })()\n\n        }\n\t\treturn this.openDbPromise;\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode) {\n        await this.initializeOnceAsync()\n        return await StorageVfsEntry.fromNameAsync(this.db!, path, flags, mode);\n\t}\n\t\n\tdeleteAsync(path:string): PromiseFast<void> {\n\t\treturn PromiseFast.ensure(this._deleteAsync(path))\n\t}\n\tasync _deleteAsync(path:string): Promise<void> {\n        await this.initializeOnceAsync()\n        return this.db!.deleteAsync(path);\n    }\n}\n\ninterface File {\n\tname: string;\n\tcontent: Uint8Array;\n\tdate: Date;\n\texists?: boolean;\n}\n\nclass StorageVfsEntry extends VfsEntry {\n\t// @ts-ignore\n    private file: File;\n\n\tconstructor(private db: MyStorage, private name: string) {\n\t\tsuper();\n\t}\n\n\tprivate initAsync(flags: FileOpenFlags, mode: FileMode) {\n\t\treturn this._getFileAsync().thenFast(file => {\n\t\t\tconsole.info('initAsync', file);\n\t\t\tif (!file.exists) {\n\t\t\t\tif (!(flags & FileOpenFlags.Create)) {\n\t\t\t\t\tthrow new Error(`File '${file.name}' doesn't exist`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flags & FileOpenFlags.Truncate) {\n\t\t\t\tfile.content = new Uint8Array([]);\n\t\t\t}\n\t\t\tthis.file = file;\n\t\t\treturn this;\n\t\t});\n\t}\n\n\tstatic fromNameAsync(db: MyStorage, name: string, flags: FileOpenFlags, mode: FileMode) {\n\t\treturn (new StorageVfsEntry(db, name)).initAsync(flags, mode);\n\t}\n\n\tprivate async _getFileAsync(): Promise<File> {\n\t    let file = await this.db.getAsync(this.name)\n        if (!file) file = { name: this.name, content: new ArrayBuffer(0), date: new Date(), exists: false };\n        return file;\n\t}\n\n\tprivate async _writeAllAsync(data:ArrayBuffer) {\n\t\treturn await this.db.putAsync(this.name, {\n\t\t\t'name': this.name,\n\t\t\t'content': new Uint8Array(data),\n\t\t\t'date': new Date(),\n\t\t\t'exists': true,\n\t\t});\n\t}\n\n\tenumerateAsync(): PromiseFast<VfsStat[]> {\n\t\tthrow (new Error(\"Must override enumerateAsync : \" + this));\n\t}\n\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> {\n\t\t//console.log(this.file);\n\t\treturn PromiseFast.resolve(this.file.content.buffer.slice(offset, offset + length));\n\t}\n\n\twriteChunkAsync(offset: number, data: ArrayBuffer): PromiseFast<number> {\n\t    return PromiseFast.ensure(this._writeChunkAsync(offset, data))\n\t}\n\n    async _writeChunkAsync(offset: number, data: ArrayBuffer) {\n        const newContent = new ArrayBuffer(Math.max(this.file.content.byteLength, offset + data.byteLength));\n        const newContentArray = new Uint8Array(newContent);\n        newContentArray.set(new Uint8Array(this.file.content), 0);\n        newContentArray.set(new Uint8Array(data), offset);\n        this.file.content = newContentArray;\n        await this._writeAllAsync(newContent)\n        return data.byteLength\n    }\n\n\tstat(): VfsStat {\n\t\treturn {\n\t\t\tname: this.file.name,\n\t\t\tsize: this.file.content.byteLength,\n\t\t\tisDirectory: false,\n\t\t\ttimeCreation: this.file.date,\n\t\t\ttimeLastAccess: this.file.date,\n\t\t\ttimeLastModification: this.file.date,\n\t\t\tdependentData0: 0,\n\t\t\tdependentData1: 0,\n\t\t};\n\t}\n\tclose() {\n\t}\n}", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {PromiseFast} from \"../../global/utils\";\nimport {Vfs} from \"./vfs\";\nimport {EmulatorContext} from \"../../emu/context\";\n\nexport class EmulatorVfs extends Vfs {\n\toutput = '';\n\tscreenshot:Uint8Array|null = null;\n\n\tconstructor(public context:EmulatorContext) {\n\t\tsuper();\n\t}\n\n\tdevctlAsync(command: EmulatorDevclEnum, input: Stream, output: Stream):number | PromiseFast<number> {\n\t\tswitch (command) {\n\t\t\tcase EmulatorDevclEnum.GetHasDisplay:\n\t\t\t\tif (output) output.writeInt32(0);\n\t\t\t\t//output.writeInt32(1);\n\t\t\t\tbreak;\n\t\t\tcase EmulatorDevclEnum.SendOutput:\n                const str = input.readString(input.length);\n\t\t\t\tthis.output += str;\n\t\t\t\tthis.context.onStdout.dispatch(str);\n\t\t\t\treturn PromiseFast.resolve(0)\n\t\t\t\t//return 0;\n\t\t\tcase EmulatorDevclEnum.IsEmulator:\n\t\t\t\treturn 0; // Running on emulator\n\t\t\tcase EmulatorDevclEnum.EmitScreenshot:\n\t\t\t\tthis.screenshot = input.toUInt8Array();\n\t\t\t\tconsole.warn('emit screenshot!');\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow (new Error(`Can't handle EmulatorVfs devctlAsync. Command '${command}'`));\n\t\t}\n\n\t\treturn 0;\n\t}\n}\n\nexport const enum EmulatorDevclEnum\n{\n\tGetHasDisplay = 0x00000001,\n\tSendOutput = 0x00000002,\n\tIsEmulator = 0x00000003,\n\tSendCtrlData = 0x00000010,\n\tEmitScreenshot = 0x00000020,\n}\n", "\uFEFFimport {Stream} from \"../../global/stream\";\nimport {Struct, StructClass, StructUInt32, UInt32} from \"../../global/struct\";\nimport {SceKernelErrors} from \"../SceKernelErrors\";\nimport {ProxyVfs, Vfs} from \"./vfs\";\nimport {CallbackManager} from \"../manager/callback\";\nimport {Memory} from \"../../core/memory\";\n\nexport class MemoryStickVfs extends ProxyVfs {\n\tconstructor(parentVfsList: Vfs[], private callbackManager: CallbackManager, private memory: Memory) {\n\t\tsuper(parentVfsList);\n\t}\n\n\tdevctlAsync(command: CommandType, input: Stream, output: Stream): any {\n\t\tswitch (command) {\n\t\t\tcase CommandType.CheckInserted:\n\t\t\t\tif (output == null || output.length < 4) return SceKernelErrors.ERROR_ERRNO_INVALID_ARGUMENT;\n\t\t\t\t// 0 - Device is not assigned (callback not registered).\n\t\t\t\t// 1 - Device is assigned (callback registered).\n\t\t\t\toutput.writeInt32(1);\n\t\t\t\treturn 0;\n\t\t\tcase CommandType.MScmRegisterMSInsertEjectCallback:\n\t\t\t\tif (input == null || input.length < 4) return SceKernelErrors.ERROR_ERRNO_INVALID_ARGUMENT;\n                const callbackId = input.readInt32();\n\n                this.callbackManager.notify(callbackId, 1);\n\n\t\t\t\treturn 0\n\t\t\tcase CommandType.MScmUnregisterMSInsertEjectCallback:\n\t\t\t\t// Ignore.\n\t\t\t\treturn 0\n\t\t\tcase CommandType.GetMemoryStickCapacity:\n\t\t\t\tif (input == null || input.length < 4) return SceKernelErrors.ERROR_ERRNO_INVALID_ARGUMENT\n\n                const structAddress = input.readInt32()\n                const structStream = this.memory.getPointerStream(structAddress, SizeInfoStruct.struct.length)!\n\n                const sizeInfo = new SizeInfoStruct();\n                const memoryStickSectorSize = (32 * 1024);\n\t\t\t\t//const TotalSpaceInBytes = 2L * 1024 * 1024 * 1024;\n\t\t\t\tconst freeSpaceInBytes = 1 * 1024 * 1024 * 1024;\n\n\t\t\t\tsizeInfo.sectorSize = 0x200;\n\t\t\t\tsizeInfo.sectorCount = (memoryStickSectorSize / sizeInfo.sectorSize);\n\t\t\t\tsizeInfo.maxClusters = (freeSpaceInBytes * 95 / 100) / (sizeInfo.sectorSize * sizeInfo.sectorCount);\n\t\t\t\tsizeInfo.freeClusters = sizeInfo.maxClusters;\n\t\t\t\tsizeInfo.maxSectors = sizeInfo.maxClusters;\n\n\t\t\t\tSizeInfoStruct.struct.write(structStream, sizeInfo);\n\n\t\t\t\treturn 0;\n\t\t\tcase CommandType.CheckMemoryStickIsInserted:\n\t\t\t\toutput.writeInt32(1);\n\t\t\t\treturn 0;\n\t\t\tcase CommandType.CheckMemoryStickStatus:\n\t\t\t\t// 0 <- Busy\n\t\t\t\t// 1 <- Ready\n\t\t\t\toutput.writeInt32(4);\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid MemoryStick command '${command}'`);\n\t\t}\n\t}\n}\n\nexport const enum CommandType {\n\tCheckInserted = 0x02425823,\n\tMScmRegisterMSInsertEjectCallback = 0x02415821,\n\tMScmUnregisterMSInsertEjectCallback = 0x02415822,\n\tGetMemoryStickCapacity = 0x02425818,\n\tCheckMemoryStickIsInserted = 0x02025806,\n\tCheckMemoryStickStatus = 0x02025801,\n}\n\nclass SizeInfoStruct extends Struct {\n\t@StructUInt32 maxClusters: number = 0\n    @StructUInt32 freeClusters: number = 0\n    @StructUInt32 maxSectors: number = 0\n    @StructUInt32 sectorSize: number = 0\n    @StructUInt32 sectorCount: number = 0\n}\n", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {UrlAsyncStream} from \"../../global/stream\";\nimport {statFileAsync, StatInfo} from \"../../global/async\";\nimport {MemoryVfsEntry} from \"./vfs_memory\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsEntryStream, VfsStat} from \"./vfs\";\n\nexport class UriVfs extends Vfs {\n\tconstructor(public baseUri: string) {\n\t\tsuper();\n\t}\n\n\tprivate getAbsoluteUrl(path: string) {\n\t\treturn `${this.baseUri}/${path}`;\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode) {\n\t\tif (flags & FileOpenFlags.Write) {\n\t\t\treturn PromiseFast.resolve(new MemoryVfsEntry(path, new ArrayBuffer(0)));\n\t\t}\n\n        const url = this.getAbsoluteUrl(path);\n\n        const stream = await UrlAsyncStream.fromUrlAsync(url)\n        return new VfsEntryStream(stream)\n\t}\n\n\topenDirectoryAsync(path: string) {\n\t\treturn PromiseFast.resolve(new MemoryVfsEntry(path, new ArrayBuffer(0)));\n\t}\n\n\tasync getStatPromiseAsync(path: string) {\n        const url = this.getAbsoluteUrl(path);\n        return await statUrlAsync(url)\n\t}\n}\n\nfunction urlStatToVfsStat(url: string, info: StatInfo) {\n\treturn {\n\t\tname: url,\n\t\tsize: info.size,\n\t\tisDirectory: false,\n\t\ttimeCreation: info.date,\n\t\ttimeLastAccess: info.date,\n\t\ttimeLastModification: info.date,\n\t};\n}\n\nasync function statUrlAsync(url: string) {\n    const info = await statFileAsync(url)\n    return await urlStatToVfsStat(url, info)\n}", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\nimport {Zip, ZipEntry} from \"../../format/zip\";\n\nexport class ZipVfs extends Vfs {\n\tconstructor(private zip: Zip, private writeVfs?: Vfs) {\n\t\tsuper();\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode) {\n\t\treturn new ZipVfsFile(this.zip.get(path))\n\t}\n}\n\nclass ZipVfsFile extends VfsEntry {\n\tconstructor(private node: ZipEntry) {\n\t\tsuper();\n\t}\n\n\tget isDirectory() { return this.node.isDirectory; }\n\tget size() { return this.node.size; }\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> { return this.node.readChunkAsync(offset, length); }\n\tclose() { }\n\n\tprivate static statNode(node: ZipEntry): VfsStat {\n\t\treturn {\n\t\t\tname: node.name,\n\t\t\tsize: node.size,\n\t\t\tisDirectory: node.isDirectory,\n\t\t\ttimeCreation: node.date,\n\t\t\ttimeLastAccess: node.date,\n\t\t\ttimeLastModification: node.date,\n\t\t};\n\t}\n\n\tstat(): VfsStat {\n\t\treturn ZipVfsFile.statNode(this.node);\n\t}\n\n\tenumerateAsync() {\n\t\treturn PromiseFast.resolve(this.node.getChildList().map(node => ZipVfsFile.statNode(node)));\n\t}\n}\n", "\uFEFFimport {PromiseFast} from \"../../global/utils\";\nimport {FileMode, FileOpenFlags, Vfs, VfsEntry, VfsStat} from \"./vfs\";\nimport {IIsoNode, Iso} from \"../../format/iso\";\n\nexport class IsoVfs extends Vfs {\n\tconstructor(private iso: Iso) {\n\t\tsuper();\n\t}\n\n\tasync openPromiseAsync(path: string, flags: FileOpenFlags, mode: FileMode): Promise<VfsEntry> {\n        return new IsoVfsFile(this.iso.get(path));\n\t}\n}\n\nclass IsoVfsFile extends VfsEntry {\n\tconstructor(private node: IIsoNode) {\n\t\tsuper();\n\t}\n\n\tget isDirectory() { return this.node.isDirectory; }\n\tget size() { return this.node.size; }\n\treadChunkAsync(offset: number, length: number): PromiseFast<ArrayBuffer> { return this.node.readChunkAsync(offset, length); }\n\tclose() { }\n\n\tprivate static statNode(node: IIsoNode): VfsStat {\n\t\treturn {\n\t\t\tname: node.name,\n\t\t\tsize: node.size,\n\t\t\tisDirectory: node.isDirectory,\n\t\t\ttimeCreation: node.date,\n\t\t\ttimeLastAccess: node.date,\n\t\t\ttimeLastModification: node.date,\n\t\t\tdependentData0: node.extent,\n\t\t};\n\t}\n\n\tstat(): VfsStat {\n\t\treturn IsoVfsFile.statNode(this.node);\n\t}\n\n\tenumerateAsync() {\n\t\treturn PromiseFast.resolve(this.node.childs.map(node => IsoVfsFile.statNode(node)));\n\t}\n}\n", "import {PspControllerContributor, PspCtrlButtons} from '../core/controller';\nimport {BitUtils, MathUtils} from \"../global/math\";\n\nconst navigator = (typeof window != 'undefined') ? window.navigator : null;\nconst getGamepads = navigator?.getGamepads?.bind(navigator);\n\nconst gamepadButtonMapping = [\n    PspCtrlButtons.cross, // 0\n    PspCtrlButtons.circle, // 1\n    PspCtrlButtons.square, // 2\n    PspCtrlButtons.triangle, // 3\n    PspCtrlButtons.leftTrigger, // 4\n    PspCtrlButtons.rightTrigger, // 5\n    PspCtrlButtons.volumeUp, // 6\n    PspCtrlButtons.volumeDown, // 7\n    PspCtrlButtons.select, // 8\n    PspCtrlButtons.start, // 9\n    PspCtrlButtons.home, // 10 - L3\n    PspCtrlButtons.note, // 11 - L3\n    PspCtrlButtons.up, // 12\n    PspCtrlButtons.down, // 13\n    PspCtrlButtons.left, // 14\n    PspCtrlButtons.right, // 15\n];\n\nexport class Html5Gamepad extends PspControllerContributor {\n    private checkButton(button: any): boolean {\n        if (typeof button == 'number') {\n            return button != 0;\n        } else {\n            return button ? button.pressed : false;\n        }\n    }\n\n    computeFrame() {\n        if (!getGamepads) return undefined\n        const gamepads = getGamepads()!\n        const firstGamePad = gamepads[0]\n        if (!firstGamePad) return undefined\n        const buttons = firstGamePad.buttons\n        const axes = firstGamePad.axes\n        this.data.x = MathUtils.transformRange(axes[0], -0.6, +0.6, -1, +1)\n        this.data.y = MathUtils.transformRange(axes[1], -0.6, +0.6, -1, +1)\n        this.data.buttons = PspCtrlButtons.none\n        for (let n = 0; n < 16; n++) {\n            this.data.buttons = BitUtils.withMask(this.data.buttons, gamepadButtonMapping[n], this.checkButton(buttons[n]))\n        }\n    }\n\n    register() {\n    }\n\n    unregister() {\n    }\n}\n", "import {PspControllerContributor, PspCtrlButtons, SceCtrlData} from \"../core/controller\";\nimport {MathUtils} from \"../global/math\";\n\nexport class Html5Keyboard extends PspControllerContributor {\n    private keyDown = (e: KeyboardEvent) => { this.setKeyDown(e.keyCode) }\n    private keyUp = (e: KeyboardEvent) => { this.setKeyUp(e.keyCode) }\n\n    private buttonMapping: any = {};\n    private fieldMapping: any = {};\n\n    private analogUp: boolean = false;\n    private analogDown: boolean = false;\n    private analogLeft: boolean = false;\n    private analogRight: boolean = false;\n\n    private analogAddX: number = 0;\n    private analogAddY: number = 0;\n\n    private addX: number = 0;\n    private addY: number = 0;\n\n    constructor() {\n        super()\n        this.buttonMapping = {};\n        this.buttonMapping[HtmlKeyCodes.up] = PspCtrlButtons.up;\n        this.buttonMapping[HtmlKeyCodes.left] = PspCtrlButtons.left;\n        this.buttonMapping[HtmlKeyCodes.right] = PspCtrlButtons.right;\n        this.buttonMapping[HtmlKeyCodes.down] = PspCtrlButtons.down;\n        this.buttonMapping[HtmlKeyCodes.enter] = PspCtrlButtons.start;\n        this.buttonMapping[HtmlKeyCodes.space] = PspCtrlButtons.select;\n        this.buttonMapping[HtmlKeyCodes.q] = PspCtrlButtons.leftTrigger;\n        this.buttonMapping[HtmlKeyCodes.e] = PspCtrlButtons.rightTrigger;\n        this.buttonMapping[HtmlKeyCodes.w] = PspCtrlButtons.triangle;\n        this.buttonMapping[HtmlKeyCodes.s] = PspCtrlButtons.cross;\n        this.buttonMapping[HtmlKeyCodes.a] = PspCtrlButtons.square;\n        this.buttonMapping[HtmlKeyCodes.d] = PspCtrlButtons.circle;\n        //this.buttonMapping[KeyCodes.Down] = PspCtrlButtons.Down;\n\n        this.fieldMapping[HtmlKeyCodes.i] = 'analogUp';\n        this.fieldMapping[HtmlKeyCodes.k] = 'analogDown';\n        this.fieldMapping[HtmlKeyCodes.j] = 'analogLeft';\n        this.fieldMapping[HtmlKeyCodes.l] = 'analogRight';\n    }\n\n    register() {\n        window.document?.addEventListener('keydown', this.keyDown)\n        window.document?.addEventListener('keyup', this.keyUp)\n    }\n\n    unregister() {\n        window.document?.removeEventListener('keydown', this.keyDown)\n        window.document?.removeEventListener('keyup', this.keyUp)\n    }\n\n    computeFrame() {\n        if (this.analogUp) { this.analogAddY -= 0.25; }\n        else if (this.analogDown) { this.analogAddY += 0.25; }\n        else { this.analogAddY *= 0.3; }\n\n        if (this.analogLeft) { this.analogAddX -= 0.25; }\n        else if (this.analogRight) { this.analogAddX += 0.25; }\n        else { this.analogAddX *= 0.3; }\n\n        this.analogAddX = MathUtils.clamp(this.analogAddX, -1, +1);\n        this.analogAddY = MathUtils.clamp(this.analogAddY, -1, +1);\n\n        this.data.x = this.analogAddX;\n        this.data.y = this.analogAddY;\n\n        this.data.x = MathUtils.clamp(this.data.x + this.addX, -1, +1);\n        this.data.y = MathUtils.clamp(this.data.y + this.addY, -1, +1);\n    }\n\n    private setKeyDown(keyCode: number) {\n        const button = this.buttonMapping[keyCode];\n        if (button !== undefined) this.data.buttons |= button;\n\n        const field = this.fieldMapping[keyCode];\n        if (field !== undefined) (<any>this)[field] = true;\n    }\n\n    private setKeyUp(keyCode: number) {\n        const button = this.buttonMapping[keyCode];\n        if (button !== undefined) this.data.buttons &= ~button;\n\n        const field = this.fieldMapping[keyCode];\n        if (field !== undefined) (<any>this)[field] = false;\n    }\n}\n\nexport const enum HtmlKeyCodes {\n    backspace = 8, tab = 9, enter = 13, shift = 16,\n    ctrl = 17, alt = 18, pause = 19, caps_lock = 20,\n    escape = 27, space = 32, page_up = 33, page_down = 34,\n    end = 35, home = 36, left = 37, up = 38,\n    right = 39, down = 40, insert = 45, _delete = 46,\n    k0 = 48, k1 = 49, k2 = 50, k3 = 51,\n    k4 = 52, k5 = 53, k6 = 54, k7 = 55,\n    k8 = 56, k9 = 57, a = 65, b = 66,\n    c = 67, d = 68, e = 69, f = 70,\n    g = 71, h = 72, i = 73, j = 74,\n    k = 75, l = 76, m = 77, n = 78,\n    o = 79, p = 80, q = 81, r = 82,\n    s = 83, t = 84, u = 85, v = 86,\n    w = 87, x = 88, y = 89, z = 90,\n    left_window_key = 91, right_window_key = 92, select_key = 93, numpad_0 = 96,\n    numpad_1 = 97, numpad_2 = 98, numpad_3 = 99, numpad_4 = 100,\n    numpad_5 = 101, numpad_6 = 102, numpad_7 = 103, numpad_8 = 104,\n    numpad_9 = 105, multiply = 106, add = 107, subtract = 109,\n    decimal_point = 110, divide = 111, f1 = 112, f2 = 113,\n    f3 = 114, f4 = 115, f5 = 116, f6 = 117,\n    f7 = 118, f8 = 119, f9 = 120, f10 = 121,\n    f11 = 122, f12 = 123, num_lock = 144, scroll_lock = 145,\n    semi_colon = 186, equal_sign = 187, comma = 188, dash = 189,\n    period = 190, forward_slash = 191, grave_accent = 192, open_bracket = 219,\n    back_slash = 220, close_braket = 221, single_quote = 222\n}\n", "\uFEFFimport \"./global\"\n\nimport { GpuStats } from '../core/gpu/gpu_stats';\nimport {\n    DomHelp,\n    logger,\n    loggerPolicies, Microtask,\n    Signal1,\n    Signal2\n} from \"../global/utils\";\nimport {EmulatorContext} from \"./context\";\nimport {getMemoryInstance, Memory} from \"../core/memory\";\nimport {PspRtc} from \"../core/rtc\";\nimport {InterruptManager} from \"../core/interrupt\";\nimport {PspAudio} from \"../core/audio\";\nimport {PspDisplay} from \"../core/display\";\nimport {Battery} from \"../core/battery\";\nimport {PspController} from \"../core/controller\";\nimport {Config} from \"../hle/config\";\nimport {registerModulesAndSyscalls} from \"../hle/pspmodules\";\nimport {Psf} from \"../format/psf\";\nimport {\n    AsyncStream,\n    BufferedAsyncStream,\n    FileAsyncStream,\n    MemoryAsyncStream,\n    Stream,\n    UrlAsyncStream\n} from \"../global/stream\";\nimport {detectFormatAsync} from \"../format/format\";\nimport {Cso} from \"../format/cso\";\nimport {Pbp, PbpNames} from \"../format/pbp\";\nimport {decrypt} from \"../hle/elf_crypted_prx\";\nimport {Zip} from \"../format/zip\";\nimport {Iso} from \"../format/iso\";\nimport {PspElfLoader} from \"../hle/elf_psp\";\nimport {OptimizedBatch, OptimizedDrawBuffer} from \"../core/gpu/gpu_vertex\";\nimport {MemoryManager} from \"../hle/manager/memory\";\nimport {FileManager, Uri} from \"../hle/manager/file\";\nimport {PspGpu} from \"../core/gpu/gpu_core\";\nimport {CpuConfig, SyscallManager} from \"../core/cpu/cpu_core\";\nimport {ThreadManager} from \"../hle/manager/thread\";\nimport {NetManager} from \"../hle/manager/net\";\nimport {ModuleManager} from \"../hle/manager/module\";\nimport {MountableVfs} from \"../hle/vfs/vfs_mountable\";\nimport {CallbackManager} from \"../hle/manager/callback\";\nimport {Interop} from \"../hle/manager/interop\";\nimport {StorageVfs} from \"../hle/vfs/vfs_storage\";\nimport {EmulatorVfs} from \"../hle/vfs/vfs_emulator\";\nimport {MemoryStickVfs} from \"../hle/vfs/vfs_ms\";\nimport {MemoryVfs} from \"../hle/vfs/vfs_memory\";\nimport {UriVfs} from \"../hle/vfs/vfs_uri\";\nimport {ZipVfs} from \"../hle/vfs/vfs_zip\";\nimport {FileOpenFlags, ProxyVfs, Vfs} from \"../hle/vfs/vfs\";\nimport {IsoVfs} from \"../hle/vfs/vfs_iso\";\nimport {Html5Gamepad} from \"../html5/Html5Gamepad\";\nimport {Html5Keyboard} from \"../html5/Html5Keyboard\";\nimport {DropboxVfs, hasDropboxToken} from \"../hle/vfs/vfs_dropbox\";\n\nconst console = logger.named('emulator');\n\nexport class Emulator {\n\t// @ts-ignore\n    public context: EmulatorContext;\n\tpublic memory: Memory;\n    // @ts-ignore\n\tprivate memoryManager: MemoryManager;\n    // @ts-ignore\n\tprivate rtc: PspRtc;\n    // @ts-ignore\n\tprivate interruptManager: InterruptManager;\n    // @ts-ignore\n\tfileManager: FileManager;\n\taudio: PspAudio = new PspAudio();\n    // @ts-ignore\n\tcanvas: HTMLCanvasElement;\n    // @ts-ignore\n\twebgl_canvas: HTMLCanvasElement;\n    // @ts-ignore\n\tdisplay: PspDisplay;\n    // @ts-ignore\n\tpublic gpu: PspGpu;\n\tpublic gpuStats: GpuStats = new GpuStats();\n\tpublic battery = new Battery();\n    // @ts-ignore\n\tpublic controller: PspController;\n    // @ts-ignore\n\tprivate syscallManager: SyscallManager;\n    // @ts-ignore\n\tprivate threadManager: ThreadManager;\n    // @ts-ignore\n\tprivate netManager: NetManager;\n    // @ts-ignore\n\tprivate moduleManager: ModuleManager;\n    // @ts-ignore\n\tprivate ms0Vfs: MountableVfs;\n    // @ts-ignore\n\tprivate callbackManager: CallbackManager;\n    // @ts-ignore\n\tprivate interop: Interop;\n    // @ts-ignore\n\tprivate storageVfs: StorageVfs;\n\t//private dropboxVfs: DropboxVfs;\n\tpublic config: Config = new Config();\n\tpublic cpuConfig = new CpuConfig()\n\t//private usingDropbox: boolean = false;\n    // @ts-ignore\n\temulatorVfs: EmulatorVfs;\n\n\t// Interpreted\n\tget interpreted() { return this.cpuConfig.interpreted }\n    set interpreted(value: boolean) { this.cpuConfig.interpreted = value }\n\n\tconstructor(memory?: Memory) {\n\t\tif (!memory) memory = getMemoryInstance();\n\t\tthis.memory = memory;\n\t}\n\n    stop() {\n        this.doFrameRunning = false\n\t\tif (!this.display) return\n        this.controller?.unregister()\n        this.display.unregister()\n        this.gpu.unregister()\n        this.audio.unregister()\n        this.threadManager.unregister()\n\t}\n\n\tprivate doFrameRunning = false\n    private doFrame = () => {\n        if (this.doFrameRunning) requestAnimationFrame(this.doFrame)\n        Microtask.queueExecuteNow(() => {\n            this.display.frame()\n            this.controller.frame()\n            this.audio.frame()\n            this.threadManager.frame()\n        })\n    }\n\n    start() {\n        this.stop()\n        this.memory.reset()\n        this.controller = new PspController()\n        this.controller.addContributor(new Html5Gamepad())\n        this.controller.addContributor(new Html5Keyboard())\n        this.controller.register()\n        this.context = new EmulatorContext()\n        this.memoryManager = new MemoryManager()\n        this.interruptManager = new InterruptManager()\n        this.syscallManager = new SyscallManager(this.context)\n        this.fileManager = new FileManager()\n        this.interop = new Interop()\n        this.callbackManager = new CallbackManager(this.interop)\n        this.rtc = new PspRtc()\n        this.display = new PspDisplay(this.memory, this.interruptManager, this.canvas, this.webgl_canvas)\n        this.gpu = new PspGpu(this.memory, this.display, this.interop, this.gpuStats)\n        this.gpu.onDrawBatches.pipeTo(this.onDrawBatches)\n        this.threadManager = new ThreadManager(this.memory, this.interruptManager, this.callbackManager, this.memoryManager, this.display, this.syscallManager, this.cpuConfig)\n        this.moduleManager = new ModuleManager(this.context)\n        this.netManager = new NetManager()\n\n        this.emulatorVfs = new EmulatorVfs(this.context)\n        this.ms0Vfs = new MountableVfs()\n            .mountVfs('/', new MemoryVfs())\n        this.storageVfs = new StorageVfs('psp_storage')\n\n        const memStickVfsList: Vfs[] = [this.storageVfs, this.ms0Vfs, this.storageVfs]\n\n        if (hasDropboxToken()) {\n            //memStickVfsList.unshift(new DropboxVfs())\n            //memStickVfsList.push(new DropboxVfs())\n        }\n\n        const msvfs = new MemoryStickVfs(memStickVfsList, this.callbackManager, this.memory)\n        this.fileManager\n            .mount('fatms0', msvfs)\n            .mount('ms0', msvfs)\n            .mount('mscmhc0', msvfs)\n            .mount('host0', new MemoryVfs())\n            .mount('flash0', new UriVfs('data/flash0'))\n            .mount('emulator', this.emulatorVfs)\n            .mount('kemulator', this.emulatorVfs)\n\n        registerModulesAndSyscalls(this.syscallManager, this.moduleManager)\n\n        this.context.init(this.interruptManager, this.display, this.controller, this.gpu, this.memoryManager, this.threadManager, this.audio, this.memory, this.fileManager, this.rtc, this.callbackManager, this.moduleManager, this.config, this.interop, this.netManager, this.battery)\n\n        this.display.register()\n        this.gpu.register()\n        this.audio.register()\n        this.threadManager.register()\n\n        this.doFrameRunning = true\n        this.doFrame()\n\t}\n\n\tprivate gameTitle: string = '';\n\n\tprivate processParamsPsf(psf: Psf) {\n\t\tthis.gameTitle = psf.entriesByName['TITLE'];\n\t\tconsole.log(psf.entriesByName);\n\t}\n\n\tpublic onPic0 = new Signal1<Uint8Array>();\n\tpublic onPic1 = new Signal1<Uint8Array>();\n\t\n\tprivate loadIcon0(data: Stream) {\n\t\tthis.onPic0.dispatch(data.toUInt8Array());\n\t}\n\t\n\tprivate loadPic1(data: Stream) {\n\t\tthis.onPic1.dispatch(data.toUInt8Array());\n\t}\n\n    private async _loadAndExecuteAsync(asyncStream: AsyncStream, pathToFile: string): Promise<any> {\n        const fileFormat = await detectFormatAsync(asyncStream)\n        console.info(`File:: size: ${asyncStream.size}, format: \"${fileFormat}\", name: \"${asyncStream.name}\", pathToFile: \"${pathToFile}\"`);\n        switch (fileFormat) {\n            case 'ciso': {\n                const asyncStream2 = await Cso.fromStreamAsync(asyncStream)\n                return await this._loadAndExecuteAsync(asyncStream2, pathToFile);\n            }\n            case 'pbp': {\n                const executableArrayBuffer = await asyncStream.readChunkAsync(0, asyncStream.size)\n                const pbp = Pbp.fromStream(Stream.fromArrayBuffer(executableArrayBuffer));\n                const psf = Psf.fromStream(pbp.get(PbpNames.ParamSfo));\n                this.processParamsPsf(psf);\n                this.loadIcon0(pbp.get(PbpNames.Icon0Png));\n                this.loadPic1(pbp.get(PbpNames.Pic1Png));\n                return await this._loadAndExecuteAsync(new MemoryAsyncStream(pbp.get(PbpNames.PspData).toArrayBuffer()), pathToFile);\n            }\n            case 'psp': {\n                const executableArrayBuffer = await asyncStream.readChunkAsync(0, asyncStream.size)\n                return await this._loadAndExecuteAsync(new MemoryAsyncStream(decrypt(Stream.fromArrayBuffer(executableArrayBuffer)).slice().readAllBytes().buffer, pathToFile + \".CryptedPSP\"), pathToFile);\n            }\n            case 'zip': {\n                const zip = await Zip.fromStreamAsync(asyncStream)\n                const zipFs = new ZipVfs(zip, this.storageVfs);\n                const mountableVfs = this.ms0Vfs;\n                mountableVfs.mountVfs('/PSP/GAME/virtual', zipFs);\n                const availableElf = ['/EBOOT.ELF', '/BOOT.ELF', '/EBOOT.PBP'].first(item => zip.has(item))!;\n                console.log(`elf: ${availableElf}`);\n                const node = await zipFs.openAsync(availableElf, FileOpenFlags.Read, parseInt('0777', 8))\n                const data = await node.readAllAsync()\n                return await this._loadAndExecuteAsync(MemoryAsyncStream.fromArrayBuffer(data), 'ms0:/PSP/GAME/virtual/EBOOT.ELF');\n            }\n            case 'iso': {\n                const iso = await Iso.fromStreamAsync(asyncStream);\n                const isoFs = new IsoVfs(iso);\n                this.fileManager.mount('umd0', isoFs);\n                this.fileManager.mount('umd1', isoFs);\n                this.fileManager.mount('disc0', isoFs);\n                this.fileManager.mount('disc1', isoFs);\n\n                const exists = await isoFs.existsAsync('PSP_GAME/PARAM.SFO');\n\n                if (!exists) {\n                    const mountableVfs = this.ms0Vfs;\n                    mountableVfs.mountVfs('/PSP/GAME/virtual', new ProxyVfs([isoFs, this.storageVfs]));\n\n                    const bootBinData = await isoFs.readAllAsync('EBOOT.PBP')\n                    return await this._loadAndExecuteAsync(MemoryAsyncStream.fromArrayBuffer(bootBinData), 'ms0:/PSP/GAME/virtual/EBOOT.PBP')\n                } else {\n                    const paramSfoData = await isoFs.readAllAsync('PSP_GAME/PARAM.SFO')\n                    const psf = Psf.fromStream(Stream.fromArrayBuffer(paramSfoData))\n                    this.processParamsPsf(psf);\n\n                    try {\n                        this.loadIcon0(Stream.fromArrayBuffer(await isoFs.readAllAsync('PSP_GAME/ICON0.PNG')))\n                        this.loadPic1(Stream.fromArrayBuffer(await isoFs.readAllAsync('PSP_GAME/PIC1.PNG')))\n                    } catch (e) {\n                        console.error(e)\n                    }\n\n                    //const exists = await isoFs.existsAsync('PSP_GAME/SYSDIR/EBOOT.BIN');\n                    //const path = exists ? 'PSP_GAME/SYSDIR/EBOOT.BIN' : 'PSP_GAME/SYSDIR/BOOT.BIN';\n                    const exists = await isoFs.existsAsync('PSP_GAME/SYSDIR/BOOT.BIN');\n                    const path = exists ? 'PSP_GAME/SYSDIR/BOOT.BIN' : 'PSP_GAME/SYSDIR/EBOOT.BIN';\n                    const bootBinData = await isoFs.readAllAsync(path)\n                    return await this._loadAndExecuteAsync(MemoryAsyncStream.fromArrayBuffer(bootBinData), `umd0:/${path}`);\n                }\n            }\n            case 'elf': {\n                const executableArrayBuffer = await asyncStream.readChunkAsync(0, asyncStream.size)\n\n                if (typeof document != 'undefined') {\n                    document.title = this.gameTitle ? `${this.gameTitle} - jspspemu` : 'jspspemu';\n                }\n\n                const mountableVfs = this.ms0Vfs\n                mountableVfs.mountFileData('/PSP/GAME/virtual/EBOOT.ELF', executableArrayBuffer)\n                const elfStream = Stream.fromArrayBuffer(executableArrayBuffer)\n\n                this.fileManager.cwd = new Uri('ms0:/PSP/GAME/virtual')\n                const args = [pathToFile]\n                const argumentsPartition = this.memoryManager.userPartition.allocateLow(0x4000)\n                const argument = args.map(argument => argument + String.fromCharCode(0)).join('')\n                this.memory.getPointerStream(argumentsPartition.low)!.writeString(argument)\n\n                const pspElf = new PspElfLoader(this.memory, this.memoryManager, this.moduleManager, this.syscallManager)\n                pspElf.load(elfStream)\n                this.context.symbolLookup = pspElf\n                this.context.gameTitle = this.gameTitle\n                this.context.gameId = pspElf.moduleInfo.name\n                const moduleInfo = pspElf.moduleInfo\n\n                //this.memory.dump(); debugger;\n\n                // \"ms0:/PSP/GAME/virtual/EBOOT.PBP\"\n                const thread = this.threadManager!.create('main', moduleInfo.pc, 10)\n                thread.state.GP = moduleInfo.gp\n                thread.state.setGPR(4, argument.length)\n                thread.state.setGPR(5, argumentsPartition.low)\n                thread.start();\n                return;\n            }\n            default:\n                throw new Error(`\"Unhandled format '${fileFormat}'`)\n        }\n    }\n\n\tasync loadExecuteAndWaitAsync(asyncStream: AsyncStream, url: string, afterStartCallback: () => void) {\n\t\tthis.gameTitle = '';\n        await this.loadAndExecuteAsync(asyncStream, url)\n        try {\n            if (afterStartCallback) afterStartCallback();\n\n            //console.error('WAITING!');\n            await this.threadManager.waitExitGameAsync()\n            this.stop()\n            return this.emulatorVfs.output;\n        } catch (e) {\n            console.error(e);\n            console.error(e.stack);\n            throw(e);\n        }\n\t}\n\n\tstatic disableLog() {\n\t\tloggerPolicies.disableAll = true;\n\t}\n\t\n\tonDrawBatches = new Signal2<OptimizedDrawBuffer, OptimizedBatch[]>();\n\n\tasync loadAndExecuteAsync(asyncStream: AsyncStream, url: string) {\n\t\tif (typeof document != 'undefined') DomHelp.fromId('game_menu').hide();\n\t\turl = String(url);\n\n\t\tthis.gameTitle = '';\n\t\tthis.loadIcon0(Stream.fromArray([]));\n\t\tthis.loadPic1(Stream.fromArray([]));\n\t\ttry {\n            this.start()\n            const parentUrl = url.replace(/\\/[^//]+$/, '');\n            console.info(`parentUrl: ${parentUrl}`);\n            this.ms0Vfs.mountVfs('/PSP/GAME/virtual', new UriVfs(parentUrl));\n            return await this._loadAndExecuteAsync(asyncStream, \"ms0:/PSP/GAME/virtual/EBOOT.PBP\");\n        } catch (e) {\n\t\t\tconsole.error(e);\n\t\t\tconsole.error(e.stack);\n\t\t\tthrow (e);\n\t\t}\n\t}\n\n\tasync downloadAndExecuteAsync(url: string) {\n\t    const stream = await UrlAsyncStream.fromUrlAsync(url)\n        await this.loadAndExecuteAsync(stream, url);\n\t}\n\n    async downloadAndExecuteAndWaitAsync(url: string, afterStartCallback: () => void) {\n\t    const stream = await UrlAsyncStream.fromUrlAsync(url)\n        return await this.loadExecuteAndWaitAsync(stream, url, afterStartCallback);\n    }\n\n    async executeFileAsync(file: File) {\n        await this.loadAndExecuteAsync(new BufferedAsyncStream(new FileAsyncStream(file)), '.');\n\t}\n}\n", "import {PromiseFast} from \"../global/utils\";\nimport {waitAsync} from \"../global/async\";\nimport {convertS16ToF32} from \"../core/audio\";\n\nexport class PspAudioBuffer {\n    offset: number = 0;\n\n    constructor(private readedCallback: Function | null, public data: Float32Array) {\n    }\n\n    resolve() {\n        if (this.readedCallback) this.readedCallback();\n        this.readedCallback = null;\n    }\n\n    get hasMore() {\n        return this.offset < this.length;\n    }\n\n    read() {\n        return this.data[this.offset++]\n    }\n\n    get available() {\n        return this.length - this.offset;\n    }\n\n    get length() {\n        return this.data.length;\n    }\n}\n\nclass Audio2Channel {\n    private buffers: PspAudioBuffer[] = [];\n    private node?: ScriptProcessorNode;\n    currentBuffer: PspAudioBuffer | undefined | null;\n\n    constructor(public id: number, public context: AudioContext | null) {\n        if (this.context) {\n            this.node = this.context.createScriptProcessor(1024, 2, 2)\n            this.node.addEventListener(\"audioprocess\", (e) => {\n                this.process(e)\n            })\n        }\n    }\n\n    start() {\n        if (this.node) this.node.connect(this.context!.destination);\n    }\n\n    stop() {\n        if (this.node) this.node.disconnect();\n    }\n\n    process(e: AudioProcessingEvent) {\n        const left = e.outputBuffer.getChannelData(0);\n        const right = e.outputBuffer.getChannelData(1);\n        const sampleCount = left.length;\n        const hidden = document.hidden;\n\n        for (let n = 0; n < sampleCount; n++) {\n            if (!this.currentBuffer) {\n                if (this.buffers.length == 0) {\n                    //console.warn(`Incomplete audio sampleCount=${sampleCount}, n=${n}`)\n                    break;\n                }\n\n                for (let m = 0; m < Math.min(3, this.buffers.length); m++) {\n                    this.buffers[m].resolve()\n                }\n\n                this.currentBuffer = this.buffers.shift();\n                this.currentBuffer?.resolve()\n            }\n\n            if (this.currentBuffer != null && this.currentBuffer.available >= 2) {\n                left[n] = this.currentBuffer.read()\n                right[n] = this.currentBuffer.read()\n            } else {\n                this.currentBuffer = null;\n                n--;\n            }\n\n            if (hidden) left[n] = right[n] = 0;\n        }\n    }\n\n    async playAsync(data: Float32Array): Promise<any> {\n        if (!this.node) {\n            await waitAsync(10)\n            return 0\n        }\n\n        if (this.buffers.length < 8) {\n            //if (this.buffers.length < 16) {\n            //(data.length / 2)\n            this.buffers.push(new PspAudioBuffer(null, data));\n            //return 0;\n            return 0\n        } else {\n            return new Promise<number>((resolved, rejected) => {\n                this.buffers.push(new PspAudioBuffer(resolved, data));\n                return 0;\n            });\n        }\n    }\n\n    playDataAsync(channels: number, data: Int16Array, leftVolume: number, rightVolume: number): Promise<any> {\n        //console.log(channels, data);\n        return this.playAsync(convertS16ToF32(channels, data, leftVolume, rightVolume));\n    }\n}\n\nexport class Html5Audio2 {\n    private channels = new Map<number, Audio2Channel>();\n    private context: AudioContext | null = null;\n\n    constructor() {\n        try {\n            this.context = new AudioContext();\n        } catch (e) {\n            console.error(\"Error creating AudioContext\", e)\n        }\n\n        const unlock = () => {\n            // Remove the touch start listener.\n            document.removeEventListener(\"keydown\", unlock, true)\n            document.removeEventListener(\"touchstart\", unlock, true)\n            document.removeEventListener(\"mousedown\", unlock, true)\n\n            const ctx = this.context\n\n            if (ctx != null) {\n                // If already created the audio context, we try to resume it\n                ctx.resume()\n\n                const source = ctx.createBufferSource()\n\n                source.buffer = ctx.createBuffer(1, 1, 22050)\n                source.connect(ctx.destination)\n                source.start(0.0)\n                if (ctx.resume) ctx.resume()\n                source.onended = () => {\n                    source.disconnect(0)\n                    console.warn(\"Web Audio was successfully unlocked\")\n                }\n            }\n        }\n\n        document.addEventListener(\"keydown\", unlock, true)\n        document.addEventListener(\"touchstart\", unlock, true)\n        document.addEventListener(\"mousedown\", unlock, true)\n    }\n\n    getChannel(id: number): Audio2Channel {\n        if (!this.channels.has(id)) this.channels.set(id, new Audio2Channel(id, this.context));\n        return this.channels.get(id)!;\n    }\n\n    startChannel(id: number) {\n        return this.getChannel(id).start();\n    }\n\n    stopChannel(id: number) {\n        return this.getChannel(id).stop();\n    }\n\n    playDataAsync(id: number, channels: number, data: Int16Array, leftVolume: number, rightVolume: number) {\n        return this.getChannel(id).playDataAsync(channels, data, leftVolume, rightVolume);\n    }\n}\n", "import { BatteryInfo } from '../core/battery';\nimport {PromiseFast} from \"../global/utils\";\nimport {waitAsync} from \"../global/async\";\n\nexport interface BatteryManager {\n    charging: boolean;\n    chargingTime: number;\n    dischargingTime: number;\n    level: number;\n    //onchargingchange: any;\n    //onchargingtimechange: any;\n    //ondischargingtimechange: any;\n    //onlevelchange: any;\n}\n\nexport class Html5Battery {\n    static instance: Html5Battery = null as any;\n    private static promise: Promise<Html5Battery> = null as any;\n\n    constructor(private manager: BatteryManager) {\n        Html5Battery.instance = this;\n    }\n\n    get lifetime() {\n        // Up to 10 hours, to avoid too high/infinite values\n        if (this.manager != null) return Math.min(10 * 3600, this.manager.dischargingTime);\n        return 3 * 3600;\n    }\n\n    get charging() {\n        if (this.manager != null) return this.manager.charging;\n        return true;\n    }\n\n    get level(): number {\n        if (this.manager != null) return this.manager.level;\n        return 1.0;\n    }\n\n    static async getAsync(): Promise<Html5Battery> {\n        if (this.instance) return Promise.resolve(this.instance);\n        if (this.promise) return this.promise;\n        if ((<any>navigator).battery) return Promise.resolve(new Html5Battery((<any>navigator).battery));\n        if ((<any>navigator).getBattery) {\n            return this.promise = (async () => {\n                const v = await (<any>navigator).getBattery()\n                return new Html5Battery(v);\n            })()\n        }\n        return Promise.resolve(new Html5Battery(null as any));\n    }\n\n    static async registerAndSetCallback(callback: (bi: BatteryInfo) => void) {\n        await waitAsync(0)\n        const battery = await Html5Battery.getAsync()\n        function sendData(): void {\n            callback(<BatteryInfo>{\n                charging: battery.charging,\n                level: battery.level,\n                lifetime: battery.lifetime,\n            });\n        }\n        setInterval(() => {\n            sendData();\n        }, 300);\n        sendData();\n    }\n}\n\n\n\t\t\n", "import {Stream} from \"../global/stream\";\n\nexport function changeFavicon(src: string) {\n    if (typeof document == 'undefined') return;\n    const link = document.createElement('link')\n    const oldLink = document.getElementById('dynamic-favicon');\n    link.id = 'dynamic-favicon';\n    link.rel = 'shortcut icon';\n    link.href = src;\n    if (oldLink) {\n        document.head.removeChild(oldLink);\n    }\n    document.head.appendChild(link);\n}\n\nexport class Html5Icons {\n    static setPic0(data: Uint8Array) {\n        changeFavicon(Stream.fromUint8Array(data).toImageUrl());\n    }\n    static setPic1(data: Uint8Array) {\n        document.body.style.backgroundRepeat = 'no-repeat';\n        document.body.style.backgroundSize = 'cover';\n        document.body.style.backgroundPosition = 'center center';\n        document.body.style.backgroundImage = `url(\"${Stream.fromUint8Array(data).toImageUrl()}\")`;\n    }\n}", "import { WebGlPspDrawDriver } from '../core/gpu/webgl/webgl_driver';\nimport { DebugOverlay } from './emulator_overlay';\nimport { Emulator } from './emulator';\nimport { Html5Audio2 } from '../html5/Html5Audio';\nimport { Html5Battery } from '../html5/Html5Battery';\nimport { Html5Icons } from '../html5/Html5Icons';\nimport {ArrayBufferUtils, Microtask} from \"../global/utils\";\nimport {OptimizedDrawBufferTransfer} from \"../core/gpu/gpu_vertex\";\nimport {Config} from \"../hle/config\";\n\ndeclare const self: any;\n\nexport interface IBaseEmulatorController {\n    init(): void;\n    executeUrl(url: string): void;\n    executeFile(file: File): void;\n}\n\nexport class EmulatorControllerNormal implements IBaseEmulatorController {\n\tdocumentLocation = document.location.href.replace(/#.*$/, '').replace(/\\/[^\\/]*$/, '');\n\temulator = new Emulator();\n\taudio = new Html5Audio2();\n\n    private getOrCreateCanvas(): HTMLCanvasElement {\n        return <HTMLCanvasElement>(document.getElementById('canvas'))\n    }\n\n\tprivate getOrCreateWebglCanvas(): HTMLCanvasElement {\n\t    return <HTMLCanvasElement>(document.getElementById('webgl_canvas'))\n    }\n\n\tasync init() {\n        if (!document.getElementById('canvas_container')) {\n            const canvas_container = document.createElement('div')\n            canvas_container.id = 'canvas_container'\n            canvas_container.innerHTML = `\n                <div id=\"touch_buttons\">\n                  <span id=\"directional_pad\">\n                    <span class=\"psp_button\" id=\"button_left\">2</span>\n                    <span class=\"psp_button\" id=\"button_up\">3</span>\n                    <span class=\"psp_button\" id=\"button_right\">1</span>\n                    <span class=\"psp_button\" id=\"button_down\">4</span>\n                  </span>\n            \n                  <span id=\"button_pad\">\n                    <span class=\"psp_button\" id=\"button_cross\">X</span>\n                    <span class=\"psp_button\" id=\"button_circle\">C</span>\n                    <span class=\"psp_button\" id=\"button_triangle\">T</span>\n                    <span class=\"psp_button\" id=\"button_square\">S</span>\n                  </span>\n            \n                  <span id=\"lr_pad\">\n                    <span class=\"psp_button\" id=\"button_l\">l</span>\n                    <span class=\"psp_button\" id=\"button_r\">r</span>\n                  </span>\n            \n                  <span id=\"select_start_pad\">\n                    <span class=\"psp_button\" id=\"button_menu\">MENU</span>\n                    <span class=\"psp_button\" id=\"button_start\">A</span>\n                    <span class=\"psp_button\" id=\"button_select\">B</span>\n                  </span>\n                </div>\n            \n                <canvas id=\"canvas\" width=\"480\" height=\"272\" style=\"background: black; width: 960px; height: 544px; border: 0; display: block;\"></canvas>\n                <canvas id=\"webgl_canvas\" width=\"960\" height=\"544\" style=\"background: black; width: 960px; height: 544px; border: 0; display: none; \"></canvas>\n            `;\n            document.body.appendChild(canvas_container)\n            document.body.style.padding = '0'\n            document.body.style.margin = '0'\n        }\n\n        let emulator = this.emulator;\n        let audio = this.audio;\n        self.emulator = emulator;\n        const canvas = this.getOrCreateCanvas();\n        const webgl_canvas = this.getOrCreateWebglCanvas();\n        const webglDriver = new WebGlPspDrawDriver(webgl_canvas, emulator.gpuStats);\n        webglDriver.register(emulator.memory);\n        let debugOverlay = new DebugOverlay(webglDriver);\n        debugOverlay.register();\n\n        emulator.canvas = canvas;\n        emulator.webgl_canvas = webgl_canvas;\n        try {\n            emulator.start()\n            console.info('emulator started');\n            emulator.onPic0.add((data: Uint8Array) => {\n                Html5Icons.setPic0(data);\n            });\n            emulator.onPic1.add((data: Uint8Array) => {\n                Html5Icons.setPic1(data);\n            });\n\n            debugOverlay.linkTo(emulator);\n\n            emulator.onDrawBatches.add(async function onDrawBatchesFrame(drawBufferData, batches) {\n                //console.log('emulator.onDrawBatches');\n                emulator.display.setEnabledDisplay(false);\n                const transferData = OptimizedDrawBufferTransfer.buildBatchesTransfer(drawBufferData, batches);\n                webglDriver.invalidatedMemoryAll();\n                debugOverlay.overlay.updateAndReset();\n                webglDriver.drawBatchesTransfer(transferData);\n                await debugOverlay.freezing.waitUntilValueAsync(false)\n                emulator.gpu.sync();\n                //console.log('drawBatches UI:', batches.length);\n            });\n\n            emulator.memory.invalidateDataAll.add(() => {\n                //postAction('memory.invalidateDataAll', {});\n            });\n\n            emulator.memory.invalidateDataRange.add((low, high) => {\n                //postAction('memory.invalidateDataRange', {low: low, high: high});\n            });\n\n            // @ts-ignore\n            emulator.audio.onPlayDataAsync.add((id: number, channels: number, data: Int16Array, leftvolume: number, rightvolume: number) => {\n                return audio.playDataAsync(id, channels, ArrayBufferUtils.cloneInt16Array(data), leftvolume, rightvolume);\n            });\n            emulator.audio.onStart.add((id: number) => {\n                audio.startChannel(id);\n            });\n            emulator.audio.onStop.add((id: number) => {\n                audio.stopChannel(id);\n            });\n        } catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\n\t\tconsole.log('base path', this.documentLocation);\n\n\t\temulator.config.language = Config.detectLanguage();\n\n        debugOverlay.gpuFreezing.add((value: boolean) => {\n\t\t\temulator.gpu.freezing.value = value;\n\t\t});\n\t\tdebugOverlay.gpuDumpCommands.add(() => {\n\t\t\temulator.gpu.dumpCommands();\n\t\t});\n\t\tHtml5Battery.registerAndSetCallback((binfo) => {\n\t\t\temulator.battery.charging = binfo.charging;\n\t\t\temulator.battery.level = binfo.level;\n\t\t\temulator.battery.lifetime = binfo.lifetime;\n\t\t});\n\n\t\tMicrotask.execute();\n\t}\n\n\texecuteUrl(url: string): void {\n\t\tif (url.match(/^https?:\\/\\//)) {\n\t\t\turl = url;\n\t\t} else {\n\t\t\turl = `${this.documentLocation}/${url}`;\n\t\t}\n\t\tconsole.info('executeUrl:', url);\n\t\tthis.emulator.downloadAndExecuteAsync(url);\n\n\t}\n\n\texecuteFile(file: File): void {\n\t\tconsole.info('executeFile:', file);\n\t\tthis.emulator.executeFileAsync(file);\n\t}\n}\n\n", "import {EmulatorControllerNormal, IBaseEmulatorController} from './emulator_controller_normal';\n\nlet controller: IBaseEmulatorController = new EmulatorControllerNormal();\n\nexport class EmulatorController {\n\tstatic executeUrl(url: string) {\n\t\tcontroller.executeUrl(url);\n\t}\n\n\tstatic executeFile(file: File) {\n\t\tcontroller.executeFile(file);\n\t}\n}\n\ncontroller.init();\n", "\uFEFFimport \"./emu/global\"\nimport { EmulatorController } from './emu/emulator_controller';\nimport {DomHelp, isTouchDevice} from \"./global/utils\";\nimport {globalReferenced} from \"./emu/global\";\nimport { referenceDropbox } from \"./hle/vfs/vfs_dropbox\";\n\nglobalReferenced()\n\ninterface Touch {\n\tidentifier: number;\n\tclientX: number;\n\tclientY: number;\n}\n\ninterface TouchEvent extends Event {\n\ttouches: Touch[];\n}\n\ninterface Rect {\n\tleft: number;\n\tright: number;\n\ttop: number;\n\tbottom: number;\n\tname: string;\n\tbutton: number;\n}\n\n\n/*\nconst touch_overlay = document.getElementById('touch_overlay');\n\nclass ControllerPlugin {\n\tstatic use() {\n\t\tconst rects: Rect[] = [];\n\n\t\tconst generateRects = (() => {\n\t\t\tconst overlay_pos = { top: touch_overlay.offsetTop, left: touch_overlay.offsetLeft };\n\t\t\tconst overlay_width = touch_overlay.offsetWidth, overlay_height = touch_overlay.offsetHeight;\n\t\t\t[\n\t\t\t\t{ query: 'button_menu', button: 0 },\n\t\t\t\t{ query: 'button_select', button: PspCtrlButtons.select },\n\t\t\t\t{ query: 'button_start', button: PspCtrlButtons.start },\n\t\t\t\t{ query: 'button_up', button: PspCtrlButtons.up },\n\t\t\t\t{ query: 'button_left', button: PspCtrlButtons.left },\n\t\t\t\t{ query: 'button_down', button: PspCtrlButtons.down },\n\t\t\t\t{ query: 'button_right', button: PspCtrlButtons.right },\n\t\t\t\t{ query: 'button_l', button: PspCtrlButtons.leftTrigger },\n\t\t\t\t{ query: 'button_r', button: PspCtrlButtons.rightTrigger },\n\t\t\t\t{ query: 'button_cross', button: PspCtrlButtons.cross },\n\t\t\t\t{ query: 'button_circle', button: PspCtrlButtons.circle },\n\t\t\t\t{ query: 'button_square', button: PspCtrlButtons.square },\n\t\t\t\t{ query: 'button_triangle', button: PspCtrlButtons.triangle },\n\t\t\t].forEach(button => {\n\t\t\t\tconst query = document.getElementById(button.query);\n\t\t\t\tconst item_pos = { top: query.offsetTop, left: query.offsetLeft };\n\t\t\t\tconst query_width = query.offsetWidth, query_height = query.offsetHeight;\n\n\t\t\t\tconst item_left = (item_pos.left - overlay_pos.left) / overlay_width;\n\t\t\t\tconst item_right = (item_pos.left - overlay_pos.left + query_width) / overlay_width;\n\t\t\t\tconst item_top = (item_pos.top - overlay_pos.top) / overlay_height;\n\t\t\t\tconst item_bottom = (item_pos.top - overlay_pos.top + query_height) / overlay_height;\n\n\t\t\t\trects.push({\n\t\t\t\t\tleft: item_left,\n\t\t\t\t\tright: item_right,\n\t\t\t\t\ttop: item_top,\n\t\t\t\t\tbottom: item_bottom,\n\t\t\t\t\tname: button.query,\n\t\t\t\t\tbutton: button.button\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tgenerateRects();\n\n\t\tconst locateRect = ((screenX: number, screenY: number) => {\n\t\t\tconst overlay_pos = { top: touch_overlay.offsetTop, left: touch_overlay.offsetLeft };\n\t\t\tconst overlay_width = touch_overlay.offsetWidth, overlay_height = touch_overlay.offsetHeight;\n\n\t\t\tconst x = (screenX - overlay_pos.left) / overlay_width;\n\t\t\tconst y = (screenY - overlay_pos.top) / overlay_height;\n\n\t\t\tfor (let rect of rects) {\n\t\t\t\tif (((x >= rect.left) && (x < rect.right)) && ((y >= rect.top && y < rect.bottom))) {\n\t\t\t\t\treturn rect;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\n\t\tconst touchesState: {\n\t\t\t[key: number]: { rect: Rect }\n\t\t} = {};\n\n\t\tfunction simulateButtonDown(button: number) {\n\t\t\tif (emulator.controller) emulator.controller.simulateButtonDown(button);\n\t\t}\n\n\t\tfunction simulateButtonUp(button: number) {\n\t\t\tif (emulator.controller) emulator.controller.simulateButtonUp(button);\n\t\t}\n\n\t\tfunction touchStart(touches: Touch[]) {\n\t\t\tfor (const touch of touches) touchesState[touch.identifier] = { rect: null };\n\t\t\ttouchMove(touches);\n\t\t}\n\n\t\tfunction touchMove(touches: Touch[]) {\n\t\t\tfor (const touch of touches) {\n\t\t\t\tconst rect = locateRect(touch.clientX, touch.clientY);\n\t\t\t\tconst touchState = touchesState[touch.identifier];\n\n\t\t\t\tif (touchState.rect) {\n\t\t\t\t\tDomHelp.fromId(touchState.rect.name).removeClass('pressed');\n\t\t\t\t\tsimulateButtonUp(touchState.rect.button);\n\t\t\t\t}\n\n\t\t\t\ttouchState.rect = rect;\n\n\t\t\t\tif (rect) {\n\t\t\t\t\tDomHelp.fromId(rect.name).addClass('pressed');\n\t\t\t\t\tsimulateButtonDown(rect.button);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction touchEnd(touches: Touch[]) {\n\t\t\tfor (const touch of touches) {\n\t\t\t\tconst touchState = touchesState[touch.identifier];\n\n\t\t\t\tif (touchState && touchState.rect) {\n\t\t\t\t\tDomHelp.fromId(touchState.rect.name).removeClass('pressed');\n\t\t\t\t\tsimulateButtonUp(touchState.rect.button);\n\t\t\t\t}\n\n\t\t\t\tdelete touchesState[touch.identifier];\n\t\t\t}\n\t\t}\n\n\t\tDomHelp.fromId('touch_overlay').on('touchstart', (e: any) => {\n\t\t\ttouchStart(e.originalEvent['changedTouches']);\n\t\t\te.preventDefault();\n\t\t});\n\n\t\tDomHelp.fromId('touch_overlay').on('touchmove', (e: any) => {\n\t\t\ttouchMove(e.originalEvent['changedTouches']);\n\t\t\te.preventDefault();\n\t\t});\n\n\t\tDomHelp.fromId('touch_overlay').on('touchend', (e: any) => {\n\t\t\ttouchEnd(e.originalEvent['changedTouches']);\n\t\t\te.preventDefault();\n\t\t});\n\n\t\t//$('#touch_overlay').mouseover((e) => { updatePos(e.clientX, e.clientY); });\n\t\tlet pressing = false;\n\n\t\tfunction generateTouchEvent(x: number, y: number) { return { clientX: x, clientY: y, identifier: 0 }; }\n\n\t\tDomHelp.fromId('touch_overlay').mousedown((e) => {\n\t\t\tpressing = true;\n\t\t\ttouchStart([generateTouchEvent(e.clientX, e.clientY)]);\n\t\t});\n\t\tDomHelp.fromId('touch_overlay').mouseup((e) => {\n\t\t\tpressing = false;\n\t\t\ttouchEnd([generateTouchEvent(e.clientX, e.clientY)]);\n\t\t});\n\t\tDomHelp.fromId('touch_overlay').mousemove((e) => {\n\t\t\tif (pressing) {\n\t\t\t\ttouchMove([generateTouchEvent(e.clientX, e.clientY)]);\n\t\t\t}\n\t\t});\n\t}\n}\n*/\n\nconst demos = [\n    \"-CPU\",\n\t\"data/benchmark/benchmark.prx\",\n    \"compilerPerf.elf\",\n    \"counter.elf\",\n    \"fputest.elf\",\n    \"vfputest.elf\",\n    \"mytest.elf\",\n\n    \"-OS\",\n    \"rtctest.elf\",\n    \"rtctest.pbp\",\n    \"threadstatus.elf\",\n    \"taskScheduler.prx\",\n    \"power.pbp\",\n    \"controller.elf\",\n\n    \"-IO\",\n    \"mstick.pbp\",\n    \"cwd.elf\",\n    \"ioasync.pbp\",\n\n    \"-AUDIO\",\n    \"polyphonic.elf\",\n\n    \"-DISPLAY\",\n    \"displayWait.prx\",\n    \"minifire.elf\",\n    \"HelloWorldPSP.elf\",\n\n    \"-GPU\",\n    \"2dstudio.prx\",\n    \"3dstudio.pbp\",\n    \"ortho.elf\",\n    \"cube.elf\",\n\t\"cube.cso\",\n    \"cube.iso\",\n    \"cubevfpu.prx\",\n    \"lights.pbp\",\n    \"skinning.pbp\",\n    \"morph.pbp\",\n    \"morphskin.pbp\",\n    \"sprite.pbp\",\n    \"lines.pbp\",\n    \"clut.pbp\",\n    \"reflection.pbp\",\n    \"text.elf\",\n    \"intraFontTest.elf\",\n    \"blend.pbp\",\n    \"nehetutorial02.pbp\",\n    \"nehetutorial03.pbp\",\n    \"nehetutorial04.pbp\",\n    \"nehetutorial05.pbp\",\n    \"nehetutorial06.pbp\",\n    \"nehetutorial07.pbp\",\n    \"nehetutorial08.pbp\",\n    \"nehetutorial09.pbp\",\n    \"nehetutorial10.pbp\",\n    \"zbufferfog.elf\",\n\n    \"-GAMES\",\n    \"cavestory.zip\",\n    \"TrigWars.zip\",\n    \"goldminer.zip\",\n    \"Doom.zip\",\n    \"cdogs.zip\",\n    \"jazz.zip\",\n    \"SkyRoads.zip\",\n    \"PSPTris.zip\",\n    \"Alex4C.zip\",\n    //\"reminiscence/EBOOT.PBP\",\n    //\"UraKaitenPatissierPSP/EBOOT.PBP\",\n    //\"Doom/EBOOT.PBP\",\n];\n\nDomHelp.fromId('demo_list').html = '';\nDomHelp.fromId('files').html = '';\n\n//$('#files').append('<option value=\"\">-- DEMOS --</option>');\ndemos.forEach(function(fileName) {\n\t/*\n\tif (fileName.substr(0, 1) == '-') {\n\t\t$('#files').append($('<option disabled style=\"background:#eee;\">' + fileName.substr(1) + '</option>'));\n\t\t$('#demo_list').append($('<li><label class=\"control-label\">' + fileName.substr(1) + '</label></li>'));\n\t} else {\n\t\tconst path = (fileName.indexOf('/') >= 0) ? fileName : ('samples/' + fileName);\n\n\t\t//<li class=\"active\"><a href=\"#\">Home</a></li>\n\t\t//<li><a href=\"#\">Profile</a></li>\n\t\t//<li><a href=\"#\">Messages</a></li>\n\n\t\t$('#demo_list').append($('<li class=\"' + ((selectedItem == path) ? 'active' : '') + '\"><a href=\"javascript:void(0)\" onclick=\"selectFile(\\'' + path + '\\')\">' + fileName + '</a></li>'));\n\n\t\tconst item = $('<option value=\"' + path + '\">' + fileName + '</option>');\n\t\tif (selectedItem == path) item.attr('selected', 'selected')\n\t\t$('#files').append(item);\n\t}\n\t*/\n});\n\n//$(document.body).click(function (e) { e.preventDefault() });\n//$(document.body).mousedown(function (e) { e.preventDefault() });\n//$(document.body).mouseup(function (e) { e.preventDefault() });\n\n//$(window).on('select', function (e) { e.preventDefault() });\n//<a href=\"index.html?' + fileName + '\" style=\"color:white;\">\n\n//$('#touch_buttons_font').css('display', 'block');\n\nclass FillScreenPlugin {\n\tstatic use() {\n\t\tfunction updateScaleWith(scale: number) {\n            const width = 480 * scale, height = 272 * scale;\n            //console.info(sprintf('updateScale: %f, %dx%d', scale, width, height));\n\t\t\tDomHelp.fromId('body').width = width;\n\t\t\tDomHelp.fromId('canvas').css('width', width + 'px').css('height', height + 'px');\n\t\t\tDomHelp.fromId('webgl_canvas').css('width', width + 'px').css('height', height + 'px');\n\t\t\tDomHelp.fromId('touch_buttons').css('width', width + 'px').css('height', height + 'px').css('font-size', scale + 'em');\n\t\t\t//DomHelp.fromId('touch_overlay').css('width', width + 'px').css('height', height + 'px').css('font-size', scale + 'em');\n\n\t\t\t//$('#touch_buttons').css('transform', 'scale(' + scale + ')').css('-webkit-transform', 'scale(' + scale + ')');\n\t\t}\n\n\t\tfunction onResize() {\n            const position = DomHelp.fromId('canvas_container').position;\n            const windowSize = new DomHelp(window).size;\n            //const availableHeight = $(window).height() - position.top * 2;\n            const availableHeight = windowSize.height - position.top;\n            const availableWidth = windowSize.width;\n\n            const scale1 = availableHeight / 272;\n            const scale2 = availableWidth / 480;\n            const steps = 0.5;\n            let scale = Math.min(scale1, scale2);\n            //scale = Math.floor(scale * (1 / steps)) / (1 / steps);\n\n\t\t\tif (scale < steps) scale = steps;\n\n\t\t\tupdateScaleWith(scale);\n\n            const _document: any = document;\n            let isFullScreen = (_document.webkitIsFullScreen || _document.mozIsFullScreen) || ((screen.availHeight || screen.height - 30) <= window.innerHeight);\n\n            if (window.innerHeight > window.innerWidth) isFullScreen = false;\n\n\t\t\tnew DomHelp(document.body).toggleClass('fullscreen', isFullScreen);\n\n\t\t\tDomHelp.fromId('touch_buttons').css('display', isTouchDevice() ? 'block' : 'none');\n\t\t\tif (windowSize.height >= DomHelp.fromId('canvas').height * 2) {\n\t\t\t\tDomHelp.fromId('touch_buttons').e.className = 'standalone';\n\t\t\t} else {\n\t\t\t\tDomHelp.fromId('touch_buttons').e.className = '';\n\t\t\t}\n\t\t}\n\n\t\tnew DomHelp(window).on('resize', (e) => { onResize(); });\n\t\tonResize();\n\t}\n}\n\nfunction requestFullScreen() {\n    const _document: any = document;\n    if (_document.body['requestFullScreen']) {\n\t\t_document.body['requestFullScreen']();\n\t} else if (_document.body['webkitRequestFullScreen']) {\n\t\t_document.body['webkitRequestFullScreen']();\n\t} else if (_document.body['mozRequestFullScreen']) {\n\t\t_document.body['mozRequestFullScreen']();\n\t}\n}\n\n/*\ninterface Window {  \n\tURL: any;\n}\n*/\n\n\nwindow.addEventListener('load', () => {\n    const _window: any = window;\n    let sampleDemo: string | undefined = undefined;\n\n    if (document.location.hash) {\n\t\tsampleDemo = document.location.hash.substr(1);\n\t}\n\n\tif (sampleDemo) {\n\t\t//emulator.downloadAndExecuteAsync(sampleDemo);\n\t\tEmulatorController.executeUrl(sampleDemo);\n\t}\n\n    const selectedItem = document.location.hash.substr(1);\n\n    function selectFile(file: any) {\n\t\tconsole.clear();\n\t\tdocument.location.hash = file;\n\t\tdocument.location.reload();\n\t}\n\n    if (!document.getElementById('load_file')) {\n        const input = document.createElement('input')\n        input.type = 'file'\n        input.id = \"load_file\"\n        input.style.position = 'absolute'\n        input.style.top = '0'\n        input.style.left = '0'\n        console.info('Created load_file input')\n        document.body.appendChild(input)\n    }\n\n    DomHelp.fromId('files').on('change', () => {\n\t\tselectFile(DomHelp.fromId('files').val());\n\t});\n\t\n\t\n\tnew DomHelp(window).on('hashchange', function() {\n\t\tconsole.clear();\n\t\t//emulator.downloadAndExecuteAsync(document.location.hash.substr(1));\n\t});\n\t\n\t//ControllerPlugin.use();\n\tFillScreenPlugin.use();\n\n\tDomHelp.fromId('load_file').on('change', (e) => {\n        const target: any = e.target;\n        if (target.files && target.files.length > 0) {\n            document.getElementById('load_file')!.blur()\n\t\t\tEmulatorController.executeFile(target.files[0]);\n\t\t}\n\t});\n\t\n\tDomHelp.fromId('body').removeClass('unready'); \n});\n\nreferenceDropbox()\n"],
  "mappings": "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a,UAAY,YAAY,YAAY,YAAY,WAAa,YAAY,YAAY,aAAa,YAAY,aAAa,aAAa,aAAa,WAAa,YAAa,aAAa,YAAY,aAAa,YAAa,YAAY,aAAa,YAAY,YAAY,WAAY,YAAY,aAAa,YAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAa,YAAY,UAAY,aAAa,aAAa,YAAY,YAAY,WAAY,YAAY,aAAa,aAAa,aAAa,WAAY,YAAY,aAAa,aAAa,aAAa,YAAY,YAAY,aAAa,UAAY,YAAY,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,YAAY,YAAa,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,YAAa,aAAa,aAAa,YAAY,YAAY,aAAa,YAAY,aAAa,YAAY,YAAY,YAAa,WAAY,YAAY,WAAY,aAAa,YAAY,aAAa,YAAY,aAAa,YAAY,YAAa,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,aAAa,aAAa,YAAY,YAAa,YAAY,aAAa,WAAa,YAAY,WAAa,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,WAAY,YAAY,aAAa,YAAa,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,WAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,YAAa,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,YAAY,WAAY,aAAa,YAAa,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,WAAY,aAAa,WAAY,YAAa,YAAY,YAAY,aAAa,aAAa,aAAa,YAAa,YAAY,YAAY,aAAa,YAAY,YAAa,YAAY,aAAa,aAAa,YAAY,YAAa,YAAY,YAAY,aAAa,YAAa,aAAa,YAAY,YAAa,aAAa,aAAa,aAAa,YAAY,aAAa,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAa,aAAa,YAAY,aAAa,YAAY,YAAa,aAAa,YAAY,YAAY,YAAa,YAAY,YAAY,aAAa,aAAa,YAAa,aAAa,YAAY,YAAY,aAAa,YAAY,WAAY,YAAa,aAAa,aAAa,aAAa,YAAY,YAAY,aAAa,YAAY,WAAY,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,aAAa,aAAa,YAAa,YAAY,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,WAAY,aAAa,WAAa,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,UAAY,YAAY,aAAa,aAAa,aAAa,YAAY,WAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,WAAY,YAAY,YAAY,aAAa,YAAY,YAAY,YAAa,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,aAAa,aAAa,WAAY,WAAY,aAAa,aAAa,WAAY,YAAY,aAAa,YAAY,WAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,YAAa,aAAa,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,YAAY,YAAa,WAAY,aAAa,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,YAAY,aAAa,YAAY,aAAa,aAAa,aAAa,aAAa,WAAY,aAAa,aAAa,aAAa,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,YAAa,YAAY,YAAa,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,YAAY,YAAa,YAAY,aAAa,YAAY,aAAa,aAAa,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,YAAY,YAAY,YAAa,aAAa,YAAa,YAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,WAAa,aAAa,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,YAAY,aAAa,YAAY,YAAa,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,YAAY,YAAY,aAAa,YAAa,aAAa,aAAa,aAAa,aAAa,WAAY,YAAY,YAAY,YAAY,YAAa,UAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,YAAa,WAAY,WAAY,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,WAAY,YAAY,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,aAAa,YAAY,aAAa,aAAa,WAAY,aAAa,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,YAAa,YAAY,YAAY,YAAY,aAAa,aAAa,YAAY,WAAY,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,YAAY,YAAa,YAAY,aAAa,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,YAAa,YAAY,YAAY,YAAY,YAAY,YAAY,WAAY,YAAY,aAAa,aAAa,WAAa,aAAa,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,aAAa,YAAY,WAAY,YAAY,YAAY,aAAa,aAAa,aAAa,WAAY,aAAa,YAAY,YAAY,aAAa,aAAa,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,aAAa,WAAY,YAAY,aAAa,YAAY,aAAa,YAAY,WAAY,aAAa,UAAY,aAAa,YAAY,WAAY,YAAY,aAAa,YAAY,YAAY,YAAY,aAAa,YAAY,YAAY,YAAY,YAAY,aAAa,aAAa,aAAa,aAAa,aAAa,UAAY,YAAY,YAAa,aAAa,YAAY,aAAa,aAAa,YAAY,aAAa,aAAa,WAAY,YAAY,YAAa,YAAY,YAAY,aAAa,aAAa,YAAa,YAAY,aAAa,YAAY,YAAY,aAA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GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBAGpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBAGpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBAGpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBAGpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI,aAAa,gBACpD,IAAI,mBAAmB,GAAG,GAAG,GAAG,GAAG,IAAI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W,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,SAAQ,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,SAAQ,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAInnK,EA1DJ,gBA0DI,oBAAoB,SAAQ,YAAW,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,YAAW,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,I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M,KAAM,KAAM,IAAM,KAAM,IAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,KAAM,IAAM,KAAM,IAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,KAAM,IAAM,KAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,KAAM,IAAM,IAAM,KAAM,IAAM,IAAM,KAAM,GAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,IAAM,KAAM,KAAM,IAAM,IAAM,IAAM,KAAM,KAAM,IAAM,IAAM,KAAM,IAAM,KAAM,IAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,KAAM,IAAM,KAAM,KAAM,IAAM,KAAM,KAAM,IAAM,IAAM,KAAM,IAAM,KAAM,IAAM,KAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,IAAM,KAAM,IAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,IAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,IAAM,IAAM,IAAM,IAAM,KAAM,KAAM,IAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,KAAM,KAAM,KAAM,KAAM,GAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,GAAM,KAAM,IAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,IAAM,IAAM,IAAM,IAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,IAAM,IAAM,IAAM;AAAA,IAChH,IAAM,IAAI,WAAW,CAAC,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,IAAM,KAAM,IAAM,IAAM,KAAM,KAAM,KAAM,KAAM,KAAM;AA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,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,SAAW;AAAA,MACP,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,QAAU;AAAA,MACN,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,cAAgB,CAAC,cAAc,0BAA0B,cAAc;AAAA,IACvE,aAAe;AAAA,MACX,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,QAAU;AAAA,IACV,mBAAqB;AAAA,IACrB,QAAU;AAAA,MACN,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,YAAc;AAAA,MACV,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AA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cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,qBAAuB;AAAA,MACnB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,qBAAuB;AAAA,MACnB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,gBAAkB;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc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AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,mBAAqB;AAAA,MACjB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,cAAgB;AAAA,MACZ,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,gBAAkB;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,iBAAmB,CAAC,cAAc,WAAW,cAAc;AAAA,IAC3D,mBAAqB;AAAA,IACrB,kBAAoB;AAAA,MAChB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA;AAAA,IAElB,oBAAsB;AAAA,MAClB,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MA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",
  "names": []
}
